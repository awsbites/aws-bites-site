{% extends "base.njk" %}

{% set description %}{%- excerpt content -%}{% endset %}

{% block description %}
  {{- description -}}
{% endblock description %}

{% block og_description %}
  {{- description -}}
{% endblock og_description %}

{% block og_image_url %}{{- youtube_id | youtubePreview(page.url) -}}
{% endblock og_image_url %}

{% block body_content %}
  <div class="bg-slate-300 dark:bg-slate-900">
    <div class="max-w-6xl mx-auto p-6">
      <div class="text-center">
        <h1 class="text-gray-900 dark:text-gray-100 text-3xl lg:text-4xl font-bold leading-normal pb-6">{{ episode }}. {{title}}</h1>
        <p class="text-gray-600 dark:text-gray-300 text lg:text-lg pb-4">
          Published {{ publish_date | formatDate }} -
          <a href="{{ spotify_link }}" class="text-primary-100 dark:text-secondary-100 hover:underline">Listen on your favourite podcast player</a>
        </p>
        <div class="lg:mx-32 md:mx-20">
          <iframe id="youtubePlayer" width="100%" height="100%" class="aspect-[16/9]" rel="0"
            src="https://www.youtube.com/embed/{{ youtube_id }}?enablejsapi=1" title="YouTube video player" frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
      </div>
    </div>
  </div>
  <main>
    {% if transcripts[episode] %}
      <div id="tabs" class="my-8 px-4 md:text-[1.25rem] md:leading-[1.8] sm:text-[0.875rem] sm:leading-[1.7142857] max-w-[65ch] mx-auto text-center text-gray-500 border-b border-gray-200 dark:text-gray-400 dark:border-gray-700">
        <ul class="flex flex-wrap -mb-px">
          <li class="mr-2">
            <a class="tab-button inline-block p-4 rounded-t-lg border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" href="#description">Description</a>
          </li>
          <li class="mr-2">
            <a class="tab-button inline-block p-4 rounded-t-lg border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" href="#transcript">Transcript</a>
          </li>
        </ul>
      </div>
    {% endif %}
    <div id="description" class="tab-content my-8 px-4 prose prose-sm md:prose-lg lg:prose-xl dark:prose-dark mx-auto">
      {{ content | safe }}

      <div class="py-12">
        <h3>Let's talk!</h3>
        <p>Do you agree with our opinions? Do you have interesting AWS questions you'd like us to chat about? Leave a comment on <a href="{{ youtube_id | youtubeLink }}">YouTube</a> or connect with us on Twitter: <a href=" https://twitter.com/eoins">@eoins</a>, <a href="https://twitter.com/loige">@loige</a>.</p>
      </div>

    </div>
  </main>
</div>

{% if transcripts[episode] %}
  <div id="transcript" class="tab-content my-8 px-4 prose prose-sm md:prose-lg lg:prose-xl dark:prose-dark mx-auto font-serif">
    <div class="font-sans text-sm text-center p-4 bg-slate-300 dark:bg-slate-900">Help us to make this transcription better! If you find an error, please <a href="https://github.com/awsbites/aws-bites-site/edit/main/src/_transcripts/{{ episode }}.json">submit a PR</a> with your corrections.</div>

    {% set currentSpeakerLabel = '' %}

    {% for paragraph in transcripts[episode].paragraphs %}
      <p>
        {% for segment in paragraph %}
          {% if segment.speakerLabel != currentSpeakerLabel %}
            {% set currentSpeakerLabel = segment.speakerLabel %}
            <p data-start-time="{{ segment.start }}">
              <span class="speaker-label font-bold text-primary-300 dark:text-secondary-200">{{ transcripts[episode].speakers[currentSpeakerLabel] }}</span>: 
          {% endif %}
            <span class="transcript-segment" data-start-time="{{ segment.start }}" title="⏭️ skip to {{ segment.formattedTime }}">{{ segment.text }}</span>
        {% endfor %}
      </p>
    {% endfor %}
    </div>
  {% endif %}

  {% set previousEpisode = collections.publishedEpisodes | reverse | getPreviousCollectionItem(page) %}
  {% set nextEpisode = collections.publishedEpisodes | reverse | getNextCollectionItem(page) %}

  <div class="row">
    <div class="max-w-7xl mx-auto">
      <div class="sm:grid grid-cols-4 gap-5 mx-auto px-16">
        {% if previousEpisode %}
          <div class="col-start-1 col-end-3 my-2">
            <a href="{{ previousEpisode.url }}">
              <div
						class="h-full p-6 dark:bg-gray-700 bg-white text-primary-200 dark:text-secondary-100 hover:shadow-xl rounded border-b-4 border-accent-100 dark:border-accent-100 shadow-md">
                <h3 class="text-2xl mb-3 font-semibold inline-flex">
                  <svg class="mr-2" width="24" height="30" viewBox="0 0 24 24" fill="none"
								xmlns="http://www.w3.org/2000/svg">
                    <path
									d="M1.02698 11.9929L5.26242 16.2426L6.67902 14.8308L4.85766 13.0033L22.9731 13.0012L22.9728 11.0012L4.85309 11.0033L6.6886 9.17398L5.27677 7.75739L1.02698 11.9929Z"
									fill="currentColor"/></svg>
							Prev
						      </h3>
                <p class="text-lg">{{ previousEpisode.data.episode }}. {{ previousEpisode.data.title }}</p>
              </div>
            </a>
          </div>
        {% endif %}

        {% if nextEpisode %}
          <div class="col-end-5 col-span-2 my-2">
            <a href="{{ nextEpisode.url }}">
              <div
						class="h-full p-6 dark:bg-gray-700 bg-white text-primary-200 dark:text-secondary-100 hover:shadow-xl rounded border-b-4 border-accent-100 dark:border-accent-100 shadow-md text-right">
                <h3 class="text-2xl mb-3 font-semibold inline-flex ">
							Next
							<svg class="ml-2" width="24" height="30" viewBox="0 0 24 24" fill="none"
								xmlns="http://www.w3.org/2000/svg">
                    <path
									d="M23.0677 11.9929L18.818 7.75739L17.4061 9.17398L19.2415 11.0032L0.932469 11.0012L0.932251 13.0012L19.2369 13.0032L17.4155 14.8308L18.8321 16.2426L23.0677 11.9929Z"
									fill="currentColor"/></svg>
                </h3>
                <p class="text-lg">{{ nextEpisode.data.episode }}. {{ nextEpisode.data.title }}</p>
              </div>
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  {% endblock body_content %}

  {% block scripts %}
    {{ super() }}
    <script>
      let player
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('youtubePlayer', {
          events: {
            'onReady': onPlayerReady,
          }
        });
      }

      function onPlayerReady(event) {
        const transcriptSegments = document.querySelectorAll('span[data-start-time]');
        transcriptSegments.forEach(segment => {
          segment.addEventListener('click', function() {
            const startTime = parseFloat(this.getAttribute('data-start-time'));
            player.seekTo(startTime);
          });
        });
      }

      document.addEventListener('DOMContentLoaded', function () {
        const tabClasses = 'inline-block p-4 rounded-t-lg border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300'
        const activeTabClasses = 'inline-block p-4 text-blue-600 rounded-t-lg border-b-2 border-blue-600 active dark:text-blue-500 dark:border-blue-500'
        const tabBtns = document.querySelectorAll('.tab-button')

        function showTab(tabId) {
          const anchorHash = `#${tabId}`
          let activeTabButton = [...tabBtns].find(item => item.getAttribute('href') === anchorHash) || tabBtns[0]
          const resolvedTabId = activeTabButton.getAttribute('href').substring(1)
          activeTabButton.setAttribute('class', activeTabClasses);
          ([...tabBtns]).forEach(item => {
            if (item !== activeTabButton) {
              item.setAttribute('class', tabClasses)
            }
          })

          document.querySelectorAll('.tab-content').forEach(item => {
            item.style.display = item.id === resolvedTabId ? 'block' : 'none'
          })

          // Update the URL hash to reflect the current tab
          history.replaceState(null, '', `${window.location.pathname}#${resolvedTabId}`);
        }

        // Show the tab corresponding to the URL hash
        showTab(window.location.hash.substring(1))

        tabBtns.forEach((item) => item.addEventListener('click', evt => {
          evt.preventDefault()
          const tabId = evt.currentTarget.getAttribute('href').substring(1)
          showTab(tabId)
        }))

        // Handle hash changes without a page reload
        window.addEventListener('hashchange', function() {
          showTab(window.location.hash.substring(1))
        }, false);

        // Load the YouTube IFrame Player API asynchronously
        const tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      })
    </script>
  {% endblock %}