WEBVTT

1
00:00:00.000 --> 00:00:11.660
Hello, everyone, and welcome to another episode of AWS Bites, the weekly show where we try

2
00:00:11.660 --> 00:00:18.060
to answer questions about AWS in just five minutes. My name is Luciano.

3
00:00:18.060 --> 00:00:20.120
My name is Eoin.

4
00:00:20.120 --> 00:00:27.180
And today we have a very interesting question. So when should they use serverless? Eoin,

5
00:00:27.180 --> 00:00:29.740
what do you think?

6
00:00:29.740 --> 00:00:35.280
I like to think that you should use serverless always. It's not practically possible, but

7
00:00:35.280 --> 00:00:43.040
I suppose the mindset we use is serverless first. There are a few cases where you might

8
00:00:43.040 --> 00:00:48.280
not be able to use serverless and everything. But maybe before we go deep on that, what

9
00:00:48.280 --> 00:00:53.560
do we mean by use serverless? Do you mean use Lambda functions for everything or is

10
00:00:53.560 --> 00:00:55.760
there something more to it than that?

11
00:00:55.760 --> 00:01:00.720


12
00:01:00.720 --> 00:01:08.040
Yeah, I think that's a very legitimate question because I think that the common conception is that serverless is just functions as a service like Fuzz and Lambda. In reality,

13
00:01:08.040 --> 00:01:14.720
I think that there is a lot more to that. It's more of a mindset. It's not just that

14
00:01:14.720 --> 00:01:19.380
specific tool, but it's more the idea that you should worry less about the infrastructure

15
00:01:19.380 --> 00:01:25.120
and managing that infrastructure. So you should focus more on the business logic, try to write

16
00:01:25.120 --> 00:01:31.600
only the code that adds value to your company, your business mission, and not focus so much

17
00:01:31.600 --> 00:01:37.200
into how do I provision this machine? How do I keep it up to date? What operative system

18
00:01:37.200 --> 00:01:42.640
am I using? Is it secure? Is it fast enough in terms of network? So I think serverless

19
00:01:42.640 --> 00:01:49.160
is when you start to think more in terms of business value rather than servers, I guess.

20
00:01:49.160 --> 00:01:54.040
Yeah, I like the idea that serverless is a journey and not a destination.

21
00:01:54.040 --> 00:01:59.140
So it's more about the fact that you're constantly looking for things you're doing every day that's taking

22
00:01:59.140 --> 00:02:02.640
you time that isn't really critical to your business and you're trying to figure out how

23
00:02:02.640 --> 00:02:09.480
you can move that responsibility to somebody else, AWS or some third party SaaS with an

24
00:02:09.480 --> 00:02:17.160
API. And I really like that. So if that's the case, where does serverless not work or

25
00:02:17.160 --> 00:02:19.960
where would you not use serverless Luciano?

26
00:02:19.960 --> 00:02:26.240


27
00:02:26.240 --> 00:02:30.680
Yeah, I've seen a few interesting cases in my career where even though I really wanted to use serverless, I don't think it would have been the most practical choice for the

28
00:02:30.680 --> 00:02:37.680
type of context. For instance, very often I had to deal with companies that had long

29
00:02:37.680 --> 00:02:43.360
investment in products that were very stable, of course, built even before serverless was

30
00:02:43.360 --> 00:02:50.000
a thing. So just the idea of transitioning all that big application, maybe it's like

31
00:02:50.000 --> 00:02:54.680
a monolith written in Ruby or Rails or Django or something like that to serverless will

32
00:02:54.680 --> 00:03:00.120
be such a big investment that it becomes really prohibitive and doesn't really give anything

33
00:03:00.120 --> 00:03:04.320
back to the company to try to do that. So that's definitely one case.

34
00:03:04.320 --> 00:03:09.080
Another one is where I've seen companies going to the cloud, but with this idea that they

35
00:03:09.080 --> 00:03:15.400
wanted to keep themselves as abstracted as possible from the vendor. So they chose something

36
00:03:15.400 --> 00:03:21.280
like Kubernetes and they spend a lot of time making sure that they have a solid way to

37
00:03:21.280 --> 00:03:26.160
ship code into Kubernetes. At that point, I wouldn't really suggest that they move from

38
00:03:26.160 --> 00:03:30.360
that to serverless. I don't know. Have you seen any other interesting case that might

39
00:03:30.360 --> 00:03:33.000
be worth bringing to the table?

40
00:03:33.000 --> 00:03:38.080
Yeah.

41
00:03:38.080 --> 00:03:43.540
I mean, I think if you've got a stable application that already makes a lot of money, I wouldn't be rushing just to migrate it to serverless just because you feel like using

42
00:03:43.540 --> 00:03:50.080
the latest and greatest in cloud tech. There's a cost of switching in all cases. And if you

43
00:03:50.080 --> 00:03:55.760
don't really have to go touching something that works and makes you money, why bother?

44
00:03:55.760 --> 00:04:00.200
But on the other side of the scale, if you've got something that's new, you want to do a

45
00:04:00.200 --> 00:04:05.720
lot of experimentation, maybe something where you're working in a real kind of lean organization

46
00:04:05.720 --> 00:04:12.980
and you're happy to build, throw stuff away, get that feedback loop going, rinse and repeat

47
00:04:12.980 --> 00:04:18.200
and really iterate on the product. Serverless is really, really good for that because the

48
00:04:18.200 --> 00:04:24.600
cost of creating and destroying resources that are serverless is next to zero. Whereas

49
00:04:24.600 --> 00:04:29.160
if you spend a lot of time, you know, racking and stacking virtual infrastructure, you know,

50
00:04:29.160 --> 00:04:33.960
building auto scaling infrastructure with EC2, there's an investment up front and all

51
00:04:33.960 --> 00:04:38.760
that and into, you know, your operating system and your security patching and all of that

52
00:04:38.760 --> 00:04:44.600
with services like Lambda, DynamoDB, Aurora Serverless, you don't have to worry with that

53
00:04:44.600 --> 00:04:47.560
so much. So you can adopt them and drop them really quickly.

54
00:04:47.560 --> 00:04:52.480
Right. So where do you think that serverless really shines?

55
00:04:52.480 --> 00:04:58.280
Oh, yeah.

56
00:04:58.280 --> 00:05:05.340
Well, like I say, if you've got, you know, a lot of potential for change, which let's face it, we all do, especially at the start of new product development cycles. Also,

57
00:05:05.340 --> 00:05:09.520
but if you've got unpredictable workload, you know, if you're a startup and you're happy

58
00:05:09.520 --> 00:05:14.080
to adopt this technology and you're, you know, you're willing to invest the time into the

59
00:05:14.080 --> 00:05:18.680
skill set, it's really suitable because if you're not earning any revenue, you're not

60
00:05:18.680 --> 00:05:23.480
paying for anything generally. So it scales with your business. And that seems really

61
00:05:23.480 --> 00:05:29.880
fair and it means you're not likely to, you know, incur significant costs when your company

62
00:05:29.880 --> 00:05:36.160
is at a nearly stage of growth. But I'd say the same, same goes for other, even in enterprises

63
00:05:36.160 --> 00:05:41.640
where you're trying to build new products, serverless really shines there too because

64
00:05:41.640 --> 00:05:47.200
you the cost of experimentation again, it's just really low. So it really fosters that

65
00:05:47.200 --> 00:05:51.600
mindset where, you know, people can just really push the boundaries of what you're doing and

66
00:05:51.600 --> 00:05:56.320
don't have to be adhering to existing models for building software anymore.

67
00:05:56.320 --> 00:06:04.680
Fair enough. Yeah. Yeah.

68
00:06:04.680 --> 00:06:09.960
As a closing note, I just want to say that it's easy to say, let's do everything in a serverless way, but of course there is a learning curve as well.

69
00:06:09.960 --> 00:06:15.660
So if you never done a serverless project, it might take you a little bit of time to

70
00:06:15.660 --> 00:06:22.040
just get comfortable with all the tooling, how do you do testing, local development,

71
00:06:22.040 --> 00:06:26.800
deployment. So that's also something to keep in mind whenever you are starting a new project

72
00:06:26.800 --> 00:06:31.640
with serverless for the first time. I think it's going to pay off of course, but don't

73
00:06:31.640 --> 00:06:38.840
discount that initial learning curve. So, okay. I think that that's all we have for

74
00:06:38.840 --> 00:06:45.100
today. So thank you very much for being with us and let us know what do you think? Leave

75
00:06:45.100 --> 00:06:49.360
us comments. We are really curious to know what do you think about serverless? If you're

76
00:06:49.360 --> 00:06:54.000
using it, what are your challenges? And make sure to follow and subscribe. So we'll see

77
00:06:54.000 --> 00:07:17.320
you at the next episode. Bye.
