{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 9.8,
      "text": " Hello and welcome to AWS Bites, the weekly show where we answer questions about AWS in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.8,
      "end": 10.8,
      "text": " about five minutes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 10.8,
      "end": 14.56,
      "text": " My name is Eoin and again, I'm joined by Luciano."
    },
    {
      "speakerLabel": "spk_0",
      "start": 14.56,
      "end": 18.64,
      "text": " Before we get started, just make sure to give us a follow and subscribe so you can be notified"
    },
    {
      "speakerLabel": "spk_0",
      "start": 18.64,
      "end": 21.900000000000002,
      "text": " when we release the next episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 21.900000000000002,
      "end": 28.84,
      "text": " And today's question we've got is, should you use Fargate or AWS Lambda for containers?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 28.84,
      "end": 30.32,
      "text": " What do you think, Luciano?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 30.32,
      "end": 37.480000000000004,
      "text": " Yeah, I think it's important to start by clarifying what do we really mean with the word container,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 37.480000000000004,
      "end": 41.24,
      "text": " because I think there are at least two different ways of seeing a container."
    },
    {
      "speakerLabel": "spk_1",
      "start": 41.24,
      "end": 47.760000000000005,
      "text": " One is when you look at a container as a packaging tool, so you put all the code in this unit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 47.760000000000005,
      "end": 50.4,
      "text": " and there is also the idea of running that code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 50.4,
      "end": 54.84,
      "text": " So considering that container as a runtime environment, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 54.84,
      "end": 61.400000000000006,
      "text": " So in that sense, in the context of Fargate and Lambda, if you're looking for a container"
    },
    {
      "speakerLabel": "spk_1",
      "start": 61.400000000000006,
      "end": 67.72,
      "text": " runtime that is maybe closer to something like Kubernetes, probably Fargate is a better"
    },
    {
      "speakerLabel": "spk_1",
      "start": 67.72,
      "end": 72.04,
      "text": " definition, a better service for that concept."
    },
    {
      "speakerLabel": "spk_1",
      "start": 72.04,
      "end": 77.80000000000001,
      "text": " And instead, if you're looking just for something that helps you to run code without worrying"
    },
    {
      "speakerLabel": "spk_1",
      "start": 77.80000000000001,
      "end": 83.04,
      "text": " too much about how it's running, then maybe Lambda is a better service for that type of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 83.04,
      "end": 84.96000000000001,
      "text": " idea."
    },
    {
      "speakerLabel": "spk_1",
      "start": 84.96000000000001,
      "end": 90.04,
      "text": " And in general, also, it might make sense to think in terms of long-running services"
    },
    {
      "speakerLabel": "spk_1",
      "start": 90.04,
      "end": 94.74000000000001,
      "text": " rather than just run some code when an event happens."
    },
    {
      "speakerLabel": "spk_1",
      "start": 94.74000000000001,
      "end": 100.44000000000001,
      "text": " So also that's another way of seeing the difference between Fargate and Lambda, because Fargate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 100.44000000000001,
      "end": 105.44000000000001,
      "text": " is definitely more suitable for long-running services, maybe more traditional web servers"
    },
    {
      "speakerLabel": "spk_1",
      "start": 105.44000000000001,
      "end": 111.44000000000001,
      "text": " like, I don't know, an application written with Django or Spring Boot or Laravel, so"
    },
    {
      "speakerLabel": "spk_1",
      "start": 111.44,
      "end": 117.39999999999999,
      "text": " more traditional MVC frameworks where you are running a long-running server, that server"
    },
    {
      "speakerLabel": "spk_1",
      "start": 117.39999999999999,
      "end": 121.96,
      "text": " is accepting multiple requests, and all of that could be a unit that you are running"
    },
    {
      "speakerLabel": "spk_1",
      "start": 121.96,
      "end": 124.08,
      "text": " as a container on Fargate."
    },
    {
      "speakerLabel": "spk_1",
      "start": 124.08,
      "end": 130.02,
      "text": " Instead, with Lambda, it gets much different, even the way you are going to write your code,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 130.02,
      "end": 135.46,
      "text": " because you generally receive an HTTP event, there will be one Lambda dedicated to respond"
    },
    {
      "speakerLabel": "spk_1",
      "start": 135.46,
      "end": 141.2,
      "text": " to that HTTP request, and it's going to have to try to respond as quick as possible, because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 141.2,
      "end": 146,
      "text": " of course your pricing is also related to how quick you can respond."
    },
    {
      "speakerLabel": "spk_1",
      "start": 146,
      "end": 152.88,
      "text": " Yeah, but with that being said, I guess it might be interesting to see how do you get"
    },
    {
      "speakerLabel": "spk_1",
      "start": 152.88,
      "end": 155.32,
      "text": " started with both?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 155.32,
      "end": 157.44,
      "text": " What do you think on that front?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 157.44,
      "end": 164.35999999999999,
      "text": " Yeah, Lambda is still the more serverless kind of solution, so it's easier to get started,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 164.35999999999999,
      "end": 166.2,
      "text": " you have less to do."
    },
    {
      "speakerLabel": "spk_0",
      "start": 166.2,
      "end": 169.83999999999997,
      "text": " With Fargate, you have a lot of configuration to do, you have to create a cluster and a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 169.84,
      "end": 175.44,
      "text": " service and you have to understand what a task definition is, and what a task is, so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 175.44,
      "end": 179.12,
      "text": " it's a lot more of a container orchestration kind of an environment."
    },
    {
      "speakerLabel": "spk_0",
      "start": 179.12,
      "end": 183.56,
      "text": " With Lambda, it's much more about run this code in response to this event."
    },
    {
      "speakerLabel": "spk_0",
      "start": 183.56,
      "end": 188.28,
      "text": " So like you say, containers then are just a packaging mechanism, so if you're looking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 188.28,
      "end": 192.58,
      "text": " for something that takes a lot of the heavy lifting off you, Lambda is definitely the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 192.58,
      "end": 196.48000000000002,
      "text": " way to go."
    },
    {
      "speakerLabel": "spk_0",
      "start": 196.48,
      "end": 202.11999999999998,
      "text": " You can simplify the Fargate deployment process like the CCS patterns in CDK, which are quite"
    },
    {
      "speakerLabel": "spk_0",
      "start": 202.11999999999998,
      "end": 207.35999999999999,
      "text": " useful for that, but realistically they're just hiding a lot of that complexity for you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 207.35999999999999,
      "end": 211.88,
      "text": " you have to kind of understand what magic is going on under the hood."
    },
    {
      "speakerLabel": "spk_0",
      "start": 211.88,
      "end": 216.23999999999998,
      "text": " The other thing about the difference then between Lambda and Fargate is it's all about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 216.23999999999998,
      "end": 223.2,
      "text": " limits, and Lambda's limits are reasonably well known, but when you deploy Lambdas with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 223.2,
      "end": 228.39999999999998,
      "text": " a zip, you're limited to 250 megs of code, but with container images which were announced"
    },
    {
      "speakerLabel": "spk_0",
      "start": 228.39999999999998,
      "end": 234.67999999999998,
      "text": " last year, you have 10 gigabytes, you can put 10 gigabytes of a container image up there,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 234.67999999999998,
      "end": 239.48,
      "text": " which really changes the number of use cases you can use for Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 239.48,
      "end": 243.92,
      "text": " Your memory limit is also 10 gigs in Lambda now, but you don't get any disk, right, you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 243.92,
      "end": 249.35999999999999,
      "text": " will leave temporary storage up to half a gig, but that compares with Fargate where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 249.36,
      "end": 255.4,
      "text": " you have up to 30 gigs of memory and you can get up to 200 gigs of ephemeral storage."
    },
    {
      "speakerLabel": "spk_0",
      "start": 255.4,
      "end": 260.88,
      "text": " So Fargate in that sense, in terms of memory and storage allows you to do a bit more, but"
    },
    {
      "speakerLabel": "spk_0",
      "start": 260.88,
      "end": 266.68,
      "text": " interestingly enough Lambda allows you to get up to six CPUs if you've got a lot of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 266.68,
      "end": 272.16,
      "text": " concurrency going on in your compute, and Fargate's limit is actually just four CPUs,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 272.16,
      "end": 277.88,
      "text": " so it depends on your context and you have to evaluate each thing separately."
    },
    {
      "speakerLabel": "spk_0",
      "start": 277.88,
      "end": 283.32,
      "text": " So understanding that Fargate allows you to control CPU and memory separately, but with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 283.32,
      "end": 291.52,
      "text": " Lambda you move the memory slider that also moves the CPU slider and the amount of networking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 291.52,
      "end": 296.68,
      "text": " bandwidth you have, so it's all about your context and understanding which works best"
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.68,
      "end": 298.08,
      "text": " for your workload."
    },
    {
      "speakerLabel": "spk_0",
      "start": 298.08,
      "end": 302.15999999999997,
      "text": " So is there anything else we need to cover off when we're comparing Lambda and Fargate"
    },
    {
      "speakerLabel": "spk_0",
      "start": 302.15999999999997,
      "end": 304.1,
      "text": " for containers?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 304.1,
      "end": 310.42,
      "text": " Maybe we can talk very quickly about cost, but again, it's very hard to give you a recipe"
    },
    {
      "speakerLabel": "spk_1",
      "start": 310.42,
      "end": 314.40000000000003,
      "text": " to calculate the cost because it really depends on the type of application you are trying"
    },
    {
      "speakerLabel": "spk_1",
      "start": 314.40000000000003,
      "end": 319.64000000000004,
      "text": " to run and how you build that, but I suppose in general we could say that Fargate tends"
    },
    {
      "speakerLabel": "spk_1",
      "start": 319.64000000000004,
      "end": 321.76000000000005,
      "text": " to be cheaper and more controllable."
    },
    {
      "speakerLabel": "spk_1",
      "start": 321.76000000000005,
      "end": 326.36,
      "text": " As you said, you can control memory and CPU independently, so if you have applications"
    },
    {
      "speakerLabel": "spk_1",
      "start": 326.36,
      "end": 330.76000000000005,
      "text": " that don't require a lot of CPU and maybe a lot of memory or vice versa, you can probably"
    },
    {
      "speakerLabel": "spk_1",
      "start": 330.76,
      "end": 337.36,
      "text": " fine tune Fargate more than you could do with Lambda, so that could help you to save money."
    },
    {
      "speakerLabel": "spk_1",
      "start": 337.36,
      "end": 342.52,
      "text": " Also Fargate runs on spot instances if you want to, so that's another option that will"
    },
    {
      "speakerLabel": "spk_1",
      "start": 342.52,
      "end": 344.68,
      "text": " help you to save a lot of money."
    },
    {
      "speakerLabel": "spk_1",
      "start": 344.68,
      "end": 350.2,
      "text": " I think it's up to 70% and I think we have the article we already mentioned in a previous"
    },
    {
      "speakerLabel": "spk_1",
      "start": 350.2,
      "end": 355.76,
      "text": " episode that you wrote that can give you a lot more details around that, so we're going"
    },
    {
      "speakerLabel": "spk_1",
      "start": 355.76,
      "end": 358.94,
      "text": " to put that in the links."
    },
    {
      "speakerLabel": "spk_1",
      "start": 358.94,
      "end": 364.36,
      "text": " Another thing in general, another dimension that is worth mentioning in terms of cost"
    },
    {
      "speakerLabel": "spk_1",
      "start": 364.36,
      "end": 370.28,
      "text": " is that Fargate, there might be a little bit more waste in terms of bootstrapping the container"
    },
    {
      "speakerLabel": "spk_1",
      "start": 370.28,
      "end": 373.64,
      "text": " and starting to run it and also shutting it down."
    },
    {
      "speakerLabel": "spk_1",
      "start": 373.64,
      "end": 379.12,
      "text": " While with Lambda you tend to get a lot more instantaneous times for bootstrap and shutdown,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 379.12,
      "end": 384.8,
      "text": " so if you have very short running tasks, maybe it's better to just write a Lambda and get"
    },
    {
      "speakerLabel": "spk_1",
      "start": 384.8,
      "end": 387.72,
      "text": " the Lambda to do that work."
    },
    {
      "speakerLabel": "spk_1",
      "start": 387.72,
      "end": 392.28000000000003,
      "text": " You can also save money that way because you're going to be able to fine tune for those times"
    },
    {
      "speakerLabel": "spk_1",
      "start": 392.28000000000003,
      "end": 396.52000000000004,
      "text": " and save money on the bootstrap time, but again, you'll need to make an analysis and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 396.52000000000004,
      "end": 402.8,
      "text": " see exactly how the different rules that you need to satisfy for your application will"
    },
    {
      "speakerLabel": "spk_1",
      "start": 402.8,
      "end": 406.92,
      "text": " affect the pricing and the characteristics of the runtime."
    },
    {
      "speakerLabel": "spk_1",
      "start": 406.92,
      "end": 409.44000000000005,
      "text": " Yeah, that's a really good point."
    },
    {
      "speakerLabel": "spk_0",
      "start": 409.44000000000005,
      "end": 415.18,
      "text": " With cost, always have to be aware of it and don't make assumptions about what's more expensive."
    },
    {
      "speakerLabel": "spk_0",
      "start": 415.18,
      "end": 416.52000000000004,
      "text": " Your mileage may vary."
    },
    {
      "speakerLabel": "spk_0",
      "start": 416.52,
      "end": 419,
      "text": " So we'll link to that article in the show notes again."
    },
    {
      "speakerLabel": "spk_0",
      "start": 419,
      "end": 424,
      "text": " And also there's an article that we created around the topic of how Lambda container images"
    },
    {
      "speakerLabel": "spk_0",
      "start": 424,
      "end": 429.24,
      "text": " work, which might be useful for people who are coming from a traditional container deployment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 429.24,
      "end": 430.35999999999996,
      "text": " environment."
    },
    {
      "speakerLabel": "spk_0",
      "start": 430.35999999999996,
      "end": 434.91999999999996,
      "text": " So let's leave those in the show notes and wrap it up there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 434.91999999999996,
      "end": 436.96,
      "text": " I think that's all we've time for."
    },
    {
      "speakerLabel": "spk_0",
      "start": 436.96,
      "end": 441.96,
      "text": " Please do follow us so that you get notified about the next episode and we'll catch you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 441.96,
      "end": 454.35999999999996,
      "text": " for the next episode next week."
    }
  ]
}