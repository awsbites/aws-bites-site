WEBVTT

1
00:00:00.000 --> 00:00:02.640
Today, we have a very special episode.

2
00:00:02.640 --> 00:00:07.680
For over 100 episodes, it has been just the two of us discussing AWS topics.

3
00:00:07.680 --> 00:00:10.140
We talk about other community contributors

4
00:00:10.140 --> 00:00:13.180
and mentioned their projects, articles, podcasts, and videos.

5
00:00:13.180 --> 00:00:16.980
Someone we have mentioned who created a massive amount of this content

6
00:00:16.980 --> 00:00:18.240
is Jeremy Daly.

7
00:00:18.240 --> 00:00:20.900
We are very excited to have Jeremy with us today

8
00:00:20.900 --> 00:00:23.780
for the very first AWS Bites interview.

9
00:00:23.780 --> 00:00:25.900
Jeremy is the CEO of Ampt.

10
00:00:25.900 --> 00:00:28.500
He is also a fellow AWS Serverless Hero,

11
00:00:28.500 --> 00:00:30.500
speaker, podcaster, and writer.

12
00:00:30.500 --> 00:00:32.640
He is one of the first names that comes to mind

13
00:00:32.640 --> 00:00:36.500
when you think of leaders in the topics of AWS and Serverless.

14
00:00:36.500 --> 00:00:38.680
Today, we are going to talk about Ampt,

15
00:00:38.680 --> 00:00:43.100
hear Jeremy's view on the state of things in AWS and Serverless,

16
00:00:43.100 --> 00:00:45.600
and get his predictions for the future.

17
00:00:45.600 --> 00:00:47.600
My name is Luciano, and I'm here with Eoin.

18
00:00:47.600 --> 00:00:50.040
And today, we are thrilled to be joined by Jeremy Daly

19
00:00:50.040 --> 00:00:52.200
for AWS Bites podcast.

20
00:00:52.200 --> 00:01:04.500
AWS Bites is brought to you by fourTheorem, an advanced AWS partner.

21
00:01:04.500 --> 00:01:07.840
If you're moving to AWS or need a partner to help you go faster,

22
00:01:07.840 --> 00:01:12.000
check us out at fourtheorem.com.

23
00:01:12.000 --> 00:01:14.800
Okay, Jeremy, you are very welcome to AWS Bites.

24
00:01:14.800 --> 00:01:16.380
We are really excited to have you.

25
00:01:16.380 --> 00:01:18.540
I'm sure you need very little introduction

26
00:01:18.540 --> 00:01:21.340
and people may know you from your Twitter, Serverless Chats,

27
00:01:21.340 --> 00:01:23.940
podcast, blog, off-by-none newsletter,

28
00:01:23.940 --> 00:01:28.040
and whatever else you have been doing in the open-source space.

29
00:01:28.040 --> 00:01:30.740
So we'd like to start by asking you,

30
00:01:30.740 --> 00:01:34.940
where did your journey into AWS and Serverless begin?

31
00:01:34.940 --> 00:01:37.640
Well, first of all, thank you both for having me.

32
00:01:37.640 --> 00:01:41.440
I've been a huge fan of AWS Bites for quite some time.

33
00:01:41.440 --> 00:01:44.440
I share it all the time in my newsletter.

34
00:01:44.440 --> 00:01:47.340
Really appreciated that episode you did on Ampt.

35
00:01:47.340 --> 00:01:50.640
So I am just as honored to be here as,

36
00:01:50.640 --> 00:01:54.340
and I again appreciate the fact that you're having me on.

37
00:01:54.340 --> 00:01:59.240
So in terms of where I got started though,

38
00:01:59.240 --> 00:02:00.140
it was kind of funny.

39
00:02:00.140 --> 00:02:05.140
I had a web development company that I was running for,

40
00:02:05.140 --> 00:02:07.240
I don't know, 12 years, something like that.

41
00:02:07.240 --> 00:02:09.540
Started it out of my dorm room in college

42
00:02:09.540 --> 00:02:13.540
and did that for quite some time and got much deeper into,

43
00:02:13.540 --> 00:02:14.840
we weren't just doing web development,

44
00:02:14.840 --> 00:02:16.740
we're doing back-end applications, things like that.

45
00:02:16.740 --> 00:02:18.140
Building pretty complex stuff,

46
00:02:18.140 --> 00:02:22.640
integrating with UPS tracking systems and e-commerce

47
00:02:22.640 --> 00:02:25.040
and going through the whole PCI compliance thing.

48
00:02:25.040 --> 00:02:26.340
And so a lot of fun stuff,

49
00:02:26.340 --> 00:02:28.440
but I was actually racking and stacking servers.

50
00:02:28.440 --> 00:02:31.340
We had our own data center that we used,

51
00:02:31.340 --> 00:02:32.440
a co-location facility.

52
00:02:32.440 --> 00:02:35.240
So I was very, very old school back then,

53
00:02:35.240 --> 00:02:39.240
but I kind of got sick of building forms

54
00:02:39.240 --> 00:02:41.340
for somebody else's website.

55
00:02:41.340 --> 00:02:43.740
And I was just like, I want to do something different.

56
00:02:43.740 --> 00:02:44.940
Like I'm building things for other people.

57
00:02:44.940 --> 00:02:47.240
I want to kind of build something for myself.

58
00:02:47.240 --> 00:02:50.340
And my second daughter had just been born at that point

59
00:02:50.340 --> 00:02:54.340
and I had built this thing, I called it the Live Baby Blog.

60
00:02:54.340 --> 00:02:58.940
It was like this interactive, almost like a chat.

61
00:02:58.940 --> 00:03:00.640
It was before WebSocket,

62
00:03:00.640 --> 00:03:02.440
so we were using a thing called APE Server, whatever.

63
00:03:02.440 --> 00:03:06.140
But essentially it was a way that I could send updates

64
00:03:06.140 --> 00:03:08.040
to all my friends and family about what was happening

65
00:03:08.040 --> 00:03:09.440
with the birth of my daughter,

66
00:03:09.440 --> 00:03:11.440
like while we were actually in the delivery room and stuff.

67
00:03:11.440 --> 00:03:13.140
And so people loved it.

68
00:03:13.140 --> 00:03:14.940
I had like 100 people that were on it

69
00:03:14.940 --> 00:03:16.540
and commenting and whatever.

70
00:03:16.540 --> 00:03:18.240
And I said, I wonder if there's a business here,

71
00:03:18.240 --> 00:03:19.440
like just out of curiosity.

72
00:03:19.440 --> 00:03:21.740
So I started building this thing.

73
00:03:21.740 --> 00:03:23.340
We ended up calling it SproutShout,

74
00:03:23.340 --> 00:03:24.740
changed the name to Lifeables eventually.

75
00:03:24.740 --> 00:03:28.640
But I said, I'm going to get rid of this web development company

76
00:03:28.640 --> 00:03:30.740
and I'm going to go into the startup world

77
00:03:30.740 --> 00:03:32.140
and actually build a startup myself.

78
00:03:32.140 --> 00:03:35.740
So I got together with a couple people that I knew.

79
00:03:35.740 --> 00:03:40.340
I ended up hiring a very, very amazing person to be my CEO

80
00:03:40.340 --> 00:03:43.040
and she did a wonderful job.

81
00:03:43.040 --> 00:03:45.240
But essentially when we started building it,

82
00:03:45.240 --> 00:03:47.040
we were like, well, do we want to host this ourselves

83
00:03:47.040 --> 00:03:48.940
or do we want to get into the world of AWS?

84
00:03:48.940 --> 00:03:53.340
So this was 2009 and we started looking at AWS.

85
00:03:53.340 --> 00:03:56.440
And of course, this was before serverless existed.

86
00:03:56.440 --> 00:03:58.240
This was EC2 instances.

87
00:03:58.240 --> 00:04:01.540
This was, I think load balancers were like ELBs,

88
00:04:01.540 --> 00:04:02.440
weren't even a thing yet.

89
00:04:02.440 --> 00:04:04.240
Like, I mean, this was very, very early.

90
00:04:04.240 --> 00:04:06.940
No RDS, none of that stuff, right?

91
00:04:06.940 --> 00:04:11.840
So we were building like, this was true lift and shift type stuff,

92
00:04:11.840 --> 00:04:13.640
like building exactly what we would be building

93
00:04:13.640 --> 00:04:14.940
if we were running these servers ourselves.

94
00:04:14.940 --> 00:04:18.140
So we started doing that and I got into AWS

95
00:04:18.140 --> 00:04:20.440
and it was just amazing.

96
00:04:20.440 --> 00:04:23.140
Like actually one of the things I did was I moved all of the stuff

97
00:04:23.140 --> 00:04:25.240
from our co-location facility from the hosting

98
00:04:25.240 --> 00:04:27.540
that we were doing for web development clients.

99
00:04:27.540 --> 00:04:30.740
I moved that over to AWS and went from spending like six,

100
00:04:30.740 --> 00:04:34.240
seven thousand dollars a month in electricity and bandwidth

101
00:04:34.240 --> 00:04:36.640
and server rental costs and all this kind of stuff

102
00:04:36.640 --> 00:04:39.440
to about $700 a month in AWS.

103
00:04:39.440 --> 00:04:42.740
And I'm like, you know, if I would have switched things over sooner to AWS,

104
00:04:42.740 --> 00:04:45.340
I might have actually been able to build a profitable business around that

105
00:04:45.340 --> 00:04:47.340
and kept it going for longer.

106
00:04:47.340 --> 00:04:49.040
But so anyway, so long story short,

107
00:04:49.040 --> 00:04:52.940
I spent a lot of time building this startup and got into AWS

108
00:04:52.940 --> 00:04:55.640
and then had just been building everything on there,

109
00:04:55.640 --> 00:04:57.140
you know, from that point forward.

110
00:04:57.140 --> 00:05:01.940
And so what happened is we ran the startup for a couple of years,

111
00:05:01.940 --> 00:05:04.040
hit up against the Facebook timeline launch,

112
00:05:04.040 --> 00:05:06.140
the Instagram acquisition.

113
00:05:06.140 --> 00:05:08.640
So, you know, perfect timing to be building sort of a site

114
00:05:08.640 --> 00:05:11.340
for parents and sharing photos, right?

115
00:05:11.340 --> 00:05:14.240
And so we ended up selling off some of that tech to another company.

116
00:05:14.240 --> 00:05:15.440
I went to work for another company.

117
00:05:15.440 --> 00:05:17.040
They were all in on AWS.

118
00:05:17.040 --> 00:05:18.440
They were using DynamoDB.

119
00:05:18.440 --> 00:05:21.340
That was my first experience with Dynamo and got into that

120
00:05:21.340 --> 00:05:24.040
and like just actually absolutely fell in love with that.

121
00:05:24.040 --> 00:05:28.540
And then what ended up happening is we had this massive outage

122
00:05:28.540 --> 00:05:31.040
when we were featured on the Good Morning America

123
00:05:31.040 --> 00:05:33.540
or the Today Show or something like that for the app that we were building.

124
00:05:33.540 --> 00:05:37.640
Had a massive massive outage all caused by a single point of failure

125
00:05:37.640 --> 00:05:40.040
in a relational database.

126
00:05:40.040 --> 00:05:41.540
And so I started looking around.

127
00:05:41.540 --> 00:05:44.640
I was the VP of product at the time and I'm like,

128
00:05:44.640 --> 00:05:46.640
I wonder if there's a better way to scale

129
00:05:46.640 --> 00:05:48.940
and like how we can make this work better.

130
00:05:48.940 --> 00:05:50.940
And I came across AWS Lambda.

131
00:05:50.940 --> 00:05:54.140
So this was right in the beginning of 2015.

132
00:05:54.140 --> 00:05:56.540
Started playing around with it, fell in love with it.

133
00:05:56.540 --> 00:05:58.140
And I said, this is the future.

134
00:05:58.140 --> 00:05:59.840
This is how things are going to work.

135
00:05:59.840 --> 00:06:03.640
Like this idea of setting up servers and trying to parallelize them

136
00:06:03.640 --> 00:06:06.140
or you know, trying to scale them horizontally,

137
00:06:06.140 --> 00:06:09.440
like makes no sense in terms of what you can do with Lambda.

138
00:06:09.440 --> 00:06:11.340
And again, this is before VPCs.

139
00:06:11.340 --> 00:06:13.140
This was before API Gateway.

140
00:06:13.140 --> 00:06:15.640
So I started playing around with a couple of these things

141
00:06:15.640 --> 00:06:18.840
and then the next thing you know, all these new services started coming out

142
00:06:18.840 --> 00:06:23.240
and as soon as you could do API requests or HTTP requests with it,

143
00:06:23.240 --> 00:06:26.140
I knew I'm like, this is it.

144
00:06:26.140 --> 00:06:27.140
This is going to be the thing.

145
00:06:27.140 --> 00:06:29.940
And so I've literally dedicated the last,

146
00:06:29.940 --> 00:06:33.840
what has it been, eight, nine years or something like that of my career

147
00:06:33.840 --> 00:06:38.140
to promoting serverless and trying to get this to be the default paradigm

148
00:06:38.140 --> 00:06:39.440
that people built with.

149
00:06:39.440 --> 00:06:42.240
And I think we're probably going to get back to, you know,

150
00:06:42.240 --> 00:06:46.140
what the promise of serverless was like back then versus, you know,

151
00:06:46.140 --> 00:06:49.640
what the reality of it is today, all these years later.

152
00:06:49.640 --> 00:06:54.040
Luciano also mentioned the content and all the open source work you create.

153
00:06:54.040 --> 00:06:57.740
I think you regarded it as pretty prolific in the content creation space

154
00:06:57.740 --> 00:07:01.240
and also you became an AWS serverless hero.

155
00:07:01.240 --> 00:07:02.740
How did this all happen?

156
00:07:02.740 --> 00:07:07.340
Was this a concerted effort on your part to put all this time and energy into content?

157
00:07:07.340 --> 00:07:10.240
And I suppose then what has that given back to you?

158
00:07:10.240 --> 00:07:12.940
How has it then influenced your career?

159
00:07:12.940 --> 00:07:13.740
Yeah, yeah, no.

160
00:07:13.740 --> 00:07:17.840
So I mean content creation, I am not quite as prolific as I once was.

161
00:07:17.840 --> 00:07:21.940
I used to write a lot and produce a lot of episodes of the podcast and so forth.

162
00:07:21.940 --> 00:07:25.640
I've been very, very busy with my startup for the last year plus,

163
00:07:25.640 --> 00:07:28.140
almost two, well, yeah, a year and a half now, something like that.

164
00:07:28.140 --> 00:07:31.740
So it's been, I have not been producing as much content as I would like to.

165
00:07:31.740 --> 00:07:34.540
But to sort of go back to the beginning,

166
00:07:34.540 --> 00:07:37.040
so when I discovered Lambda and I started playing around with it,

167
00:07:37.040 --> 00:07:38.340
there was just nothing out there.

168
00:07:38.340 --> 00:07:39.340
There was no content.

169
00:07:39.340 --> 00:07:40.940
Nobody was talking about it.

170
00:07:40.940 --> 00:07:42.740
Serverless wasn't even really a word.

171
00:07:42.740 --> 00:07:45.440
I actually kind of came across the JAWS framework,

172
00:07:45.440 --> 00:07:47.940
which is now serverless, the serverless framework.

173
00:07:47.940 --> 00:07:49.740
I came across that very early, right?

174
00:07:49.740 --> 00:07:56.040
So that was 2005, it was re-invent 2005, sorry, 2005, 2015.

175
00:07:56.040 --> 00:07:57.340
Well, my brain is not working.

176
00:07:57.340 --> 00:08:05.240
2015, when Austin presented, I think he presented the JAWS framework at re-invent.

177
00:08:05.240 --> 00:08:10.540
So I started kind of trying to figure out how some of the stuff works,

178
00:08:10.540 --> 00:08:12.040
and it was all experimentation.

179
00:08:12.040 --> 00:08:13.540
And it was like, well, can you do this?

180
00:08:13.540 --> 00:08:17.340
And, you know, okay, well, when VPCs came out, connections to VPCs,

181
00:08:17.340 --> 00:08:19.240
and we could connect to ElastiCache, I was like,

182
00:08:19.240 --> 00:08:21.740
okay, now this is getting even more interesting.

183
00:08:21.740 --> 00:08:23.440
So I started playing around with these different things,

184
00:08:23.440 --> 00:08:24.940
started creating stuff with it.

185
00:08:24.940 --> 00:08:28.740
We built a whole bunch of things internally at that company I was talking about.

186
00:08:28.740 --> 00:08:32.240
And then I actually left that company to go work for another company

187
00:08:32.240 --> 00:08:36.740
and did everything as serverlessly as possible I could there.

188
00:08:36.740 --> 00:08:39.140
So I was learning a lot and figuring out a bunch of stuff,

189
00:08:39.140 --> 00:08:41.040
and still the content wasn't really there.

190
00:08:41.040 --> 00:08:44.840
Ben Kehoe was posting a lot of stuff, which was helpful.

191
00:08:44.840 --> 00:08:48.540
The Burning Monk, Yen Trey, was posting a bunch of stuff back then.

192
00:08:48.540 --> 00:08:51.740
This was like maybe early 2018.

193
00:08:51.740 --> 00:08:55.740
And so I started, I said, look, I've got all this stuff.

194
00:08:55.740 --> 00:08:57.140
I said I'm going to put some stuff out there.

195
00:08:57.140 --> 00:08:58.940
I had been blogging in the past, and I was like,

196
00:08:58.940 --> 00:09:00.640
I'll just stop putting some stuff out there.

197
00:09:00.640 --> 00:09:03.540
So I started writing and just sharing some of the things that I was learning,

198
00:09:03.540 --> 00:09:04.940
some things about security.

199
00:09:04.940 --> 00:09:06.440
I wrote a big post about security.

200
00:09:06.440 --> 00:09:10.740
That actually connected me with Ori Segal over at PureSec.

201
00:09:10.740 --> 00:09:12.840
And so he and I started talking.

202
00:09:12.840 --> 00:09:13.840
We became friends, right?

203
00:09:13.840 --> 00:09:18.140
And then next thing you know, it's like I'm getting ready to,

204
00:09:18.140 --> 00:09:22.840
I'm getting ready, or I get introduced to Tom McLaughlin.

205
00:09:22.840 --> 00:09:25.440
And I met him at an AWS Startup Day.

206
00:09:25.440 --> 00:09:27.940
And he's like, hey, we're thinking about doing a Serverless Days thing.

207
00:09:27.940 --> 00:09:28.940
And I'm like, what's that?

208
00:09:28.940 --> 00:09:30.640
So anyways, we get together.

209
00:09:30.640 --> 00:09:31.640
I met Eric Peterson.

210
00:09:31.640 --> 00:09:34.240
I met all these other great people that were in the space.

211
00:09:34.240 --> 00:09:38.740
And so one of the things that I did was I published a post,

212
00:09:38.740 --> 00:09:40.140
I think it was in 2018.

213
00:09:40.140 --> 00:09:43.640
I think this is one of the first posts I wrote that got a lot of traction,

214
00:09:43.640 --> 00:09:49.440
was my Serverless, AWS Serverless Microservice Patterns,

215
00:09:49.440 --> 00:09:52.540
or Serverless Microservice Patterns, or AWS, whatever it was.

216
00:09:52.540 --> 00:09:55.740
And I think I put 16, 17, 18 patterns, something like that,

217
00:09:55.740 --> 00:09:59.340
of things that I had seen other people doing, things that I had used.

218
00:09:59.340 --> 00:10:02.240
And I didn't put them out there like, hey, this is how you do it.

219
00:10:02.240 --> 00:10:04.840
I put them out there like, hey, this is how I'm doing it.

220
00:10:04.840 --> 00:10:06.240
This is what I'm seeing people do.

221
00:10:06.240 --> 00:10:07.440
Like, is this right?

222
00:10:07.440 --> 00:10:08.340
Are you doing this?

223
00:10:08.340 --> 00:10:10.540
Are we, is there a better way to do it?

224
00:10:10.540 --> 00:10:13.840
And I actually think that started a really interesting patterns movement,

225
00:10:13.840 --> 00:10:17.040
like people started really talking about patterns after that,

226
00:10:17.040 --> 00:10:19.040
which again, I don't take credit for,

227
00:10:19.040 --> 00:10:22.140
but I think it was just the start of the conversation at least.

228
00:10:22.140 --> 00:10:23.940
And that's, I think more people started thinking about it

229
00:10:23.940 --> 00:10:24.940
in terms of those patterns.

230
00:10:24.940 --> 00:10:26.840
So, I did that.

231
00:10:26.840 --> 00:10:31.140
I started my newsletter in September of 2018.

232
00:10:31.140 --> 00:10:33.740
So again, that's been over five years now.

233
00:10:33.740 --> 00:10:37.940
And I went to Serverless Days, New York,

234
00:10:37.940 --> 00:10:41.140
and saw Kelsey Hightower was the keynote speaker.

235
00:10:41.140 --> 00:10:42.640
Ben Kehoe was there.

236
00:10:42.640 --> 00:10:45.640
I think I met Taavi Rehemägi

237
00:10:45.640 --> 00:10:47.940
from Dashbird.

238
00:10:47.940 --> 00:10:52.540
Like, so I met like, again, just connected to people.

239
00:10:52.540 --> 00:10:53.440
And it was great.

240
00:10:53.440 --> 00:10:55.640
And then it just kind of took off from there.

241
00:10:55.640 --> 00:11:01.340
And then Heitor Lessa invited me onto his show.

242
00:11:01.340 --> 00:11:05.140
He kind of let slip that apparently I was going to be a AWS Hero.

243
00:11:05.140 --> 00:11:09.040
But, so anyways, so I was made an AWS Hero early 2019.

244
00:11:09.040 --> 00:11:13.040
And then since then, I kind of put my foot on the gas

245
00:11:13.040 --> 00:11:14.440
and I started the podcast.

246
00:11:14.440 --> 00:11:20.640
I spoke at, I was lucky enough to speak at Serverless Days, Milano,

247
00:11:20.640 --> 00:11:21.840
or Serverless Days Milan.

248
00:11:21.840 --> 00:11:23.940
I just spoke at Serverless Days Cape Town.

249
00:11:23.940 --> 00:11:29.140
I keynoted Serverless Days ANZ in Melbourne.

250
00:11:29.140 --> 00:11:32.240
Like I was, I've spoken in Belfast.

251
00:11:32.240 --> 00:11:34.440
So I've been able to do all these crazy things

252
00:11:34.440 --> 00:11:36.040
and meet all these amazing people.

253
00:11:36.040 --> 00:11:39.640
Spoke at re:Invent last year, which was absolutely amazing.

254
00:11:39.640 --> 00:11:42.440
So I think I forgot what your original question was,

255
00:11:42.440 --> 00:11:45.640
but essentially I just, it had a massive impact on my career.

256
00:11:45.640 --> 00:11:49.040
Like this idea of sharing what I did and figuring these things out.

257
00:11:49.040 --> 00:11:51.440
And I think it, I think because I hit it a little bit early,

258
00:11:51.440 --> 00:11:54.140
like when it was kind of coming up that I was one of a,

259
00:11:54.140 --> 00:11:58.540
you know, I became a recognizable voice in the space.

260
00:11:58.540 --> 00:12:01.440
But it's only because I learned so much from talking to other people

261
00:12:01.440 --> 00:12:02.440
and willing to put it out there.

262
00:12:02.440 --> 00:12:04.840
But there's so many people writing about Serverless now,

263
00:12:04.840 --> 00:12:07.940
so many amazing Serverless, you know, frameworks,

264
00:12:07.940 --> 00:12:10.540
I didn't say framework, but you know, I mean like deployment frameworks

265
00:12:10.540 --> 00:12:14.140
or, you know, NPM projects and things like that,

266
00:12:14.140 --> 00:12:16.640
that are just, you know, that are amazing.

267
00:12:16.640 --> 00:12:18.740
And so many, so much great work going in there.

268
00:12:18.740 --> 00:12:21.840
It's like, I almost feel like, you know, continuing to write content

269
00:12:21.840 --> 00:12:23.240
and putting more content out there.

270
00:12:23.240 --> 00:12:25.540
I'm almost like, I don't know, there's so many new voices

271
00:12:25.540 --> 00:12:28.940
I kind of want to hear from them and, you know, and see where this goes.

272
00:12:28.940 --> 00:12:31.640
Well, I guess that's the value of the Off-by-None on newsletter

273
00:12:31.640 --> 00:12:34.540
because for me, it's, it kind of helps me to short circuit,

274
00:12:34.540 --> 00:12:35.740
having to troll through everything.

275
00:12:35.740 --> 00:12:37.740
But I guess that makes the job more difficult for you

276
00:12:37.740 --> 00:12:39.440
as more and more people join the community

277
00:12:39.440 --> 00:12:41.140
and you've got more and more content out there.

278
00:12:41.140 --> 00:12:45.840
Is it becoming a bit of a effort for you to do all that?

279
00:12:47.740 --> 00:12:51.340
Yeah, I mean to give you some perspective, I have a couple of systems that are all serverless, by the way,

280
00:12:51.340 --> 00:12:54.940
that I wrote that scan some different things.

281
00:12:54.940 --> 00:12:58.040
I grabbed some stuff from Google automated searches.

282
00:12:58.040 --> 00:13:03.140
I have some, I have a whole bunch of RSS feeds that get aggregated,

283
00:13:03.140 --> 00:13:05.640
you know, and a bunch of other ways that I collect content.

284
00:13:05.640 --> 00:13:10.640
So every week I have about 400 to 500 pieces of content

285
00:13:10.640 --> 00:13:12.940
that end up in this system.

286
00:13:12.940 --> 00:13:14.540
And I can filter out a fair amount of them.

287
00:13:14.540 --> 00:13:19.440
But I usually, you know, I usually start somewhere around a hundred or so

288
00:13:19.440 --> 00:13:24.740
at the top level and try to get that down to like maybe like 50 if I can,

289
00:13:24.740 --> 00:13:26.140
which still seems like a lot.

290
00:13:26.140 --> 00:13:28.340
But the, you know, the interesting thing is,

291
00:13:28.340 --> 00:13:29.840
and if anybody wants to know,

292
00:13:29.840 --> 00:13:31.140
because people have asked me this in the past,

293
00:13:31.140 --> 00:13:32.740
like how do I make it into your newsletter?

294
00:13:32.740 --> 00:13:36.640
So there are certain articles that I read that I open up

295
00:13:36.640 --> 00:13:39.740
and I can immediately dismiss them and say,

296
00:13:39.740 --> 00:13:42.140
this just isn't something that's interesting.

297
00:13:42.140 --> 00:13:45.740
And usually it's because, you know, especially if it's something that is,

298
00:13:45.740 --> 00:13:50.940
if you're writing a tutorial and it shows all screenshots from the console,

299
00:13:50.940 --> 00:13:53.840
like most likely I'm not going to include that

300
00:13:53.840 --> 00:13:56.340
unless it's something really, really interesting.

301
00:13:56.340 --> 00:13:58.940
Sometimes new things that you can only do from the console,

302
00:13:58.940 --> 00:14:00.440
you know, I would include something like that,

303
00:14:00.440 --> 00:14:03.040
like bedrock and some of those new things.

304
00:14:03.040 --> 00:14:06.240
But the other thing is, is that also like well formatted,

305
00:14:06.240 --> 00:14:09.040
like if you just have giant chunks of code that it's like,

306
00:14:09.040 --> 00:14:10.440
I can't, I can't understand it.

307
00:14:10.440 --> 00:14:11.740
It's not highlighted, whatever.

308
00:14:11.740 --> 00:14:13.440
Like that's sometimes frustrating.

309
00:14:13.440 --> 00:14:15.840
Gated content I almost never share.

310
00:14:15.840 --> 00:14:17.840
So if there's a, if you do Medium and you should,

311
00:14:17.840 --> 00:14:20.340
and I get it, I know, and a lot of people like to,

312
00:14:20.340 --> 00:14:21.740
you know, sort of get that revenue.

313
00:14:21.740 --> 00:14:24.240
Some people take that revenue and donate it to other places.

314
00:14:24.240 --> 00:14:27.140
I think that's really noble and I appreciate people doing that.

315
00:14:27.140 --> 00:14:30.240
But for me, my readers get very frustrated when they click on a link

316
00:14:30.240 --> 00:14:32.240
and they can't read it because not everybody wants to pay,

317
00:14:32.240 --> 00:14:34.140
you know, to be a Medium member.

318
00:14:34.140 --> 00:14:37.740
But yeah, so I mean, just some basic tips there.

319
00:14:37.740 --> 00:14:39.540
But like something interesting, right?

320
00:14:39.540 --> 00:14:43.040
And so much has changed in the last year with ChatGPT.

321
00:14:43.040 --> 00:14:46.040
Like I think I've become a human ChatGPT detector now

322
00:14:46.040 --> 00:14:48.740
because I just read so much content and I'm like,

323
00:14:48.740 --> 00:14:51.140
you know, that's definitely ChatGPT.

324
00:14:51.140 --> 00:14:54.440
And so yeah, I mean it is a challenge.

325
00:14:54.440 --> 00:14:58.440
But for me, I look at it and I say, I know when I started,

326
00:14:58.440 --> 00:15:01.240
I think that I had the benefit of being, like I said,

327
00:15:01.240 --> 00:15:03.840
one of few voices in the space.

328
00:15:03.840 --> 00:15:06.140
And that made my content more discoverable

329
00:15:06.140 --> 00:15:08.440
because somebody would search for it and they would find me.

330
00:15:08.440 --> 00:15:13.740
And again, I got great SEO and a boost from that.

331
00:15:13.740 --> 00:15:15.940
And I think that I read a lot of people's stuff,

332
00:15:15.940 --> 00:15:18.240
people that are doing really, really good work

333
00:15:18.240 --> 00:15:20.840
and answering interesting questions too

334
00:15:20.840 --> 00:15:24.440
and challenging things, which is what I always like to see.

335
00:15:24.440 --> 00:15:26.740
And again, I see they get like two claps on Medium

336
00:15:26.740 --> 00:15:29.740
and I'm like, how does this article not have more?

337
00:15:29.740 --> 00:15:31.040
How does it not have more reads?

338
00:15:31.040 --> 00:15:33.840
How does it not have more interactions and comments?

339
00:15:33.840 --> 00:15:38.340
And so that's what I try to do with my newsletter.

340
00:15:38.340 --> 00:15:42.340
And try to feature the ones that I think are consistent

341
00:15:42.340 --> 00:15:44.340
or they're interesting.

342
00:15:44.340 --> 00:15:45.440
And they don't have to be right.

343
00:15:45.440 --> 00:15:46.340
You don't have to be right.

344
00:15:46.340 --> 00:15:48.540
I don't always comment on whether or not

345
00:15:48.540 --> 00:15:50.340
I think it's a good thing that you're doing it this way

346
00:15:50.340 --> 00:15:52.740
or a bad thing, but I just like to get the information out there

347
00:15:52.740 --> 00:15:55.140
and let people think for themselves.

348
00:15:58.340 --> 00:16:01.640
Yeah, I can definitely resonate because I also have, I guess, much smaller newsletter in the full stack space.

349
00:16:01.640 --> 00:16:04.240
And yeah, definitely there is lots of work

350
00:16:04.240 --> 00:16:06.440
on curation. Automation can help a little bit,

351
00:16:06.440 --> 00:16:10.040
but ultimately you need to read and check every single thing

352
00:16:10.040 --> 00:16:13.340
you publish and make sure it is actually something good

353
00:16:13.340 --> 00:16:14.440
you are giving to your audience.

354
00:16:14.440 --> 00:16:17.440
Otherwise, the whole thing doesn't make sense anymore.

355
00:16:17.440 --> 00:16:19.840
So definitely resonate with that.

356
00:16:19.840 --> 00:16:23.140
Another thing I want to connect to is you mentioned

357
00:16:23.140 --> 00:16:24.940
that you started very early with serverless.

358
00:16:24.940 --> 00:16:28.740
I think I also started around 2015 and I definitely remember

359
00:16:28.740 --> 00:16:31.540
that the feature set of Lambda, for instance,

360
00:16:31.540 --> 00:16:33.440
was so much smaller.

361
00:16:33.440 --> 00:16:35.240
And at the same time, the adoption of Lambda

362
00:16:35.240 --> 00:16:36.540
was so much smaller.

363
00:16:36.540 --> 00:16:39.540
And in the last few years, we have seen a growth

364
00:16:39.540 --> 00:16:42.040
both in terms of features and possible integrations,

365
00:16:42.040 --> 00:16:45.140
but also the way that people started to use Lambda,

366
00:16:45.140 --> 00:16:46.540
the use cases.

367
00:16:46.540 --> 00:16:50.740
So I guess the question that they want to ask is

368
00:16:50.740 --> 00:16:53.340
if you are seeing this perception that serverless

369
00:16:53.340 --> 00:16:56.240
is changing over the year, and if there are things

370
00:16:56.240 --> 00:16:58.940
that maybe today we can consider as myths

371
00:16:58.940 --> 00:17:02.540
that we need to debunk when we talk about serverless.

372
00:17:02.540 --> 00:17:06.440
And in general, when we talk about the benefits of serverless,

373
00:17:06.440 --> 00:17:07.840
what are those benefits?

374
00:17:07.840 --> 00:17:11.840
Are we overselling them or there is some kind of genuine value

375
00:17:11.840 --> 00:17:15.740
that we need to communicate more to get a larger adoption?

376
00:17:15.740 --> 00:17:19.540
Lots of questions, but hopefully the context makes sense.

377
00:17:19.540 --> 00:17:20.840
Yeah, no, a lot of questions in there.

378
00:17:20.840 --> 00:17:24.240
But I maybe start with the first part in terms of

379
00:17:24.240 --> 00:17:26.540
the feature set of where it was versus the feature set

380
00:17:26.540 --> 00:17:28.140
of where it is today.

381
00:17:28.140 --> 00:17:31.740
So I think that in some regards, serverless

382
00:17:31.740 --> 00:17:36.940
has become extremely mature and to some degree boring.

383
00:17:36.940 --> 00:17:39.040
I think if we look at like the Datadog

384
00:17:39.040 --> 00:17:41.940
state of serverless report and we see that 70 plus percent

385
00:17:41.940 --> 00:17:45.840
of companies are using some sort of serverless system,

386
00:17:45.840 --> 00:17:48.640
whether that's Lambda or Fargate or AppRunner

387
00:17:48.640 --> 00:17:50.040
or something like that.

388
00:17:50.040 --> 00:17:53.340
I think that goes to show that you just can't get away

389
00:17:53.340 --> 00:17:54.840
from serverless almost, right?

390
00:17:54.840 --> 00:17:55.740
Like it's just there.

391
00:17:55.740 --> 00:17:57.740
It's embedded in the cloud.

392
00:17:57.740 --> 00:18:00.640
You know, if you're using Dynamo or you're using SQS now,

393
00:18:00.640 --> 00:18:04.140
I mean, you're using serverless in some degree.

394
00:18:04.140 --> 00:18:06.040
And so I think most companies, I mean,

395
00:18:06.040 --> 00:18:08.540
if you think about it, that company I talked about

396
00:18:08.540 --> 00:18:10.340
that was using DynamoDB, I mean, technically we

397
00:18:10.340 --> 00:18:12.740
were using serverless before serverless was a thing.

398
00:18:12.740 --> 00:18:16.440
So I think it's really hard to define it now.

399
00:18:16.440 --> 00:18:19.840
You know, again, mindset, ladder, whatever you want to call it,

400
00:18:19.840 --> 00:18:20.340
right?

401
00:18:20.340 --> 00:18:21.440
Serverless first.

402
00:18:21.440 --> 00:18:26.540
I think the idea is just that it's the way to build cloud

403
00:18:26.540 --> 00:18:28.340
applications now.

404
00:18:28.340 --> 00:18:31.140
And the feature sets have grown to a point

405
00:18:31.140 --> 00:18:35.240
where it's become incredibly complex.

406
00:18:35.240 --> 00:18:37.340
I mean, I go back to the days where I'm like,

407
00:18:37.340 --> 00:18:39.040
you know, I was installing, you know,

408
00:18:39.040 --> 00:18:43.740
Nginx or Apache or something like that on a Linux box.

409
00:18:43.740 --> 00:18:46.440
It was, you know, it was running as a virtual machine.

410
00:18:46.440 --> 00:18:47.940
And I'm like, yeah, that was complicated.

411
00:18:47.940 --> 00:18:49.940
But I don't know if it's as complicated

412
00:18:49.940 --> 00:18:52.840
as figuring out tumbling windows in Lambda

413
00:18:52.840 --> 00:18:54.840
and making sure that we have the right,

414
00:18:54.840 --> 00:18:58.740
you know, extensions installed or the right layers installed

415
00:18:58.740 --> 00:19:01.640
or I've got layers that interact with the extensions that then,

416
00:19:01.640 --> 00:19:03.540
you know, give me these things.

417
00:19:03.540 --> 00:19:07.240
It just gets very, very complicated when you think about

418
00:19:07.240 --> 00:19:08.940
how much it can do.

419
00:19:08.940 --> 00:19:11.340
So from a feature set standpoint,

420
00:19:11.340 --> 00:19:12.940
we're nowhere near feature complete.

421
00:19:12.940 --> 00:19:14.240
It can't do everything.

422
00:19:14.240 --> 00:19:16.240
I'm sure that you can make some other system do

423
00:19:16.240 --> 00:19:19.240
if you needed to, if you really wanted to run bare metal.

424
00:19:19.240 --> 00:19:22.440
But I do think that it's gotten to a point

425
00:19:22.440 --> 00:19:25.240
where there's not much you can't do with it, right?

426
00:19:25.240 --> 00:19:29.140
So if you're building an application today,

427
00:19:29.140 --> 00:19:30.840
and I know everybody says this, so this is probably,

428
00:19:30.840 --> 00:19:33.140
you know, probably just redundant advice,

429
00:19:33.140 --> 00:19:34.940
but start serverless first, right?

430
00:19:34.940 --> 00:19:37.340
It makes no sense to say,

431
00:19:37.340 --> 00:19:39.240
I'm going to spin up an EC2 instance

432
00:19:39.240 --> 00:19:41.140
and set up auto scaling groups and this kind of stuff.

433
00:19:41.140 --> 00:19:43.140
There's just so many ways to do it.

434
00:19:43.140 --> 00:19:45.840
If you're a PHP developer, check out Bref.

435
00:19:45.840 --> 00:19:48.340
Like Matthew Napoli has done such an amazing job

436
00:19:48.340 --> 00:19:51.040
with that service, you know what I mean?

437
00:19:51.040 --> 00:19:53.340
And I know that there's not really official PHP support

438
00:19:53.340 --> 00:19:54.640
on Lambda, but there's Lara,

439
00:19:54.640 --> 00:19:56.140
what's the Laravel one?

440
00:19:56.140 --> 00:19:57.740
I'm trying to think what it's called,

441
00:19:57.740 --> 00:20:00.240
but there's another one for Laravel

442
00:20:00.240 --> 00:20:02.440
that is all serverless based.

443
00:20:02.440 --> 00:20:05.240
Like there's just so many things you can do now.

444
00:20:05.240 --> 00:20:07.240
Like just do it that way, start that way.

445
00:20:07.240 --> 00:20:09.740
And I think that, you know,

446
00:20:09.740 --> 00:20:14.340
the common things we hear from a myths perspective

447
00:20:14.340 --> 00:20:19.140
is vendor lock-in, cold starts, right?

448
00:20:19.140 --> 00:20:21.240
High costs, some of these sort of things.

449
00:20:21.240 --> 00:20:23.940
Serverless can get very, very expensive

450
00:20:23.940 --> 00:20:25.740
if you use it wrong, right?

451
00:20:25.740 --> 00:20:28.340
If you don't set it up the right way,

452
00:20:28.340 --> 00:20:30.440
if you're doing what the Prime team did

453
00:20:30.440 --> 00:20:32.440
and trying to run step functions

454
00:20:32.440 --> 00:20:37.240
for every single frame of millions and millions of videos,

455
00:20:37.240 --> 00:20:39.740
then yeah, it's going to get stupidly expensive.

456
00:20:39.740 --> 00:20:43.140
And that's just a poor architectural choice,

457
00:20:43.140 --> 00:20:46.140
but it probably wasn't when they did it the first time,

458
00:20:46.140 --> 00:20:48.440
when they set it up the way they do it to do samples.

459
00:20:48.440 --> 00:20:50.640
Like it probably made perfect sense

460
00:20:50.640 --> 00:20:53.040
and it probably took them a fraction of the time

461
00:20:53.040 --> 00:20:55.940
had they built some other system to do it.

462
00:20:55.940 --> 00:20:59.940
So I think that the cost aspect of it is,

463
00:20:59.940 --> 00:21:01.540
you know, depending on what your workload is,

464
00:21:01.540 --> 00:21:02.440
depending on what you're doing,

465
00:21:02.440 --> 00:21:05.240
that's certainly something that it can get expensive,

466
00:21:05.240 --> 00:21:07.540
but I mean, everything gets expensive

467
00:21:07.540 --> 00:21:11.840
if it's misconfigured or not being used efficiently.

468
00:21:11.840 --> 00:21:13.840
I think the other thing around vendor lock-in,

469
00:21:13.840 --> 00:21:17.940
excuse me, too, is I don't know any system

470
00:21:17.940 --> 00:21:20.540
that exists that you're not locked into a vendor.

471
00:21:20.540 --> 00:21:23.540
I mean, data is the biggest thing.

472
00:21:23.540 --> 00:21:26.540
I mean, even if you say, well, we're using Postgres,

473
00:21:26.540 --> 00:21:28.740
and we're running it in RDS,

474
00:21:28.740 --> 00:21:31.340
so we can move that wherever we want to.

475
00:21:31.340 --> 00:21:32.240
Yeah, good luck.

476
00:21:32.240 --> 00:21:35.240
I want to see you transfer terabytes of data

477
00:21:35.240 --> 00:21:38.340
over to PlanetScale or over to some other provider.

478
00:21:38.340 --> 00:21:40.140
I mean, the data gravity there is huge.

479
00:21:40.140 --> 00:21:42.740
And that's one of the reasons why I hate ORMs,

480
00:21:42.740 --> 00:21:45.040
and no offense to anybody who's building ORMs

481
00:21:45.040 --> 00:21:45.840
or things like that,

482
00:21:45.840 --> 00:21:48.340
but I've never seen an ORM that allows you

483
00:21:48.340 --> 00:21:50.540
to go from Postgres to MySQL to some other,

484
00:21:50.540 --> 00:21:51.340
you know what I mean?

485
00:21:51.340 --> 00:21:53.040
It just never, that doesn't happen, right?

486
00:21:53.040 --> 00:21:54.840
So you're locked in no matter what you do.

487
00:21:54.840 --> 00:21:58.140
And the question is, is that who do you lock yourself into?

488
00:21:58.140 --> 00:21:59.840
I mean, even Next.js now is something

489
00:21:59.840 --> 00:22:00.640
we've been talking about.

490
00:22:00.640 --> 00:22:02.340
There's been a whole bunch of buzz about this.

491
00:22:02.340 --> 00:22:05.340
It's not easy to run Next.js not on Vercel, right?

492
00:22:05.340 --> 00:22:06.840
So either you're running it on Vercel

493
00:22:06.840 --> 00:22:07.840
or you're jumping through hoops

494
00:22:07.840 --> 00:22:09.740
in order to make it run somewhere else.

495
00:22:09.740 --> 00:22:13.940
And so you're locked into Vercel pretty heavily

496
00:22:13.940 --> 00:22:16.140
if you choose to run your Next.js app there

497
00:22:16.140 --> 00:22:17.740
and take advantage of the benefits.

498
00:22:17.740 --> 00:22:20.140
So this is true of everything.

499
00:22:20.140 --> 00:22:22.040
But the question is, is where do you lock yourself into

500
00:22:22.040 --> 00:22:25.440
and what are the trade-offs of choosing a particular thing?

501
00:22:25.440 --> 00:22:27.540
Like I would rather be locked into Lambda

502
00:22:27.540 --> 00:22:31.940
and serverless on AWS than I would be locked into

503
00:22:31.940 --> 00:22:35.140
running a Kubernetes cluster on GCP, for example, right?

504
00:22:35.140 --> 00:22:37.040
Like, I mean, so to me, it just makes sense.

505
00:22:37.040 --> 00:22:39.340
It's faster, it's easier to do.

506
00:22:39.340 --> 00:22:40.740
And then the last one I mentioned, I think,

507
00:22:40.740 --> 00:22:42.540
was the cold starts thing.

508
00:22:42.540 --> 00:22:44.940
This is something that you really got to think about

509
00:22:44.940 --> 00:22:46.240
what your workloads are.

510
00:22:46.240 --> 00:22:51.140
If you're running a webhook or an API or something like that

511
00:22:51.140 --> 00:22:52.940
and you're running that on a Lambda function,

512
00:22:52.940 --> 00:22:54.840
like, yeah, you're gonna get cold starts

513
00:22:54.840 --> 00:22:57.940
if you don't have sort of high velocity

514
00:22:57.940 --> 00:22:59.340
or you don't have that ongoing stuff.

515
00:22:59.340 --> 00:23:00.940
And they're working on that too.

516
00:23:00.940 --> 00:23:02.440
There's ways that it makes it better.

517
00:23:02.440 --> 00:23:03.940
If you're using Node or using Rust

518
00:23:03.940 --> 00:23:04.740
or some of these other ones,

519
00:23:04.740 --> 00:23:07.540
like it's very, very low cold starts anyways.

520
00:23:07.540 --> 00:23:08.640
But this is just one of those things

521
00:23:08.640 --> 00:23:10.540
where you have to make a decision where it's like,

522
00:23:10.540 --> 00:23:13.540
do you want that scalability of scaling down to zero

523
00:23:13.540 --> 00:23:16.740
or do you want the availability and the cold start,

524
00:23:16.740 --> 00:23:17.740
the minimal cold starts?

525
00:23:17.740 --> 00:23:20.040
Because if you do, then just deploy to AppRunner, right?

526
00:23:20.040 --> 00:23:21.040
And if you deploy to AppRunner,

527
00:23:21.040 --> 00:23:22.940
then you pay a couple of dollars a month,

528
00:23:22.940 --> 00:23:26.340
maybe it costs you $30, $40 a month to run that API.

529
00:23:26.340 --> 00:23:27.540
But you can run all those.

530
00:23:27.540 --> 00:23:28.540
You don't have the cold starts.

531
00:23:28.540 --> 00:23:29.540
You get good performance.

532
00:23:29.540 --> 00:23:31.140
I mean, there's different ways to do it,

533
00:23:31.140 --> 00:23:33.040
but it's about architectural trade-offs.

534
00:23:33.040 --> 00:23:34.540
And I think that's the last point that I'll make.

535
00:23:34.540 --> 00:23:36.340
And I'm sorry, I know I'm rambling a little bit.

536
00:23:36.340 --> 00:23:39.540
But the big thing here is that Serverless

537
00:23:39.540 --> 00:23:43.240
has introduced, I guess, thousands of trade-offs, right?

538
00:23:43.240 --> 00:23:45.340
Like there's so many different ways to think about

539
00:23:45.340 --> 00:23:47.840
how to make a particular workload run,

540
00:23:47.840 --> 00:23:51.040
whether you're using choreography through EventBridge

541
00:23:51.040 --> 00:23:52.740
or orchestration with step functions

542
00:23:52.740 --> 00:23:53.940
or a combination of those,

543
00:23:53.940 --> 00:23:56.640
or you're still running certain things within Lambda functions

544
00:23:56.640 --> 00:23:58.240
or you're trying to hand stuff off to Fargate

545
00:23:58.240 --> 00:24:00.240
or you're doing any of those things,

546
00:24:00.240 --> 00:24:03.340
or you're choosing SQS over Kinesis or those.

547
00:24:03.340 --> 00:24:04.940
Like there's just so many things that,

548
00:24:04.940 --> 00:24:08.840
so many decisions that you have to make that, again,

549
00:24:08.840 --> 00:24:13.540
there's a very big difference to me between a developer,

550
00:24:13.540 --> 00:24:17.240
a sort of ops slash cloud architect,

551
00:24:17.240 --> 00:24:19.640
and then somewhere in between where we're,

552
00:24:19.640 --> 00:24:21.640
I call them Serverless developers maybe,

553
00:24:21.640 --> 00:24:26.540
but like there's different sort of knowledge sets

554
00:24:26.540 --> 00:24:29.340
that you need to have to be on either end of those spectrums.

555
00:24:29.340 --> 00:24:31.640
And in order to find yourself in the middle,

556
00:24:31.640 --> 00:24:33.640
and this is one of the reasons why I think Serverless

557
00:24:33.640 --> 00:24:35.540
is still really hard to adopt for a lot of people,

558
00:24:35.540 --> 00:24:37.540
is there's a huge learning,

559
00:24:37.540 --> 00:24:39.040
there's still a lot of learning to do

560
00:24:39.040 --> 00:24:40.840
and you have to bring knowledge from both sides

561
00:24:40.840 --> 00:24:41.940
in order to be really effective,

562
00:24:41.940 --> 00:24:45.540
I think, at building Serverless applications.

563
00:24:45.540 --> 00:24:47.140
Serverless was simple to begin with,

564
00:24:47.140 --> 00:24:49.640
you know, when it was a little bit naive

565
00:24:49.640 --> 00:24:51.340
and maybe less capable,

566
00:24:51.340 --> 00:24:53.940
but I guess as more and more features have been added

567
00:24:53.940 --> 00:24:55.740
and now everything is possible,

568
00:24:55.740 --> 00:24:57.340
is it, have we arrived at the case

569
00:24:57.340 --> 00:25:02.940
where just the cognitive load is just very intense for developers?

570
00:25:02.940 --> 00:25:05.440
Have AWS kind of missed an opportunity there

571
00:25:05.440 --> 00:25:08.240
to kind of continue to remove

572
00:25:08.240 --> 00:25:11.440
that undifferentiated heavy lifting?

573
00:25:11.440 --> 00:25:13.040
Could there have been a different path?

574
00:25:13.040 --> 00:25:16.740
And is maybe, maybe this is leading into the Ampt story then.

575
00:25:16.740 --> 00:25:19.840
Is Ampt's mission to rectify that?

576
00:25:19.840 --> 00:25:22.140
Maybe you can go through your thoughts on that

577
00:25:22.140 --> 00:25:24.440
and how Ampt all began.

578
00:25:24.440 --> 00:25:26.440
Yeah, so I mean, I think, you know,

579
00:25:26.440 --> 00:25:28.140
I think you know my answer to this question,

580
00:25:28.140 --> 00:25:30.340
so whether it's made it too difficult.

581
00:25:30.340 --> 00:25:32.440
I mean, I think AWS is,

582
00:25:32.440 --> 00:25:35.940
has done an amazing job building these primitives.

583
00:25:35.940 --> 00:25:37.840
I think they've done a terrible job

584
00:25:37.840 --> 00:25:41.940
trying to find a way to make the developer experience,

585
00:25:41.940 --> 00:25:42.640
you know, smooth.

586
00:25:42.640 --> 00:25:45.840
And so I don't think you solve the problem

587
00:25:45.840 --> 00:25:47.840
with just developer experience.

588
00:25:47.840 --> 00:25:50.540
I don't think that's the ultimate solution.

589
00:25:50.540 --> 00:25:53.040
But what I will say about the developer experience,

590
00:25:53.040 --> 00:25:54.340
and you mentioned the cognitive load,

591
00:25:54.340 --> 00:25:57.040
which if you think of the sort of the triangle of DevEx, right,

592
00:25:57.040 --> 00:25:59.240
you've got one thing which is fast feedback loops.

593
00:25:59.240 --> 00:26:00.840
Like as a developer,

594
00:26:00.840 --> 00:26:03.040
you can't wait two, three minutes to figure out

595
00:26:03.040 --> 00:26:05.540
whether the code change you just made works, right?

596
00:26:05.540 --> 00:26:08.040
Like that's just incredibly frustrating

597
00:26:08.040 --> 00:26:12.040
and it's just, it just, it fries your brain, right?

598
00:26:12.040 --> 00:26:13.840
The next thing is the cognitive load piece

599
00:26:13.840 --> 00:26:14.940
and this was something interesting.

600
00:26:14.940 --> 00:26:16.740
And Stanley was just talking about this actually

601
00:26:16.740 --> 00:26:18.240
at Serverless Days Cape Town,

602
00:26:18.240 --> 00:26:20.540
which is, you know, the new number is four.

603
00:26:20.540 --> 00:26:23.340
That's how many things you can hold in your head at one time.

604
00:26:23.340 --> 00:26:24.240
It used to be seven.

605
00:26:24.240 --> 00:26:26.540
Now it's like, you know, between three and five.

606
00:26:26.540 --> 00:26:30.040
So if you have to be thinking about more than four things

607
00:26:30.040 --> 00:26:33.040
while you're writing code or trying to build an application,

608
00:26:33.040 --> 00:26:34.640
you can't.

609
00:26:34.640 --> 00:26:37.940
You have to stop, you have to do task shift,

610
00:26:37.940 --> 00:26:39.840
you have to go look something up like it is.

611
00:26:39.840 --> 00:26:41.440
It's just really, really frustrating.

612
00:26:41.440 --> 00:26:45.140
And then the third piece of that is what we call flow, right?

613
00:26:45.140 --> 00:26:46.640
This idea of, or the flow state,

614
00:26:46.640 --> 00:26:49.840
where you are in a point where you're just cranking, right?

615
00:26:49.840 --> 00:26:51.040
Every time you have to stop

616
00:26:51.040 --> 00:26:53.040
and go look up something in documentation

617
00:26:53.040 --> 00:26:55.640
or any of those things that break your flow,

618
00:26:55.640 --> 00:26:56.540
it's really hard.

619
00:26:56.540 --> 00:26:58.840
And unless you can put those three things together

620
00:26:58.840 --> 00:27:00.940
and somebody can just write code or do whatever,

621
00:27:00.940 --> 00:27:02.740
whatever task they're working on,

622
00:27:02.740 --> 00:27:05.040
they have that feedback, the fast feedback loop.

623
00:27:05.040 --> 00:27:07.540
They have limited amount of things that they have to keep,

624
00:27:07.540 --> 00:27:09.640
you know, sort of at the top of their mind

625
00:27:09.640 --> 00:27:11.240
in order to make those things work.

626
00:27:11.240 --> 00:27:13.840
And they can get into a state where they can be uninterrupted.

627
00:27:13.840 --> 00:27:16.840
That is where you get rid of things like developer burnout,

628
00:27:16.840 --> 00:27:18.740
where people are just, you know, happier.

629
00:27:18.740 --> 00:27:21.440
I think the developer burnout isn't talked about enough

630
00:27:21.440 --> 00:27:23.640
and it really should be because in today's day and age,

631
00:27:23.640 --> 00:27:25.040
it is very, very real.

632
00:27:25.040 --> 00:27:31.340
But anyway, so to me, I look at the developer experience

633
00:27:31.340 --> 00:27:34.640
that AWS put together.

634
00:27:34.640 --> 00:27:36.940
And I think that they missed the mark,

635
00:27:36.940 --> 00:27:38.140
but they didn't miss the mark

636
00:27:38.140 --> 00:27:41.640
because they didn't necessarily care about it

637
00:27:41.640 --> 00:27:42.940
or they didn't try.

638
00:27:42.940 --> 00:27:46.240
I think they missed the mark because of the complexity

639
00:27:46.240 --> 00:27:49.640
of the underlying technology that they put together, right?

640
00:27:49.640 --> 00:27:51.640
I mean, things can only be so simple.

641
00:27:51.640 --> 00:27:53.340
You can only abstract so many things.

642
00:27:53.340 --> 00:27:55.840
And so when we originally,

643
00:27:55.840 --> 00:28:00.740
and the predecessor to Ampt was serverless cloud.

644
00:28:00.740 --> 00:28:02.740
So this is something we started actually working on

645
00:28:02.740 --> 00:28:03.840
at the end of 2020.

646
00:28:03.840 --> 00:28:06.040
So it's been a while that we've been, you know,

647
00:28:06.040 --> 00:28:07.440
been playing around with this idea.

648
00:28:07.440 --> 00:28:10.940
And the goal with that actually was to make it easier

649
00:28:10.940 --> 00:28:13.440
to deploy the serverless framework for people.

650
00:28:13.440 --> 00:28:16.840
But Doug Moscrop and I, we were working on this thing

651
00:28:16.840 --> 00:28:18.040
and we're kind of like, you know what, though?

652
00:28:18.040 --> 00:28:21.840
It just seems crazy to us that you actually need to define

653
00:28:21.840 --> 00:28:24.740
that you need a Lambda function or an API gateway

654
00:28:24.740 --> 00:28:26.840
or that you need to say, I need this route

655
00:28:26.840 --> 00:28:28.140
to point to this file

656
00:28:28.140 --> 00:28:31.140
when you're already defining that in your code.

657
00:28:31.140 --> 00:28:32.740
And we didn't know where this would go.

658
00:28:32.740 --> 00:28:34.140
We didn't know if it was even possible.

659
00:28:34.140 --> 00:28:36.740
And so what we started doing is playing around with some ideas.

660
00:28:36.740 --> 00:28:39.240
We built out an early version with API,

661
00:28:39.240 --> 00:28:42.940
like with an API router and with a task

662
00:28:42.940 --> 00:28:44.240
or a schedule type thing.

663
00:28:44.240 --> 00:28:46.540
And the data component as well.

664
00:28:46.540 --> 00:28:48.040
That was something early we were working on.

665
00:28:48.040 --> 00:28:50.040
And we just kind of found out, we're like, okay,

666
00:28:50.040 --> 00:28:53.440
right now, out of the box, this solves a lot of problems

667
00:28:53.440 --> 00:28:57.340
without you even thinking about needing to set up Lambda functions

668
00:28:57.340 --> 00:28:58.440
or configuring anything.

669
00:28:58.440 --> 00:29:02.340
And the developer experience for it was very, very simple.

670
00:29:02.340 --> 00:29:05.640
And one of the things we knew we wanted to do was we said,

671
00:29:05.640 --> 00:29:08.240
you can't emulate this stuff locally.

672
00:29:08.240 --> 00:29:09.740
And I just saw a bunch of stuff, by the way,

673
00:29:09.740 --> 00:29:11.240
recently on Twitter where people are talking about,

674
00:29:11.240 --> 00:29:16.040
well, if I have a Mac M3, I can run all of this stuff locally

675
00:29:16.040 --> 00:29:18.340
and do all my tests locally and it's super fast and whatever.

676
00:29:18.340 --> 00:29:20.240
I think that might be fine.

677
00:29:20.240 --> 00:29:24.140
But we looked at it back then and I still look at it now and say,

678
00:29:24.140 --> 00:29:28.340
I think you need to run everything against real cloud infrastructure

679
00:29:28.340 --> 00:29:29.940
to get the fidelity that, you know,

680
00:29:29.940 --> 00:29:33.040
to know that all these interconnected pieces are actually working.

681
00:29:33.040 --> 00:29:35.040
So we wanted to do that.

682
00:29:35.040 --> 00:29:37.140
We wanted to create these high fidelity sandboxes.

683
00:29:37.140 --> 00:29:38.740
So in order to make that work,

684
00:29:38.740 --> 00:29:42.440
we had to create a syncing technology that allowed us to save stuff,

685
00:29:42.440 --> 00:29:44.540
like a watcher that would upload code and whatever.

686
00:29:44.540 --> 00:29:46.840
Now, we were doing this originally by zipping stuff

687
00:29:46.840 --> 00:29:48.640
and then deploying it to the Lambda function.

688
00:29:48.640 --> 00:29:50.640
It would take like seven, eight seconds, something like that.

689
00:29:50.640 --> 00:29:51.640
It was okay.

690
00:29:51.640 --> 00:29:56.540
But seven, eight seconds is a long time when you just flip over from,

691
00:29:56.540 --> 00:29:58.840
you know, you make a change and then you wait for it to deploy

692
00:29:58.840 --> 00:30:00.640
and then you flip over to, you know, Postman,

693
00:30:00.640 --> 00:30:02.640
you run a thing and you're like, okay, that worked.

694
00:30:02.640 --> 00:30:04.740
It's still too long and we found it was too long.

695
00:30:04.740 --> 00:30:06.440
So we worked on that for a long time.

696
00:30:06.440 --> 00:30:08.940
We actually get that down to about 400 milliseconds right now.

697
00:30:08.940 --> 00:30:13.340
So it's pretty fast how quickly you can make code changes and do that.

698
00:30:13.340 --> 00:30:16.640
But so for us, we looked at that and we were like,

699
00:30:16.640 --> 00:30:19.540
we want to fix the developer experience, first of all.

700
00:30:19.540 --> 00:30:20.840
That was the big piece of it.

701
00:30:20.840 --> 00:30:22.440
We knew that that was part of it.

702
00:30:22.440 --> 00:30:25.740
But then the big thing was we wanted to reduce cognitive load.

703
00:30:25.740 --> 00:30:30.640
We felt like as serverless developers that cognitive load was killing us.

704
00:30:30.640 --> 00:30:34.740
Like it was always and the worst thing is and look AWS is,

705
00:30:34.740 --> 00:30:38.340
I don't want to diminish what they've done.

706
00:30:38.340 --> 00:30:39.940
They have amazing people there.

707
00:30:39.940 --> 00:30:41.040
They work really, really hard.

708
00:30:41.040 --> 00:30:42.540
They do some really amazing things,

709
00:30:42.540 --> 00:30:46.040
but their documentation, especially around CloudFormation,

710
00:30:46.040 --> 00:30:50.840
is just it's like you just have to keep diving deeper and deeper and deeper.

711
00:30:50.840 --> 00:30:54.040
It's like, okay, you click on this and then it gives you the possible options

712
00:30:54.040 --> 00:30:55.240
and then oh, here are the settings for that.

713
00:30:55.240 --> 00:30:57.240
You click on that and you go deeper and deeper and deeper.

714
00:30:57.240 --> 00:31:01.040
I mean, I remember times where it's like, what are even the same defaults?

715
00:31:01.040 --> 00:31:04.340
Like what just happens by default that would, you know,

716
00:31:04.340 --> 00:31:06.740
like how much do I actually have to configure and change?

717
00:31:06.740 --> 00:31:11.140
And all of that load on my brain, again, maybe I'm just not a great developer,

718
00:31:11.140 --> 00:31:14.140
but that honestly, it just gives me a headache and I get frustrated

719
00:31:14.140 --> 00:31:17.240
and I'm like, I can't, you know, I stare at these things and I'm like,

720
00:31:17.240 --> 00:31:19.340
why, why does this do what it needs to do?

721
00:31:19.340 --> 00:31:22.340
So we wanted to take as much of that cognitive load off of people.

722
00:31:22.340 --> 00:31:24.940
So again, nailing the developer experience,

723
00:31:24.940 --> 00:31:29.240
giving people those fast feedback loops, reducing that cognitive load,

724
00:31:29.240 --> 00:31:31.140
that we were hoping would then produce this,

725
00:31:31.140 --> 00:31:36.240
you know, sort of flow state where people could just get into actually building the apps they were building.

726
00:31:36.240 --> 00:31:38.240
This has evolved tremendously.

727
00:31:38.240 --> 00:31:40.440
We added support for full stack stuff.

728
00:31:40.440 --> 00:31:44.640
We saw most people were like writing stuff with, you know, Next and Express and,

729
00:31:44.640 --> 00:31:47.840
and, you know, React or, you know, Vue or whatever.

730
00:31:47.840 --> 00:31:50.140
So we wanted to support all those things.

731
00:31:50.140 --> 00:31:53.140
And we added in support for all kinds of different, you know,

732
00:31:53.140 --> 00:31:55.340
things like tasks, long-running tasks.

733
00:31:55.340 --> 00:31:57.040
We built this thing called Smart Compute.

734
00:31:57.040 --> 00:31:59.040
I mean, I don't want to sell Ampt here,

735
00:31:59.040 --> 00:32:03.340
but if you want to go check it out, go to getamp.com and the documentation.

736
00:32:03.340 --> 00:32:06.240
I mean, it does quite a bit of these things for you.

737
00:32:06.240 --> 00:32:09.040
But I think back to the original premise is,

738
00:32:09.040 --> 00:32:14.840
we built this and we started on this journey because we wanted to solve this,

739
00:32:14.840 --> 00:32:21.640
this larger developer experience thing and just make it easier for developers,

740
00:32:21.640 --> 00:32:24.840
like developers capital D, I don't know, lowercase D, whatever,

741
00:32:24.840 --> 00:32:29.640
developers who were building applications, who are experts in writing,

742
00:32:29.640 --> 00:32:34.640
you know, Express and interacting with databases and those people, right?

743
00:32:34.640 --> 00:32:38.440
The ones who weren't experts in setting up CloudFormation templates

744
00:32:38.440 --> 00:32:42.140
or writing CDK and figuring out what the cloud architecture was.

745
00:32:42.140 --> 00:32:46.140
We wanted to see if there was a way to go from cloud or from code to cloud

746
00:32:46.140 --> 00:32:49.140
with as little friction as possible.

747
00:32:49.140 --> 00:32:52.140
And I think we've, you know, it's not perfect yet,

748
00:32:52.140 --> 00:32:54.140
but I think we've gotten pretty close.

749
00:32:54.140 --> 00:32:59.040
So, yeah, so that was really, that was the genesis of the idea,

750
00:32:59.040 --> 00:33:03.240
where, you know, where we kind of are now and I mean,

751
00:33:03.240 --> 00:33:08.140
the other thing too is like CI-CD, AWS Cloud Account Management, right?

752
00:33:08.140 --> 00:33:11.040
Like that, I mean, honestly, we have customers using Ampt

753
00:33:11.040 --> 00:33:16.740
that I think the biggest benefit they get is just from the account management.

754
00:33:16.740 --> 00:33:21.840
So we automatically spin up and I was watching your episode the other day about Ampt,

755
00:33:21.840 --> 00:33:26.240
I think you asked this question, every single environment that we spin up

756
00:33:26.240 --> 00:33:30.340
is a separate AWS account, completely isolated, you know,

757
00:33:30.340 --> 00:33:34.240
you've got that blast radius there, all the quotas are tied to that individually.

758
00:33:34.240 --> 00:33:38.540
So, you know, we have one customer that does e-commerce sites

759
00:33:38.540 --> 00:33:41.140
and they deploy these e-commerce sites for their customers.

760
00:33:41.140 --> 00:33:46.340
And what they do is they use the Ampt'd stage,

761
00:33:46.340 --> 00:33:48.740
you know, to create stage, create these stage environments,

762
00:33:48.740 --> 00:33:53.340
they use that to create, you know, environments for each one of their customers.

763
00:33:53.340 --> 00:33:56.140
And then what's cool about it is they update, they have like sort of a,

764
00:33:56.140 --> 00:33:58.640
you know, their code that they update that they can deploy to staging

765
00:33:58.640 --> 00:33:59.940
and check to make sure it works.

766
00:33:59.940 --> 00:34:04.140
And every one of these environments they have running for their customers,

767
00:34:04.140 --> 00:34:06.840
they get different data from our parameter system,

768
00:34:06.840 --> 00:34:09.440
they have different data obviously in their data tables.

769
00:34:09.440 --> 00:34:12.040
And then if they want to push out an update to them,

770
00:34:12.040 --> 00:34:14.640
they can just update them individually and say,

771
00:34:14.640 --> 00:34:17.040
okay, we're going to move you to v1.2 or whatever it is

772
00:34:17.040 --> 00:34:22.240
and update each one of those different services or those different environments.

773
00:34:22.240 --> 00:34:23.640
And it works really, really well.

774
00:34:23.640 --> 00:34:28.140
We've got another one that's using it, BlockSec is using it to do tenants.

775
00:34:28.140 --> 00:34:32.840
Their tenancy is based off of individual AWS accounts, do some security and stuff.

776
00:34:32.840 --> 00:34:36.940
So there's just so many things that are taken off your plate.

777
00:34:36.940 --> 00:34:40.640
And then again, the last thing that the CI/CD portion of it is to basically say,

778
00:34:40.640 --> 00:34:44.140
you know, CI/CD in my opinion is dumb and it's broken

779
00:34:44.140 --> 00:34:47.340
and I don't see anyone who's ever done CI/CD well.

780
00:34:47.340 --> 00:34:50.840
So we were like, let's just remove CI/CD from the equation.

781
00:34:50.840 --> 00:34:54.740
And so we take your code and it's all built in your environment.

782
00:34:54.740 --> 00:34:58.940
So your environment actually builds your code and processes your code

783
00:34:58.940 --> 00:35:03.140
and reconfigures itself based off of what your code has specified.

784
00:35:03.140 --> 00:35:08.240
So it eliminates that process, you get CI/CD out of the box.

785
00:35:08.240 --> 00:35:11.640
It just takes so many headaches away from developers

786
00:35:11.640 --> 00:35:14.440
and just lets them write code, which is again,

787
00:35:14.440 --> 00:35:17.740
was our ultimate, that was our original tagline was just write code.

788
00:35:17.740 --> 00:35:21.140
Like that was, you know, that's where we wanted to be

789
00:35:21.140 --> 00:35:23.140
and that's where we are right now.

790
00:35:25.740 --> 00:35:28.240
You mentioned the smart compute feature and this is actually something that got me very curious

791
00:35:28.240 --> 00:35:31.140
because as I understand, you can basically,

792
00:35:31.140 --> 00:35:33.440
you have different constraints when you run on Lambda,

793
00:35:33.440 --> 00:35:37.340
up runner or Fargate, but all this complexity is kind of abstracted

794
00:35:37.340 --> 00:35:41.040
from you as a developer, the system somehow is just going to figure out

795
00:35:41.040 --> 00:35:44.540
which one is the best environment for the kind of workload

796
00:35:44.540 --> 00:35:46.340
you are trying to deploy.

797
00:35:46.340 --> 00:35:49.040
And that feels a little bit magic if you ask me.

798
00:35:49.040 --> 00:35:52.640
So I'd like to ask you if you can disclose some of that magic.

799
00:35:52.640 --> 00:35:55.740
And I guess my question is, does it just work?

800
00:35:55.740 --> 00:35:59.240
Like is it able to transition from Lambda to up runner to Fargate

801
00:35:59.240 --> 00:36:02.940
or something like that automatically without like any interruption

802
00:36:02.940 --> 00:36:07.140
or maybe there are certain trade-offs that developers still need to be aware

803
00:36:07.140 --> 00:36:11.740
and somehow adapt to that specific model when they write their code.

804
00:36:11.740 --> 00:36:16.140
Yeah, so we tried to make it so that the trade-offs

805
00:36:16.140 --> 00:36:20.240
were handled by the system and not by the developer.

806
00:36:20.240 --> 00:36:24.440
I mean, you're still building on a distributed system, right?

807
00:36:24.440 --> 00:36:26.740
So we try to make sure people know that, right?

808
00:36:26.740 --> 00:36:29.340
So it's not like if you run the same code multiple times

809
00:36:29.340 --> 00:36:31.940
that it's always going to have access to global variables

810
00:36:31.940 --> 00:36:33.340
that you've set and things like that.

811
00:36:33.340 --> 00:36:36.440
So you should assume that every single time your application runs

812
00:36:36.440 --> 00:36:39.340
it is stateless and would need to hydrate itself

813
00:36:39.340 --> 00:36:41.340
with any information that was there.

814
00:36:41.340 --> 00:36:44.440
But what we tried to do from a different approach is like,

815
00:36:44.440 --> 00:36:47.040
you know, look containers are great, like Docker, you know,

816
00:36:47.040 --> 00:36:50.240
revolutionized a lot of different things in terms of how people

817
00:36:50.240 --> 00:36:53.240
were able to encapsulate code and slim down applications

818
00:36:53.240 --> 00:36:54.940
so that they only had what they needed

819
00:36:54.940 --> 00:36:57.840
and give people more control over sort of not the operating system

820
00:36:57.840 --> 00:37:00.740
but certainly the runtime that was baked into those things.

821
00:37:00.740 --> 00:37:03.540
And we don't want to take that away from people, right?

822
00:37:03.540 --> 00:37:06.140
But Lambda kind of did, at least initially.

823
00:37:06.140 --> 00:37:08.940
And it said just write code, just put some application code in there.

824
00:37:08.940 --> 00:37:13.540
We'll manage the runtime, we'll manage the operating system underneath.

825
00:37:13.540 --> 00:37:16.140
So what we said is let's start there.

826
00:37:16.140 --> 00:37:18.740
Let's start with the just give us the code thing.

827
00:37:18.740 --> 00:37:22.840
And when you just give us the code, because again, we build it, right?

828
00:37:22.840 --> 00:37:26.540
We're not running a builder in your CI/CD process that packages your code.

829
00:37:26.540 --> 00:37:29.540
That runs in your amped environment.

830
00:37:29.540 --> 00:37:32.440
Because we can do that, we can actually deploy that code

831
00:37:32.440 --> 00:37:37.540
or take that code and turn it into or deploy it into a container

832
00:37:37.540 --> 00:37:39.140
and we containerize it for you.

833
00:37:39.140 --> 00:37:42.440
Or we can, you know, put it into Lambda directly and so forth.

834
00:37:42.440 --> 00:37:46.140
So because we have that underlying code, the actual code you've written,

835
00:37:46.140 --> 00:37:50.740
we can sort of massage it and change it and deploy it in multiple different ways.

836
00:37:50.740 --> 00:37:56.340
So the trade-offs are, obviously with Lambda, is you can only run it for 15 minutes.

837
00:37:56.340 --> 00:37:59.240
The problem is if you run Lambda for 15 minutes,

838
00:37:59.240 --> 00:38:02.240
it gets very, very expensive to run Lambda for 15 minutes.

839
00:38:02.240 --> 00:38:05.540
So we put in some, you know, some basic heuristics that say,

840
00:38:05.540 --> 00:38:07.840
look, if you're going to run something for more than a few minutes,

841
00:38:07.840 --> 00:38:09.940
we'll just launch it into a Fargate container.

842
00:38:09.940 --> 00:38:12.940
And if it's a, and again, these are scheduled tasks, right?

843
00:38:12.940 --> 00:38:16.840
So if you schedule a task, it's pretty easy for us to trigger Fargate

844
00:38:16.840 --> 00:38:19.140
based off of a scheduled timer.

845
00:38:19.140 --> 00:38:21.940
You know, we've got some timer things in there with Lambdas

846
00:38:21.940 --> 00:38:23.640
that trigger some things and do some of that stuff.

847
00:38:23.640 --> 00:38:27.140
But essentially, that's a pretty easy switch

848
00:38:27.140 --> 00:38:31.140
to just take something that would run in Lambda and run it in Fargate

849
00:38:31.140 --> 00:38:34.540
because we also, we do all the permission stuff for you as well, right?

850
00:38:34.540 --> 00:38:36.540
So there is a lot of, I don't want to call it magic,

851
00:38:36.540 --> 00:38:40.540
it's just good practices or best practices behind the scenes

852
00:38:40.540 --> 00:38:41.840
in order to make these things work.

853
00:38:41.840 --> 00:38:43.940
We're just kind of handling the deployment things.

854
00:38:43.940 --> 00:38:47.740
The real magic, I think, comes with the app runner piece.

855
00:38:47.740 --> 00:38:50.840
So we had to do some really interesting things for app runner.

856
00:38:50.840 --> 00:38:52.540
It does have to be deployed as containers.

857
00:38:52.540 --> 00:38:56.540
We do have to run a supervisor on there with multiple versions of node

858
00:38:56.540 --> 00:39:00.140
because if the node process gets blocked,

859
00:39:00.140 --> 00:39:02.840
then it will start throwing different errors for you.

860
00:39:02.840 --> 00:39:06.940
And so we have to set sort of aggressive timeouts and things like that.

861
00:39:06.940 --> 00:39:09.440
And so we had to do some magic there.

862
00:39:09.440 --> 00:39:12.940
But again, it's just something that you'd have to do yourself, honestly.

863
00:39:12.940 --> 00:39:14.540
I mean, that's the crazy thing.

864
00:39:14.540 --> 00:39:18.140
And so, but what we do for that is

865
00:39:18.140 --> 00:39:23.340
there are thresholds at which it makes more sense

866
00:39:23.340 --> 00:39:26.340
to switch things to, you know, to a different service.

867
00:39:26.340 --> 00:39:28.340
And so like with app runner, for example,

868
00:39:28.340 --> 00:39:30.840
just as an, you know, if you are doing,

869
00:39:30.840 --> 00:39:32.040
I forget the number here,

870
00:39:32.040 --> 00:39:35.340
but let's say you're doing about 50 million invocations a day.

871
00:39:35.340 --> 00:39:40.240
That'll cost you to scale that and have some flexibility in app runner.

872
00:39:40.240 --> 00:39:43.740
That might cost you $600 a month, something like that,

873
00:39:43.740 --> 00:39:45.040
somewhere in that range.

874
00:39:45.040 --> 00:39:48.740
If you do that on Lambda, it's going to cost you over $3,000 a month, right?

875
00:39:48.740 --> 00:39:52.640
So there's a huge cost savings to switching to something like that.

876
00:39:52.640 --> 00:39:55.640
The problem is, is that if you're building this

877
00:39:55.640 --> 00:39:57.540
and you're trying to use high-fidelity sandboxes

878
00:39:57.540 --> 00:39:59.440
or you want to preview it, you want staging accounts,

879
00:39:59.440 --> 00:40:02.740
obviously you pay more for the throughput

880
00:40:02.740 --> 00:40:04.140
because you need more resources running.

881
00:40:04.140 --> 00:40:08.640
But do you want to run app runner in 30 developers AWS accounts

882
00:40:08.640 --> 00:40:11.140
just so that it's there so they can test against it or whatever?

883
00:40:11.140 --> 00:40:13.040
I mean, because that starts to add up, right?

884
00:40:13.040 --> 00:40:17.040
And so this is where, this is why we like the idea of the smart computers to say,

885
00:40:17.040 --> 00:40:20.040
even if it's running in Lambda functions in your preview environments

886
00:40:20.040 --> 00:40:21.540
and your developer sandboxes,

887
00:40:21.540 --> 00:40:26.040
because we can guarantee the fidelity between these different compute services,

888
00:40:26.040 --> 00:40:29.840
we can switch that on to app runner when you're actually running it in production.

889
00:40:29.840 --> 00:40:33.340
And then the other thing we do too is we've eliminated API Gateway

890
00:40:33.340 --> 00:40:38.940
for most of what we do and most of the stuff now runs through CloudFront.

891
00:40:38.940 --> 00:40:39.940
CloudFront is very good.

892
00:40:39.940 --> 00:40:42.940
You can still use WAF if you need to do something like that.

893
00:40:42.940 --> 00:40:47.740
And honestly, API Gateway, most of the services in there, it's just overhead

894
00:40:47.740 --> 00:40:50.140
unless you're using it for quotas or some of those other things.

895
00:40:50.140 --> 00:40:52.140
So we actually use Lambda Edge functions.

896
00:40:52.140 --> 00:40:54.340
We do routing based off of different things.

897
00:40:54.340 --> 00:40:56.440
We have some very cool stuff we do with static routes

898
00:40:56.440 --> 00:40:59.940
so that you never have to touch Lambda functions in order to load static routes.

899
00:40:59.940 --> 00:41:03.840
So there's all these things that are just, they're complex.

900
00:41:03.840 --> 00:41:06.740
And I guess maybe that can lead me into the idea of patterns.

901
00:41:06.740 --> 00:41:08.240
So obviously, you know, I love patterns.

902
00:41:08.240 --> 00:41:11.040
Big fan of these serverless patterns that run.

903
00:41:11.040 --> 00:41:14.840
What I found is most of these serverless patterns that are complex ones

904
00:41:14.840 --> 00:41:16.540
are very, very hard to manage, right?

905
00:41:16.540 --> 00:41:19.540
Like how do you tell the system, okay, now we're switching over,

906
00:41:19.540 --> 00:41:23.140
you know, these routes are going to, you know, to app runner,

907
00:41:23.140 --> 00:41:27.040
these routes are going to Lambda functions or to function URLs

908
00:41:27.040 --> 00:41:29.540
because we have to do some streaming with them now.

909
00:41:29.540 --> 00:41:32.040
And then these ones actually trigger based off of, you know,

910
00:41:32.040 --> 00:41:34.740
these different SQS queues or whatever, right?

911
00:41:34.740 --> 00:41:37.540
So it just gets really complicated and you got to write that all in CDK

912
00:41:37.540 --> 00:41:40.640
or CloudFormation or however you're doing it or Terraform.

913
00:41:40.640 --> 00:41:42.540
It just gets really, really hard to do.

914
00:41:42.540 --> 00:41:44.440
And the cognitive load there is huge.

915
00:41:44.440 --> 00:41:49.140
So maintaining, so it's sometimes easier to maintain simpler patterns

916
00:41:49.140 --> 00:41:52.440
because they're easier to grok and easier to put into these,

917
00:41:52.440 --> 00:41:54.140
into these IEC documents.

918
00:41:54.140 --> 00:41:55.640
Whereas we look at and we're like, you know what,

919
00:41:55.640 --> 00:41:58.440
the patterns themselves are actually much more complex

920
00:41:58.440 --> 00:42:00.640
and more complicated and really hard to manage.

921
00:42:00.640 --> 00:42:05.240
So if we can manage these really complex patterns for you,

922
00:42:05.240 --> 00:42:09.540
then not only are we doing exactly in a sense what you would be doing

923
00:42:09.540 --> 00:42:11.540
if you were writing these patterns yourself,

924
00:42:11.540 --> 00:42:14.140
but we're doing them better because our system can manage

925
00:42:14.140 --> 00:42:16.040
and automate much more of it for you.

926
00:42:16.040 --> 00:42:20.140
And not only that, but we can learn from every single person using our system, right?

927
00:42:20.140 --> 00:42:25.040
So we see how does this pattern actually work when it gets 60 million requests per day, right?

928
00:42:25.040 --> 00:42:28.540
How does this pattern work when it only gets, you know, 10 requests per hour?

929
00:42:28.540 --> 00:42:30.040
Like what are the cold starts here?

930
00:42:30.040 --> 00:42:32.840
Like would it make more sense if we did this versus that?

931
00:42:32.840 --> 00:42:33.940
And we can try those things.

932
00:42:33.940 --> 00:42:36.040
We can experiment, we can change memory settings.

933
00:42:36.040 --> 00:42:39.640
It's all kinds of stuff that we can do to optimize those workloads.

934
00:42:39.640 --> 00:42:42.940
And you benefit from it as a user of this.

935
00:42:42.940 --> 00:42:46.040
And that's why we kind of joke a little bit and I'm not,

936
00:42:46.040 --> 00:42:48.040
it's kind of a joke, but not really a joke

937
00:42:48.040 --> 00:42:51.440
where some people have called us like an autonomous platform engineer.

938
00:42:51.440 --> 00:42:56.340
Like essentially, like what we do is we are a serverless expert, right?

939
00:42:56.340 --> 00:42:58.840
Or the platform's a serverless expert and you say,

940
00:42:58.840 --> 00:43:03.240
hey, here's my code, make it run as efficiently as possible in the cloud.

941
00:43:03.240 --> 00:43:07.340
And somebody goes and writes all that cloud formation and all the, you know, whatever for you

942
00:43:07.340 --> 00:43:08.040
and deploys it.

943
00:43:08.040 --> 00:43:11.440
Like that's essentially what our service does and then optimizes it over time,

944
00:43:11.440 --> 00:43:14.240
which I think is, which is really interesting.

945
00:43:14.240 --> 00:43:17.740
But yeah, and you know what, the other thing I wanted to mention too,

946
00:43:17.740 --> 00:43:20.840
because I want to give credit to Yantray for this too.

947
00:43:20.840 --> 00:43:25.540
Like he pointed out a long time ago some of the cost changes for other services.

948
00:43:25.540 --> 00:43:27.340
So it's not just compute, right?

949
00:43:27.340 --> 00:43:29.640
So if you're running, I forget what his numbers were,

950
00:43:29.640 --> 00:43:35.840
but it's like thousand requests per second with SQS that cost you like $1,800 a month, right?

951
00:43:35.840 --> 00:43:39.840
So it gets really expensive to run SQS when you're doing that kind of throughput.

952
00:43:39.840 --> 00:43:42.040
But if you switch to Kinesis,

953
00:43:42.040 --> 00:43:46.240
well, then it's like $30 a month because you only need six shards or whatever it is, right?

954
00:43:46.240 --> 00:43:51.040
So the question is, do I write my application to use Kinesis

955
00:43:51.040 --> 00:43:54.440
assuming that I'm going to have this type of throughput

956
00:43:54.440 --> 00:43:57.440
or do I write my application using SQS

957
00:43:57.440 --> 00:44:00.440
because it's going to cost me nothing in the beginning?

958
00:44:00.440 --> 00:44:05.840
And so smart compute is just one aspect of this switching piece for us.

959
00:44:05.840 --> 00:44:07.540
We look at it and we say,

960
00:44:07.540 --> 00:44:12.140
there's no reason why you should have to choose Kinesis over SQS

961
00:44:12.140 --> 00:44:14.240
or maybe EventBridge for certain things.

962
00:44:14.240 --> 00:44:16.840
Like why not just write your use case,

963
00:44:16.840 --> 00:44:20.840
express your use case and we'll run it as SQS or whatever,

964
00:44:20.840 --> 00:44:22.640
you know, when it's in your developer environments

965
00:44:22.640 --> 00:44:24.840
and these or you're not getting a lot of traffic.

966
00:44:24.840 --> 00:44:26.240
But as soon as you start getting traffic

967
00:44:26.240 --> 00:44:30.240
and there's a breaking point where it makes sense to switch to a different service,

968
00:44:30.240 --> 00:44:32.840
we can automatically set up Kinesis,

969
00:44:32.840 --> 00:44:38.740
start routing anything from that Kinesis to the same place that is feeding off your SQS queue,

970
00:44:38.740 --> 00:44:42.740
then start changing the producer so it's sending it to Kinesis

971
00:44:42.740 --> 00:44:47.240
and then once the SQS queue is drained, go ahead and remove that SQS queue.

972
00:44:47.240 --> 00:44:50.540
We can do that for you all in one without you even doing anything.

973
00:44:50.540 --> 00:44:54.440
It just happens and it works as opposed to you having to,

974
00:44:54.440 --> 00:44:59.340
you know, do six CloudFormation deployments in order to make that work.

975
00:45:01.140 --> 00:45:05.440
Yeah, I can certainly see the benefit of that and I think it's one of the challenges we have all the time is,

976
00:45:05.440 --> 00:45:07.440
you know, you're aware of all of these different services,

977
00:45:07.440 --> 00:45:10.540
but to really understand all of their characteristics

978
00:45:10.540 --> 00:45:18.440
and their delivery method and the latency and is it at least once or whatever

979
00:45:18.440 --> 00:45:19.740
and then also understand, okay,

980
00:45:19.740 --> 00:45:22.940
what are the cost trade-offs and mix all these into the one thing,

981
00:45:22.940 --> 00:45:24.140
it's pretty difficult.

982
00:45:24.140 --> 00:45:27.240
So I can really see where Ampt is going to help with that.

983
00:45:27.240 --> 00:45:30.640
I guess as well, you know, you've got a very smart team,

984
00:45:30.640 --> 00:45:33.840
clearly very capable of delivering all this stuff.

985
00:45:33.840 --> 00:45:38.740
I guess one of the challenges then is you've got all these different challenges out there in the cloud,

986
00:45:38.740 --> 00:45:41.440
different perspectives on what needs to be done,

987
00:45:41.440 --> 00:45:44.840
probably a long list of feature requests and a roadmap.

988
00:45:44.840 --> 00:45:47.540
How do you get a focus for Ampt?

989
00:45:47.540 --> 00:45:49.040
What's your kind of North Star?

990
00:45:49.040 --> 00:45:54.940
Do you have like a specific target market, the kind of application that you're trying to target

991
00:45:54.940 --> 00:45:57.240
or specific challenges you're trying to solve

992
00:45:57.240 --> 00:46:01.040
or is that something that kind of evolves as you see customers

993
00:46:01.040 --> 00:46:02.740
and understand their pain points?

994
00:46:02.740 --> 00:46:07.940
Yeah, I mean, we're very big on listening to customers and what their needs are.

995
00:46:07.940 --> 00:46:11.540
I mean in terms of a sort of a North Star, you know,

996
00:46:11.540 --> 00:46:14.940
the goal here is focusing on web applications.

997
00:46:14.940 --> 00:46:16.340
I mean, I think that's the big thing.

998
00:46:16.340 --> 00:46:20.540
If you're building some sort of IoT system in the background or you're, you know,

999
00:46:20.540 --> 00:46:22.640
you've got, I mean, we can technically support that.

1000
00:46:22.640 --> 00:46:27.440
But you know, if you're trying to build some massive machine learning thing,

1001
00:46:27.440 --> 00:46:30.340
or like we're just not competing with those right now.

1002
00:46:30.340 --> 00:46:34.840
I think what we see is that there are a lot of people that are doing interesting things out there.

1003
00:46:34.840 --> 00:46:39.140
Now with AI, we just launched our Gen AI integration with Bedrock.

1004
00:46:39.140 --> 00:46:42.640
It's early, it's beta, but it's interesting where it's like,

1005
00:46:42.640 --> 00:46:45.840
how do you just give people the ability to build this stuff very, very quickly?

1006
00:46:45.840 --> 00:46:48.440
And when I say people, I mean, I do mean developers.

1007
00:46:48.440 --> 00:46:51.040
I mean that our focus is on developers.

1008
00:46:51.040 --> 00:46:54.540
I think long term like we see a vision where we can say,

1009
00:46:54.540 --> 00:46:58.540
you know, amped is this thing that you can just buy off the shelf

1010
00:46:58.540 --> 00:47:03.140
almost as a platform engineering team or as a larger enterprise and say,

1011
00:47:03.140 --> 00:47:06.140
hey, I want to give these developers the ability to do this stuff.

1012
00:47:06.140 --> 00:47:10.340
That's talk to compliant and PCI compliant and follows all these rules and you know,

1013
00:47:10.340 --> 00:47:12.540
secure and stuff like that and I don't have to worry about that.

1014
00:47:12.540 --> 00:47:17.840
I just, you know, all of that work is done for us and we just kind of monitor it to make sure that,

1015
00:47:17.840 --> 00:47:19.440
you know, people are doing what they're supposed to be doing.

1016
00:47:19.440 --> 00:47:24.140
But like essentially that out of the box solution is the longer term vision.

1017
00:47:24.140 --> 00:47:30.140
So, you know, we are looking at it now as to say, you know,

1018
00:47:30.140 --> 00:47:31.840
we could build a million different things.

1019
00:47:31.840 --> 00:47:34.240
We could go a million different ways.

1020
00:47:34.240 --> 00:47:37.540
You know, obviously, you know, there's a lot of hype around AI

1021
00:47:37.540 --> 00:47:40.840
and we felt that that was important to get something like that in.

1022
00:47:40.840 --> 00:47:43.540
We're working on a whole bunch of partnership stuff

1023
00:47:43.540 --> 00:47:47.740
so that you can easily connect, you know, memento or Mongo or those things.

1024
00:47:47.740 --> 00:47:48.740
You can do that now.

1025
00:47:48.740 --> 00:47:51.440
Yeah, I mean it just we, you know, you just do it through our parameters,

1026
00:47:51.440 --> 00:47:53.440
but trying to make those a little bit more official

1027
00:47:53.440 --> 00:47:58.240
and a little bit easier to do and also manage the, manage the authentication for you.

1028
00:47:58.240 --> 00:48:00.440
So that's something you don't have to think about.

1029
00:48:00.440 --> 00:48:05.940
But yeah, I mean in terms of the feature sets that we're trying to do is focus on the ones

1030
00:48:05.940 --> 00:48:08.840
that we think move the needle for customers.

1031
00:48:08.840 --> 00:48:12.040
Like what are the biggest frustrations they have and so forth.

1032
00:48:12.040 --> 00:48:17.040
And, you know, the abstraction layer that we've built has been,

1033
00:48:17.040 --> 00:48:24.740
we've tried to take the approach of like, we're not trying to necessarily mask AWS here.

1034
00:48:24.740 --> 00:48:28.740
We want you to know AWS exists and that you're using AWS.

1035
00:48:28.740 --> 00:48:33.240
And I think actually that's one thing you might have mentioned in your episode 100

1036
00:48:33.240 --> 00:48:37.340
was that we're like a serverless pass or like a serverless pass.

1037
00:48:37.340 --> 00:48:42.340
So the funny thing is, is we've been trying really hard to tell people we're not a pass, right?

1038
00:48:42.340 --> 00:48:46.740
Like we don't want to be, we don't want to host your application.

1039
00:48:46.740 --> 00:48:48.140
We want to manage it for you

1040
00:48:48.140 --> 00:48:52.740
and give you all the tools you need to interact with AWS and manage it on your behalf.

1041
00:48:52.740 --> 00:48:54.540
But we don't, we don't want to ultimately host it.

1042
00:48:54.540 --> 00:48:55.740
We don't want to own your application.

1043
00:48:55.740 --> 00:48:56.640
It's, that's your stuff.

1044
00:48:56.640 --> 00:49:00.640
Like we're just trying to make it easier for you to get your application into the cloud

1045
00:49:00.640 --> 00:49:06.140
in a way that, you know, people who have, you know, giant platform engineering teams can do that.

1046
00:49:06.140 --> 00:49:09.640
So, you know, we're trying to focus on the use cases that our customers have.

1047
00:49:09.640 --> 00:49:13.640
It's mostly around full stack Node.js applications.

1048
00:49:13.640 --> 00:49:16.340
You know, we're not focused on enterprises right now at all.

1049
00:49:16.340 --> 00:49:20.740
We're trying to focus on, you know, the startups and the agencies that are trying to build things,

1050
00:49:20.740 --> 00:49:22.540
you know, for their customers.

1051
00:49:22.540 --> 00:49:27.640
And I think really the big thing is, is, you know, we live in a time right now.

1052
00:49:27.640 --> 00:49:30.540
And this is the time I thought serverless was going to bring.

1053
00:49:30.540 --> 00:49:34.040
I thought this was the sort of revolution that serverless was going to bring.

1054
00:49:34.040 --> 00:49:37.540
It was going to democratize, you know, application development.

1055
00:49:37.540 --> 00:49:43.340
And I think it has to some degree in that people who, you know, have a couple hundred bucks

1056
00:49:43.340 --> 00:49:48.940
can go ahead and build something that, that scales and has all kinds of amazing features,

1057
00:49:48.940 --> 00:49:53.340
things that took us months and months and months to engineer, you know,

1058
00:49:53.340 --> 00:49:57.240
even in 2009, 2010, things like that.

1059
00:49:57.240 --> 00:49:59.240
You had massive engineering teams to build these things.

1060
00:49:59.240 --> 00:50:03.440
Now you can have one or two people that can build something pretty amazing,

1061
00:50:03.440 --> 00:50:05.240
you know, in just a few days.

1062
00:50:05.240 --> 00:50:08.240
But it does require a fair amount of skills

1063
00:50:08.240 --> 00:50:11.340
and a fair amount of knowledge in order to be able to do that.

1064
00:50:11.340 --> 00:50:14.340
And I think we live now, especially with AI

1065
00:50:14.340 --> 00:50:17.140
and some of these other things that are happening where it's like,

1066
00:50:17.140 --> 00:50:21.840
I don't care if you're, you know, in your college dorm room like I was or, you know,

1067
00:50:21.840 --> 00:50:26.040
you're a multi-billion, you know, multinational billion-dollar corporation,

1068
00:50:26.040 --> 00:50:29.540
you know, the ability for somebody to express their idea

1069
00:50:29.540 --> 00:50:33.740
and see if it changes something for the good, hopefully for the good.

1070
00:50:33.740 --> 00:50:38.240
You know, that's something that I think that we need to continue to lean into.

1071
00:50:38.240 --> 00:50:41.940
And that's why I love, I mean, I love platforms like Vercel and, you know,

1072
00:50:41.940 --> 00:50:46.240
Fly.io and some of these other ones that make that experience very, very easy

1073
00:50:46.240 --> 00:50:47.740
for people to just kind of get started.

1074
00:50:47.740 --> 00:50:52.740
I think the problem is that for companies that, you know,

1075
00:50:52.740 --> 00:50:56.940
or for when it goes beyond that, when you get to that graduation problem,

1076
00:50:56.940 --> 00:51:00.340
and then people start thinking like, I actually kind of want to be on AWS or GCP

1077
00:51:00.340 --> 00:51:03.440
or one of these other ones, you know, and that's one of the things that we're trying to do

1078
00:51:03.440 --> 00:51:06.940
with Ampt as well as to say, look, we want you to be able to get started easy,

1079
00:51:06.940 --> 00:51:11.640
you know, easy, build anything you want to build, but then also not worry about graduation, right?

1080
00:51:11.640 --> 00:51:14.840
Like if we catch the next Uber really, really early and it's just, you know,

1081
00:51:14.840 --> 00:51:20.740
five people in a garage, you know, I would like to think that the way we deploy their app to AWS,

1082
00:51:20.740 --> 00:51:26.440
not only will scale as the throughput scales, right, and the patterns will adapt and evolve,

1083
00:51:26.440 --> 00:51:29.840
but we'll be able to support them, you know, through the lifetime of that business

1084
00:51:29.840 --> 00:51:32.840
because if they were to go and rebuild it themselves on AWS,

1085
00:51:32.840 --> 00:51:35.540
they'd just do exactly what we were doing, but probably not as good

1086
00:51:35.540 --> 00:51:42.440
because of all the experience and the benefit we have of seeing all the other customers use the platform.

1087
00:51:42.440 --> 00:51:47.440
Is it the plan then for, given that Ampt is not a pass per se,

1088
00:51:47.440 --> 00:51:52.840
to let people kind of run Ampt in their own AWS organization,

1089
00:51:52.840 --> 00:51:55.540
full kind of visibility over the high-level abstraction,

1090
00:51:55.540 --> 00:51:57.440
but also the low-level bits?

1091
00:51:57.440 --> 00:52:01.540
Yeah, yeah. So actually that, so this is something that we are trying to figure out.

1092
00:52:01.540 --> 00:52:04.440
And again, we just launched, right, just over a month ago, right?

1093
00:52:04.440 --> 00:52:10.940
So, you know, we've been experimenting with trying to make the platform do what people need it to do.

1094
00:52:10.940 --> 00:52:12.840
How we deliver the platform to people,

1095
00:52:12.840 --> 00:52:15.140
that's something we've been experimenting with and trying to figure it out.

1096
00:52:15.140 --> 00:52:19.140
So we do have some customers where we deploy directly to their AWS accounts.

1097
00:52:19.140 --> 00:52:21.240
That's exactly what we would love to do.

1098
00:52:21.240 --> 00:52:27.240
We have our control plane that allows us to do all the AWS account creation and setup and so forth.

1099
00:52:27.240 --> 00:52:29.940
We have a way that we can plug these things in, we call them providers,

1100
00:52:29.940 --> 00:52:32.440
but essentially we can plug in your AWS organization

1101
00:52:32.440 --> 00:52:36.540
and we can spin up and tear down AWS accounts for you in your organization.

1102
00:52:36.540 --> 00:52:38.540
Of course, orgs you have to apply for quotas

1103
00:52:38.540 --> 00:52:40.440
and there's some other things like that that you've got to deal with.

1104
00:52:40.440 --> 00:52:46.040
But, so that's one of the things that we would absolutely love to do and have that as an option,

1105
00:52:46.040 --> 00:52:49.940
especially for larger customers that want to manage all that themselves.

1106
00:52:49.940 --> 00:52:53.140
We'll just spin up and tear down these accounts for you and do all the deployments.

1107
00:52:53.140 --> 00:52:56.740
And everything, like I said, everything runs within each environment.

1108
00:52:56.740 --> 00:52:58.740
So even the build step actually runs in the environment.

1109
00:52:58.740 --> 00:53:01.240
We did this for isolation purposes as well,

1110
00:53:01.240 --> 00:53:03.540
so that we weren't building them on some central system

1111
00:53:03.540 --> 00:53:05.240
and then sending them off to your environment.

1112
00:53:05.240 --> 00:53:09.040
So there's a bunch of security that is built into that.

1113
00:53:09.040 --> 00:53:11.140
For other accounts though,

1114
00:53:11.140 --> 00:53:15.740
one of the things that we didn't want to do is burden people with having to set up AWS accounts.

1115
00:53:15.740 --> 00:53:20.940
So even if you, you know, so if you want to just deploy, you know, your application quickly

1116
00:53:20.940 --> 00:53:24.940
and test it and whatever, we're more than happy to manage those accounts for you

1117
00:53:24.940 --> 00:53:30.440
and own those accounts and then just sort of bill through and you pay for whatever your usage is.

1118
00:53:30.440 --> 00:53:32.740
But we would love to get to a point where, you know,

1119
00:53:32.740 --> 00:53:36.140
I think a lot of people will fall into the category where it's like,

1120
00:53:36.140 --> 00:53:37.740
we want to own our production account.

1121
00:53:37.740 --> 00:53:39.440
Like we want that to be in our AWS.

1122
00:53:39.440 --> 00:53:43.840
And again, if you have like 10 apps in Ampt, you know,

1123
00:53:43.840 --> 00:53:48.240
we might be managing 40, 50, 60 AWS accounts for you right now.

1124
00:53:48.240 --> 00:53:50.340
So you might want to set up multiple production accounts.

1125
00:53:50.340 --> 00:53:51.540
It depends on how you want to do it.

1126
00:53:51.540 --> 00:53:55.940
But essentially we do want to pass this through and let somebody,

1127
00:53:55.940 --> 00:53:57.740
we want to be a deployment platform, right?

1128
00:53:57.740 --> 00:54:01.340
If anybody, you know, maybe to answer this question, who do we compete with?

1129
00:54:01.340 --> 00:54:02.640
We're not competing with Vercel.

1130
00:54:02.640 --> 00:54:06.940
We're not competing with, you know, Netlify or Fly.io.

1131
00:54:06.940 --> 00:54:10.240
Like we think we compete with Pulumi and Terraform.

1132
00:54:10.240 --> 00:54:14.140
Like we're a different way to get your code into the cloud, right?

1133
00:54:14.140 --> 00:54:18.940
Pulumi and Terraform and CDK, all those are ways in which you define infrastructure.

1134
00:54:18.940 --> 00:54:21.840
And then of course you have to set up CI, CD and some of those other things.

1135
00:54:21.840 --> 00:54:24.840
We're trying to capture all of that and say we're an alternative to Pulumi

1136
00:54:24.840 --> 00:54:29.240
and an alternative to Terraform that really reduces that cognitive load for you.

1137
00:54:29.240 --> 00:54:34.040
So that's ultimately where we want to get to is let you deploy to your own AWS accounts.

1138
00:54:34.040 --> 00:54:38.140
We also don't want to burden somebody with having to do that if they don't need to.

1139
00:54:38.140 --> 00:54:42.040
So we'll find the right way to balance that, I think.

1140
00:54:42.040 --> 00:54:47.440
And then the whole point is that, you know, we have some internal connectors that we've developed

1141
00:54:47.440 --> 00:54:50.940
that we haven't sort of made available to our customers yet.

1142
00:54:50.940 --> 00:54:56.340
But the goal is to say if you want to spin up a bunch of AWS accounts with Ampt

1143
00:54:56.340 --> 00:54:59.840
and you've got some Ampt applications running, but then maybe you have another account,

1144
00:54:59.840 --> 00:55:03.440
you know, that you're running that has some bespoke machine learning thing

1145
00:55:03.440 --> 00:55:06.640
or whatever you're doing in there, and you want to be able to connect to the database

1146
00:55:06.640 --> 00:55:11.240
or interact with that, you know, that we would just use OIDC or something

1147
00:55:11.240 --> 00:55:16.040
to generate temporary credentials from all your environments as you interact with those, right?

1148
00:55:16.040 --> 00:55:19.940
So we don't think we're going to own 100% of your workloads necessarily.

1149
00:55:19.940 --> 00:55:22.440
I mean, we can for certain companies.

1150
00:55:22.440 --> 00:55:26.140
But for ones that want to expand, like we really just want to be a partner in your AWS journey

1151
00:55:26.140 --> 00:55:28.640
and make sure that you can do the things you need to do.

1152
00:55:28.640 --> 00:55:33.140
And as much of that heavy lifting as we can get rid of for you or the undifferentiated heavy lifting,

1153
00:55:33.140 --> 00:55:37.540
like we want to fill that gap for you and, you know,

1154
00:55:37.540 --> 00:55:43.140
and just get you where you need to be as fast as possible with the best developer experience possible.

1155
00:55:43.140 --> 00:55:46.440
Yeah, let's change a little bit topic before we close off.

1156
00:55:46.440 --> 00:55:49.240
I think we are going close to the end.

1157
00:55:49.240 --> 00:55:53.440
I guess there might be people listening to us that are thinking about,

1158
00:55:53.440 --> 00:55:58.040
I don't know, using all this technology that we talk about every day with AWS,

1159
00:55:58.040 --> 00:56:04.540
and serverless in general, and build startups, build companies, build ambitious projects.

1160
00:56:04.540 --> 00:56:08.840
And it's something that you have done multiple times based on what you're telling us today.

1161
00:56:08.840 --> 00:56:14.540
And I guess the generic question is like, do you have any piece of advice,

1162
00:56:14.540 --> 00:56:21.740
piece of wisdom, encouragement that you want to give to listeners that might be falling into this category of people?

1163
00:56:21.740 --> 00:56:27.540
Yes, I would say move to the mountains and be a goat farmer and just get away from all of this stuff

1164
00:56:27.540 --> 00:56:33.840
because it is complex.

1165
00:56:33.840 --> 00:56:42.940
But no, I mean, I think you have to, you know, look, technology is what everything is.

1166
00:56:42.940 --> 00:56:46.540
I mean, every company you work for is a technology company or a software company now, right?

1167
00:56:46.540 --> 00:56:53.640
I mean, pretty much everybody, you know, and so whether you're working in a startup that's building another startup to work,

1168
00:56:53.640 --> 00:56:57.340
to solve some dev problem for people that are building,

1169
00:56:57.340 --> 00:57:00.040
I mean, there's a million different things, but if you look around,

1170
00:57:00.040 --> 00:57:04.840
you'll see that every organization out there is trying to solve some sort of technological problem.

1171
00:57:04.840 --> 00:57:08.740
They're using the cloud or most of them are using the cloud to do it now.

1172
00:57:08.740 --> 00:57:18.340
It would very much so behoove you in your career to take it seriously and understand that, you know, the cloud,

1173
00:57:18.340 --> 00:57:23.940
I think there's no better place to be building applications and in the cloud.

1174
00:57:23.940 --> 00:57:26.540
On-prem, things like that, I'm sure some of it will still exist,

1175
00:57:26.540 --> 00:57:37.440
but my advice is, you know, you've got to start, you've got to pick a couple of technologies and go deep on those.

1176
00:57:37.440 --> 00:57:39.840
I think that a lot of people talk about the T-shaped engineer, you know,

1177
00:57:39.840 --> 00:57:46.240
it's like you have a lot of sort of low-level knowledge or high-level knowledge, I guess, of a bunch of things,

1178
00:57:46.240 --> 00:57:48.340
but then you go really deep on one.

1179
00:57:48.340 --> 00:57:55.040
So, you know, I would say you don't need to know Rust and Python and JavaScript and Go,

1180
00:57:55.040 --> 00:57:56.940
and you don't need to learn all these different languages, right?

1181
00:57:56.940 --> 00:57:59.240
Like there's a bunch of popular languages out there.

1182
00:57:59.240 --> 00:58:02.940
If you're doing data stuff like focus on Python and stuff like that,

1183
00:58:02.940 --> 00:58:07.740
if you're doing more front-end, you know, obviously JavaScript and JavaScript is still a great language.

1184
00:58:07.740 --> 00:58:13.740
We're in a JavaScript renaissance again with BUN and Dino and all of these front-end frameworks, right?

1185
00:58:13.740 --> 00:58:17.140
So everybody's, when people count out JavaScript, I'm like, what are you doing?

1186
00:58:17.140 --> 00:58:20.740
Like JavaScript is going to be here in a hundred years.

1187
00:58:20.740 --> 00:58:23.140
People are still going to be writing JavaScript for some reason.

1188
00:58:23.140 --> 00:58:28.840
Even when, you know, I think AI is going to code in JavaScript just because it's like we can't get away from it.

1189
00:58:28.840 --> 00:58:31.940
People love it for some reason. They love to hate it, but they also love it.

1190
00:58:31.940 --> 00:58:38.540
So, but in terms of AWS, you know, you've got to start looking at some of these different services

1191
00:58:38.540 --> 00:58:42.140
and obviously whatever your role is at the company you're at,

1192
00:58:42.140 --> 00:58:48.440
it would be very helpful to pick something that is, like DynamoDB is an interesting one,

1193
00:58:48.440 --> 00:58:53.240
I think that is worth, you know, sort of focusing some time on because there's a lot of things you can do there.

1194
00:58:53.240 --> 00:58:57.140
But I mean, just, you know, just Lambda in general.

1195
00:58:57.140 --> 00:59:03.040
I mean, honestly, Step Functions is one of those things where I think you could get a PhD in Step Functions now

1196
00:59:03.040 --> 00:59:04.140
because it does so much, right?

1197
00:59:04.140 --> 00:59:11.340
So, you know, so my advice would be pick a couple of these things that make sense that all kind of work together

1198
00:59:11.340 --> 00:59:15.940
and really focus on learning the ins and outs of those.

1199
00:59:15.940 --> 00:59:19.340
And then get a high, you know, get a high level knowledge of all these other things.

1200
00:59:19.340 --> 00:59:21.940
Be aware of what these other things do.

1201
00:59:21.940 --> 00:59:23.540
You don't need to be an expert in everything.

1202
00:59:23.540 --> 00:59:24.940
You can't be an expert in everything.

1203
00:59:24.940 --> 00:59:30.540
But I would say, you know, focus on a few things that really, you know,

1204
00:59:30.540 --> 00:59:34.140
a couple of interesting services and go deep on those.

1205
00:59:34.140 --> 00:59:37.740
And again, if you want to get noticed, start writing about it.

1206
00:59:37.740 --> 00:59:43.340
I know not everybody is sort of built for that, but write about it, talk about it,

1207
00:59:43.340 --> 00:59:48.340
you know, post about it on Twitter, you read an interesting article or X or whatever we're calling it now, right?

1208
00:59:48.340 --> 00:59:51.940
Like, I mean, feel free to, you know, to share your thoughts.

1209
00:59:51.940 --> 00:59:55.340
And the last thing I'll say about, again, sharing thoughts.

1210
00:59:55.340 --> 00:59:58.940
So many people ask me this, they're like, yeah, but I just read an article the other day

1211
00:59:58.940 --> 01:00:04.640
that literally said exactly what I was going to say about a particular topic.

1212
01:00:04.640 --> 01:00:09.140
And I always say to them, I guarantee you, you were going to say it a little bit differently.

1213
01:00:09.140 --> 01:00:12.940
And when you say something a little bit differently,

1214
01:00:12.940 --> 01:00:18.140
and that's maybe why I talk so much, I try to explain things like eight different ways.

1215
01:00:18.140 --> 01:00:19.540
It's just because of the way my brain works.

1216
01:00:19.540 --> 01:00:23.140
But when you explain something just a little bit differently,

1217
01:00:23.140 --> 01:00:28.640
that can click with somebody in a way that the other article didn't, right?

1218
01:00:28.640 --> 01:00:31.940
And so you maybe you present the way that you do your demo differently.

1219
01:00:31.940 --> 01:00:37.340
Maybe your example is different and it connects better with somebody's, you know, current situation or whatever.

1220
01:00:37.340 --> 01:00:44.540
So I would say, you know, I'm happy to read an article about, you know, whatever it is,

1221
01:00:44.540 --> 01:00:50.740
you know, turning off a dev machines with a Lambda function every night, scheduling the shutdown.

1222
01:00:50.740 --> 01:00:52.740
I've read a hundred of those at least.

1223
01:00:52.740 --> 01:00:57.840
I'm willing to keep reading those to see if there's something else in there that sparks something.

1224
01:00:57.840 --> 01:01:01.040
And again, content goes out of date very, very quick.

1225
01:01:01.040 --> 01:01:06.440
We talked about this idea of, you know, of how quickly these, or we talked about all these different features.

1226
01:01:06.440 --> 01:01:08.440
Content goes out of date very, very quickly, right?

1227
01:01:08.440 --> 01:01:10.740
So if somebody wrote an article three months ago,

1228
01:01:10.740 --> 01:01:17.040
it's very possible that you could write the same article today with new information that would change,

1229
01:01:17.040 --> 01:01:20.340
you know, that would change someone's perception of it or help somebody out in a different way.

1230
01:01:20.340 --> 01:01:23.540
So again, I know not everybody likes to write and share.

1231
01:01:23.540 --> 01:01:25.340
It can be scary to put yourself out there,

1232
01:01:25.340 --> 01:01:32.040
but I would say it is definitely a massive thing that can help with your career.

1233
01:01:32.040 --> 01:01:36.240
Cool. And I guess the other piece of advice, going back to your first point, is don't use ChatGPT too much.

1234
01:01:36.240 --> 01:01:40.340
Because you're now a human GenAI detector and it won't get in Off-by-None.

1235
01:01:40.340 --> 01:01:42.640
Don't use it for content creation.

1236
01:01:42.640 --> 01:01:43.740
Definitely use it for code.

1237
01:01:43.740 --> 01:01:46.040
I mean, I think that I've seen...

1238
01:01:46.040 --> 01:01:47.440
Or for reviewing your content, right?

1239
01:01:48.940 --> 01:01:51.940
Yep. It's great for checking grammar and some of these other things.

1240
01:01:54.040 --> 01:01:57.240
So I think the future of Ampt looks pretty promising.

1241
01:01:57.240 --> 01:02:03.240
I'm really curious, like this idea of a smart compute and kind of almost self-healing

1242
01:02:03.240 --> 01:02:08.740
and self-optimizing infrastructure that moves from one service to another based on cost

1243
01:02:08.740 --> 01:02:10.840
and all these other things is really good.

1244
01:02:10.840 --> 01:02:15.640
I'm also kind of curious, will somebody eventually invent some sort of data sink

1245
01:02:15.640 --> 01:02:19.740
where I can just put data into it and it doesn't matter like what my schema is.

1246
01:02:19.740 --> 01:02:25.240
And it just kind of figures out based on how I pull the data back out, how to store it.

1247
01:02:25.240 --> 01:02:28.040
Where do you think it's going to go in the next three or five years?

1248
01:02:28.040 --> 01:02:31.840
I mean between Ampt but also AWS and other players.

1249
01:02:31.840 --> 01:02:34.740
Are there any kind of crystal ball moments you have

1250
01:02:34.740 --> 01:02:38.040
where you can see maybe where this is heading?

1251
01:02:38.040 --> 01:02:43.640
Yeah, I mean, I think that as much as I've tried to fight it in some way,

1252
01:02:43.640 --> 01:02:46.040
I think AI is going to play a huge role here.

1253
01:02:46.040 --> 01:02:51.440
And I know everybody talks about this, but I think it's going to be a little bit different.

1254
01:02:51.440 --> 01:02:55.440
It's going to be applied differently than I think a lot of people are thinking about it now.

1255
01:02:55.440 --> 01:02:58.040
Everybody's using it as like code completion and some of those things.

1256
01:02:58.040 --> 01:02:59.740
I think those are all great use cases.

1257
01:02:59.740 --> 01:03:03.040
I think this idea of AI somehow figuring out, you know,

1258
01:03:03.040 --> 01:03:09.640
what's the best way to deploy infrastructure or even to optimize things like data structures.

1259
01:03:09.640 --> 01:03:11.140
I think that's going to be part of it.

1260
01:03:11.140 --> 01:03:15.140
I think there's going to need to be heuristics and human review and some of that.

1261
01:03:15.140 --> 01:03:23.340
But yeah, I mean, I think that what we're seeing now is an explosion of competition to AWS

1262
01:03:23.340 --> 01:03:25.740
in very, very small pieces.

1263
01:03:25.740 --> 01:03:30.640
The serverless database space race is what I call it is this idea of like,

1264
01:03:30.640 --> 01:03:35.240
you know, between Zeta and PlanetScale and the new one just launched the other day,

1265
01:03:35.240 --> 01:03:37.340
the Nile or Nile.dev, whatever it is,

1266
01:03:37.340 --> 01:03:42.640
like there's just more and more of these different services are coming out that are all disparate, right?

1267
01:03:42.640 --> 01:03:48.840
And I think that it's a good thing that somebody's trying to solve something differently,

1268
01:03:48.840 --> 01:03:52.440
but at the same time, I see a lot of larger companies

1269
01:03:52.440 --> 01:03:58.040
and a lot of enterprises are just focusing their efforts back on the things that AWS provides.

1270
01:03:58.040 --> 01:04:01.440
So I do think that there'll be a consolidation.

1271
01:04:01.440 --> 01:04:06.040
I think that if anybody comes up with a really interesting innovation other than just,

1272
01:04:06.040 --> 01:04:09.340
you know, we can scale your database a little bit better.

1273
01:04:09.340 --> 01:04:11.340
I think that, you know, there's plenty of room here.

1274
01:04:11.340 --> 01:04:13.240
There's plenty of space for people to experiment,

1275
01:04:13.240 --> 01:04:18.640
but I would like to see some consolidation back into a few of the major players,

1276
01:04:18.640 --> 01:04:20.940
not because I don't like competition or the diversity of it,

1277
01:04:20.940 --> 01:04:26.440
but I like the idea of the centralization of these sort of systems.

1278
01:04:26.440 --> 01:04:29.440
And I think AWS is the platform that most people are going to be building on.

1279
01:04:29.440 --> 01:04:33.240
Again, I get it, GCP and Azure out there as well, Oracle Cloud.

1280
01:04:33.240 --> 01:04:36.140
Cloudflare is doing some pretty amazing things.

1281
01:04:36.140 --> 01:04:41.840
But I do think that again, Cloudflare is still a bit at that surface level almost

1282
01:04:41.840 --> 01:04:45.440
where it's like some of the more deep applications that you would be building

1283
01:04:45.440 --> 01:04:48.340
are just things that Cloudflare is not going to support, at least not right now.

1284
01:04:48.340 --> 01:04:50.840
I mean, I hope, you know, that it expands in the future.

1285
01:04:50.840 --> 01:04:55.940
But so again, Crystal Ball, I don't, you know, all I can tell you is any prediction I have ever made,

1286
01:04:55.940 --> 01:04:57.540
I don't think has ever come true, right?

1287
01:04:57.540 --> 01:04:59.340
So that's why I don't gamble.

1288
01:04:59.340 --> 01:05:02.240
That's why I don't bet on sports or things like that

1289
01:05:02.240 --> 01:05:04.940
because I have no idea what the outcome is going to be.

1290
01:05:04.940 --> 01:05:07.240
And I'm not sure I trust myself enough to do it.

1291
01:05:07.240 --> 01:05:11.240
But I will say where I hope things end up.

1292
01:05:11.240 --> 01:05:14.840
And I really, really like this idea of self-provisioning runtimes.

1293
01:05:14.840 --> 01:05:18.040
I think it is something that is needed.

1294
01:05:18.040 --> 01:05:21.540
And I think it's something that, you know, is just a matter of time.

1295
01:05:21.540 --> 01:05:22.640
I think it's inevitable.

1296
01:05:22.640 --> 01:05:27.540
And the reason why I say that is because, I mean, how many people now are like,

1297
01:05:27.540 --> 01:05:32.240
hey, you know, I don't like using Rust or one of these other languages

1298
01:05:32.240 --> 01:05:35.040
because I really like to malloc my own memory, right?

1299
01:05:35.040 --> 01:05:38.640
Like I really want to know how much memory this is being used there.

1300
01:05:38.640 --> 01:05:41.640
Or like, don't run an automatic garbage collection for me.

1301
01:05:41.640 --> 01:05:45.340
I'll tell you when I want my automatic, when I want garbage collection to be run.

1302
01:05:45.340 --> 01:05:48.840
Like, there are just so many of these things that we've abstracted away.

1303
01:05:48.840 --> 01:05:50.940
We don't write ones and zeros anymore, right?

1304
01:05:50.940 --> 01:05:52.240
We're not doing machine code.

1305
01:05:52.240 --> 01:05:54.940
We're writing an abstraction.

1306
01:05:54.940 --> 01:05:57.240
And every programming language right now is an abstraction.

1307
01:05:57.240 --> 01:06:00.940
And I feel like you take something like the CDK

1308
01:06:00.940 --> 01:06:04.740
and that feels like an abstraction on top of CloudFormation

1309
01:06:04.740 --> 01:06:07.040
and, you know, and the idea of IAC.

1310
01:06:07.040 --> 01:06:09.940
But it still feels very much like you're choosing primitives.

1311
01:06:09.940 --> 01:06:11.640
You're still making a lot of decisions.

1312
01:06:11.640 --> 01:06:16.740
You're still, you know, you're, I still feel like it's machine code for the cloud.

1313
01:06:16.740 --> 01:06:20.440
And so we always get this argument of people who are like,

1314
01:06:20.440 --> 01:06:21.740
well, I need more control.

1315
01:06:21.740 --> 01:06:24.740
And it's like, well, the people who are yelling about control

1316
01:06:24.740 --> 01:06:28.740
don't ever seem to change any of their default settings, right?

1317
01:06:28.740 --> 01:06:30.840
Like how many of your Lambda functions are still at, you know,

1318
01:06:30.840 --> 01:06:34.040
one gig or whatever, or yeah, one gig.

1319
01:06:34.040 --> 01:06:35.840
Yeah, is it a gig, a meg, whatever it is, right?

1320
01:06:35.840 --> 01:06:37.840
Yeah, so, you know, like it's set to 1000.

1321
01:06:37.840 --> 01:06:38.940
Yeah, 1024 megs, right?

1322
01:06:38.940 --> 01:06:42.040
So how many people just never change those settings?

1323
01:06:42.040 --> 01:06:46.140
Or don't even know that, I'll use this example again,

1324
01:06:46.140 --> 01:06:47.940
tumbling windows exist in Lambda, you know what I mean?

1325
01:06:47.940 --> 01:06:50.040
Like they just don't know these things exist.

1326
01:06:50.040 --> 01:06:51.340
They don't make these changes.

1327
01:06:51.340 --> 01:06:52.640
They talk about control.

1328
01:06:52.640 --> 01:06:55.540
And I think that we need to get to a point where we say,

1329
01:06:55.540 --> 01:06:59.740
I think the cloud is smart enough to figure out how to route a,

1330
01:06:59.740 --> 01:07:03.440
you know, an HTTP request to some thing of compute

1331
01:07:03.440 --> 01:07:08.240
that connects to a database that can load that with some sort of guarantees involved.

1332
01:07:08.240 --> 01:07:13.040
And that doesn't have to be configured manually in a configuration file

1333
01:07:13.040 --> 01:07:14.240
for us to figure that stuff out.

1334
01:07:14.240 --> 01:07:17.940
So I don't know where self provisioning runtimes are going to go,

1335
01:07:17.940 --> 01:07:23.040
but I do think that we are going to see a revolution in the near future

1336
01:07:23.040 --> 01:07:25.840
where, you know, there's just going to be,

1337
01:07:25.840 --> 01:07:27.540
there's too many people building in the cloud.

1338
01:07:27.540 --> 01:07:33.940
And if we let AI solve this, I'm very, very nervous about AI deploying stuff to the cloud on our behalf.

1339
01:07:33.940 --> 01:07:35.840
So I think there's got to be a better way.

1340
01:07:35.840 --> 01:07:39.240
I think self provisioning runtimes are the answer to that.

1341
01:07:41.440 --> 01:07:42.740
That's really exciting.

1342
01:07:42.740 --> 01:07:45.240
I definitely don't disagree with that prediction,

1343
01:07:45.240 --> 01:07:48.040
but yeah, I will probably talk again in three, five years time

1344
01:07:48.040 --> 01:07:51.040
and see what is the status of things then.

1345
01:07:51.040 --> 01:07:52.740
So before we wrap things up,

1346
01:07:52.740 --> 01:07:57.440
is there any link or place you want to share for people to follow you

1347
01:07:57.440 --> 01:08:00.840
or to basically follow up on everything you just shared with us

1348
01:08:00.840 --> 01:08:03.940
and maybe deep dive on some of the topics?

1349
01:08:03.940 --> 01:08:08.340
Yeah, actually, you know, I would love it if people check out Ampt

1350
01:08:08.340 --> 01:08:09.940
and give it a try.

1351
01:08:09.940 --> 01:08:14.940
It's getampt.com (and that's A-M-P-T) dot com.

1352
01:08:14.940 --> 01:08:16.540
You can check out my blog.

1353
01:08:16.540 --> 01:08:19.340
I don't write there as much as I wish I did,

1354
01:08:19.340 --> 01:08:23.540
but jeremydaly.com, D-A-L-Y dot com.

1355
01:08:23.540 --> 01:08:27.540
And then I'm on X, jeremy_daly,

1356
01:08:27.540 --> 01:08:30.040
and obviously offbynone.io.

1357
01:08:30.040 --> 01:08:33.140
You know, you can find all my stuff, all my links usually,

1358
01:08:33.140 --> 01:08:34.340
at those different places.

1359
01:08:34.340 --> 01:08:39.540
But yeah, I mean, I love, again, I love hearing from new people.

1360
01:08:39.540 --> 01:08:43.340
I love meeting new people and hearing new perspectives on stuff.

1361
01:08:43.340 --> 01:08:47.340
And if you've got articles to share, please, you know, send them to me

1362
01:08:47.340 --> 01:08:51.140
and I'm happy to take a look at them and share them in the newsletter

1363
01:08:51.140 --> 01:08:52.740
if it makes sense to do that.

1364
01:08:52.740 --> 01:08:56.540
And yeah, but really, really want to get...

1365
01:08:56.540 --> 01:09:01.140
We're changing, we know we're changing a paradigm here with Ampt

1366
01:09:01.140 --> 01:09:05.340
and we know that it's, you know, it's going to be a slog

1367
01:09:05.340 --> 01:09:08.140
to get people to understand why, you know,

1368
01:09:08.140 --> 01:09:11.740
I don't think it's hard to get people to understand why it's different,

1369
01:09:11.740 --> 01:09:17.140
but like coming, you know, the objections around, you know,

1370
01:09:17.140 --> 01:09:20.340
control and some of these other things are certainly, you know,

1371
01:09:20.340 --> 01:09:21.340
the things that we get.

1372
01:09:21.340 --> 01:09:24.540
But we've got some customers that we think, you know,

1373
01:09:24.540 --> 01:09:27.740
well, they've told us that we're revolutionizing the way

1374
01:09:27.740 --> 01:09:29.540
that they're building applications in the cloud.

1375
01:09:29.540 --> 01:09:31.440
We're saving them a tremendous amount of time and so forth.

1376
01:09:31.440 --> 01:09:35.540
So we're excited about the possibilities of this.

1377
01:09:35.540 --> 01:09:39.040
So yeah, so the more feedback we get, the more we can make this,

1378
01:09:39.040 --> 01:09:43.440
you know, make sense for people to use will help this, you know,

1379
01:09:43.440 --> 01:09:46.540
help this movement and hopefully make, like we said,

1380
01:09:46.540 --> 01:09:49.540
sort of democratize the cloud for even more people.

1381
01:09:49.540 --> 01:09:51.540
Yeah, we'll make sure that all the links you share

1382
01:09:51.540 --> 01:09:53.340
are going to be available in the show notes.

1383
01:09:53.340 --> 01:09:56.740
So for people watching this, listening to this, don't worry,

1384
01:09:56.740 --> 01:09:59.540
you'll get all the links there in the description.

1385
01:09:59.540 --> 01:10:02.240
Jeremy, it has been a real pleasure to have you on the show.

1386
01:10:02.240 --> 01:10:02.940
So thank you.

1387
01:10:02.940 --> 01:10:05.240
Thank you so much for joining us today.

1388
01:10:05.240 --> 01:10:07.140
And thanks everyone for tuning in.

1389
01:10:07.140 --> 01:10:09.540
We look forward to reading all your comments.

1390
01:10:09.540 --> 01:10:14.340
And so definitely check out the chat, check out the comment section

1391
01:10:14.340 --> 01:10:16.640
on YouTube and share all your opinions.

1392
01:10:16.640 --> 01:10:19.540
We are always reading all of that and it's always amazing to have

1393
01:10:19.540 --> 01:10:22.740
conversation following up every episode and see what people

1394
01:10:22.740 --> 01:10:25.640
actually think about and what resonates with them.

1395
01:10:25.640 --> 01:10:28.640
So thanks again everyone and we look forward to catching up with you

1396
01:10:28.640 --> 01:10:30.340
in the next episodes.

1397
01:10:30.340 --> 01:10:30.840
Bye.

1398
01:10:30.840 --> 01:10:55.840
Thank you so much.
