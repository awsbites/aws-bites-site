WEBVTT

1
00:00:00.000 --> 00:00:05.120
Hello folks, I'm just back from re:Invent, the biggest AWS conference of the year and

2
00:00:05.120 --> 00:00:08.380
probably the biggest conference where I've been so far.

3
00:00:08.380 --> 00:00:11.860
re:Invent is hosted in Las Vegas and it was on last week, so I just came back.

4
00:00:11.860 --> 00:00:15.960
I'm still a bit jet-lagged, but I'm super excited because I had the pleasure to meet

5
00:00:15.960 --> 00:00:21.180
many experts and thought leaders in the cloud and AWS space and they decided to share some

6
00:00:21.180 --> 00:00:23.380
of their bold opinions with us.

7
00:00:23.380 --> 00:00:27.820
So today we are going to get expert opinions about topics such as how to get started with

8
00:00:27.820 --> 00:00:33.540
the cloud effectively, favorite AWS announcements, bold predictions for the future of serverless,

9
00:00:33.540 --> 00:00:37.540
should you go multi-cloud or not, and of course there is going to be a little bit of Gen AI

10
00:00:37.540 --> 00:00:40.540
because you cannot escape that these days.

11
00:00:40.540 --> 00:00:45.820
My name is Luciano and thanks for joining me for another episode of AWS Bites podcast.

12
00:00:45.820 --> 00:00:56.860
AWS Bites is brought to you by fourTheorem,

13
00:00:56.860 --> 00:01:00.900
the ultimate AWS partner for modern applications on AWS.

14
00:01:00.900 --> 00:01:07.660
We can help you to be successful with AWS, so check us out at fourTheorem.com.

15
00:01:07.660 --> 00:01:11.500
So let's start with favorite AWS announcements.

16
00:01:11.500 --> 00:01:16.040
The first opinion we have for you is from our friend Alex Kearns, Principal Solution

17
00:01:16.040 --> 00:01:21.820
Architect at Ubertas Consulting, who has an astonishing collection of AWS certifications,

18
00:01:21.820 --> 00:01:24.500
which is 8 different certifications.

19
00:01:24.500 --> 00:01:30.900
So we ask Alex, what's your favorite AWS announcement so far?

20
00:01:30.900 --> 00:01:36.700
We're only on Monday, but my favorite announcement from reInvent so far is the ability, or to

21
00:01:36.700 --> 00:01:42.980
at least in preview, the ability to take applications that you've built in the console and convert

22
00:01:42.980 --> 00:01:45.260
them to infrastructure as code.

23
00:01:45.260 --> 00:01:50.340
So I believe this is only in one region at the moment, in very, very limited public preview,

24
00:01:50.340 --> 00:01:55.940
but super excited to see exactly how this works in practice.

25
00:01:55.940 --> 00:02:01.340
Things really important to encourage infrastructure as code and anything AWS can do to make it

26
00:02:01.340 --> 00:02:07.020
even easier to get there is a massive bonus in my eyes.

27
00:02:07.020 --> 00:02:12.020
The next question we asked is if you could give one piece of advice to someone starting

28
00:02:12.020 --> 00:02:15.700
their cloud journey today, what would that be?

29
00:02:15.700 --> 00:02:18.060
I think this is a great question that can help all of you

30
00:02:18.060 --> 00:02:22.060
who are just getting started with the cloud and AWS, but it can also help people that

31
00:02:22.060 --> 00:02:25.780
are involved in training or that are supporting you and your colleagues.

32
00:02:25.780 --> 00:02:30.780
So we had 3 awesome folks giving us an answer to this particular question.

33
00:02:30.780 --> 00:02:36.960
And the first one is Emily Shea, Head of Application Integrations, Go-to-Market at AWS.

34
00:02:36.960 --> 00:02:40.980
So this is one of my favorite questions, particularly because I have my own personal experience

35
00:02:40.980 --> 00:02:41.980
with it.

36
00:02:41.980 --> 00:02:44.660
So when I started at AWS, I didn't have a tech background at all.

37
00:02:44.660 --> 00:02:48.700
And so I really kind of built that up as I went with some of the certifications, but

38
00:02:48.700 --> 00:02:52.940
then also building hands on myself because I thought it'd be so much more fun if I built

39
00:02:52.940 --> 00:02:56.180
an actual kind of use case that I wanted for myself.

40
00:02:56.180 --> 00:02:59.680
So I'm actually giving a session tomorrow that's all about that journey of getting started

41
00:02:59.680 --> 00:03:03.060
from a very simple use case to solve a problem that I had.

42
00:03:03.060 --> 00:03:07.380
Mine was around wanting to get daily reminders to study Chinese language and then building

43
00:03:07.380 --> 00:03:11.580
up an increasingly complex application with serverless around that.

44
00:03:11.580 --> 00:03:15.640
My recommendation to folks is definitely start really simple with maybe just like one or

45
00:03:15.640 --> 00:03:16.700
two services.

46
00:03:16.700 --> 00:03:20.120
I think it's nice to build something around an event coming in.

47
00:03:20.120 --> 00:03:23.940
So for mine, I built a daily schedule event with EventBridge that would trigger a Lambda

48
00:03:23.940 --> 00:03:28.300
function, pull a word from S3 and then send that out with SNS as a text message.

49
00:03:28.300 --> 00:03:29.780
So it's a super basic use case.

50
00:03:29.780 --> 00:03:33.500
And then I took that and added more complexity and more features over time.

51
00:03:33.500 --> 00:03:36.980
I think getting hands on and starting simple, maybe with just an event trigger and building

52
00:03:36.980 --> 00:03:39.540
on top of that is a really nice way to get started.

53
00:03:39.540 --> 00:03:43.260
I also think that there's some really cool stuff that's come out recently around visual

54
00:03:43.260 --> 00:03:44.260
designers.

55
00:03:44.260 --> 00:03:48.220
So maybe if you want to start messing around with Application Composer to build a serverless

56
00:03:48.220 --> 00:03:52.360
application, or also the Workflow Studio for step functions that allows you to pull in

57
00:03:52.360 --> 00:03:57.220
different services and figure out the workflow that you want those services to step through.

58
00:03:57.220 --> 00:04:00.060
Those are really cool, nice visual tools to get really get a feel for how the services

59
00:04:00.060 --> 00:04:06.580
come together and then be able to export template to go and deploy that application.

60
00:04:06.580 --> 00:04:08.100
So that's really a great answer.

61
00:04:08.100 --> 00:04:09.100
Thank you, Emily.

62
00:04:09.660 --> 00:04:10.900
You should actually watch Emily's session.

63
00:04:10.900 --> 00:04:14.500
The link is in the show notes.

64
00:04:14.500 --> 00:04:20.060
Next up is Ran Isenberg, Principal Software Architect at CyberArk and a fellow AWS Server

65
00:04:20.060 --> 00:04:21.060
Hero.

66
00:04:21.060 --> 00:04:25.840
So let's hear from Ran what people should be doing when they get started with the cloud.

67
00:04:25.840 --> 00:04:30.380
My advice to you is basically don't focus on certifications too much.

68
00:04:30.380 --> 00:04:31.900
I think it's great to know it.

69
00:04:31.900 --> 00:04:33.980
I mean, it's great to have knowledge.

70
00:04:33.980 --> 00:04:35.320
It's a great in theory.

71
00:04:35.320 --> 00:04:37.660
But in order to get a job, you need to have practical knowledge.

72
00:04:37.980 --> 00:04:39.580
You need to know how to solve a problem.

73
00:04:39.580 --> 00:04:42.940
And you gain that only from actually working with the tools, right?

74
00:04:42.940 --> 00:04:44.420
It's not with theory.

75
00:04:44.420 --> 00:04:49.140
So my advice to you is basically try to build something, maybe solve a problem.

76
00:04:49.140 --> 00:04:54.140
Try to build the REST API in serverless, maybe use CDK, Terraform, whatever you want to learn.

77
00:04:54.140 --> 00:04:55.220
Just try that.

78
00:04:55.220 --> 00:04:56.660
See how it works for you.

79
00:04:56.660 --> 00:05:00.620
When you really start to do something, you really understand the corners, the edge cases,

80
00:05:00.620 --> 00:05:05.040
and you know how to test, you can learn how to test it, how to build it.

81
00:05:05.040 --> 00:05:06.680
And that's usually what I do.

82
00:05:06.680 --> 00:05:09.200
I try to do some PoC.

83
00:05:09.200 --> 00:05:11.680
I read the documentation and just try to build it.

84
00:05:11.680 --> 00:05:15.260
And that's usually how I gain the most insights.

85
00:05:15.260 --> 00:05:20.240
Then I can write a blog post about it or recommend it to my work for a design or something like that.

86
00:05:20.240 --> 00:05:27.160
So another option that you can do when you have more confidence and you have some knowledge

87
00:05:27.160 --> 00:05:30.280
is also to go to the road of code contributions.

88
00:05:30.280 --> 00:05:33.560
So usually I look for an open source that I really care about.

89
00:05:33.600 --> 00:05:40.400
I look at the issue segments, I look for maybe a label for good for first contribution, and

90
00:05:40.400 --> 00:05:42.960
I look for it and try to solve it.

91
00:05:42.960 --> 00:05:46.880
So you can talk with the team, write in the issue there.

92
00:05:46.880 --> 00:05:47.960
Hey, I can help.

93
00:05:47.960 --> 00:05:48.960
Maybe I have an idea.

94
00:05:48.960 --> 00:05:49.960
Maybe I can help.

95
00:05:49.960 --> 00:05:51.280
I can do it.

96
00:05:51.280 --> 00:05:52.280
Just try to solve it.

97
00:05:52.280 --> 00:05:56.420
Again, you're going to learn so much from just trying to solve a very specific problem

98
00:05:56.420 --> 00:05:59.060
in one of your favorites open sources.

99
00:05:59.060 --> 00:06:00.640
So that's my advice.

100
00:06:01.640 --> 00:06:03.920
Ran mentioned writing blog posts.

101
00:06:03.920 --> 00:06:05.880
He's actually a very prolific writer.

102
00:06:05.880 --> 00:06:09.360
So if you want to find out lots of interesting serverless material, make sure to check out

103
00:06:09.360 --> 00:06:11.440
his blog, RanTheBuilder.cloud

104
00:06:11.440 --> 00:06:13.480
The link is also in the show notes.

105
00:06:13.480 --> 00:06:18.060
Now we have Maxime David, software engineer at Datadog and AWS community builder.

106
00:06:18.060 --> 00:06:20.840
So maybe try not to reinvent the wheel.

107
00:06:20.840 --> 00:06:25.760
AWS has a lot of different services, so maybe there's already something for you there.

108
00:06:25.880 --> 00:06:31.080
I would highly suggest you to reach to community builders, read blogs.

109
00:06:31.080 --> 00:06:36.100
And as soon as you learn something new, maybe you should write a quick blog post about that.

110
00:06:36.100 --> 00:06:39.600
First to get feedback on it and just to make sure that you understand it well, you're using

111
00:06:39.600 --> 00:06:40.600
it well.

112
00:06:40.600 --> 00:06:43.600
So yeah, that would be my advice.

113
00:06:43.600 --> 00:06:48.440
Start to learn as quickly as possible and then try to share and receive feedback from

114
00:06:48.440 --> 00:06:49.440
that.

115
00:06:49.440 --> 00:06:51.280
Build, share and get feedback.

116
00:06:51.280 --> 00:06:54.740
This is probably a good summary for all these awesome opinions.

117
00:06:54.740 --> 00:06:59.700
So let's now move on into another topic, favorite and least favorite AWS services.

118
00:06:59.700 --> 00:07:04.020
We have Danielle Heberling, senior software engineer on an healthcare company called

119
00:07:04.020 --> 00:07:05.080
Ensomata.

120
00:07:05.080 --> 00:07:08.520
So Danielle is also an AWS Serveless Hero and a community builder.

121
00:07:08.520 --> 00:07:13.820
So let's talk about Danielle's favorite AWS server services and of course the least favorite

122
00:07:13.820 --> 00:07:15.700
ones as well.

123
00:07:15.700 --> 00:07:19.540
Favorite thing about AWS by far is definitely the community.

124
00:07:19.540 --> 00:07:26.940
I do know that one of AWS's principles is customer obsession and I think they do

125
00:07:26.940 --> 00:07:33.000
a really great job with the community in terms of more active community members getting recognition,

126
00:07:33.000 --> 00:07:36.980
getting opportunities to talk to the service teams.

127
00:07:36.980 --> 00:07:41.860
Mostly speaking about the community builders program and the heroes program.

128
00:07:41.860 --> 00:07:44.660
So that's definitely my favorite.

129
00:07:44.660 --> 00:07:51.380
My least favorite part about AWS is there's a lot of services and there's some services

130
00:07:51.380 --> 00:07:55.540
that do the same thing yet slightly different.

131
00:07:55.540 --> 00:08:00.660
Thinking mostly in terms of all the different types of databases, all the different ways

132
00:08:00.660 --> 00:08:02.860
you can run a container.

133
00:08:02.860 --> 00:08:06.520
It can be kind of challenging and daunting especially if you're just getting started

134
00:08:06.520 --> 00:08:13.620
with the AWS ecosystem to know which solution to go with because it's confusing.

135
00:08:13.620 --> 00:08:15.380
Indeed the AWS community is awesome.

136
00:08:15.380 --> 00:08:18.580
I can certainly say that after my experience at re:Invent.

137
00:08:18.580 --> 00:08:22.620
But it's also true that there are so many AWS services and they can overlap quite a

138
00:08:22.620 --> 00:08:23.620
lot.

139
00:08:23.620 --> 00:08:27.300
I find particularly funny thinking about all the messaging and data streaming services

140
00:08:27.300 --> 00:08:32.700
such as EventBridge, SNS, SQS, Kinesis, Kafka, Amazon MQ, etc.

141
00:08:32.700 --> 00:08:37.900
It can be really daunting to figure out which one of those offers the best trade-offs for

142
00:08:37.900 --> 00:08:40.280
the specific problem you are dealing with.

143
00:08:40.280 --> 00:08:45.080
I suppose there is also a good thing in having variety because you will probably be able

144
00:08:45.080 --> 00:08:49.440
to find the perfect set of trade-offs if you really put your effort into it.

145
00:08:49.440 --> 00:08:53.440
So that's kind of pros and cons of AWS and you might like it or dislike it.

146
00:08:53.440 --> 00:08:57.740
But I suppose with experience things get a little bit better and more accessible.

147
00:08:57.740 --> 00:09:03.000
At this point I want to talk about bold predictions for the future of serverless.

148
00:09:03.000 --> 00:09:07.760
And because you know I love serverless and I had to ask this kind of question, especially

149
00:09:07.760 --> 00:09:11.260
having these amazing thought leaders in the room.

150
00:09:11.260 --> 00:09:15.880
So I actually had a few people volunteering to answer this question and the first one

151
00:09:15.880 --> 00:09:22.340
we have is Jones who is a fellow AWS serverless hero and a senior developer advocate at Freshworks.

152
00:09:22.340 --> 00:09:31.000
To talk about the future of serverless, well it's scary and it is exciting for me because

153
00:09:31.000 --> 00:09:39.980
it's scary first because we are losing the meaning of serverless as we go about with

154
00:09:39.980 --> 00:09:42.520
a lot of things coming out.

155
00:09:42.520 --> 00:09:47.980
The true meaning of serverless is being lost and that scares me.

156
00:09:47.980 --> 00:09:53.940
At the same time the exciting things that happen and the future of serverless could

157
00:09:53.940 --> 00:10:01.480
be more distributed, more granular in nature where if you would want to have a scheduler

158
00:10:01.480 --> 00:10:07.580
and monitor it maybe it's going to be much more simpler and much more easier to do it.

159
00:10:07.580 --> 00:10:12.380
You don't have to go through EventBridge, right, write the cron job, stuff like that.

160
00:10:12.380 --> 00:10:14.840
It's going to be much simpler.

161
00:10:14.840 --> 00:10:17.540
That's just a simpler thing for instance, right.

162
00:10:17.540 --> 00:10:21.160
But a lot of things is going to change.

163
00:10:21.160 --> 00:10:24.140
A lot of things is going to happen.

164
00:10:24.140 --> 00:10:30.700
So I'm excited for that future but also scared about it.

165
00:10:30.700 --> 00:10:35.240
Now let's compare this opinion with Sam Williams, founder of Complete Coding, a company that

166
00:10:35.240 --> 00:10:38.400
provides training and content for serverless and AWS.

167
00:10:38.400 --> 00:10:42.820
So let's hear from Sam what the future of serverless is going to look like.

168
00:10:42.820 --> 00:10:47.620
In my opinion there's kind of two big things that are going to change going forward.

169
00:10:47.660 --> 00:10:55.400
The first is that we may see an evolution kind of on top of infrastructure as code.

170
00:10:55.400 --> 00:11:01.920
So at the moment you always define a very physical infrastructure and that is what you

171
00:11:01.920 --> 00:11:04.200
then run your applications on.

172
00:11:04.200 --> 00:11:08.820
And I think we're going to find that there's going to be an evolution over the next couple

173
00:11:08.820 --> 00:11:16.460
of months or even years where it's more based on the functional requirements that the business

174
00:11:16.460 --> 00:11:19.920
has or the company or the client has.

175
00:11:19.920 --> 00:11:29.540
And we define our requirements and there is kind of an interpolation layer from our requirements

176
00:11:29.540 --> 00:11:31.380
to our architecture.

177
00:11:31.380 --> 00:11:37.060
And the second is that with all of the AI stuff that's going on with all the LLMs, there's

178
00:11:37.060 --> 00:11:42.940
going to be some really cool functionality built into our serverless pipelines and our

179
00:11:42.940 --> 00:11:49.100
serverless development process, whether that's like with those requirements, running that

180
00:11:49.100 --> 00:11:55.200
through a large language model and that is going to generate our architecture for us.

181
00:11:55.200 --> 00:12:01.780
And then we can tweak it or being able to have tools that can kind of critique our designs,

182
00:12:01.780 --> 00:12:04.260
critique our implementations.

183
00:12:04.260 --> 00:12:08.660
A bit like what we've got at the moment with CodeWhisperer and GitHub Copilot.

184
00:12:08.660 --> 00:12:11.840
But for more of the architecture side of things.

185
00:12:11.840 --> 00:12:17.180
So yeah, I'm really excited to see what happens and the new tools and new software and how

186
00:12:17.180 --> 00:12:21.900
much quicker and how much better we can make our applications using serverless with these

187
00:12:21.900 --> 00:12:24.800
new tools that come out in the next couple of years.

188
00:12:29.180 --> 00:12:31.520
Yeah, I'm also really excited to see what kind of innovation AI is going to bring to the table for serverless developers.

189
00:12:31.520 --> 00:12:38.520
But we also have AJ Stuyvenberg, staff engineer at Datadog and AWS Serverless Hero as well.

190
00:12:38.520 --> 00:12:42.340
My bold prediction for the future of serverless is that one day we're going to solve some

191
00:12:42.340 --> 00:12:47.700
of the outstanding problems like serverless search in a true scale to zero, pay for what

192
00:12:47.700 --> 00:12:51.340
you use, scale to infinity kind of fashion.

193
00:12:51.340 --> 00:12:53.720
That is what I'm looking for when I use any managed service.

194
00:12:53.720 --> 00:12:57.560
I want to be able to deploy anything and not pay for the number of deployments I use and

195
00:12:57.560 --> 00:13:02.200
only pay for the actual compute that I use or storage that I use when I use it.

196
00:13:02.200 --> 00:13:05.240
That's what I'm hoping to get out of every single launch here at re:Invent and I'm excited

197
00:13:05.240 --> 00:13:06.240
to see what they launch.

198
00:13:06.520 --> 00:13:11.080
I totally agree with this one and I hope AJ wasn't too disappointed about the new serverless

199
00:13:11.080 --> 00:13:14.440
ElastiCache, but that's probably a topic for another time.

200
00:13:14.440 --> 00:13:19.300
Now I think it's time to discuss multi-cloud: yes or no.

201
00:13:19.300 --> 00:13:22.840
And this is something that we actually have talked about before, so I'm really curious

202
00:13:22.840 --> 00:13:24.920
to hear other expert opinions.

203
00:13:24.920 --> 00:13:29.000
And to answer this question, should you go multi-cloud yes, no and why, we have Faizal

204
00:13:29.000 --> 00:13:36.040
Khan, who is the founder and CEO at Ecomm and Xite Logic and he is also an AWS Community Hero.

205
00:13:36.040 --> 00:13:40.520
To answer the question about whether multi-cloud or not, like all great answers, it really

206
00:13:40.520 --> 00:13:44.120
depends on your particular use case.

207
00:13:44.120 --> 00:13:49.620
There are certain advantages that you get in terms of redundancy if you need it or maybe

208
00:13:49.620 --> 00:13:54.660
even compliance where you need to ensure that you're using two completely different networks

209
00:13:54.660 --> 00:13:57.740
or two completely different providers, you can have that.

210
00:13:57.740 --> 00:14:01.620
But it is not always a necessary thing.

211
00:14:01.620 --> 00:14:04.900
It's kind of like the question of whether you need to go completely serverless with

212
00:14:04.900 --> 00:14:07.780
your application or still run on servers.

213
00:14:07.780 --> 00:14:09.960
It really depends on your use case.

214
00:14:09.960 --> 00:14:16.520
It's not always a necessity because there's a lot of things that you have to do in terms

215
00:14:16.520 --> 00:14:24.740
of retaining your workforce, ensuring that you have adequate redundancy set up and all

216
00:14:24.740 --> 00:14:25.740
of that.

217
00:14:25.740 --> 00:14:29.500
So there's a lot of additional work, expense, time that's going to go into that.

218
00:14:29.500 --> 00:14:32.880
So if it is like a real requirement, then I would say yes, but otherwise just stick

219
00:14:32.880 --> 00:14:37.840
to a single cloud provider because it provides you almost everything that you need.

220
00:14:37.840 --> 00:14:41.840
So you can actually in fact set up redundancy within the same providers as well if you need

221
00:14:41.840 --> 00:14:42.840
to.

222
00:14:42.840 --> 00:14:47.120
I totally agree with Faizal and if you want to find out more about this topic, you can

223
00:14:47.120 --> 00:14:52.360
check out our previous episode on this and we have the link in the show notes.

224
00:14:52.360 --> 00:14:54.880
But this year was the year of Gen AI.

225
00:14:54.880 --> 00:14:56.000
We all know that.

226
00:14:56.000 --> 00:15:00.640
And of course, I wanted some opinions about Gen AI and especially how Gen AI is going

227
00:15:00.640 --> 00:15:05.640
to change life in a way or another for software developers and cloud developers.

228
00:15:05.640 --> 00:15:10.800
Let's start with Heitor Lessa, chief architect at AWS and also the mastermind behind Lambda

229
00:15:10.800 --> 00:15:11.800
PowerTools.

230
00:15:11.800 --> 00:15:15.000
So let's hear it from Heitor.

231
00:15:15.000 --> 00:15:19.720
If you know me working on open source, one of the features that amazes me in Gen AI is

232
00:15:19.720 --> 00:15:24.180
that you can create documentation for people who are terrible at writing documentation

233
00:15:24.180 --> 00:15:27.440
for developers, for data engineers and so forth.

234
00:15:28.040 --> 00:15:32.480
One of the pieces that I noticed just now is that while it creates an amazing structure,

235
00:15:32.480 --> 00:15:38.240
it's not very well aware of the way people think and learn and the different personalities

236
00:15:38.240 --> 00:15:41.140
and personas when reading the documentation.

237
00:15:41.140 --> 00:15:45.320
So one of the ways that we use right now at PowerTools is we generate the structure of

238
00:15:45.320 --> 00:15:49.920
the text, but then we have to have the human element to think all the diversity and the

239
00:15:49.920 --> 00:15:54.520
plurality of customers using the product and how would they perceive?

240
00:15:54.520 --> 00:16:00.460
How do we take someone who knows zero about AWS or barely anything about serverless or Lambda

241
00:16:00.460 --> 00:16:02.340
specifically for the matter?

242
00:16:02.340 --> 00:16:08.180
So we take this text and we start optimizing it, reviewing it and doing multiple editings.

243
00:16:08.180 --> 00:16:14.700
So I would say roughly about 30 to 50 hours just goes into editing of that text.

244
00:16:14.700 --> 00:16:19.500
Even though the Gen AI gets you there very quickly, should remove that block of your

245
00:16:19.500 --> 00:16:21.360
content creativity.

246
00:16:21.360 --> 00:16:26.040
The reviewing of those and trying to match to people's reality and people's limitations

247
00:16:26.040 --> 00:16:32.320
and their also plurality on how they think, which makes all of us special, it still requires

248
00:16:32.320 --> 00:16:33.320
human.

249
00:16:33.320 --> 00:16:36.760
I still cannot see a place where Gen AI will replace that.

250
00:16:36.760 --> 00:16:40.680
That human element is so special to us and what bonds us together.

251
00:16:40.680 --> 00:16:47.840
Yes, documentation is definitely one of those things where Gen AI can be a fantastic assistant,

252
00:16:47.840 --> 00:16:52.360
but where I definitely agree that we still need the human element if we want to provide

253
00:16:52.360 --> 00:16:54.520
a great experience to our users.

254
00:16:54.520 --> 00:16:58.520
So let's talk a little bit more about this and this time we have Chris Williams who is

255
00:16:58.520 --> 00:17:02.440
a developer relationship manager at Hashicorp, also a Cloud Therapist.

256
00:17:02.440 --> 00:17:07.300
By the way, I love that job title, probably my new favorite job title so far and he's

257
00:17:07.300 --> 00:17:09.040
also an AWS Community Hero.

258
00:17:09.040 --> 00:17:13.380
So let's see with Chris what he has to say about Gen AI.

259
00:17:13.380 --> 00:17:20.200
So how do I think Gen AI is going to affect me and is it going to help me as a developer?

260
00:17:20.200 --> 00:17:26.620
I think it is going to, that's a very nuanced question and I think that it is going to help

261
00:17:26.620 --> 00:17:34.340
folks that have a little bit of experience to accelerate their development cycle, create

262
00:17:34.340 --> 00:17:42.940
tests more efficiently, create documentation more efficiently, create Git comments more

263
00:17:42.940 --> 00:17:44.220
efficiently.

264
00:17:44.220 --> 00:17:49.820
I do think that there is a danger in making it an easy button for folks that might not

265
00:17:49.820 --> 00:17:56.940
have as much experience and that they will fall victim to not understanding the fundamentals

266
00:17:56.940 --> 00:18:01.820
before stepping into something and potentially making big problems.

267
00:18:01.820 --> 00:18:03.060
So I think it's going to help.

268
00:18:03.060 --> 00:18:05.880
I am very excited to use it.

269
00:18:05.880 --> 00:18:10.540
It is helping me a lot on my day to day and I do use it daily.

270
00:18:10.540 --> 00:18:16.280
But I think that we need to make sure that we have a good set of guard rails around leveraging

271
00:18:16.280 --> 00:18:19.740
it and using it expeditiously.

272
00:18:19.740 --> 00:18:21.180
That's really a fantastic opinion.

273
00:18:21.180 --> 00:18:25.460
So let's move on to the last expert opinion for this episode.

274
00:18:25.460 --> 00:18:28.940
We have Praneeta Prakash who is a senior product manager at AWS.

275
00:18:29.380 --> 00:18:33.500
Praneeta works on building tools to improve developer productivity, which is the best

276
00:18:33.500 --> 00:18:36.100
kind of tools if you ask me as a developer.

277
00:18:36.100 --> 00:18:38.980
So let's see what Praneeta has to say about AI.

278
00:18:38.980 --> 00:18:44.140
Honestly, we've been thinking a lot about this on our side.

279
00:18:44.140 --> 00:18:51.820
At AWS, we have this thing we call two-way door and one-way door decisions.

280
00:18:52.340 --> 00:18:59.460
For us, a two-way door decision is reversible and a one-way door decision is when you need

281
00:18:59.460 --> 00:19:04.100
to make a change that cannot be easily reversed.

282
00:19:04.100 --> 00:19:09.420
For me, AI comes into play where it can help you with those two-way door decisions.

283
00:19:09.420 --> 00:19:15.300
But every time there is a decision that needs to be made that's a one-way door decision

284
00:19:16.300 --> 00:19:21.860
or it needs a human in the loop to approve it.

285
00:19:21.860 --> 00:19:27.620
And so how I'm thinking about AI is how can it help that human in the loop make better

286
00:19:27.620 --> 00:19:33.060
decisions as part of their development journey.

287
00:19:33.060 --> 00:19:37.660
I actually didn't know about this concept of two-way door and one-way door decisions.

288
00:19:37.660 --> 00:19:40.620
And I think this is actually a pretty cool idea and it's probably something that we'll

289
00:19:40.620 --> 00:19:44.420
have to think a little bit more and maybe use it in the future because it seems like

290
00:19:44.540 --> 00:19:49.980
a very good framework to think about architectural decisions or decisions that might have an

291
00:19:49.980 --> 00:19:53.220
impact on the business in a way or another.

292
00:19:53.220 --> 00:19:56.540
But I think this brings us to the closing of this episode.

293
00:19:56.540 --> 00:20:00.580
I hope you found all these answers insightful and inspiring as much as I did.

294
00:20:00.580 --> 00:20:05.380
And I've added all the links so that you can connect with all our guests on LinkedIn in

295
00:20:05.380 --> 00:20:10.900
case that you want to reach out to them and maybe ask additional questions, clarify their

296
00:20:10.900 --> 00:20:16.420
opinions or maybe just engage with them and build new meaningful connections.

297
00:20:16.420 --> 00:20:19.380
But how would you have answered all these questions?

298
00:20:19.380 --> 00:20:22.180
Maybe you have a dramatically different view on some of these questions.

299
00:20:22.180 --> 00:20:23.540
I really love to know.

300
00:20:23.540 --> 00:20:27.540
So in that case, don't hesitate to reach out or drop a comment on YouTube.

301
00:20:27.540 --> 00:20:31.500
And as always, if you found value in this episode, make sure to like and subscribe and

302
00:20:31.500 --> 00:20:34.380
share this podcast with your friends and colleagues.

303
00:20:34.380 --> 00:20:36.420
Thank you very much and we'll see you in the next one.

304
00:20:40.900 --> 00:20:41.900
Bye.
