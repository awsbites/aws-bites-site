WEBVTT

1
00:00:00.000 --> 00:00:10.760
Hello everyone and welcome to another episode of AWS Bites, the weekly show where we try

2
00:00:10.760 --> 00:00:15.320
to answer interesting AWS questions in about five minutes.

3
00:00:15.320 --> 00:00:21.680
My name is Luciano and today I'm joined by Eoin and before we get into today's question

4
00:00:21.680 --> 00:00:26.800
I will kindly ask you to like and subscribe what we are doing so you can be notified every

5
00:00:26.800 --> 00:00:29.320
time we publish a new episode.

6
00:00:29.320 --> 00:00:36.560
So today's question is how do you move away from the management console that is the AWS

7
00:00:36.560 --> 00:00:38.520
web console?

8
00:00:38.520 --> 00:00:44.240
And before actually we try to answer that particular question, I would like to try to

9
00:00:44.240 --> 00:00:49.900
describe what are the pros and cons maybe of that web console and why maybe you might

10
00:00:49.900 --> 00:00:51.320
want to move away from that.

11
00:00:51.320 --> 00:00:52.320
What do you think Eoin?

12
00:00:52.320 --> 00:00:57.880


13
00:00:57.880 --> 00:01:03.400
Yeah, the AWS console is, you know, everybody has some difficulty with it, but it's actually really good for learning about AWS services for the most part because it gives you a visual

14
00:01:03.400 --> 00:01:04.540
representation.

15
00:01:04.540 --> 00:01:10.280
You can try things fairly quickly and it's just good for looking around, debugging, understanding

16
00:01:10.280 --> 00:01:12.600
what components things are made of.

17
00:01:12.600 --> 00:01:17.960
And if you're getting into AWS early on, it makes sense to do things that way because

18
00:01:17.960 --> 00:01:20.660
the other methods could be quite a bit daunting.

19
00:01:20.660 --> 00:01:26.760
But when it comes to, you know, getting into production mode, it's not so great really

20
00:01:26.760 --> 00:01:31.360
because you want to have repeatable, probably immutable deployments, you know, where you

21
00:01:31.360 --> 00:01:36.120
can create a stack with all your code and your infrastructure and it's reproducible,

22
00:01:36.120 --> 00:01:40.120
it's deterministic, and it can be tracked in your source control.

23
00:01:40.120 --> 00:01:43.400
And then when you deploy it to the cloud, you've got predictability around what you

24
00:01:43.400 --> 00:01:47.080
have and then you can deploy it to multiple environments.

25
00:01:47.080 --> 00:01:49.320
You can destroy it and recreate it easily.

26
00:01:49.320 --> 00:01:55.320
And it makes change management and iterating on features a lot easier than if you're trying

27
00:01:55.320 --> 00:02:00.360
to remember what you did in the console the last time and what you've configured and what

28
00:02:00.360 --> 00:02:04.480
you've forgotten to configure and what you've tagged and what you haven't tagged.

29
00:02:04.480 --> 00:02:09.760
So that's what the problem with the console is.

30
00:02:09.760 --> 00:02:13.640
So if you're using the console, what are the alternatives you think that we could suggest

31
00:02:13.640 --> 00:02:14.640
to people?

32
00:02:14.640 --> 00:02:18.400
Yeah, I think there are many alternatives.

33
00:02:18.400 --> 00:02:25.060
Like for sure you could use the command line interface with the AWS CLI.

34
00:02:25.060 --> 00:02:30.040
You can also use the SDK in any language of your choice.

35
00:02:30.040 --> 00:02:35.640
But I would argue that those are not really tools for infrastructure as code.

36
00:02:35.640 --> 00:02:40.840
Like at best you can do either some scripts or maybe if you need to create resources at

37
00:02:40.840 --> 00:02:44.880
runtime inside your application, you can use the SDK.

38
00:02:44.880 --> 00:02:50.040
But they are useful alternatives, but I don't think they solve the problem of infrastructure

39
00:02:50.040 --> 00:02:51.520
as code.

40
00:02:51.520 --> 00:02:56.600
For those I would recommend definitely CloudFormation, which is kind of the canonical service in

41
00:02:56.600 --> 00:02:59.440
AWS to do infrastructure as code.

42
00:02:59.440 --> 00:03:04.880
And that one will allow you to, in a declarative language, express all the resources that you

43
00:03:04.880 --> 00:03:09.820
want in your stack and allows you to deploy them kind of atomically.

44
00:03:09.820 --> 00:03:13.840
If something goes bad, you have a rollback process that is going to bring it back to

45
00:03:13.840 --> 00:03:16.280
the previous version.

46
00:03:16.280 --> 00:03:19.620
So all those cool things.

47
00:03:19.620 --> 00:03:22.860
Of course the choice is not limited to CloudFormation.

48
00:03:22.860 --> 00:03:29.440
Even AWS itself has things like CDK and SAM, which are somewhat higher level abstractions

49
00:03:29.440 --> 00:03:31.720
on top of CloudFormation.

50
00:03:31.720 --> 00:03:35.640
You also have the serverless framework as another alternative that you can use, especially

51
00:03:35.640 --> 00:03:38.760
if you are building serverless projects.

52
00:03:38.760 --> 00:03:43.280
And also there is something like Terraform that maybe you are using already, especially

53
00:03:43.280 --> 00:03:45.640
if you use other cloud providers.

54
00:03:45.640 --> 00:03:51.440
And that tool can be useful because with the same tool you can manage different cloud providers.

55
00:03:51.440 --> 00:03:55.600
So yeah, definitely there is no shortage of options, even though my recommendation would

56
00:03:55.600 --> 00:04:01.940
be to eventually learn CloudFormation because that's kind of the golden rule in AWS.

57
00:04:01.940 --> 00:04:06.720
That's the lower level and chances are you would need to deal with CloudFormation directly

58
00:04:06.720 --> 00:04:08.920
at some point.

59
00:04:08.920 --> 00:04:15.800
So yeah, I suppose at this point it could be interesting to explore a use case where

60
00:04:15.800 --> 00:04:22.600
maybe you have a production application that was, let's say deployed by clicking in the

61
00:04:22.600 --> 00:04:26.440
UI and provisioning things manually.

62
00:04:26.440 --> 00:04:32.300
What could be a reasonable path to move from that particular deployment to managing this

63
00:04:32.300 --> 00:04:34.880
application with infrastructure as code?

64
00:04:34.880 --> 00:04:39.080
Yeah, I think the use case is actually kind of more common than people would like to admit.

65
00:04:39.080 --> 00:04:45.180
It's probably a secret shame in having created a massive application using the console.

66
00:04:45.180 --> 00:04:47.560
But you know, people do it and people do it successfully.

67
00:04:47.560 --> 00:04:51.460
The question is how do you get out of it because it's not very sustainable.

68
00:04:51.460 --> 00:04:57.320
And I suppose the first thing is try to not mess with what you have.

69
00:04:57.320 --> 00:05:01.120
You know, if you've got something, some people call that like a snowflake infrastructure

70
00:05:01.120 --> 00:05:02.120
because it was created.

71
00:05:02.120 --> 00:05:05.100
And once it's gone, it's gone, you can't really repeat it.

72
00:05:05.100 --> 00:05:07.480
It's completely unique.

73
00:05:07.480 --> 00:05:12.760
What you can do is just, I would recommend trying to create a replica of that in a new

74
00:05:12.760 --> 00:05:19.000
account rather than trying to transition a set of resources in one account over to infrastructure

75
00:05:19.000 --> 00:05:20.000
as code.

76
00:05:20.000 --> 00:05:24.240
Because it's very difficult to make all those changes without breaking anything.

77
00:05:24.240 --> 00:05:27.240
So it's actually a good opportunity to get your organization and your account structure

78
00:05:27.240 --> 00:05:28.440
in place.

79
00:05:28.440 --> 00:05:33.160
Create a new set of accounts, start to build a replica of what you have and then switch

80
00:05:33.160 --> 00:05:34.780
over.

81
00:05:34.780 --> 00:05:39.040
And you could do that by, first problem is what do you have already, right?

82
00:05:39.040 --> 00:05:42.120
So you kind of need to audit all of your infrastructure and resources.

83
00:05:42.120 --> 00:05:47.280
You might have a good handle on that, but you could also use maybe AWS config to query

84
00:05:47.280 --> 00:05:50.080
all the resources or you can use third party tools for that.

85
00:05:50.080 --> 00:05:55.760
There's also AWS used to have a tool called Cloud former, which isn't really maintained

86
00:05:55.760 --> 00:05:57.800
and I wouldn't recommend it.

87
00:05:57.800 --> 00:06:02.100
But there's an open source product called former two, which we can link in the notes

88
00:06:02.100 --> 00:06:03.480
and it seems to be really good.

89
00:06:03.480 --> 00:06:09.760
I haven't used it yet, but it looks pretty good at generating Terraform, HCL code or

90
00:06:09.760 --> 00:06:13.560
CloudFormation templates from your existing resources.

91
00:06:13.560 --> 00:06:17.460
So then once you build up those templates, you can deploy them, test them in this new

92
00:06:17.460 --> 00:06:19.000
account structure.

93
00:06:19.000 --> 00:06:25.440
And then you have to just do a cut over using say DNS at the front end, synchronizing and

94
00:06:25.440 --> 00:06:28.520
migrating your data at the backend.

95
00:06:28.520 --> 00:06:32.480
And it's not going to be an easy process, but it's something if you do take that approach,

96
00:06:32.480 --> 00:06:36.560
you can at least rehearse it, practice it multiple times.

97
00:06:36.560 --> 00:06:42.160
You could even have two production environments that are almost replicas, A, B test it and

98
00:06:42.160 --> 00:06:47.320
then cut over when you're confident.

99
00:06:47.320 --> 00:06:48.320
That's great.

100
00:06:48.320 --> 00:06:49.320
Yeah.

101
00:06:49.320 --> 00:06:53.640
I think I want to mention another thing, which is that in CloudFormation, you can import

102
00:06:53.640 --> 00:06:58.200
existing resources, but that's kind of a tricky thing.

103
00:06:58.200 --> 00:07:04.400
It's probably not the right thing to do because when you import a resource and then you create

104
00:07:04.400 --> 00:07:09.980
a template, if you try to deploy that template to another environment or another account,

105
00:07:09.980 --> 00:07:13.620
it's going to try to import the same resource and it suspects the resource is already there.

106
00:07:13.620 --> 00:07:16.880
So that's not going to work for you to generalize your stack.

107
00:07:16.880 --> 00:07:19.120
It's just kind of an escape hatch.

108
00:07:19.120 --> 00:07:23.460
If you already have things in production and then you are managing something with CloudFormation

109
00:07:23.460 --> 00:07:30.360
and you want to reference that particular resource, we are going to link an article

110
00:07:30.360 --> 00:07:36.960
in the notes on how you can do that with CDK, but again, this is not something you should

111
00:07:36.960 --> 00:07:42.280
do to fully migrate something from clicky-clicky to infrastructure as code.

112
00:07:42.280 --> 00:07:47.220
It's more if you really have to use a resource that exists in a production environment, then

113
00:07:47.220 --> 00:07:48.960
you can import it that way.

114
00:07:48.960 --> 00:07:53.440
If you need to recreate in other environments, you can recreate, for instance, for testing

115
00:07:53.440 --> 00:07:57.680
reasons, but yeah, it's kind of a borderline approach.

116
00:07:57.680 --> 00:07:59.480
All right.

117
00:07:59.480 --> 00:08:02.200
I think that's all we have for today.

118
00:08:02.200 --> 00:08:06.280
So thank you very much for listening and we are really curious to know what you think

119
00:08:06.280 --> 00:08:10.920
about this episode if you have been through this journey of trying to migrate something

120
00:08:10.920 --> 00:08:16.040
that was done by clicking the UI to infrastructure as code and what kind of solution did you

121
00:08:16.040 --> 00:08:17.520
find in the end.

122
00:08:17.520 --> 00:08:20.340
So please share your experience with us.

123
00:08:20.340 --> 00:08:25.320
And if you have any question that you would like us to answer next time, then let us know

124
00:08:25.320 --> 00:08:27.760
and we'll try to do that.

125
00:08:27.760 --> 00:08:30.440
Thank you very much and we'll see you in the next episode.

126
00:08:30.440 --> 00:08:51.360
Bye.
