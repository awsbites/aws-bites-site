WEBVTT

1
00:00:00.000 --> 00:00:04.880
At fourTheorem, the cloud consulting company where we work, one of the things that we get asked a lot,

2
00:00:04.880 --> 00:00:09.760
both from our potential customers, but also from our peers in the industry is how do we work? And

3
00:00:09.760 --> 00:00:15.200
it seems like a simple question, but in reality, we can cover a bunch of different topics. Things

4
00:00:15.200 --> 00:00:20.000
like what's our unique selling proposition and our target customer base? What the first engagement

5
00:00:20.000 --> 00:00:24.320
with a potential customer is going to look like? Do we ever say no to potential customers? How do

6
00:00:24.320 --> 00:00:28.960
we gather requirements? Why are software projects somewhat unique? How do we make plans, including

7
00:00:28.960 --> 00:00:33.600
a desired architecture, estimates and success criteria? What do we do when the work starts and

8
00:00:33.600 --> 00:00:37.840
how do we keep iterating over it? And what happens after the delivery? There are so many different

9
00:00:37.840 --> 00:00:42.080
ways of working and methodologies to deliver software and cloud projects. We believe we have

10
00:00:42.080 --> 00:00:46.480
our own unique way of doing that and today we want to share it with you. Hopefully by the end of this

11
00:00:46.480 --> 00:00:50.880
episode, you will know what working with a cloud consulting like fourTheorem could look like and you

12
00:00:50.880 --> 00:00:55.280
might learn some strategies to make cloud projects possibly more successful. We will also digress a

13
00:00:55.280 --> 00:00:59.920
little bit on the history of software practices, common misconceptions and what we believe should

14
00:00:59.920 --> 00:01:03.760
be the right way to build software in the cloud. I hope this is going to be a fun ride. My name is

15
00:01:03.760 --> 00:01:16.960
Luciano and I'm here with Eoin for another episode of AWS Bites podcast.

16
00:01:16.960 --> 00:01:21.760
AWS Bites is sponsored by fourTheorem, an AWS partner with plenty of experience delivering cloud projects to production. If you

17
00:01:21.760 --> 00:01:26.800
want to chat, reach out to us on social media or check out fourtheorem.com. All the links will be in

18
00:01:26.800 --> 00:01:32.080
the show notes. So why don't we start by giving a little bit of an introduction to our audience,

19
00:01:32.080 --> 00:01:36.320
telling them what fourTheorem is, a little bit of the history, the people and some of our past projects made.

20
00:01:36.320 --> 00:01:41.520
fourTheorem started in 2017, actually that's already a good few years.

21
00:01:41.520 --> 00:01:47.120
There are three founders in the company, myself, Peter and Fiona. And I guess the interesting thing about

22
00:01:47.120 --> 00:01:51.280
us as the initial team is that we've all been through a lot of startups in the past,

23
00:01:51.360 --> 00:01:56.080
like our own startups, working in startups, bootstrapping, funding, building new products,

24
00:01:56.080 --> 00:02:00.240
getting them to market, succeeding and failing. That kind of helps shape, I think, our culture

25
00:02:00.240 --> 00:02:04.720
and our mission a little bit. One of the founding principles is that we don't want to just become a

26
00:02:04.720 --> 00:02:10.240
body shop. In the consulting world, it's pretty common. There's almost an inevitable gravitational

27
00:02:10.240 --> 00:02:15.680
pull towards just throwing people at problems. And that's customers and consultants kind of

28
00:02:15.680 --> 00:02:20.320
enable this behavior a little bit instinctively because when things get tough, people tend to just

29
00:02:20.320 --> 00:02:24.000
say, okay, let's add resources. We don't have enough resources to solve our problems. So let's

30
00:02:24.000 --> 00:02:28.640
just add more people. And this suits the business model of consultancies very well, because they're

31
00:02:28.640 --> 00:02:33.840
just earning money based on time and materials on a day rate. So you just times the number of days

32
00:02:33.840 --> 00:02:38.400
times the number of people, and you end up with a nice revenue at the end of it. But the problem

33
00:02:38.400 --> 00:02:43.600
with that is that it doesn't really solve the core problems in general, the core engineering problems,

34
00:02:43.600 --> 00:02:47.680
cultural problems, etc. And we try to do it a little bit differently. So rather than just

35
00:02:47.680 --> 00:02:52.800
adding people, we try to focus on the minimal number of people almost to do projects and

36
00:02:52.800 --> 00:02:56.160
focusing on the quality of the people and the quality of the work. And so far, we've been able

37
00:02:56.160 --> 00:03:01.760
to stick to that after almost seven years, six or seven years, which is good going so far, I think.

38
00:03:01.760 --> 00:03:06.720
And so we focus on a small team. We're deeply technical, I would say, but with a focus on

39
00:03:06.720 --> 00:03:12.160
business because of, I guess, our previous startup experience, we optimize for delivering early and

40
00:03:12.160 --> 00:03:17.840
often so continuous improvement where possible, we were bounded with a big focus on AI and data

41
00:03:17.840 --> 00:03:22.880
science. That was one of the reasons myself and Peter wrote the book on, you know, using Amazon

42
00:03:22.880 --> 00:03:27.920
machine learning services in the beginning, just kind of stake a claim to that as a direction of

43
00:03:27.920 --> 00:03:32.800
travel. We're seeing that a lot now these days with Gen AI and other machine learning fields,

44
00:03:32.800 --> 00:03:37.600
data science, modern data architectures, production, those in a really optimal way

45
00:03:37.600 --> 00:03:42.880
was going to be a big differentiator. And the rest is just focusing on more managed services. So

46
00:03:42.880 --> 00:03:47.120
trying to remove a lot of the old school operations and maintenance that legacy systems

47
00:03:47.120 --> 00:03:51.520
have seen a lot of in the past so that people can do more again with fewer people. We help people

48
00:03:51.520 --> 00:03:55.760
of all different sizes. One of the nice things about working for fourTheorem, I guess, as an

49
00:03:55.760 --> 00:04:01.120
engineer of any kind, or no matter who you are, is that we work with startups, but also larger

50
00:04:01.120 --> 00:04:06.000
enterprises. That kind of has a, there's a virtuous cycle within that because when you're working with

51
00:04:06.000 --> 00:04:10.400
startups, you tend to move very quickly, iterate quickly. And therefore, as an engineer, you learn

52
00:04:10.400 --> 00:04:15.440
quickly and course correct quickly. In enterprises, the appetite for speed of innovation is less

53
00:04:15.440 --> 00:04:20.240
because there's more risk associated with it. So the pace is naturally different. But when people

54
00:04:20.240 --> 00:04:24.160
move from a startup environment into one of our enterprise environments, they bring that innovative

55
00:04:24.160 --> 00:04:29.520
culture, lots of new learnings. And then when you move from an enterprise client onto a smaller

56
00:04:29.520 --> 00:04:35.600
client, like a startup one, you kind of bring that rigor and process and compliance and governance

57
00:04:35.600 --> 00:04:40.640
and all of that stuff that's more common in the enterprise world. So it kind of benefits our

58
00:04:40.640 --> 00:04:45.760
clients in a virtuous cycle kind of way, but also our people. No matter what we're dealing with here,

59
00:04:45.760 --> 00:04:49.920
big customer, small customer, I think the first engagement is kind of similar. Do you want to take

60
00:04:49.920 --> 00:04:56.160
us through the discovery part when we, okay, we've wooed a new client or we've been another client

61
00:04:56.160 --> 00:05:00.480
has referred a friend of theirs in and we start talking to them for the first time. How does that work?

62
00:05:00.480 --> 00:05:04.320
Yeah, this kind of meeting is what we generally call a discovery session.

63
00:05:04.960 --> 00:05:10.240
And it's, there is no commitment from either parties to proceed with future work. So it's just an

64
00:05:10.240 --> 00:05:15.360
exploration to try to figure out exactly what is the problem that we are discussing and whether we

65
00:05:15.360 --> 00:05:20.880
can help solve that problem or not. It generally requires a mix of people. It could be a mix of

66
00:05:20.880 --> 00:05:25.040
business people and tech people. It really depends on the company and the type of project. But

67
00:05:25.040 --> 00:05:28.800
generally speaking, you need people that understand the business and the problem,

68
00:05:28.800 --> 00:05:33.040
both from a technical perspective, but also from a business perspective. And of course, we are going

69
00:05:33.040 --> 00:05:38.480
to bring our experience as well in that evaluation of the problem. But before doing that, we need to

70
00:05:38.480 --> 00:05:42.960
understand what the company looks like, what the problem space looks like, what is the project in

71
00:05:42.960 --> 00:05:48.000
detail and how accurate is the understanding of the problem itself. Because sometimes companies

72
00:05:48.000 --> 00:05:53.120
just have a very vague idea and then they haven't really developed a reason for why this idea is

73
00:05:53.120 --> 00:05:57.120
important for the business because they haven't dug deep enough to really understand all the

74
00:05:57.120 --> 00:06:02.320
nuances of the project. So by asking very specific questions, we can try to figure out exactly what

75
00:06:02.320 --> 00:06:06.960
is the level of understanding of that problem and whether the business really needs to address that problem or not.

76
00:06:06.960 --> 00:06:11.520
Or maybe they need to focus on something else. So I guess focusing on the business

77
00:06:11.520 --> 00:06:15.840
challenges is a very important element to this phase of the conversation with the customer,

78
00:06:15.840 --> 00:06:19.760
where we are really trying to understand, do you need it for the business? Is this going to be an

79
00:06:19.760 --> 00:06:24.480
enabler of some kind? Or maybe something you want to do for innovation, but there needs to be a

80
00:06:24.480 --> 00:06:29.680
strong value. If the project is completed, the business is going to have a value pack.

81
00:06:29.680 --> 00:06:34.080
So in a way, there needs to be some kind of investment and a return of investment as part of framing the

82
00:06:34.080 --> 00:06:38.320
conversation around the project. And of course, there will be also very specific technical

83
00:06:38.320 --> 00:06:43.280
challenges that we will need to understand. For instance, if this is something that the business

84
00:06:43.280 --> 00:06:48.800
is developing to compete with other competitors in the same industry, what the other competitors

85
00:06:48.800 --> 00:06:53.440
are doing is also very interesting. What kind of characteristics their solution has? Do we need to

86
00:06:53.440 --> 00:06:57.440
be better? Do we need to be the same? Do we need to have something maybe similar but slightly

87
00:06:57.440 --> 00:07:02.880
different? Maybe it needs to be more performant or simpler. So all these kind of details will

88
00:07:02.880 --> 00:07:07.920
inform the type of architecture and will frame also from a technical perspective, what the problem

89
00:07:07.920 --> 00:07:12.720
and the solution will look like. And also it's very important to understand, is there a tech

90
00:07:12.720 --> 00:07:16.320
team? And this is actually something very interesting because when we work with startups,

91
00:07:16.320 --> 00:07:21.200
often there isn't even a tech team or if there is, it's very small. Sometimes it's just one person.

92
00:07:21.200 --> 00:07:26.080
Sometimes it's even the founder themselves are doing a little bit of business and a little bit

93
00:07:26.080 --> 00:07:30.000
of tech and they just need more support. And other times they don't have a tech team at all.

94
00:07:30.000 --> 00:07:34.400
So we will become their tech team if we decide to help them. While when we work with bigger

95
00:07:34.400 --> 00:07:38.800
enterprises, of course, often they have their own tech team. And it's important to understand

96
00:07:38.800 --> 00:07:42.960
exactly what that tech team looks like because our engagement is going to be very different

97
00:07:42.960 --> 00:07:47.680
depending if we are going to become an extension of an existing team or if we are going to become

98
00:07:47.680 --> 00:07:53.040
that kind of interim team that is going to develop maybe an MVP to get the company to the point where

99
00:07:53.040 --> 00:07:57.440
they have a point where they can basically keep growing the business and it makes sense to start

100
00:07:57.440 --> 00:08:01.760
to invest in creating their own internal tech team. And then another interesting question that

101
00:08:01.760 --> 00:08:08.880
often comes up because our expertise and I guess our fame a little bit comes from being AWS experts.

102
00:08:08.880 --> 00:08:15.440
So sometimes not all the problems are problems that you should solve with AWS. So also evaluating,

103
00:08:15.440 --> 00:08:20.800
even if we are brought in as AWS experts, does that problem really require AWS?

104
00:08:20.800 --> 00:08:25.680
I think it's a very fair question to ask and assess very honestly. Don't just try to put AWS in there

105
00:08:25.680 --> 00:08:30.400
just because you are the expert on it, but make sure that it's something that is really needed

106
00:08:30.400 --> 00:08:34.240
that is going to make the difference for the success of that project. So basically,

107
00:08:34.960 --> 00:08:39.520
at this point, we want to come out of this meeting with two possible outcomes. It's generally like an

108
00:08:39.520 --> 00:08:44.160
alpha day, so it's not super intense. And the idea is that at the end, we have a quite good

109
00:08:44.160 --> 00:08:48.320
understanding of what's the problem space, the people involved, what everyone expects as success

110
00:08:48.320 --> 00:08:52.880
criteria. So we might decide that we can help and that's kind of a positive outcome or that

111
00:08:52.880 --> 00:08:57.520
maybe we are not the right fit for that particular company and problem. And at that point, we just

112
00:08:57.520 --> 00:09:01.760
say, okay, this is not going to work. Hopefully, you got some value anyway with all this conversation

113
00:09:01.760 --> 00:09:05.520
and try to describe it and nail down the requirements of the project. But if we decide

114
00:09:05.520 --> 00:09:10.720
to start to help the company, what we are going to do is create a proposal. And that proposal is

115
00:09:10.720 --> 00:09:14.560
effectively a document that says this is our understanding of the problem and this is how we

116
00:09:14.560 --> 00:09:20.400
can help you out to develop that solution further. And there were also other interesting

117
00:09:20.400 --> 00:09:26.320
cases that happened to us in the past where we decided not to be a good fit for that company

118
00:09:26.320 --> 00:09:31.680
because we didn't really believe on the structure, on the framing of that particular project.

119
00:09:31.680 --> 00:09:35.760
Sometimes we realized that a founder is really early in the implementation. Maybe they need to

120
00:09:35.760 --> 00:09:40.320
do a little bit more market research. So even though we could build a product for them, that

121
00:09:40.320 --> 00:09:45.360
product is still likely to fail just because there isn't enough research.

122
00:09:45.360 --> 00:09:50.320
So we feel like it's... We are obliged to say, well, make sure you really understand the problem sets before you

123
00:09:50.320 --> 00:09:54.800
invest money into this project and then come back to us later and we can reassess together whether

124
00:09:54.800 --> 00:09:59.360
we feel we are going to be more likely to be successful after all of that. So I think it's

125
00:09:59.360 --> 00:10:03.440
also important to call out that you need to be a little bit honest that way as a consultant,

126
00:10:03.440 --> 00:10:07.840
because we feel that's part of our job. If we have that expertise where we can give a useful

127
00:10:07.840 --> 00:10:12.320
piece of advice to our potential customers, even though that means losing business in the short

128
00:10:12.320 --> 00:10:17.280
term, I think that can be much more valuable in the longer term. Now, I guess another question

129
00:10:17.280 --> 00:10:22.240
that comes very often when we have this kind of conversation and maybe when we present a plan to

130
00:10:22.240 --> 00:10:27.840
our potential customers is this looks very different from what I expected. I was expecting

131
00:10:27.840 --> 00:10:33.120
maybe, I don't know, lots of planning and then maybe a very clear roadmap going forward.

132
00:10:33.120 --> 00:10:37.440
And then you give me a very precise deadline where everything is done. But then when we present our

133
00:10:37.440 --> 00:10:42.000
plan, it might look very different from that expectation. So I think it's worth spending a

134
00:10:42.000 --> 00:10:47.360
little bit of time discussing our opinion and how do we perceive the history of software development

135
00:10:47.360 --> 00:10:51.440
and why we think that there is a large misconception, especially from people that are

136
00:10:51.440 --> 00:10:55.760
not really into the software industry or now software should be built.

137
00:10:55.760 --> 00:11:00.640
It's probably worth reminding everybody from time to time about how software projects are fundamentally different in

138
00:11:00.640 --> 00:11:05.040
a few different ways to other projects. And that could be a non-technical founder, but also a

139
00:11:05.040 --> 00:11:10.400
business leader in any company. But I think we also forget and we often have a false sense of

140
00:11:10.400 --> 00:11:16.160
security around times and deadlines and budget. We kind of forget that software is a relatively

141
00:11:16.160 --> 00:11:21.200
new field with only about 70 years of history and a lot of change has happened in that time.

142
00:11:21.200 --> 00:11:26.720
There's a bit of a bad reputation around software as well because of lots of horror stories around

143
00:11:26.720 --> 00:11:34.240
scope creep, bad estimates, delays, significant cost or time overruns, quality expectations,

144
00:11:34.240 --> 00:11:40.160
being poor and then from a team perspective, burnout, death march projects. So those things

145
00:11:40.160 --> 00:11:45.760
are quite common, right? It is common, let's face it, for software projects to ultimately fail and

146
00:11:45.760 --> 00:11:50.960
we want to avoid that. So we have a strategy to make sure that we do avoid that. And we just think

147
00:11:50.960 --> 00:11:55.120
that it all comes down to the fact that software projects are inherently just more complicated,

148
00:11:55.120 --> 00:11:59.600
more complex than people might think, especially when you compare it to maybe more of a traditional

149
00:11:59.680 --> 00:12:05.680
engineering field like construction engineering or mechanical engineering. So I think one of the

150
00:12:05.680 --> 00:12:10.640
analogies we've been using recently is if you compare what it takes to build a mobile website

151
00:12:10.640 --> 00:12:15.120
versus what it takes to engineer a coffee grinder. And if you can imagine more of a mechanical

152
00:12:15.120 --> 00:12:20.560
engineering example and let's look at it from a few different angles. So in terms of specification,

153
00:12:20.560 --> 00:12:25.040
if you're building a device like a coffee grinder, generally you have a clear set of functions. You

154
00:12:25.040 --> 00:12:28.640
want to grind coffee to various sizes. The requirements are pretty clear and they don't

155
00:12:28.640 --> 00:12:32.720
usually change once the design is finished. Whereas with software, like you're building a

156
00:12:32.720 --> 00:12:37.200
mobile web website, even a simple one, the requirements are always dynamic. It needs to

157
00:12:37.200 --> 00:12:41.680
adapt to a variety of different user needs and expectations, and those change rapidly.

158
00:12:41.680 --> 00:12:46.080
User expectations are always changing and user behavior is changing. You might need to update

159
00:12:46.080 --> 00:12:50.960
the website frequently to meet new user demands and expectations, or even just to stay ahead of

160
00:12:50.960 --> 00:12:55.520
competitors. The process of understanding requirements, communicating them clearly,

161
00:12:55.520 --> 00:13:01.440
and making them a reality in software is really complex. And it's actually one of the major areas

162
00:13:01.440 --> 00:13:07.600
where potentially great projects can falter at the very beginning. And when you get your first

163
00:13:07.600 --> 00:13:11.760
delivery, then looking at the environment in which these two products operate, you know,

164
00:13:11.760 --> 00:13:15.520
coffee grinder will work in a kitchen and it'll have a stable power supply. The environment is

165
00:13:15.520 --> 00:13:19.680
generally controlled and predictable. Once you ship software, it must function across lots of

166
00:13:19.680 --> 00:13:24.800
different devices, smartphones, tablets, PCs, and different screen sizes, operating systems,

167
00:13:24.800 --> 00:13:29.600
browsers, which all constantly change, specs change, they have continuous updates. So it's

168
00:13:29.600 --> 00:13:33.760
a very different context from that point of view. And then users, when they use a coffee grinder,

169
00:13:33.760 --> 00:13:37.360
generally they put in the beans, press the button, empty it out, hopefully they clean it once in a

170
00:13:37.360 --> 00:13:44.000
while. With software like a mobile website, it has to function across, I suppose, contexts where

171
00:13:44.000 --> 00:13:48.880
you didn't anticipate. Users do unexpected things all the time. Simple things like they put a

172
00:13:48.880 --> 00:13:52.320
special character in the first name field that you didn't think of and didn't expect. And then

173
00:13:52.320 --> 00:13:56.880
at the other end of the scale, you have malicious users, actors who are trying to damage the system,

174
00:13:56.880 --> 00:14:01.680
steal data, hack the system. There's so many variables in terms of user actions.

175
00:14:01.680 --> 00:14:06.480
And I think as well, the constraints are quite different. With your physical device, the design and

176
00:14:06.480 --> 00:14:10.240
functionality, ultimately the constraints come down to the laws of physics, which I think are

177
00:14:10.240 --> 00:14:14.880
generally well understood and reasonably stable over time. In software, you're building a mobile

178
00:14:14.880 --> 00:14:20.080
website, the constraints are constantly evolving, technologies are evolving, practices are changing,

179
00:14:20.080 --> 00:14:24.480
user behaviors are changing. What's cool and trendy today might be obsolete in just a couple

180
00:14:24.480 --> 00:14:29.440
of years. Security context is changing very frequently. So you need to constantly stay up to

181
00:14:29.440 --> 00:14:34.800
date, stay secure and adapt. And that's why software projects are always kind of living, breathing things.

182
00:14:34.800 --> 00:14:38.960
They're never really complete. If you leave software, we talked about this, I think in the last

183
00:14:38.960 --> 00:14:42.960
episode or the previous one, you can't just leave software alone and expect it to come back to it in

184
00:14:42.960 --> 00:14:46.960
two years and for everything to work because the whole environment, the technology landscape has

185
00:14:46.960 --> 00:14:50.960
changed. So it's a living, breathing thing. You need a high performing team of domain experts,

186
00:14:50.960 --> 00:14:56.160
software engineers working together to tackle this, right? And to address the different nature

187
00:14:56.160 --> 00:15:00.560
of software projects, to distill it all into prioritized tasks and deliver on the tasks in a

188
00:15:00.560 --> 00:15:06.000
predictable way. So this is, I suppose, worth reminding ourselves because when we talk about

189
00:15:06.000 --> 00:15:10.960
how we do things and our process and everything, it's really to address the extraordinary,

190
00:15:10.960 --> 00:15:15.040
exponentially growing number of variables that you have to deal with in software projects that

191
00:15:15.040 --> 00:15:20.640
you don't have in other environments where you can use engineering principles, deterministic

192
00:15:20.640 --> 00:15:25.360
calculations, and then come up with a Gantt chart and be reasonably confident that you'll meet the

193
00:15:25.360 --> 00:15:31.440
delivery. Software has to be much more adaptable and much more agile. How do we then manage software

194
00:15:31.440 --> 00:15:36.720
projects? Do you want to share some of our process?

195
00:15:36.720 --> 00:15:41.280
Yeah, I think speaking of the Gantt chart example, another thing that comes to mind is the waterfall approach, which is generally the idea that you

196
00:15:41.280 --> 00:15:45.360
have a specification, you do some kind of analysis, from that you do some kind of design,

197
00:15:45.360 --> 00:15:49.760
then you move to an implementation phase, then you have some kind of ready product that you just

198
00:15:49.760 --> 00:15:54.000
need to test a little bit before you can confidently release and you're done. So it's

199
00:15:54.000 --> 00:15:58.800
like step by step from beginning to end, it's kind of a straight process and it's called waterfall

200
00:15:58.800 --> 00:16:03.600
because generally it's represented with this kind of diagram where things are moving down to the

201
00:16:03.600 --> 00:16:08.400
completion phase. And this approach is really interesting because I think there is this

202
00:16:08.400 --> 00:16:13.520
misconception that most people believe this is how anything is built, including software,

203
00:16:13.520 --> 00:16:17.920
but you could argue that this model is not really something you can use. In reality,

204
00:16:17.920 --> 00:16:21.600
it's kind of a conceptual model to understand what are different phases of a project,

205
00:16:21.600 --> 00:16:26.240
but this is not really how you move things from zero to completion. It's not like one single

206
00:16:26.240 --> 00:16:31.760
iteration and the phases are very distinct. And even if you think about building physical

207
00:16:31.760 --> 00:16:36.640
products, if you start to compare this model with the agile methodologies that we are going to talk

208
00:16:36.720 --> 00:16:40.880
a little bit more about in the second part of this episode, you can see that the agile

209
00:16:40.880 --> 00:16:44.880
methodologies actually started in more traditional manufacturers, not something that was invented in

210
00:16:44.880 --> 00:16:50.160
software, it's something that actually came out from Toyota. So even in traditional manufacturing,

211
00:16:50.160 --> 00:16:55.680
there is a clear need that you need to have a more dynamic process where you can adapt to change,

212
00:16:55.680 --> 00:17:01.200
you can adapt to things you didn't expect, you can adapt to new requirements and try to minimize

213
00:17:01.200 --> 00:17:05.760
waste at every step of the process. So it is really interesting to see how even in traditional

214
00:17:05.760 --> 00:17:10.960
manufacturing, this kind of conceptual model, it's good to understand the basics of the different

215
00:17:10.960 --> 00:17:15.280
phases of a project, but it's not realistic. This is not really how you move a project forward.

216
00:17:15.280 --> 00:17:20.000
So I think it's very important for us to try to demystify, especially with some customers that

217
00:17:20.000 --> 00:17:24.480
maybe are not so experienced with the way of building projects or software projects specifically,

218
00:17:24.480 --> 00:17:30.000
that we need to take a different approach and an approach that needs to be more agile. So what do

219
00:17:30.000 --> 00:17:36.720
we mean now by agile? It's not really easy to define what agile is. There are many different

220
00:17:36.720 --> 00:17:42.480
definitions, many different interpretations of different methodologies. And I think ultimately

221
00:17:42.480 --> 00:17:46.640
everyone has a slightly different way of doing agile. So it's kind of a set of principles,

222
00:17:46.640 --> 00:17:50.960
and then eventually everyone comes up with their own framework for taking some of these principles

223
00:17:50.960 --> 00:17:57.440
and adapting to their way of working. So our idea of agile is building things in small iterations

224
00:17:57.440 --> 00:18:01.760
and have frequent chances to reassess the scope and the landscape. And if there is something that

225
00:18:01.760 --> 00:18:07.520
changed, you have the time to course correct things. It's never too late to do a change

226
00:18:07.520 --> 00:18:11.440
because you are trying to reassess things frequently enough that even if you took

227
00:18:11.440 --> 00:18:16.080
the wrong turn somewhere, you are still in time to come back and try a different approach.

228
00:18:16.960 --> 00:18:20.000
And this is one of the main reasons why the waterfall approach doesn't work,

229
00:18:20.000 --> 00:18:24.800
because if you spent a huge amount of time building a project and invested tons of money,

230
00:18:24.800 --> 00:18:29.200
and then you come at the end phase, and when you are there, everything changed in the landscape,

231
00:18:29.200 --> 00:18:34.000
you're understanding of the problem, what the customers would expect, you just wasted tons of

232
00:18:34.000 --> 00:18:38.400
money and tons of time. And going back basically means let's start from scratch and let's redesign

233
00:18:38.400 --> 00:18:43.440
again. And then let's hope that next time things don't move as fast as they do, as they did. But

234
00:18:43.440 --> 00:18:47.040
we know that most likely they're going to move again. So the only way really is to find a process

235
00:18:47.040 --> 00:18:51.360
that's flexible enough that allows you to understand what's going on, understand if you are

236
00:18:51.360 --> 00:18:56.000
on the right path, and if you need to change something, have the time to do that as soon as

237
00:18:56.000 --> 00:19:02.000
possible. So the way that you can do that is using a process that is divided in small chunks of

238
00:19:02.800 --> 00:19:07.520
iterations, and we generally call them sprints. A sprint can be a period that can vary between

239
00:19:07.520 --> 00:19:12.240
one week and four weeks, typically. And again, this is just arbitrary amounts of times, you just need

240
00:19:12.240 --> 00:19:17.840
to pick one size. And ideally, it should be small enough that gives you frequent chances to reassess,

241
00:19:17.840 --> 00:19:23.920
but also big enough that gives you enough time to have a small objective in mind that you can

242
00:19:23.920 --> 00:19:27.920
complete during that timeframe. So it doesn't make sense to have a sprint of one hour because

243
00:19:27.920 --> 00:19:32.000
realistically you're not going to have time to do anything meaningful in one hour. But if you start

244
00:19:32.000 --> 00:19:35.760
to think, for instance, about two weeks, you can probably achieve something useful for the business

245
00:19:35.760 --> 00:19:42.880
in two weeks. I think the other side effect of this approach is that it reduces the risk of experimentation.

246
00:19:42.880 --> 00:19:47.120
Because if you are trying to do something and you're not really sure

247
00:19:47.120 --> 00:19:52.160
whether a possible solution is actually going to be the right one, it is less risky to actually try

248
00:19:52.160 --> 00:19:57.280
it out. Just say, okay, we are going to spend one sprint maybe trying the solution. It might not work,

249
00:19:57.280 --> 00:20:02.720
but the worst outcome that can happen is that it doesn't work and we learned new stuff. And now we

250
00:20:02.720 --> 00:20:06.960
spend two weeks and we can consider those two weeks of learning, even if the product didn't

251
00:20:06.960 --> 00:20:12.240
really evolve. But our understanding of the problem space evolved and the next sprint, we can actually

252
00:20:12.240 --> 00:20:16.720
use our time even better. And probably ultimately that's going to allow us to be even more efficient

253
00:20:16.720 --> 00:20:21.440
in the long term because we had the chance to try a number of different things and we understood

254
00:20:21.440 --> 00:20:25.520
much better what works and what doesn't work. So I think it's also important to mention that

255
00:20:25.520 --> 00:20:30.080
this process to work needs everyone to be involved and to understand the project.

256
00:20:30.080 --> 00:20:34.320
It's not just something that technical people do in isolation. It's something that requires all the different

257
00:20:34.320 --> 00:20:39.040
stakeholders to really understand the process and be fully involved in all the different phases of

258
00:20:39.040 --> 00:20:44.000
the process. For instance, it's very important that everyone understands things are flexible

259
00:20:44.000 --> 00:20:48.240
and iterative. We don't have all the answers straight away. We will find out the answers as

260
00:20:48.240 --> 00:20:52.560
we go and we will figure out what are the most important questions to ask at every single step.

261
00:20:52.560 --> 00:20:57.600
And there is a mindset of continuous improvement in that sense, again, because you are knowledge

262
00:20:57.600 --> 00:21:02.080
that you are starting from a stage and you are trying to get better and better as you go doing

263
00:21:02.080 --> 00:21:06.160
this kind of an iterative approach. It requires great communication skills.

264
00:21:06.160 --> 00:21:13.840
This is actually one of the common problems that we generally see that if people are not sharing all their learning,

265
00:21:14.240 --> 00:21:19.040
they cannot communicate effectively, what are the challenges, what are the expectations,

266
00:21:19.040 --> 00:21:22.800
that's where you start to see problems and this process breaks down a little bit.

267
00:21:22.800 --> 00:21:28.240
So it's very important to make sure that everyone is confident in terms of discussing how they

268
00:21:28.240 --> 00:21:33.040
understand the project, what is their progress, if they have any blocker and what are their

269
00:21:33.040 --> 00:21:37.280
expectations maybe at the end of a sprint. And this is something you need to keep doing as much

270
00:21:37.280 --> 00:21:40.880
as possible. And sometimes other communicating is probably a little bit better than under

271
00:21:40.880 --> 00:21:45.280
communicating in that sense. And you can have tools that can help you in that sense.

272
00:21:45.280 --> 00:21:50.960
For instance, you can have tools that will help you to make sure that there is space during a

273
00:21:50.960 --> 00:21:55.440
sprint to have this kind of useful conversations. Sometimes we talk about retrospectives, which is

274
00:21:55.440 --> 00:21:59.040
something that you can do at the end of a sprint to try to have an open conversation of what you

275
00:21:59.040 --> 00:22:03.680
think went well and what you think didn't go so well and maybe you want to try to improve in the

276
00:22:03.680 --> 00:22:08.720
next sprint. Or you can have, for instance, tools that try to measure the output, for instance,

277
00:22:08.720 --> 00:22:13.520
in terms of the quality of what you deliver, in terms of how many tasks did you actually

278
00:22:13.520 --> 00:22:18.080
complete compared to the ones that you wanted to complete during the sprint. And all of that stuff,

279
00:22:18.080 --> 00:22:23.840
it doesn't mean that you deliver poorly. It means that maybe your understanding of the problem space

280
00:22:23.840 --> 00:22:27.840
wasn't as accurate as you thought. And then in the next sprint, you can take everything

281
00:22:27.840 --> 00:22:32.160
into consideration to try to plan a little bit better for the next sprint. Now, talking about

282
00:22:32.160 --> 00:22:37.120
measuring the output of a project, I think there is a common complaint in the industry

283
00:22:37.120 --> 00:22:42.240
that developers are not really productive. And there are a number of studies that often come up

284
00:22:42.240 --> 00:22:47.760
and they all make very interesting claims, like a developer, a developer doesn't write more than

285
00:22:47.760 --> 00:22:53.840
100 lines of code per day, or it doesn't spend a certain number of hours coding per day. So I guess

286
00:22:53.840 --> 00:22:57.360
what do you think about that? Is it really important to measure the output of developers

287
00:22:57.360 --> 00:23:02.800
that way? Or is there more that developers do in their daily job?

288
00:23:02.800 --> 00:23:08.400
Well, when you learn that code is not just a measure of productivity, but it's also like an, it's an asset, right? When you build

289
00:23:08.400 --> 00:23:14.000
a product, you want the work that your team are creating to be an asset that's valuable and

290
00:23:14.000 --> 00:23:18.080
growing. But at the same time, code is a liability. I think we hear this expression quite a lot,

291
00:23:18.080 --> 00:23:21.520
which means that every time you have a line of code, it's something you must maintain into the

292
00:23:21.520 --> 00:23:25.760
future, every line. And every line of code is a line that can have a bug. So what you want to do

293
00:23:25.760 --> 00:23:30.960
is get the balance right, maximizing the benefit in terms of business outcome, by minimizing the

294
00:23:30.960 --> 00:23:35.280
amount of code it takes to create that. And there's lots of ways we do that. We talked about

295
00:23:35.280 --> 00:23:40.880
one of our principles being leveraging experts like AWS as partners to manage our infrastructure,

296
00:23:40.880 --> 00:23:45.440
so that we have to write less code. And this is a constant journey, trying to remove the code you

297
00:23:45.440 --> 00:23:50.320
have and offload things that aren't really specific to your business. We talk about this

298
00:23:50.320 --> 00:23:55.280
quite a lot. So let's think about software development. And we've seen some studies that say

299
00:23:55.280 --> 00:23:59.520
an average software developer, if you have an eight hour working day, they're spending anything

300
00:23:59.520 --> 00:24:04.800
from one hour to four hours coding. And it might seem like you're unproductive. But when you look

301
00:24:04.800 --> 00:24:09.920
at what the function of a software developer is, it doesn't seem so bad at all. Because a software

302
00:24:09.920 --> 00:24:14.400
developer, you don't generally want to be coding all the time. It's a bit of a red flag if they are,

303
00:24:14.400 --> 00:24:19.680
because it probably means they're a little bit isolated from the larger mission.

304
00:24:19.680 --> 00:24:24.240
If we look at the all of the activities of a developer, they need to understand the customer and the business

305
00:24:24.240 --> 00:24:28.080
need, they need to be constantly honing their skills, because the landscape is changing quickly.

306
00:24:28.080 --> 00:24:31.920
So they need to be learning the right tools to do the job and ensuring that the approach is optimal.

307
00:24:31.920 --> 00:24:36.320
No matter how experienced a developer you are, learning is a daily part of the job,

308
00:24:36.320 --> 00:24:41.360
that's never going to change. Then you have things like analyzing bugs and constraints in existing

309
00:24:41.360 --> 00:24:46.080
systems, often systems that were implemented by others who aren't available anymore. And this is

310
00:24:46.080 --> 00:24:51.120
a really advanced skill almost in software development, which is understanding software

311
00:24:51.120 --> 00:24:55.920
that you don't have full control over. It's a lot easier to start from scratch with a blank canvas

312
00:24:55.920 --> 00:24:59.680
all the time. A lot of companies out there that will do that, but there aren't a lot that will

313
00:24:59.680 --> 00:25:03.920
kind of understand the value in your existing systems that are already working pretty well

314
00:25:03.920 --> 00:25:09.200
and generating revenue. Then you have things like updating stakeholders, communicating with them so

315
00:25:09.200 --> 00:25:13.920
that everybody's on the same page, sharing your learnings and ideas with peers, learning from your

316
00:25:13.920 --> 00:25:20.000
peers, collaborating with maybe QA staff, user experience, designers, project managers, and lots

317
00:25:20.000 --> 00:25:24.160
of others. Then you have just other collaborative activities like creating, reviewing, and updating

318
00:25:24.160 --> 00:25:29.040
documentation. This is pretty important if you don't want lots of problems in the future,

319
00:25:29.040 --> 00:25:34.480
peer reviewing code, and then writing and even rewriting code tests infrastructure. So the coding

320
00:25:34.480 --> 00:25:37.920
part almost comes last on the list once you've got everything else right. That's the way it

321
00:25:37.920 --> 00:25:42.000
should be, getting the balance right between the focused implementation time, you know, this kind

322
00:25:42.000 --> 00:25:47.280
of stereotypical view of a developer, headphones on, furiously coding away. That's important,

323
00:25:47.280 --> 00:25:51.680
right? But it only makes sense if you have the right context to set, the mission is clear,

324
00:25:51.680 --> 00:25:56.480
and you've communicated with everybody else, because otherwise you could be in isolation,

325
00:25:56.480 --> 00:26:00.960
furiously coding in the completely wrong direction, something that will have to be rewritten or thrown

326
00:26:00.960 --> 00:26:06.080
away later. That's not good. So the other thing is too many meetings, interruptions can kill momentum.

327
00:26:06.080 --> 00:26:09.680
So you have to be conscious about these things and try and get the balance right between focus time

328
00:26:09.680 --> 00:26:13.840
and collaboration. Do a little communication will lead to a lot of misunderstandings, rework,

329
00:26:13.840 --> 00:26:18.880
huge amounts of waste. So overall, I would say the amount of code produced, it's not a good measure

330
00:26:18.880 --> 00:26:24.480
of productivity at all. That's a mistake. And it can lead to over engineering and creation of large

331
00:26:24.480 --> 00:26:28.960
amounts of technical debt. I think, generally, developers understand the concept of technical

332
00:26:28.960 --> 00:26:33.680
debt for other stakeholders, it's a little bit less tangible. And I think it can be thought about

333
00:26:33.680 --> 00:26:38.720
as any other kind of debt, really, if you imagine that on your journey to developing a system of

334
00:26:38.720 --> 00:26:43.680
value, every time you might need to make a trade off between getting something done quickly, like

335
00:26:43.680 --> 00:26:48.240
getting it implemented today, versus getting it done, right, maybe you have to wait for some

336
00:26:48.240 --> 00:26:53.040
external dependency, maybe you have to do some extra research, or you just have to put a lot of

337
00:26:53.040 --> 00:26:57.760
rework into the system in order to get it done right in a way that's really stable for the future.

338
00:26:57.760 --> 00:27:01.840
Sometimes you have to make a trade off and say, okay, let's just take some sort of shortcut today,

339
00:27:01.840 --> 00:27:05.840
that's essentially borrowing some technical debt, you're borrowing some future time,

340
00:27:06.720 --> 00:27:11.600
really for the for right now to get something done. And a degree of debt is inevitable, technical debt

341
00:27:11.600 --> 00:27:16.400
is inevitable. But if you accumulate it without paying it off, just like any other kind of debt,

342
00:27:16.400 --> 00:27:21.200
you will eventually become technically bankrupt, essentially, you'll end up with a system that is

343
00:27:21.200 --> 00:27:26.080
unmaintainable, you can't add features to, you're constantly fighting bugs on, and that will have

344
00:27:26.080 --> 00:27:31.920
enormous cost and productivity impacts down the line.

345
00:27:31.920 --> 00:27:35.680
Maybe we before we go on to our sprints, and all that process, we can summarize all this by saying that effective software development comes

346
00:27:35.680 --> 00:27:40.640
from having skilled experts and domain experts from a technical perspective, and a domain

347
00:27:40.640 --> 00:27:44.880
perspective, a whole team approach where everybody is working together, you have clear mission and

348
00:27:44.880 --> 00:27:49.760
success criteria. And you can get metrics from those criteria, then you've got your requirements,

349
00:27:49.760 --> 00:27:53.920
well defined, broken down into small pieces that can be delivered in fast iterations. And then

350
00:27:53.920 --> 00:27:59.120
you've got clear communication feedback mechanisms without any gatekeeping or silos between the

351
00:27:59.120 --> 00:28:03.760
customer and those tasked with delivering the product. Lastly, I think permission to fail,

352
00:28:03.760 --> 00:28:08.720
learn and improve is really critical. You can't have agile processes with continuous improvement,

353
00:28:08.720 --> 00:28:13.200
unless you have a very dynamic organization that has a permission to fail, learn from those

354
00:28:13.200 --> 00:28:17.120
failures and improve. And that's where you really get the best outcomes. So with that in mind,

355
00:28:17.120 --> 00:28:23.280
Ixiano, what does the first real day one working with the customers, sprint zero look like?

356
00:28:23.280 --> 00:28:27.520
Yeah, we actually call the first, the very first iteration sprint zero, just because it's a little

357
00:28:27.520 --> 00:28:32.560
bit special than what we will be doing for the rest of the project. And it's just because the

358
00:28:32.560 --> 00:28:37.760
first phase requires a little bit more preparation than the other phases where you already have a

359
00:28:37.760 --> 00:28:42.320
momentum and you have a little bit more clear planning of what's going to happen, and you keep

360
00:28:42.320 --> 00:28:47.840
iterating that way. So with sprint zero, we basically, it's something that we do for a shorter

361
00:28:47.840 --> 00:28:51.840
period of time. We generally prefer a sprint of two weeks, but for sprint zero, we generally go

362
00:28:51.840 --> 00:28:56.240
for just one week. And again, it's just because it's a preparation for then the more regular

363
00:28:56.240 --> 00:29:02.480
sprints. And it's kind of a workshop and then we prefer to do it in person where we try to go

364
00:29:02.480 --> 00:29:08.240
through all the available documentation, what is the output of the delivery. And in terms of

365
00:29:08.240 --> 00:29:13.360
activities, there are a few things that we try to do. It will be kind of a full time

366
00:29:14.480 --> 00:29:19.040
series of days, and we have different project stakeholders. There could be domain experts,

367
00:29:19.040 --> 00:29:24.080
architect developers, UX, UI experts, really depends on the type of product that we're

368
00:29:24.080 --> 00:29:28.320
building and the type of people involved in that project. But again, whoever has a perspective and

369
00:29:28.320 --> 00:29:32.800
an expectation on that project needs to be involved in this phase because they're going

370
00:29:32.800 --> 00:29:36.800
to have to define exactly what is their expectation, what is their success criteria.

371
00:29:36.800 --> 00:29:41.520
And we need to figure out how to align everyone with that particular expectation in mind.

372
00:29:41.520 --> 00:29:46.160
So mission and objectives are at some point mutually agreed. Everyone is say,

373
00:29:46.160 --> 00:29:50.800
okay, this is what we want to achieve. And this is how we think we should be proceeding for the

374
00:29:50.800 --> 00:29:58.640
next sprints. So that basically helps us to create a product backlog where we try to define all the

375
00:29:58.640 --> 00:30:03.200
features that we need to build. And those features are not just in a random pile where anyone can

376
00:30:03.200 --> 00:30:07.520
just pick one, but it's very important to try to prioritize the ones that you want to do first,

377
00:30:07.520 --> 00:30:12.000
because generally they are the ones that are either going to enable other things or deliver

378
00:30:12.000 --> 00:30:16.480
the most value straight away. So it's very important that you focus a bit of time trying

379
00:30:16.480 --> 00:30:20.800
to prioritize what is really important for the business, because that's going to drive the next

380
00:30:20.800 --> 00:30:25.200
phases. So you definitely want to finish first the things with the most value or the things that are

381
00:30:25.200 --> 00:30:29.440
going to block more value for the future. The other thing that we need to do is if there is any

382
00:30:29.440 --> 00:30:35.120
dependency on existing systems or legacy software that is used in the company, that needs to be

383
00:30:35.120 --> 00:30:39.520
totally analyzed and documented, because this is generally where you can find surprises, where you

384
00:30:39.520 --> 00:30:43.840
can find blockers. And if you need to create some kind of integration, you really need to understand

385
00:30:43.840 --> 00:30:47.280
what that integration could look like and how much work there is involved in creating that

386
00:30:47.280 --> 00:30:52.240
integration. Sometimes you need access to systems like that. You need access to documentation and

387
00:30:52.240 --> 00:30:56.240
might not be an immediate thing to get that access. Maybe you need to go through a process

388
00:30:56.240 --> 00:31:00.320
where you need to request access, where you need to request access to documentation. So it's really

389
00:31:00.320 --> 00:31:04.640
important to identify this kind of dependencies straight away and make sure you try to unblock

390
00:31:04.640 --> 00:31:08.880
them as soon as possible, very early on in the process. At this point, we should have a clear

391
00:31:08.880 --> 00:31:14.560
enough idea to be able to design a first architecture. And we generally try to do that at two

392
00:31:14.560 --> 00:31:19.200
levels. One level is very high level. It's kind of a logical architecture. Like what do we expect the

393
00:31:19.200 --> 00:31:23.360
systems to do and how they are integrated with each other? The other one is a lot more detailed,

394
00:31:23.360 --> 00:31:28.480
what we call it physical level, where we actually describe what the implementation of the systems

395
00:31:28.480 --> 00:31:33.600
could look like. Are we going to use, for instance, DynamoDB or a SQL database and which other systems

396
00:31:33.600 --> 00:31:37.840
are going to connect to that database? Maybe we need multiple databases. So it's really trying to

397
00:31:37.840 --> 00:31:42.480
nail down also the technologies that you're going to be using for implementing this architecture.

398
00:31:42.480 --> 00:31:47.840
And that leads to having a good technical vision for the engineering team. And you might also have

399
00:31:47.840 --> 00:31:51.760
wireframes if you are working, for instance, with designers. So it's really important to try to

400
00:31:51.760 --> 00:31:56.720
combine not just the architecture, but also what the product should look like. So it's really good

401
00:31:56.720 --> 00:32:01.920
when you can work with a team of people that can take care of designing wireframes and really define

402
00:32:01.920 --> 00:32:06.320
what the user experience should look like. So that's definitely part of the delivery in that

403
00:32:06.320 --> 00:32:12.560
sense. And we will agree on some KPIs. So metrics that are going to help us to assess, are we being

404
00:32:12.560 --> 00:32:17.440
successful in this implementation? Is this product really delivering the value that we imagined at

405
00:32:17.440 --> 00:32:23.120
the beginning to customers or users in general? We also got to mention if there are risks or if

406
00:32:23.120 --> 00:32:28.240
there are things that we need to do to reduce risk and all of this stuff is logged and it's something

407
00:32:28.240 --> 00:32:34.000
we can reuse later on in the following sprints as a something to double check. Like, are we really

408
00:32:34.000 --> 00:32:38.320
seeing this risk? Are we doing something to mitigate the risk? Or maybe this risk is not really

409
00:32:38.320 --> 00:32:42.240
that worrying after all, because we figured out or we learned something else during the sprints that

410
00:32:42.240 --> 00:32:47.040
can help us to be more confident that we can avoid certain risks. But it's really important to have

411
00:32:47.040 --> 00:32:51.840
a list of those risks because you always need to make sure you are assessing against them.

412
00:32:51.840 --> 00:32:56.080
And finally, once we have all of this, so we have a clear understanding, we have an architecture,

413
00:32:56.080 --> 00:33:02.080
we have a list of tasks, there is the $1 million question, which is how long is this going to take?

414
00:33:02.640 --> 00:33:07.840
Everyone wants to know that. And of course, you can never have a precise answer, especially with

415
00:33:07.840 --> 00:33:12.640
an agile approach. You try not to have a super accurate answer because you are always learning.

416
00:33:12.640 --> 00:33:16.720
And as you learn more, you can be more accurate, but you need to have some kind of estimate anyway,

417
00:33:16.720 --> 00:33:20.160
because you cannot just tell the customer, we don't know this is going to take potentially

418
00:33:20.160 --> 00:33:25.520
forever. No, you need to be able to provide some value in a specific timeframe. So what we do is

419
00:33:25.520 --> 00:33:30.720
we generally assign a size to all the tasks. And we call this exercise T-shirt sizing, because we

420
00:33:30.720 --> 00:33:36.480
give a small, medium, large, extra large kind of sizing. And then we have a very simplistic model

421
00:33:36.480 --> 00:33:40.880
that allows us to see, depending on the size of cards and number of people involved and how easy

422
00:33:40.880 --> 00:33:45.440
it is to parallelize certain tasks, how much more or less that project is going to take. And it's

423
00:33:45.440 --> 00:33:50.400
just a ballpark figure that you have as a feeling to see, are we talking about weeks? Are we talking

424
00:33:50.400 --> 00:33:55.680
about months or years? And of course, the longer it is, the more you need to make an effort to try

425
00:33:55.680 --> 00:33:59.840
to reduce the scope so that you can come up with something valuable in a shorter amount of time.

426
00:33:59.840 --> 00:34:03.520
It's not uncommon to see that a project might take, I don't know, two years after you do all

427
00:34:03.520 --> 00:34:08.240
of this research. And that's when you have to go back and see, okay, this is not a realistic project

428
00:34:08.240 --> 00:34:13.040
that we can be successful in. We need to reduce the scope. We need to trim down, focus maybe on

429
00:34:13.040 --> 00:34:17.360
a smaller area, try to deliver that one first, reassess everything. And then eventually maybe

430
00:34:17.360 --> 00:34:20.640
you come up with like, this might be a three months worth of project. And at that point,

431
00:34:20.640 --> 00:34:25.440
you have the risk a lot, the success of that investment, because you are much more likely

432
00:34:25.440 --> 00:34:30.000
to come up after those three months with something valuable rather than investing years into something

433
00:34:30.000 --> 00:34:35.520
that might not turn out to be so important after the three years. So what happens next? At this

434
00:34:35.520 --> 00:34:40.160
point, we are ready to roll. How do we continue?

435
00:34:40.160 --> 00:34:44.640
When people think about this approach to software development, it sounds fuzzier and maybe less of a commitment. Maybe it's just more of like a

436
00:34:44.640 --> 00:34:50.160
cop out from the developers, because you're not committing to a rigid timeline. In fact, to do it

437
00:34:50.160 --> 00:34:54.480
right, it all it means is that you're doing more planning, you're just spreading it over time,

438
00:34:54.480 --> 00:34:58.720
and you're constantly planning. Now there's that old saying that says, plans are useless, but

439
00:34:58.720 --> 00:35:04.800
planning is critical. And that's what this really is about. Rather than say, okay, here's a plan

440
00:35:04.800 --> 00:35:10.160
that gives us very fixed scope in a fixed period is we time box our milestones. So we say, okay,

441
00:35:10.160 --> 00:35:15.040
well, here's what we're trying to achieve. But let's make an initial time box. And for a new

442
00:35:15.040 --> 00:35:20.800
customer, first greenfield project, or actually any type of customer, we try to limit the duration

443
00:35:20.800 --> 00:35:24.720
of the first engagement to like six to eight weeks, so maybe three or four sprints. And that

444
00:35:24.720 --> 00:35:30.240
gives us and the customer enough time to see a lot of value. And it's generally a good enough

445
00:35:30.240 --> 00:35:34.320
amount of time to set the foundation and deliver something that's really valuable from a business

446
00:35:34.400 --> 00:35:38.720
perspective to production that you can iterate on from that point. And it seems like a short

447
00:35:38.720 --> 00:35:41.920
amount of time to a lot of people. But if you're really focused and you've got a very high

448
00:35:41.920 --> 00:35:46.320
performing lean team, you can do a lot in that amount of time. After that, sprint zero, which

449
00:35:46.320 --> 00:35:50.480
is critical foundation, you generally have a good idea of what that value is. So you can kick off

450
00:35:50.480 --> 00:35:55.840
your regular sprint, sprint cadence. Sometimes agile teams work in sprints. Sometimes it's more

451
00:35:55.840 --> 00:36:02.080
kind of Kanban kind of continuous taking tasks off. More often than not, we work in two weeks

452
00:36:02.080 --> 00:36:07.520
sprints. And the idea of that is you've got, that's the kind of feedback loop in terms of

453
00:36:07.520 --> 00:36:12.480
talking to your stakeholders and end users and understanding how to course correct your plan.

454
00:36:13.200 --> 00:36:18.720
The main activity within these sprints, of course, is coding, development, delivery of prioritized

455
00:36:18.720 --> 00:36:23.280
features and tasks, including all of the best practices like continuous deployment to your

456
00:36:23.280 --> 00:36:27.840
production environment. That's something we put in from the very start so that it doesn't become

457
00:36:27.840 --> 00:36:33.200
a big effort later. It's always good to get all of those production deployment, best practices,

458
00:36:33.200 --> 00:36:37.920
observability, quality control in from the very start. It's much cheaper to do it at the very

459
00:36:37.920 --> 00:36:42.560
start and then just increment them over time. So it involves programming, the creation of

460
00:36:42.560 --> 00:36:47.040
virtual infrastructure in a cloud environment, documentation, tests, all of that. Studies have

461
00:36:47.040 --> 00:36:52.400
shown that waiting until the end of a sprint or, you know, monthly or three monthly release cycles

462
00:36:52.400 --> 00:36:56.800
to deploy software, that's been shown to slow down high-performing teams. So we follow the

463
00:36:56.800 --> 00:37:01.440
practice of continuous delivery. So it just becomes a habit that you do without even thinking

464
00:37:01.440 --> 00:37:06.560
about it. That's automated, highly and tested. Once you've got good planning in place,

465
00:37:07.360 --> 00:37:12.160
hopefully the items on your backlog, those features, whatever it is, ideally they should

466
00:37:12.160 --> 00:37:16.240
take between like a half a day or three days to deliver. The reason for that is that if you've

467
00:37:16.240 --> 00:37:21.680
got unexpected hitches along the way, external blockers, sometimes as a developer, we end up

468
00:37:21.680 --> 00:37:27.120
spending a day or two resolving an unanticipated issue. But if your units of work are small enough,

469
00:37:27.120 --> 00:37:31.600
then the impact is less overall and the time to adapt and of course correct. It doesn't have such

470
00:37:31.600 --> 00:37:35.280
an impact on the overall delivery schedule. Two-week sprints, there's always meetings,

471
00:37:35.280 --> 00:37:40.160
of course. Some people live by these meetings, some that when they work well, they're great for

472
00:37:40.160 --> 00:37:45.200
everybody and they get a lot of satisfaction. They can become a pain for a lot of developer teams

473
00:37:45.200 --> 00:37:50.160
when these meetings are not done well, because they think it's just a bunch of managers distracting

474
00:37:50.160 --> 00:37:54.720
you from the work you're supposed to be doing just to talk rubbish. Believe me, I've worked

475
00:37:54.720 --> 00:37:58.480
in companies where agile software has been done really well and I've been lucky enough to be in

476
00:37:58.480 --> 00:38:02.240
that position. And when it works, it really, really works and makes everybody more productive.

477
00:38:02.240 --> 00:38:07.120
So we try to get a good balance ration, try to keep the meetings focused and short and not take

478
00:38:07.120 --> 00:38:11.360
too much of people's times. Planning meeting at the start of a sprint with the product owner,

479
00:38:11.360 --> 00:38:15.920
the delivery team, that's about reviewing the top of the backlog, checking your priorities,

480
00:38:15.920 --> 00:38:20.960
adjusting, getting more clarity on specific features and just having a good sense of what

481
00:38:20.960 --> 00:38:24.320
you're going to try and achieve over the next couple of weeks. Then you have a daily check-in,

482
00:38:24.320 --> 00:38:29.360
which is about raising and tackling any blockers, reviewing your work done, and just basically

483
00:38:29.360 --> 00:38:34.240
self-organizing the people who are involved in delivering, self-organizing to get that day's

484
00:38:34.240 --> 00:38:40.320
activity done. And it should not take more than 10 or 15 minutes. If it is, there's a red flag

485
00:38:40.320 --> 00:38:44.800
there. It's typical at the end of the sprint then to review. You have a demo with your stakeholders

486
00:38:44.800 --> 00:38:50.960
where you showcase everything you've done. You get feedback on it. They say whether it meets the

487
00:38:50.960 --> 00:38:55.920
needs, fulfills the mission. You look at your KPIs, your checklists, look at your risks and

488
00:38:55.920 --> 00:39:02.240
your actions. Now it's pretty common in like agile methodologies like Scrum to have that end of sprint

489
00:39:02.240 --> 00:39:08.400
demo. What we like to do is actually a weekly demo at least, and also ad hoc demos to stakeholders

490
00:39:08.480 --> 00:39:15.200
even, because I think two weeks to wait to show them the work you did maybe 10 days ago,

491
00:39:15.200 --> 00:39:18.640
it's quite a long feedback loop and doesn't give you a chance to course correct quickly enough.

492
00:39:19.440 --> 00:39:24.880
It also often causes you to rush the demo and maybe do a little bit of a polished demo where

493
00:39:24.880 --> 00:39:28.960
you're just trying to show all of the nice things you've built. A demo is much more valuable for

494
00:39:28.960 --> 00:39:33.040
everybody where you show the stuff that didn't work as well as the show the stuff that did work.

495
00:39:33.040 --> 00:39:37.840
It goes back to that transparency principle we talked about at the start that we try to adhere

496
00:39:37.840 --> 00:39:42.960
to. It establishes a lot more trust. You can show things a lot more detail and as well it means

497
00:39:42.960 --> 00:39:47.520
there's not a lot of pressure for everybody to be there and to be super engaged in the demo at the

498
00:39:47.520 --> 00:39:52.800
end of every sprint. You can maybe miss one every once in a while and it's not such a big deal.

499
00:39:52.800 --> 00:39:58.800
So I encourage people to think about more regular and more honest and raw transparent demos as well.

500
00:39:59.440 --> 00:40:04.320
So getting the value in those meetings measured, checking that you're not wasting time,

501
00:40:05.040 --> 00:40:09.760
people aren't just phoning it in and checking in and nodding along to the meeting while they keep

502
00:40:09.760 --> 00:40:14.240
coding. That's important because what's the point if that happens? You have to make sure that they're

503
00:40:14.240 --> 00:40:18.720
valuable and I always think if you're not either contributing value to a meeting or getting value

504
00:40:18.720 --> 00:40:22.640
from a meeting just don't show up. You're better off doing something else and you're better off

505
00:40:22.640 --> 00:40:27.360
kind of raising it and saying okay how can we make this more valuable for everyone who is there.

506
00:40:27.360 --> 00:40:30.560
So we've gone through sprint zero. We've gone through the regular sprints. Luciano,

507
00:40:31.120 --> 00:40:37.280
should we talk about milestones and releases, things that are less discussed in agile processes?

508
00:40:41.760 --> 00:40:47.680
Yeah, I think it's really important to clarify that this process might seem like something that doesn't really have a clear vision but it's actually quite the opposite. Meaning that

509
00:40:47.680 --> 00:40:53.360
you are only trying to minimize the risk that something changes and you are not ready for it

510
00:40:53.360 --> 00:40:58.400
or there is that you misunderstood something and you realize that too late but you are still driven

511
00:40:58.400 --> 00:41:03.840
by business needs. And the business will probably need things like get new customers, get specific

512
00:41:03.840 --> 00:41:08.720
feature out that customers are going to be paying for or maybe there is a marketing element to it.

513
00:41:08.720 --> 00:41:13.680
So you'll need to have certain things ready before a marketing campaign can be kicked off or maybe I

514
00:41:13.680 --> 00:41:17.520
don't know you are discussing with investors and you have agreed certain things with investors so

515
00:41:17.520 --> 00:41:23.120
you need to meet certain goals or features or number of customers to be able to secure another

516
00:41:23.120 --> 00:41:27.520
round of funding. So all these things are something that somehow needs to be taken into account.

517
00:41:27.520 --> 00:41:32.080
So even though you are following this approach that is very agile, you are still driven by

518
00:41:32.080 --> 00:41:36.720
milestones and releases that are very closely tied to what the business needs to effectively

519
00:41:36.720 --> 00:41:43.840
survive and be successful. So it's interesting to be able to find a good balance between keeping

520
00:41:43.840 --> 00:41:47.840
that vision in terms of business but also keeping a methodology that is flexible enough but it's

521
00:41:47.840 --> 00:41:52.960
definitely doable as long as you keep both things in mind. And I think this is very important. This

522
00:41:52.960 --> 00:41:57.280
is why it's very important to have both business people and technical people involved in the process

523
00:41:57.280 --> 00:42:01.360
and have them to be able to communicate effectively together and understand together what is

524
00:42:01.360 --> 00:42:05.520
each other's responsibility and how can they work together rather than working against each other.

525
00:42:05.520 --> 00:42:11.520
So I think it's interesting that there might be different scenarios. For instance, when you are

526
00:42:11.520 --> 00:42:16.160
creating a new platform for Scratch, what we try to do in those six to eight weeks is generally

527
00:42:16.160 --> 00:42:20.960
come up with an MVP that we have in production. So it's something that we can show to people,

528
00:42:20.960 --> 00:42:26.320
we can show to customers, we can show to investors and that clearly communicates this is why this

529
00:42:26.320 --> 00:42:31.040
project makes sense. And this is why either as a customer you should buy this product or maybe as

530
00:42:31.040 --> 00:42:35.520
an investor you should invest in this business to move it to the next phase. So I think it's

531
00:42:35.520 --> 00:42:41.600
very important for us to agree with our customers. This is what we want to deliver and to give them a

532
00:42:41.600 --> 00:42:46.960
chance to make sure that they can get that value straight away. The sooner we do that, I think that

533
00:42:46.960 --> 00:42:51.680
the easier it's going to be for our customers to evaluate this kind of partnership and decide what

534
00:42:51.680 --> 00:42:56.560
to do next. And what to do next is always an interesting question. There might be different

535
00:42:56.560 --> 00:43:02.240
outcomes. Sometimes we realize and our customer realize that even if we did an excellent job,

536
00:43:02.240 --> 00:43:06.080
the customer might be better off continuing on their own. Maybe they can build their own

537
00:43:06.080 --> 00:43:10.720
technical team. Maybe they can just totally onboard something that we built together with

538
00:43:10.720 --> 00:43:14.560
them and continue developing it with their own internal team that they might already have.

539
00:43:14.560 --> 00:43:19.040
So that's totally an option. And when that happens, it doesn't mean that we haven't been successful.

540
00:43:19.040 --> 00:43:23.040
Actually means that we've been extremely successful and we are going to help the customer

541
00:43:23.040 --> 00:43:27.920
to just move on to the next phase and continue building things on their own. In other cases,

542
00:43:27.920 --> 00:43:32.240
we can still decide to continue the partnership. Maybe the customer decides that they want to build

543
00:43:32.240 --> 00:43:36.240
more stuff with us, maybe expand that project, build more features, maybe build the next phase

544
00:43:36.240 --> 00:43:40.560
of that project, or even just move us to other projects because in bigger companies, they always

545
00:43:40.560 --> 00:43:45.760
have a number of projects going on at the same time and we might be helpful in other projects

546
00:43:45.760 --> 00:43:50.480
as well. Or maybe there are other projects that they want to start as more experimental activities

547
00:43:50.480 --> 00:43:55.680
and we might be the partner that helps them to try to build something new. So in summary, today,

548
00:43:55.680 --> 00:44:02.240
what we did is covering what are our principles, how do we work as a company, and we try to be

549
00:44:02.240 --> 00:44:07.120
trusted partners for our customers. We don't just want to build hours of engineering time,

550
00:44:07.120 --> 00:44:12.080
but we want to make sure our customers will succeed with their own business goals. And we

551
00:44:12.080 --> 00:44:16.480
are the enablers from a technical perspective to make sure that they're going to deliver the best

552
00:44:16.480 --> 00:44:20.880
technical stuff that can fulfill that specific business need. We also spoke a little bit about

553
00:44:20.880 --> 00:44:25.200
the software world and how there are so many misconceptions on how you should be building

554
00:44:25.200 --> 00:44:29.920
software, even though it's not a perfect science and everyone has its own kind of incarnation of

555
00:44:29.920 --> 00:44:34.080
what good software development looks like. I think it's important to recognize that there are some

556
00:44:34.080 --> 00:44:38.160
principles, some guiding principles that are universally recognized and you should be using

557
00:44:38.240 --> 00:44:42.880
them. Then as long as you have a clear process and you can work effectively with your customers,

558
00:44:42.880 --> 00:44:47.760
it's fine to probably have slightly different take on how you actually organize the day to day.

559
00:44:47.760 --> 00:44:52.000
We have our own way that we described today, and hopefully you found that interesting.

560
00:44:52.640 --> 00:44:57.840
But we are also, as usual, very curious to hear it from you. Do you use a very similar process when

561
00:44:57.840 --> 00:45:02.960
you work with technology projects? If you are also a consultant, what are we saying? Does it make any

562
00:45:02.960 --> 00:45:07.680
sense or do you do something entirely different? I think it's really important to have a healthy

563
00:45:07.680 --> 00:45:12.880
conversation in our circle to compare all the different processes and learn from each other.

564
00:45:12.880 --> 00:45:18.160
What does it really work? What doesn't work? How can we grow together and get better at this craft?

565
00:45:18.160 --> 00:45:23.120
Definitely let us know what you think. Leave us a comment either on YouTube or reach out to us

566
00:45:23.120 --> 00:45:27.840
on socials. All the links will be in the show notes as usual. Thank you very much and we'll

567
00:45:27.840 --> 00:45:32.160
see you in the next episode.
