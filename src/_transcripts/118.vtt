WEBVTT

1
00:00:00.000 --> 00:00:04.880
Today, we're diving into a fundamental practice for managing your AWS infrastructure using

2
00:00:04.880 --> 00:00:06.280
multiple accounts.

3
00:00:06.280 --> 00:00:11.060
Whether you're a seasoned cloud expert or you're just dipping your toes into AWS waters,

4
00:00:11.060 --> 00:00:14.960
this best practice can really make a difference to the way you handle your business applications

5
00:00:14.960 --> 00:00:16.200
and your data.

6
00:00:16.200 --> 00:00:21.340
And if you've ever explored the AWS Well-Architected Framework, you might have come across mentions

7
00:00:21.340 --> 00:00:26.100
of the benefits of multiple accounts from enhancing operational excellence to bolstering

8
00:00:26.100 --> 00:00:28.640
security and cost optimization.

9
00:00:28.640 --> 00:00:33.220
At fourTheorem, with our work, we've seen firsthand how using this approach can really make a

10
00:00:33.220 --> 00:00:38.820
huge difference in organizations' cloud strategies, regardless of your cloud maturity level.

11
00:00:38.820 --> 00:00:41.800
But how do you actually implement this strategy without getting overwhelmed?

12
00:00:41.800 --> 00:00:43.040
Well, that's where we come in.

13
00:00:43.040 --> 00:00:46.000
And in this episode, we're hoping to give you an introduction on everything you need

14
00:00:46.000 --> 00:00:50.200
to know when it comes to managing AWS organizations and accounts.

15
00:00:50.200 --> 00:00:53.840
And we'll also share a number of AWS services and tools that you can use to make your own

16
00:00:53.840 --> 00:00:57.940
life easy and do all of this management using infrastructure as code.

17
00:00:57.940 --> 00:01:05.300
Welcome to another episode of AWS Bites with myself, Eoin and Luciano.

18
00:01:05.300 --> 00:01:15.660
AWS Bites is brought to you by fourTheorem, an AWS partner that does lots of cloud stuff

19
00:01:15.660 --> 00:01:19.260
really well, including helping you to set up your AWS organization.

20
00:01:19.260 --> 00:01:24.140
If that's something you're looking for, go to fourtheorem.com to read more about us and to

21
00:01:24.140 --> 00:01:25.380
get in touch.

22
00:01:25.380 --> 00:01:29.200
Using multiple accounts under an organization, no matter what size you are, it's often referred

23
00:01:29.200 --> 00:01:31.060
to as a landing zone.

24
00:01:31.060 --> 00:01:34.780
AWS uses this term landing zone quite a lot, and they've got a definition which says that

25
00:01:34.780 --> 00:01:40.420
landing zone is a well-architected multi-account AWS environment that's a starting point from

26
00:01:40.420 --> 00:01:43.380
which you can deploy workloads and applications.

27
00:01:43.380 --> 00:01:47.480
And it provides you with a baseline to get started with multi-account architecture, including

28
00:01:47.480 --> 00:01:52.520
identity and access management, governance, data security, network design, and logging.

29
00:01:52.520 --> 00:01:56.220
There's a link to that full verbatim description in the show notes.

30
00:01:56.220 --> 00:01:59.880
But what are the advantages of having multiple AWS accounts?

31
00:01:59.880 --> 00:02:01.080
There are several advantages.

32
00:02:01.080 --> 00:02:03.680
The first one that I would like to start with is isolation.

33
00:02:03.680 --> 00:02:09.100
And I mean isolation of resources because every single AWS account operates independently

34
00:02:09.100 --> 00:02:12.440
and it provides effectively a boundary for resources.

35
00:02:12.440 --> 00:02:18.080
So this kind of isolation allows you to get better security compliance and also the way

36
00:02:18.080 --> 00:02:22.400
you access these resources, you have effectively more controls around who is allowed to do

37
00:02:22.400 --> 00:02:25.540
that and what kind of access level they have.

38
00:02:25.540 --> 00:02:28.040
Different teams in fact can have their own accounts.

39
00:02:28.040 --> 00:02:32.440
For instance, if you organize your teams by business domains, you could create accounts

40
00:02:32.440 --> 00:02:36.840
in AWS that represent those business domains and that reduce the risk of interference.

41
00:02:36.840 --> 00:02:40.780
For instance, different teams might not be worried about, for instance, exhausting each

42
00:02:40.780 --> 00:02:41.780
other quotas.

43
00:02:41.780 --> 00:02:45.440
Maybe, I don't know, the usual example that we make is the number of Lambdas that they

44
00:02:45.440 --> 00:02:47.520
can run at a given point in time.

45
00:02:47.520 --> 00:02:50.440
Different teams will have their own quota to manage and they're not going to be conflicting

46
00:02:50.480 --> 00:02:53.960
with each other, which is a great thing to have when you're thinking about running lots

47
00:02:53.960 --> 00:02:55.360
of workloads at scale.

48
00:02:55.360 --> 00:02:59.520
And that is also important in terms of security standards and it can make easy to comply with

49
00:02:59.520 --> 00:03:05.440
regulations such as GDPR, HIPAA, or PCI and things like that.

50
00:03:05.440 --> 00:03:09.360
Because since you have more isolation, it's easier to prove that you are basically not

51
00:03:09.360 --> 00:03:13.320
leaking data and you are complying with all the standards that this kind of regulation

52
00:03:13.320 --> 00:03:14.980
will impose on you.

53
00:03:14.980 --> 00:03:19.240
Another similar aspect is what we generally call environment segregation.

54
00:03:19.240 --> 00:03:23.560
This is more on the idea that even within the same domain, you might still want to provision

55
00:03:23.560 --> 00:03:28.320
multiple accounts because you want to use different accounts for different environments.

56
00:03:28.320 --> 00:03:32.400
For instance, if you have, let's say, the usual e-commerce example, you might have a

57
00:03:32.400 --> 00:03:35.220
domain that is called, I don't know, maybe fulfillment.

58
00:03:35.220 --> 00:03:37.680
In that domain, you deploy specific workloads.

59
00:03:37.680 --> 00:03:41.080
You might want to use different accounts, one for instance, for development, one for

60
00:03:41.080 --> 00:03:43.140
testing, one for production.

61
00:03:43.140 --> 00:03:46.720
And this is really useful because you are effectively minimizing the risk of disruption

62
00:03:46.720 --> 00:03:50.600
to those systems while you are experimenting, for instance, because you want to build a

63
00:03:50.600 --> 00:03:53.560
new feature or maybe you want to try maybe a different database.

64
00:03:53.560 --> 00:03:58.000
You can do all these things in environments that are dedicated to testing and building

65
00:03:58.000 --> 00:04:01.960
before you actually move all this stuff into production where you might create disruption

66
00:04:01.960 --> 00:04:04.560
if you didn't have a chance to test things properly.

67
00:04:04.560 --> 00:04:09.340
And this approach also allows you to separate testing data or development data from the

68
00:04:09.340 --> 00:04:14.040
actual production data, which is another great thing, for instance, when you have applications

69
00:04:14.040 --> 00:04:16.480
that are managing customer sensitive data.

70
00:04:16.480 --> 00:04:20.440
In that case, you probably don't want to give access to that production data with customer

71
00:04:20.440 --> 00:04:24.500
sensitive data to the other environments where you are effectively just testing and lots

72
00:04:24.500 --> 00:04:28.280
of developers are going to need to access that data to create all sorts of different

73
00:04:28.280 --> 00:04:29.360
test cases.

74
00:04:29.360 --> 00:04:32.000
Another advantage is short-lived developer credentials.

75
00:04:32.000 --> 00:04:37.280
This comes because when you have multiple accounts and you are using IAM identity center

76
00:04:37.280 --> 00:04:43.120
and AWS organizations, effectively you have to pick a specific account and a specific

77
00:04:43.120 --> 00:04:47.000
role to work with every time you need to do something programmatically.

78
00:04:47.000 --> 00:04:51.520
And this is very convenient because you can prepare specific roles for specific accounts.

79
00:04:51.520 --> 00:04:56.360
For instance, you might have a role that only allows you to read logs from S3 and it's a

80
00:04:56.360 --> 00:04:58.380
read only type of role.

81
00:04:58.380 --> 00:05:02.520
And you are going to assume that specific role when you need to read S3 logs.

82
00:05:02.520 --> 00:05:04.760
And that's basically limiting the plus radius.

83
00:05:04.760 --> 00:05:08.440
If accidentally you do something else, maybe because you are writing a script and try to

84
00:05:08.440 --> 00:05:12.680
automate something, you are not going to risk that maybe you can delete files or maybe you

85
00:05:12.720 --> 00:05:15.680
can access a database that you're not allowed to access to.

86
00:05:15.680 --> 00:05:19.120
And of course, you can take that example and use it for other use cases.

87
00:05:19.120 --> 00:05:22.440
Maybe I don't know, not just logs, but you can think about managing budget.

88
00:05:22.440 --> 00:05:24.320
You can think about accessing databases.

89
00:05:24.320 --> 00:05:28.480
You can think about security roles where you can go and check maybe, I don't know, guard

90
00:05:28.480 --> 00:05:30.280
duty or other things like that.

91
00:05:30.280 --> 00:05:31.960
So all of this stuff is very powerful.

92
00:05:31.960 --> 00:05:37.120
And when it comes to programmatic credentials, you basically don't use anymore the long-lived

93
00:05:37.120 --> 00:05:41.820
credentials because you can use tools that will give you temporary credentials only to

94
00:05:41.820 --> 00:05:46.140
access the specific role that you need to access to for one hour, two hours, four hours,

95
00:05:46.140 --> 00:05:47.140
or something like that.

96
00:05:47.140 --> 00:05:50.420
It's not going to be long lasting credentials that are going to live in your machines and

97
00:05:50.420 --> 00:05:54.240
might be easy to steal and abuse for other things in the future.

98
00:05:54.240 --> 00:05:59.020
And finally, another point is cost management because by separating resources into different

99
00:05:59.020 --> 00:06:04.440
accounts, you have a natural bucket, which is that account in terms of collecting and

100
00:06:04.440 --> 00:06:09.040
aggregating all the costs for the meaningful purpose of that specific account.

101
00:06:09.040 --> 00:06:13.820
So of course you can use tags, but you know that with tags you need to be very diligent.

102
00:06:13.820 --> 00:06:17.600
And if you want to aggregate cost by tag, you might be forgetting about tagging certain

103
00:06:17.600 --> 00:06:21.080
resources or you might be using different tags and they don't necessarily match all

104
00:06:21.080 --> 00:06:22.080
the time.

105
00:06:22.080 --> 00:06:25.320
From the account perspective, it's much easier to just say, give me all the cost in this

106
00:06:25.320 --> 00:06:26.320
account.

107
00:06:26.320 --> 00:06:31.680
And you can also easily set up budgets and alarms to say, for this particular account,

108
00:06:31.680 --> 00:06:33.280
maybe it's a development account.

109
00:06:33.280 --> 00:06:36.880
I don't expect to be spending more than $200 a month maybe.

110
00:06:36.880 --> 00:06:39.320
And if you go higher than that, just send me an alarm.

111
00:06:39.320 --> 00:06:42.840
So you can easily create these kind of utilities that will tell you whether you are spending

112
00:06:42.840 --> 00:06:46.100
more than you are supposed to be spending on a specific account.

113
00:06:46.100 --> 00:06:52.600
So I guess the final point is that doing this structure, creating effectively a landing

114
00:06:52.600 --> 00:06:56.440
zone with all sorts of different accounts can be a little bit challenging.

115
00:06:56.440 --> 00:07:00.360
And hopefully after this episode, it's going to feel a little bit less scary, but there

116
00:07:00.360 --> 00:07:02.920
are lots of benefits that are really, really important.

117
00:07:02.960 --> 00:07:07.280
So I will say that don't be scared, just get on board with it.

118
00:07:07.280 --> 00:07:10.280
And the sooner you do all of this, the better it's going to be.

119
00:07:10.280 --> 00:07:14.680
And I guess that leads me to another question, because maybe you are not a big company with

120
00:07:14.680 --> 00:07:16.120
thousands of employees.

121
00:07:16.120 --> 00:07:18.340
You don't necessarily need hundreds of accounts.

122
00:07:18.340 --> 00:07:20.240
You don't have multiple workloads.

123
00:07:20.240 --> 00:07:22.080
Maybe you are just a solo developer.

124
00:07:22.080 --> 00:07:23.080
Maybe you are a student.

125
00:07:23.080 --> 00:07:25.080
Maybe you are just learning about AWS.

126
00:07:25.080 --> 00:07:29.000
Is it worth for you to go through all this journey and learn all these different things?

127
00:07:29.000 --> 00:07:32.900
Or you can just be better off with long-lived credentials, one account, and just keep to

128
00:07:32.900 --> 00:07:35.860
doing things in the standard way, so to speak.

129
00:07:35.860 --> 00:07:39.880
This is probably a matter of opinion, but I think we believe that everyone using

130
00:07:39.880 --> 00:07:44.580
AWS should invest a little bit of time learning how to set up the organization and effectively

131
00:07:44.580 --> 00:07:46.460
managing multiple accounts.

132
00:07:46.460 --> 00:07:50.140
And one of the main messages I'd say is that it's not that complicated.

133
00:07:50.140 --> 00:07:52.220
It doesn't take a huge amount of time to do it.

134
00:07:52.220 --> 00:07:56.460
And it is worth the investment because everybody is generally moving towards multiple accounts

135
00:07:56.460 --> 00:07:57.460
anyway.

136
00:07:57.460 --> 00:08:02.260
So if you're not exploring a little bit how that all works, then you might be left behind

137
00:08:02.300 --> 00:08:05.300
a little bit and you might start getting a little bit of FOMO.

138
00:08:05.300 --> 00:08:09.460
So why would you do it if you're a solo developer or just experimenting in AWS?

139
00:08:09.460 --> 00:08:11.580
Why would you bother setting up accounts?

140
00:08:11.580 --> 00:08:14.080
Well, you're going to learn, right?

141
00:08:14.080 --> 00:08:17.020
So I'd say for learning purposes, even if you're hosting some side projects, there's

142
00:08:17.020 --> 00:08:18.440
lots of benefits for you.

143
00:08:18.440 --> 00:08:20.620
We already mentioned some of the benefits you went through with Luciana.

144
00:08:20.620 --> 00:08:23.460
And they're even valid when you're running small workloads on AWS.

145
00:08:23.460 --> 00:08:27.440
And it helps you just to be a bit more organized when you're deploying lots of different hobby

146
00:08:27.440 --> 00:08:31.340
projects or your own blog or whatever it is to AWS.

147
00:08:31.420 --> 00:08:35.460
But if at some point you decide to invest a little bit more on AWS and maybe you're

148
00:08:35.460 --> 00:08:39.940
doing freelancing or you're working for a company doing a lot on AWS, having your own

149
00:08:39.940 --> 00:08:43.020
multi-account environment is definitely going to help you there.

150
00:08:43.020 --> 00:08:46.580
So maybe if one of your side projects starts to pick up and you decide to turn it into

151
00:08:46.580 --> 00:08:49.240
a commercial project, it could be the start of a new SaaS service.

152
00:08:49.240 --> 00:08:52.640
If you've put a little bit of manners around your landing zone to begin with, then that's

153
00:08:52.640 --> 00:08:54.060
certainly going to help you.

154
00:08:54.060 --> 00:08:58.220
Or if you want someone to give you a help at some point, you need to hire somebody else

155
00:08:58.220 --> 00:09:01.180
to work on the code with you or get some more contributions.

156
00:09:01.180 --> 00:09:04.980
Then it's easier to give them access to your organization if you've got a little bit of

157
00:09:04.980 --> 00:09:08.040
segregation between all of the stuff you've deployed in there.

158
00:09:08.040 --> 00:09:11.760
Maybe eventually you want to grow your efforts into a proper company and you have multiple

159
00:09:11.760 --> 00:09:16.020
teams and multiple departments and they want to interact with an AWS organization.

160
00:09:16.020 --> 00:09:22.340
Or maybe eventually you'll sell the whole lot for billions and you'll be a startup unicorn.

161
00:09:22.340 --> 00:09:27.940
I don't know if you care, but if you were to do that and if you were to retire and go

162
00:09:27.940 --> 00:09:31.400
and live on a Caribbean island, you might want to know that what you've left behind

163
00:09:31.400 --> 00:09:34.620
is somewhat well organized for the people who have to keep maintaining it.

164
00:09:34.620 --> 00:09:38.020
So I suppose the point here is that investing in setting up the landing zone, it's just

165
00:09:38.020 --> 00:09:39.820
like creating a great foundation.

166
00:09:39.820 --> 00:09:41.380
And it doesn't matter if you want to start small.

167
00:09:41.380 --> 00:09:43.680
It really doesn't take very long.

168
00:09:43.680 --> 00:09:48.460
You can turn on organizations and start creating new accounts very quickly and then start adding

169
00:09:48.460 --> 00:09:53.400
some of the more advanced governance and compliance type stuff later on.

170
00:09:53.400 --> 00:09:57.740
And it really just helps you to grow your AWS presence and get off to a good start.

171
00:09:57.740 --> 00:10:02.300
And you get all those benefits like temporary credentials and sign on with your Google account

172
00:10:02.300 --> 00:10:06.380
or whatever identity provider you want to use, even the built-in one.

173
00:10:06.380 --> 00:10:07.380
Yeah.

174
00:10:07.380 --> 00:10:10.660
It's worth reminding that an account at the end of the day is just a container for resources

175
00:10:10.660 --> 00:10:12.740
within AWS.

176
00:10:12.740 --> 00:10:16.060
And another interesting detail that I think you will start to realize very quickly when

177
00:10:16.060 --> 00:10:20.080
you create your second account is that every single account is uniquely tied to an email

178
00:10:20.080 --> 00:10:21.080
address.

179
00:10:21.080 --> 00:10:26.100
So you might need to start thinking also how to get aliases for all the different accounts

180
00:10:26.100 --> 00:10:28.940
so that you are effectively managing all of them under one email.

181
00:10:28.940 --> 00:10:31.260
Otherwise, it might get a little bit messy.

182
00:10:31.260 --> 00:10:32.260
So that's another concern.

183
00:10:32.260 --> 00:10:36.580
And if you use things like Gmail, it's easy to generate aliases.

184
00:10:36.580 --> 00:10:41.780
You can use, for instance, the plus syntax to just say, I don't know, Luciano plus production

185
00:10:41.780 --> 00:10:43.920
at gmail.com, something like that.

186
00:10:43.920 --> 00:10:47.340
So this is just a practical tip, something you will start to face very quickly when you

187
00:10:47.340 --> 00:10:48.740
create multiple accounts.

188
00:10:48.740 --> 00:10:54.500
But the other question you might have is, okay, but how many accounts do I need to create?

189
00:10:55.060 --> 00:10:58.140
And what is a way to organize them that kind of makes sense?

190
00:10:58.140 --> 00:11:01.340
Because initially you might just be lost in trying to think, okay, right now I've been

191
00:11:01.340 --> 00:11:03.180
using one account for everything.

192
00:11:03.180 --> 00:11:07.020
Maybe I can see a future where I might need a second account for another workload, but

193
00:11:07.020 --> 00:11:11.340
is there any best practice on how to organize accounts in a more scalable way that allows

194
00:11:11.340 --> 00:11:13.520
me to grow even 10 years down the line?

195
00:11:13.520 --> 00:11:16.540
You have a structure that can fulfill what you need to do.

196
00:11:16.540 --> 00:11:20.860
And really there isn't one way to do that.

197
00:11:21.220 --> 00:11:25.580
AWS gives you a bunch of different tools so that you can actually put a structure in place.

198
00:11:25.580 --> 00:11:29.580
And I think it's worth mentioning a little bit more what is the naming that AWS gives

199
00:11:29.580 --> 00:11:33.260
you to the different entities that you can use to organize effectively your organization

200
00:11:33.260 --> 00:11:34.260
accounts.

201
00:11:34.260 --> 00:11:38.540
So generally there is a root entity, which is kind of a high level container for your

202
00:11:38.540 --> 00:11:39.540
accounts.

203
00:11:39.540 --> 00:11:43.420
And initially when you open your first account, you effectively have this root and only your

204
00:11:43.420 --> 00:11:46.860
own first account, which is generally referred to as the management account, because it's

205
00:11:46.860 --> 00:11:50.100
the one that will allow you to control all the other accounts.

206
00:11:50.340 --> 00:11:53.220
And then you can create additional accounts directly in the root level.

207
00:11:53.220 --> 00:11:57.140
So they will all be affected at the same level of depth.

208
00:11:57.140 --> 00:11:58.780
Imagine maybe a file system can help you out.

209
00:11:58.780 --> 00:12:02.420
It's like you have only one folder and then you have a bunch of files into that folder.

210
00:12:02.420 --> 00:12:04.780
But you can also decide to create sub levels.

211
00:12:04.780 --> 00:12:09.100
And the tool that AWS gives you is called organizational unit or OU.

212
00:12:09.100 --> 00:12:13.540
And the idea is that effectively that's a group that you can create and inside the group

213
00:12:13.540 --> 00:12:18.300
you can create additional accounts and you can even nest additional organizational units.

214
00:12:18.300 --> 00:12:22.780
So again, in the analogy of file system, it's like you can nest multiple folders and

215
00:12:22.780 --> 00:12:27.340
eventually you will have files into this kind of structure, hierarchical structure.

216
00:12:27.340 --> 00:12:33.340
So at this point, you know that you can organize all your accounts under groups and create

217
00:12:33.340 --> 00:12:38.380
this kind of logical hierarchy where somehow you try to divide things in a way that makes

218
00:12:38.380 --> 00:12:39.380
sense.

219
00:12:39.380 --> 00:12:41.080
But what kind of groups would you want to create?

220
00:12:41.080 --> 00:12:45.220
And again, this is totally up to you, but there are some sensible common practices.

221
00:12:45.220 --> 00:12:49.540
For instance, it's very common to go with a security OU and this is going to be a group

222
00:12:49.540 --> 00:12:53.620
that contains all the accounts where you might want to deploy security related services,

223
00:12:53.620 --> 00:12:55.060
for instance, GuardDuty.

224
00:12:55.060 --> 00:12:59.640
Then very common, you would have a sandbox OU and this is where you do all your experiments.

225
00:12:59.640 --> 00:13:03.380
Maybe if you want to try a new service, deploy like something random quickly just to have

226
00:13:03.380 --> 00:13:07.900
a feeling for what that new service looks like, you will have accounts like for doing

227
00:13:07.900 --> 00:13:10.920
workshops or to just do experimentation.

228
00:13:10.920 --> 00:13:15.320
And you might even use automation there to just delete every single resource in those

229
00:13:15.320 --> 00:13:20.100
accounts, maybe every weekend or at the end of the day, just because these are very disposable

230
00:13:20.100 --> 00:13:22.640
accounts where you just do stuff for trying things around.

231
00:13:22.640 --> 00:13:26.560
You don't want to for things you deploy there to stick longer.

232
00:13:26.560 --> 00:13:31.280
Then generally you would have some kind of workloads, organizational unit.

233
00:13:31.280 --> 00:13:34.760
And this is probably one of the most important ones or the ones that you will be using the

234
00:13:34.760 --> 00:13:37.880
most because this is where you deploy your workloads.

235
00:13:37.880 --> 00:13:42.080
And you might want to organize accounts there by environment as we suggested before.

236
00:13:42.080 --> 00:13:45.360
So for instance, you might even have multiple levels.

237
00:13:45.360 --> 00:13:49.360
For instance, inside workloads, you might have another set of OUs to divide your different

238
00:13:49.360 --> 00:13:50.500
business domains.

239
00:13:50.500 --> 00:13:54.320
And then inside every OU for the business domain, you might have multiple accounts for

240
00:13:54.320 --> 00:13:58.640
development, testing, pre-production, production, QA, whatever makes sense to you in terms of

241
00:13:58.640 --> 00:13:59.640
environments.

242
00:13:59.640 --> 00:14:03.240
And then you might have other utility OUs or account.

243
00:14:03.240 --> 00:14:07.160
For instance, I've seen commonly organization will want to have a place where they can test

244
00:14:07.440 --> 00:14:09.800
different policies that maybe they want to put in place.

245
00:14:09.800 --> 00:14:13.880
So it could be common to have either an account called policy testing account, or maybe an

246
00:14:13.880 --> 00:14:17.000
organization unit where you might deploy multiple accounts.

247
00:14:17.000 --> 00:14:21.920
Or you might also have a suspended OU where you might move things that you want to delete

248
00:14:21.920 --> 00:14:26.760
or that you are suspending for whatever reason makes sense in your organization.

249
00:14:26.760 --> 00:14:30.000
And this is generally useful because when you want to delete an account, you cannot

250
00:14:30.000 --> 00:14:31.000
delete it straight away.

251
00:14:31.000 --> 00:14:35.660
There is a period of time where the account is going to stay there pending deletion.

252
00:14:35.660 --> 00:14:39.660
So it might make sense just to move it somewhere else where you can easily control access and

253
00:14:39.660 --> 00:14:42.620
make sure that people are not going to go there and create new resources as you are

254
00:14:42.620 --> 00:14:44.300
in that process of deletion.

255
00:14:44.300 --> 00:14:48.460
So now that I think you should have a little bit of a better idea of what are the capabilities

256
00:14:48.460 --> 00:14:52.960
and what are some common ways of organizing the accounts, where can we get started?

257
00:14:52.960 --> 00:14:55.340
What is the next thing that people should be doing?

258
00:14:55.340 --> 00:14:59.500
Well thankfully, we have your excellent step-by-step guide you wrote on the fourTheorem blog

259
00:14:59.500 --> 00:15:04.860
Luciano that shows you exactly how to set up IAM identity center and AWS organizations

260
00:15:04.860 --> 00:15:08.540
and use those to create your perfectly crafted landing zone.

261
00:15:08.540 --> 00:15:12.740
So we don't have to repeat all of those steps here, but we'll link the article in the show

262
00:15:12.740 --> 00:15:13.780
notes for you.

263
00:15:13.780 --> 00:15:16.960
What might be more interesting is just to give you a quick overview on the different

264
00:15:16.960 --> 00:15:17.960
parts of it.

265
00:15:17.960 --> 00:15:22.460
So the different services we used in that article and explain why they exist.

266
00:15:22.460 --> 00:15:25.260
Now we've already talked about AWS organizations.

267
00:15:25.260 --> 00:15:29.020
That's your account management service that really enables you to consolidate multiple

268
00:15:29.020 --> 00:15:30.820
AWS accounts together.

269
00:15:30.820 --> 00:15:34.880
And it gives you that account management, consolidated billing, which is very important

270
00:15:34.880 --> 00:15:40.420
if you want to avoid getting hundreds of invoices from AWS every month.

271
00:15:40.420 --> 00:15:44.500
And as an administrator of an organization, you can create accounts in it, invite other

272
00:15:44.500 --> 00:15:49.120
accounts into the organization, and you can also do various things with other services

273
00:15:49.120 --> 00:15:53.040
that give you budgetary security and compliance needs as well.

274
00:15:53.040 --> 00:15:58.340
So other services are becoming more and more integrated into AWS organizations as we push

275
00:15:58.340 --> 00:16:00.700
more towards this model of doing things.

276
00:16:00.700 --> 00:16:03.340
And the next really important one and very interesting one, if you're just setting it

277
00:16:03.340 --> 00:16:07.740
up for your own personal account is IAM Identity Center.

278
00:16:07.740 --> 00:16:12.480
It's pretty much distinct from IAM and it used to be just called AWS Single Sign-On.

279
00:16:12.480 --> 00:16:14.860
So we're just still getting used to the new name.

280
00:16:14.860 --> 00:16:20.380
And this is for really managing human user access to AWS resources.

281
00:16:20.380 --> 00:16:25.960
And it's a place where you can assign users, create users, link users to an external identity

282
00:16:25.960 --> 00:16:29.380
provider and manage the level of access.

283
00:16:29.380 --> 00:16:34.900
So you can configure an IDP, which will allow you to log on with one of your existing login

284
00:16:34.900 --> 00:16:37.320
providers to an AWS organization.

285
00:16:37.320 --> 00:16:42.620
And then you can link your users to the roles and the permissions they will get with individual

286
00:16:42.620 --> 00:16:46.000
AWS accounts or groups of AWS accounts.

287
00:16:46.000 --> 00:16:49.500
Now the article we mentioned shows in a lot of detail what all the steps are that you

288
00:16:49.500 --> 00:16:54.460
can follow to go from zero to a fully functional landing zone with multiple accounts and user

289
00:16:54.460 --> 00:16:55.460
roles.

290
00:16:55.460 --> 00:16:57.200
We'd really recommend trying that out.

291
00:16:57.200 --> 00:17:01.000
And if you don't have an external identity provider for your own personal account, you

292
00:17:01.000 --> 00:17:02.480
can use the built-in one, which is nice.

293
00:17:02.480 --> 00:17:05.440
You don't have to use Google Workspaces or Azure AD.

294
00:17:05.440 --> 00:17:08.860
There's a built-in one which allows you to get up and running pretty quickly.

295
00:17:08.860 --> 00:17:13.920
And then you've got nice enterprise level temporary credentials and all of that good stuff.

296
00:17:13.920 --> 00:17:17.980
Now moving on to Control Tower, it is available in the management console.

297
00:17:17.980 --> 00:17:23.320
And the idea of it is that it gives you a way to set up and govern that landing zone.

298
00:17:23.320 --> 00:17:26.160
It's AWS's solution to creating a landing zone really.

299
00:17:26.200 --> 00:17:30.380
It is the easiest way from an AWS native perspective to get up and running.

300
00:17:30.380 --> 00:17:35.580
We talked about the pros and cons of this versus alternatives in one of our previous

301
00:17:35.580 --> 00:17:39.200
podcasts which we'll be talking about again and link in the show notes.

302
00:17:39.200 --> 00:17:43.400
But it's really a Control Tower is a higher level AWS service that allows you to set up

303
00:17:43.400 --> 00:17:47.840
that landing zone and then provision more accounts and provision resources in those

304
00:17:47.840 --> 00:17:48.840
accounts.

305
00:17:48.840 --> 00:17:54.080
Control Tower is generally used as a AWS management console feature.

306
00:17:54.800 --> 00:17:56.880
It's good to get familiar with the concepts.

307
00:17:56.880 --> 00:18:00.840
Those of us who like infrastructure as code don't necessarily think it's the best solution

308
00:18:00.840 --> 00:18:05.440
for long-term management and we prefer to use infrastructure as code, utils.

309
00:18:05.440 --> 00:18:09.640
Control Tower does integrate with some infrastructure as code tools, but it's really management

310
00:18:09.640 --> 00:18:11.040
console first.

311
00:18:11.040 --> 00:18:13.640
So Luciano, what options do we have around infrastructure as code?

312
00:18:13.640 --> 00:18:14.640
Yes.

313
00:18:14.640 --> 00:18:20.080
The main tool that we use most of the time and we are seeing most of the community referring

314
00:18:20.080 --> 00:18:22.520
to is called OrgFormation.

315
00:18:22.960 --> 00:18:24.640
And this is an open source tool developed by the community.

316
00:18:24.640 --> 00:18:28.320
So it's not an official AWS tool service or solution.

317
00:18:28.320 --> 00:18:31.360
It's an open source project maintained by the community.

318
00:18:31.360 --> 00:18:36.480
And it's a really interesting project because it allows you to effectively fill some of

319
00:18:36.480 --> 00:18:39.160
the missing features of CloudFormation.

320
00:18:39.160 --> 00:18:43.080
Because if you would want to use CloudFormation to manage all these things with infrastructure

321
00:18:43.080 --> 00:18:47.000
as code, you very quickly will bump into the problem that when you deploy a stack with

322
00:18:47.000 --> 00:18:50.520
CloudFormation is effectively tied to one specific account.

323
00:18:50.520 --> 00:18:54.600
So you will need to write all your orchestration to switch between accounts, use different

324
00:18:54.600 --> 00:18:58.360
credentials just to try to deploy different resources.

325
00:18:58.360 --> 00:19:02.120
So OrgFormation tries to backfill for that kind of missing feature and it does a lot

326
00:19:02.120 --> 00:19:03.120
more.

327
00:19:03.120 --> 00:19:07.800
There is actually on the repository a very interesting PDF file that you can download

328
00:19:07.800 --> 00:19:12.400
with 50 different examples showcasing the capabilities of OrgFormation.

329
00:19:12.400 --> 00:19:16.040
So definitely recommended to look at that just to have a feel for what else can it do

330
00:19:16.040 --> 00:19:17.600
more on top of CloudFormation.

331
00:19:17.680 --> 00:19:21.760
But at the end of the day, still using CloudFormation behind the scenes to deploy resources for

332
00:19:21.760 --> 00:19:23.280
you on the different accounts.

333
00:19:23.280 --> 00:19:29.840
So the idea is that once you set up OrgFormation, you can apply changes automatically and reduce

334
00:19:29.840 --> 00:19:32.120
manual work and inconsistency and mistakes.

335
00:19:32.120 --> 00:19:36.480
So you're not going to go to your management account, log in in the web console, and then

336
00:19:36.480 --> 00:19:38.480
start to click around to change things.

337
00:19:38.480 --> 00:19:42.860
But rather you'll be maintaining YAML files that describe everything that represents the

338
00:19:42.860 --> 00:19:49.220
current state of your landing zone, all your accounts and permissions, resources, policies,

339
00:19:49.220 --> 00:19:53.340
everything that you want to manage in a more centralized way with Infrastructure as Com.

340
00:19:53.340 --> 00:19:57.900
And just to give you some example, what you could do, for instance, is just in your YAML,

341
00:19:57.900 --> 00:20:01.420
and by the way, you have a command at the very beginning that allows you to import the

342
00:20:01.420 --> 00:20:04.240
shape of your organization unit and accounts.

343
00:20:04.240 --> 00:20:07.740
So the first command that you generally would run is that one, and then you have a good

344
00:20:07.740 --> 00:20:08.740
starting point.

345
00:20:08.740 --> 00:20:11.100
You don't have to rewrite everything from scratch the first time that you decide to

346
00:20:11.100 --> 00:20:12.680
use OrgFormation.

347
00:20:12.680 --> 00:20:16.600
But once you have that YAML file, maybe you would want to create a new organization unit

348
00:20:16.600 --> 00:20:18.260
and a new account under it.

349
00:20:18.260 --> 00:20:22.920
That generally means changing a few lines of YAML, adding maybe a few extra things in

350
00:20:22.920 --> 00:20:27.360
there, and then you can just apply that template and it's going to deploy everything for you,

351
00:20:27.360 --> 00:20:31.280
making sure to apply the diff correctly and deploy only the changes that you actually

352
00:20:31.280 --> 00:20:32.280
have applied to your template.

353
00:20:32.280 --> 00:20:34.940
And you can also create things like SCPs.

354
00:20:34.940 --> 00:20:38.520
By the way, we have another episode dedicated to those if you're curious to learn more about

355
00:20:38.520 --> 00:20:41.940
SCPs, so we'll add the link to that episode as well.

356
00:20:41.940 --> 00:20:46.220
You can also create arbitrary resources and provision them under various accounts.

357
00:20:46.220 --> 00:20:51.280
Maybe you would want to have an event bridge in every single account because you might

358
00:20:51.280 --> 00:20:54.360
want to use that to communicate across accounts.

359
00:20:54.360 --> 00:20:57.220
You can easily do something like that with OrgFormation.

360
00:20:57.220 --> 00:21:00.740
And another cool thing, and that is actually a very good example in OrgFormation, in the

361
00:21:00.740 --> 00:21:06.000
set of example provided by OrgFormation itself, is that you can add tags to every single account.

362
00:21:06.000 --> 00:21:10.220
And for instance, one thing that you can do with that is use a specific tag that represents

363
00:21:10.220 --> 00:21:13.500
what is the budget threshold for that specific account.

364
00:21:13.500 --> 00:21:18.060
And then you can easily provision alarms that will notify you if you are going over that

365
00:21:18.060 --> 00:21:19.940
threshold in specific accounts.

366
00:21:19.940 --> 00:21:24.620
So it makes it also very easy to control costs and you can just follow the example and provision

367
00:21:24.620 --> 00:21:26.420
that kind of stuff very, very quickly.

368
00:21:26.420 --> 00:21:27.740
Now is this the only tool?

369
00:21:27.740 --> 00:21:28.740
Of course not.

370
00:21:28.740 --> 00:21:30.400
There are other tools that you can use.

371
00:21:30.400 --> 00:21:34.900
In our previous episode that you mentioned, or in episode 96, we made a little bit of

372
00:21:34.900 --> 00:21:40.180
a comparison between OrgFormation, Terraform and Control Tower.

373
00:21:40.180 --> 00:21:44.180
So Terraform is another contender and it is generally a really good one because it

374
00:21:44.180 --> 00:21:47.720
gives you a really good diff, for instance, of what is going to change before you apply

375
00:21:47.720 --> 00:21:52.400
the changes, which is definitely something you want to do, especially for bigger organizations.

376
00:21:52.400 --> 00:21:57.420
But the one problem that Terraform has is that it might be a little bit tricky to write

377
00:21:57.420 --> 00:22:02.340
very abstract code just because the way that Terraform manages different accounts is by

378
00:22:02.340 --> 00:22:04.980
configuring different AWS providers.

379
00:22:04.980 --> 00:22:08.440
And when you provision a resource, you always need to prefix that resource with the provider

380
00:22:08.440 --> 00:22:09.440
name.

381
00:22:09.440 --> 00:22:11.040
It's not something that you can easily generalize.

382
00:22:11.040 --> 00:22:15.080
So it might be a little bit difficult sometimes to create very reusable modules that you might

383
00:22:15.080 --> 00:22:19.300
provision into different accounts and you might end up doing a little bit of copy paste.

384
00:22:19.300 --> 00:22:23.740
Now maybe there is a solution for that, but I'm not entirely aware of that kind of solution.

385
00:22:23.740 --> 00:22:27.060
Maybe something that Terraform can make it easier in future releases.

386
00:22:27.060 --> 00:22:30.860
But as it stands today, that's one of the complexities that people bump into.

387
00:22:30.860 --> 00:22:33.060
Still, it's a good tool if you're used to use Terraform.

388
00:22:33.060 --> 00:22:36.260
Probably it's not the end of the world to do a little bit of copy paste because most

389
00:22:36.260 --> 00:22:39.560
likely you're not going to change the structure of your organization every single day.

390
00:22:39.560 --> 00:22:42.160
But just be aware that there are trade offs there.

391
00:22:42.160 --> 00:22:45.880
Now I guess if you want to know a little bit more about all these details and differences,

392
00:22:45.880 --> 00:22:50.440
again, we will put a link in the show notes to our previous episode because that one has

393
00:22:50.440 --> 00:22:54.160
a little bit more depth when it comes to describing the different tools and what are the different

394
00:22:54.160 --> 00:22:55.720
strengths and weaknesses.

395
00:22:55.720 --> 00:23:00.420
Now I think one last thing that we might want to cover is a little bit more detail on programmatic

396
00:23:00.420 --> 00:23:01.420
access.

397
00:23:01.420 --> 00:23:06.440
You mentioned that it is something that you will get some advantages in the way you can

398
00:23:06.440 --> 00:23:10.360
manage programmatic access, but should we share in practice maybe some of the tools

399
00:23:10.360 --> 00:23:11.880
that can help with all of that?

400
00:23:11.880 --> 00:23:15.960
Yeah, if you're moving to managing multiple accounts, then the first question is how do

401
00:23:15.960 --> 00:23:16.960
I manage multiple credentials?

402
00:23:16.960 --> 00:23:20.400
How do I know which account I'm using when I set up credentials?

403
00:23:20.400 --> 00:23:25.840
What happens if you've got multiple AWS organizations and then you're managing multiple AWS accounts

404
00:23:25.840 --> 00:23:27.540
in multiple organizations?

405
00:23:27.540 --> 00:23:29.120
It can become a bit of a minefield.

406
00:23:29.120 --> 00:23:32.940
So there are plenty of tools, luckily, now that make it easier to manage all of that

407
00:23:32.940 --> 00:23:34.100
stuff.

408
00:23:34.100 --> 00:23:37.820
So let's say, for example, you just want to play around and deploy something in a sandbox

409
00:23:37.820 --> 00:23:38.820
account.

410
00:23:38.820 --> 00:23:42.700
How do you get programmatic credentials with a CLI for that specific account?

411
00:23:42.700 --> 00:23:46.500
There's a few tools that can be used and a lot of these tools, as well as offering programmatic

412
00:23:46.500 --> 00:23:51.380
access, will allow you to launch into the AWS console with the right credentials for

413
00:23:51.380 --> 00:23:53.260
the account you want to use as well.

414
00:23:53.260 --> 00:23:55.660
And one of our favorites is granted.dev.

415
00:23:56.200 --> 00:24:00.160
Luciano's article we mentioned at the beginning, we show how to set that up.

416
00:24:00.160 --> 00:24:02.880
So that's all covered there and that's a really nice one.

417
00:24:02.880 --> 00:24:07.760
There's other alternatives like AWS SSO util by Ben Kehoe, which we've used quite a lot

418
00:24:07.760 --> 00:24:08.900
in the past.

419
00:24:08.900 --> 00:24:12.220
There's another couple which I haven't used personally, but look pretty good.

420
00:24:12.220 --> 00:24:15.880
One is Leapp by Noovalari (and that's Leapp with two Ps.)

421
00:24:15.880 --> 00:24:19.040
Again, there'll be a link in the show notes and Cloud Glance.

422
00:24:19.040 --> 00:24:22.160
And Leapp and Cloud Glance will also offer you a visual UI.

423
00:24:22.160 --> 00:24:25.860
So there might be great alternatives if you're looking for more of a visual approach rather

424
00:24:25.860 --> 00:24:33.580
than a terminal approach to managing the craziness of multiple AWS accounts in multiple organizations.

425
00:24:33.580 --> 00:24:36.660
If you want to check any of those out, the links will be in the show notes and you won't

426
00:24:36.660 --> 00:24:37.660
regret it.

427
00:24:37.660 --> 00:24:40.380
If you haven't used any of those tools, I don't think you'll regret adopting them.

428
00:24:40.380 --> 00:24:43.500
I think at this point we can just summarize and wrap up.

429
00:24:43.500 --> 00:24:47.100
I think today we highlighted really what the importance of setting up landing a zone and

430
00:24:47.100 --> 00:24:51.300
using multiple accounts in the first place for different business applications and data.

431
00:24:51.520 --> 00:24:54.800
It's something you should be doing regardless of the size of your team or the level of cloud

432
00:24:54.800 --> 00:24:55.800
maturity.

433
00:24:55.800 --> 00:25:00.720
We also mentioned the advantages, isolation, environment segregation, short-lived credentials,

434
00:25:00.720 --> 00:25:02.440
cost management and security.

435
00:25:02.440 --> 00:25:06.700
We also give you a few examples of how an organization structure could look and which

436
00:25:06.700 --> 00:25:09.720
tools and AWS services you can use to create them.

437
00:25:09.720 --> 00:25:14.400
Then we finally talked about some of the tools you can use to simplify short-lived programmatic

438
00:25:14.400 --> 00:25:16.320
credentials and access to the console.

439
00:25:16.320 --> 00:25:17.960
Did we miss anything important?

440
00:25:17.960 --> 00:25:22.620
Do you have any additional cool setup in your landing zone or have any additional tips to

441
00:25:22.620 --> 00:25:23.620
share?

442
00:25:23.620 --> 00:25:25.060
Or if you haven't even done it yet, what's holding you back?

443
00:25:25.060 --> 00:25:29.300
Let us know in the comments below and reach out to us on our social channels because we'd

444
00:25:29.300 --> 00:25:30.700
love to know what you think.

445
00:25:30.700 --> 00:25:31.860
Until the next time, goodbye.
