WEBVTT

1
00:00:00.000 --> 00:00:06.080
What do people think about AWS when it comes to topics such as infrastructure as code, CI-CD,

2
00:00:06.080 --> 00:00:11.520
serverless containers, NoSQL databases, event-driven architectures, AI and machine learning?

3
00:00:11.520 --> 00:00:16.880
These are some of the topics covered by an AWS yearly survey called AnsWerS, which ran from

4
00:00:16.880 --> 00:00:24.160
January 16 to February 16 this year. The results are finally available on a website called answersforaws.com/2024

5
00:00:24.160 --> 00:00:29.520
and today we want to go over this data and provide some additional opinions.

6
00:00:29.600 --> 00:00:33.760
My name is Luciano and I'm joined by Eoin for another episode of AWS Bites podcast.

7
00:00:42.000 --> 00:00:46.640
AWS Bites is brought to you by fourTheorem, an AWS partner that does cloud stuff really,

8
00:00:46.640 --> 00:00:50.560
really well. If you're curious, check us out at fourtheorem.com.

9
00:00:50.560 --> 00:00:56.080
So this survey is run by Peter Sankauskas, I hope I'm pronouncing the surname correctly,

10
00:00:56.080 --> 00:01:00.240
and it's also built together with the AWS community, so it's kind of a community

11
00:01:00.960 --> 00:01:07.120
endeavor. And Peter is an hero since 2014, a community hero, so he's trying to kind of get

12
00:01:07.120 --> 00:01:13.680
a sense for what people think about AWS, what are areas for improvement, what people do when it

13
00:01:13.680 --> 00:01:18.000
comes to different topics such as we mentioned infrastructure as code, CI-CD, serverless

14
00:01:18.000 --> 00:01:23.360
containers. So we are going to have our screen share here, but if you're following on the audio

15
00:01:23.360 --> 00:01:28.480
only podcast, we'll try to describe of course all the data as best as we can, but if you want to see

16
00:01:28.480 --> 00:01:34.480
the full video, the video is also available on YouTube. So Eoin, where do we want to start?

17
00:01:34.480 --> 00:01:39.840
Before we dive into the different areas, maybe we'll just talk about how the data is gathered.

18
00:01:40.400 --> 00:01:44.640
I think it's mentioned that this is inspired by the state of JS survey and also the Datadog

19
00:01:44.640 --> 00:01:50.400
state of serverless survey. I know that the Datadog one, as far as I'm aware, uses Datadog data,

20
00:01:50.800 --> 00:01:55.920
actual customer usage data to compile that report. This one's a little bit different because there's

21
00:01:55.920 --> 00:02:01.520
a survey and it's essentially spread through word of mouth and network and social media.

22
00:02:01.520 --> 00:02:06.720
So already I think it's very interesting to look at this and see, okay, how does this compare to

23
00:02:06.720 --> 00:02:12.080
my biases and what can I learn new from what other people are doing out there, what's trending,

24
00:02:12.080 --> 00:02:16.560
but also kind of bear in mind that there might be a bit of selection bias here because

25
00:02:17.200 --> 00:02:22.960
there might be a bit of a filter bubble and this might be capturing the voice of maybe a noisy

26
00:02:22.960 --> 00:02:29.120
majority and maybe doesn't capture the full gamut of people building stuff on AWS. So we can bear

27
00:02:29.120 --> 00:02:32.800
that in mind, but it's still going to be interested to dive into it. Are we ready to go into the

28
00:02:32.800 --> 00:02:36.880
topics Luciano, or is there anything else you wanted to say first? No, I think that's fair.

29
00:02:36.880 --> 00:02:42.000
Maybe if we go through the demographics first, maybe another comment I have is that demographic

30
00:02:42.080 --> 00:02:46.400
is a really good section to kind of get a feeling for what the audience looks like,

31
00:02:46.400 --> 00:02:52.160
but we only get percentages. We don't really get like a total number of participants. So again,

32
00:02:52.160 --> 00:02:56.560
this doesn't give us any insights on how statistically relevant this could be. So just

33
00:02:56.560 --> 00:03:01.520
take that as a thing to bear in mind while we go through this. And of course, we're going to try

34
00:03:01.520 --> 00:03:06.480
to provide our own opinions, which are of course biased as well. So let's try to see what we can

35
00:03:06.480 --> 00:03:11.040
learn, but of course this is not going to be representative for all the use cases of AWS.

36
00:03:11.440 --> 00:03:16.240
And right away we can see we've got 80% of respondents are from either North America or

37
00:03:16.240 --> 00:03:21.200
Europe, roughly in half. So maybe already there's an issue with language, I don't know,

38
00:03:21.200 --> 00:03:25.920
or just region network here, because if it's an English only survey that may skew the results

39
00:03:25.920 --> 00:03:31.520
and we've got 0% respondents from Antarctica. So that's a pity. I'd love to know what they think

40
00:03:31.520 --> 00:03:36.560
down there. All right. And age-wise it's interesting, I guess, because it kind of shows

41
00:03:36.560 --> 00:03:41.600
that the age profile for these surveys, I think, is shifting a little bit, right? We have more

42
00:03:41.600 --> 00:03:47.040
people in the kind of middle age bracket. Quite a small number, I would say, in the 19 to 24 year

43
00:03:47.040 --> 00:03:52.080
old range, which is maybe a little bit surprising. I mean, that's what, 2%, 1% and nobody 65 years

44
00:03:52.080 --> 00:03:57.920
older.

45
00:03:57.920 --> 00:04:02.800
Honestly, I don't know if I'm surprised by that initial number, 1924, because one thing we have mentioned a few times is that AWS doesn't look very friendly to students or people that

46
00:04:02.800 --> 00:04:07.360
are just starting their career just because you can be scared about massive build shocks.

47
00:04:07.360 --> 00:04:12.000
So people tend to stay away from AWS. So maybe that's a reflection of that feeling.

48
00:04:13.040 --> 00:04:18.000
Yeah, that's a fair point.

49
00:04:18.000 --> 00:04:25.280
But what it's also saying is that I think that, let's see, we've got like 70% almost of respondents who've had perhaps 15 to 25 years of experience in the

50
00:04:25.280 --> 00:04:29.920
industry. So that's going to inform the results so much as well. And that's specifically here.

51
00:04:30.000 --> 00:04:34.880
We could see the majority is six to 10 years of experience with AWS alone. So this seems to be

52
00:04:36.080 --> 00:04:41.200
possibly weighted towards AWS fanatics in some way, or at least people who've been using it

53
00:04:41.200 --> 00:04:46.240
for a long time. It would be nice to hear from people who are less experienced in general,

54
00:04:46.240 --> 00:04:49.520
because we can't just be building for the people who are already in the community.

55
00:04:50.320 --> 00:04:53.600
The next one is company size. So a lot of big companies and they're actually 25%,

56
00:04:54.480 --> 00:05:01.040
but that's quite a broad range. And almost half of the respondents are actually providing software

57
00:05:01.040 --> 00:05:06.480
and internet services or products in some way and professional services as well. So that would be...

58
00:05:07.360 --> 00:05:11.440
I did respond to this survey actually, Luciano, did you answer the call for this survey?

59
00:05:11.440 --> 00:05:16.320
Yeah. So we're both in here in this 13.1%, I guess. And then financial services is the

60
00:05:16.320 --> 00:05:19.520
biggest industry sector, which is definitely interesting.

61
00:05:19.600 --> 00:05:25.840
It's also interesting to see that there is a quite significant slice there of healthcare and...

62
00:05:25.840 --> 00:05:32.720
What was the other one? Government and education. So I don't know, a bit unexpected if you ask me,

63
00:05:32.720 --> 00:05:37.040
but it's interesting. Maybe this has been growing more in the last few years because it might be

64
00:05:37.040 --> 00:05:40.560
that these are generally industries that are always a little bit behind the curve and trying

65
00:05:40.560 --> 00:05:45.520
to catch up. So promising to see that it's a significant slice that it's almost 5%.

66
00:05:46.480 --> 00:05:50.400
Yeah. I think there's something here.

67
00:05:50.400 --> 00:05:55.360
I think we were kind of surprised still, especially with modern AWS applications, how a lot of enterprise companies have really taken to them in a lot of

68
00:05:55.360 --> 00:05:59.840
ways. Now there's still a huge number of companies who aren't even on the cloud, aren't just thinking

69
00:05:59.840 --> 00:06:04.400
about moving to the cloud, but we might expect that startups are all over this technology and

70
00:06:04.400 --> 00:06:09.280
everybody else is lagging. But I think financial services showing that they're... I think there's

71
00:06:09.280 --> 00:06:13.280
a lot of cases where they need the scale of the cloud, want to get rid of a lot of infrastructure

72
00:06:13.280 --> 00:06:18.080
maintenance. So it's interesting to see that reflected here. Okay. And then most people

73
00:06:18.080 --> 00:06:22.880
are developers, got some architects. What else? Some business executives as well. Sales and

74
00:06:22.880 --> 00:06:29.360
marketing even. There are some students as well, but that's the minority looks like, right? 0.5%.

75
00:06:30.800 --> 00:06:34.800
Yeah. Okay. Yeah. You're right about that. Okay. Let's dive into the areas where we start with

76
00:06:34.800 --> 00:06:40.960
infrastructure as code. I'm interested in this and we can see in terms of usage, obviously there's

77
00:06:40.960 --> 00:06:45.200
a bit of overlap here because people might be using multiple infrastructure as code platforms

78
00:06:45.200 --> 00:06:50.720
as we do ourselves. What do you think of this? Yes.

79
00:06:50.720 --> 00:06:55.920
I honestly was surprised to see that cloud formation are such a big share because generally speaking, I mean, cloud formation works and it's

80
00:06:55.920 --> 00:07:00.480
kind of the default AWS tool to do infrastructure as code. But in my experience, when you talk to

81
00:07:00.480 --> 00:07:07.040
people at conferences or events, they generally try not to use cloud formation like Verbatim.

82
00:07:07.040 --> 00:07:13.040
They generally use something like SAM or they use CDK and maybe they use Terraform and avoid

83
00:07:13.040 --> 00:07:18.080
cloud formation altogether. So I was a little bit surprised to see that there is an 84.7%

84
00:07:18.080 --> 00:07:22.320
of people saying we do use cloud formation. And again, this might be a reflection of people saying,

85
00:07:22.320 --> 00:07:26.400
yes, I know that down the line I'm using cloud formation. So they picked that option as well,

86
00:07:26.400 --> 00:07:30.640
but I don't know if that means they use confirmation directly or through abstraction

87
00:07:30.640 --> 00:07:36.960
layers like CDK or SAM. Yeah. It must be, I'm guessing here we see that 57.

88
00:07:36.960 --> 00:07:42.960
3% are using CDK, which is massive for CDK, I think. But I think that that is also reflected in the 84.7% cloud

89
00:07:42.960 --> 00:07:48.720
formation usage because we don't see SAM or serverless framework or any of the other like

90
00:07:48.720 --> 00:07:53.760
architect or chalice frameworks here. They're just not there. So I'm assuming that's all coming in

91
00:07:53.760 --> 00:08:01.040
under cloud formation. What really surprises me here though is that Ansible is 55.2% and also that

92
00:08:01.040 --> 00:08:05.600
it's regarded as an infrastructure as code tool rather than configuration management.

93
00:08:05.600 --> 00:08:10.160
Yeah.

94
00:08:10.160 --> 00:08:14.400
And to be fair, that might be the case where people are provisioning EC2 instances, maybe through cloud formation, Terraform or whatever. And then they also use Ansible on

95
00:08:14.400 --> 00:08:19.200
top of that to actually provision software inside the specific machines that they're provisioning.

96
00:08:19.200 --> 00:08:24.160
So again, it's not that these tools are mutually exclusive. So it's a little bit difficult,

97
00:08:24.160 --> 00:08:29.200
I guess, to draw any conclusion here. Yeah, for sure.

98
00:08:29.200 --> 00:08:35.360
AppsWorks is also interesting because AppsWorks, as I understand it, is end of life as an AWS service for a chef and puppets. So

99
00:08:35.360 --> 00:08:39.040
there's 16.4% of respondents who will have to migrate to something else at some point.

100
00:08:39.680 --> 00:08:48.720
Maybe Ansible. Terraform is actually top for retention. So I guess this is...

101
00:08:48.720 --> 00:08:53.200
I'm assuming that this is based on previous year's results. Is that your interpretation here?

102
00:08:53.840 --> 00:08:58.560
I'm not really sure. I don't remember if the questioner was asking you whether you were

103
00:08:59.280 --> 00:09:04.080
still using these tools or if it's just data interpolated from the previous years.

104
00:09:04.080 --> 00:09:08.720
Okay. Fair enough. And then Terraform is top for awareness as well. Yeah. Okay. So most people are

105
00:09:08.720 --> 00:09:13.680
aware of most of them and a lot of people are interested. Most people are interested in CDK.

106
00:09:13.680 --> 00:09:18.640
We're not using it yet. So that is interesting. And then we can see the trend. So Pulumi is

107
00:09:18.640 --> 00:09:22.480
increased on the increase, which is a bit of a surprise. Ansible as well.

108
00:09:22.480 --> 00:09:25.760
And cloud formation is going down, right? Which is also interesting.

109
00:09:26.480 --> 00:09:32.160
Relatively, but it's still 35% for interest.

110
00:09:32.160 --> 00:09:36.560
Then if we go back to usage, we can see cloud formation has actually increased a little bit in terms of usage. So retention, the calculation is

111
00:09:36.560 --> 00:09:42.720
actually given here. It's the ratio of used it and would use it again over used it and would or would

112
00:09:42.720 --> 00:09:49.200
not. Okay. So it's the percentage of people who used it and would use it again. Okay. I think the

113
00:09:49.200 --> 00:09:56.480
main takeaway for me here is that CDK is the one that people seem most interested in and have

114
00:09:56.480 --> 00:10:00.080
adopted really quite significantly. I thought it was a little bit more divisive than this,

115
00:10:00.800 --> 00:10:07.120
57%. But the happiness index is actually one that I've heard people comment about the most.

116
00:10:09.280 --> 00:10:14.800
I'm not sure why this isn't showing up correctly.

117
00:10:14.800 --> 00:10:23.920
Yeah, I think it was happiness in general on the whole area, not on specific tools. Okay. Right.

118
00:10:24.880 --> 00:10:30.560
So what I'm trying to get to is the fact that I believe we heard that most people would not, or a lot of significant number of people

119
00:10:30.560 --> 00:10:35.120
try cloud formation and would like to not use it again. Not surprising.

120
00:10:36.000 --> 00:10:41.920
I saw this earlier. I'd love to dig deep into this a little bit more, but that should be reflected

121
00:10:41.920 --> 00:10:47.440
in the retention, but I'm not seeing it here. So maybe we'll come back to it. But yeah, I'm always

122
00:10:47.440 --> 00:10:52.160
interested when I hear that because I know there's a lot of, I think there's a lot of mythology

123
00:10:52.240 --> 00:10:56.240
around as well. Cloud formation definitely needs a lot of improvement, but I also feel that there's

124
00:10:56.240 --> 00:11:01.040
a bit of mythology around there from people who tried it maybe years ago and got rollback

125
00:11:01.040 --> 00:11:06.400
failed errors, got stuck, had to delete everything and vowed to never use cloud formation again.

126
00:11:07.680 --> 00:11:10.800
But I think things have improved a lot. And I think if you're serious about AWS,

127
00:11:10.800 --> 00:11:14.400
it's really worthwhile learning. So that's my take on it.

128
00:11:20.000 --> 00:11:26.320
The other thing, if you scroll at the very bottom is that there is a mention of kind of up and coming tools, which is interesting. And we have there SSD and Wing Lang, which are tools

129
00:11:26.320 --> 00:11:31.920
that I'm hearing a lot about. So it's interesting to see them there. I haven't heard of Crossplane

130
00:11:31.920 --> 00:11:34.720
or Troposphere, so I cannot really comment on those.

131
00:11:35.440 --> 00:11:41.840
Yeah. Wing Lang, we talked about a while back. SSD, we've mentioned in the past.

132
00:11:42.400 --> 00:11:47.280
This was, has been built on CDK, but I believe they're moving away from CDK as the underlying

133
00:11:47.280 --> 00:11:51.040
implementation. The Crossplane and Troposphere are things I'll have to check out.

134
00:11:51.920 --> 00:11:54.560
All right. Well, we do see ICD. Let's do that.

135
00:11:55.120 --> 00:11:57.760
Okay. Do you want to take us through this one Luciano?

136
00:11:57.760 --> 00:12:02.800
Yes. So my reading of this one, I wasn't surprised to see GitHub Actions there at the top,

137
00:12:02.800 --> 00:12:07.520
but I was a bit surprised to see it as the first one because I think it's relatively new. For

138
00:12:07.520 --> 00:12:11.520
instance, the second one is Jenkins and Jenkins has been around since, I don't know, since I can't

139
00:12:11.520 --> 00:12:18.240
remember. So probably at least a decade. And so GitHub Action is much more recent than that. So

140
00:12:18.240 --> 00:12:22.560
it's interesting to see that there is such a competition between the two and they are very

141
00:12:22.560 --> 00:12:28.160
close. Now, also not too surprising because if you ask people, generally they're not very happy

142
00:12:28.160 --> 00:12:32.080
with Jenkins while generally they're very happy with GitHub Actions. So probably there is going

143
00:12:32.080 --> 00:12:37.520
to be a gradual migration from Jenkins to other tools. And right now GitHub Action is probably

144
00:12:37.520 --> 00:12:42.480
the biggest contender out there. We also have CodeBuild and CodePipeline in here and CodeDeploy

145
00:12:42.480 --> 00:12:48.000
as well. So I'm not really sure how the fact that this, I guess, the functionality spread across

146
00:12:48.000 --> 00:12:53.440
three different tools, how is this affecting the numbers? And maybe people are only using some of

147
00:12:53.440 --> 00:12:59.280
the tools and not all of them together. So I guess it's really hard to read into the numbers here and

148
00:12:59.280 --> 00:13:04.800
comparing the AWS offering with other offerings. And also interesting to see that GitLab is the

149
00:13:04.800 --> 00:13:12.640
third one non-AWS service to be there. And then we have CircleCI and that's it. So no other,

150
00:13:12.640 --> 00:13:27.040
I guess, non-AWS CI offerings.

151
00:13:34.800 --> 00:13:39.520
See people moving to GitHub Actions because the developer experience and the speed is just

152
00:13:39.520 --> 00:13:44.640
superior in general in my experience. And unfortunately for GitLab and CircleCI,

153
00:13:45.280 --> 00:13:49.680
those, I think we're leading the space before GitHub Actions came along in a lot of ways,

154
00:13:49.680 --> 00:13:54.080
but I think GitHub Actions is eating their lunch quite significantly at this point.

155
00:13:55.120 --> 00:14:00.080
Jenkins won't die. That's an interesting aspect here. Still 75% usage of Jenkins.

156
00:14:00.400 --> 00:14:01.200
I recently-

157
00:14:01.200 --> 00:14:05.280
It's that one legacy product Jenkins built that you can't shut off because nobody knows

158
00:14:05.280 --> 00:14:06.240
how it works.

159
00:14:06.240 --> 00:14:11.360
Yeah.

160
00:14:11.360 --> 00:14:16.400
I recently watched an interesting video by Faster than Lime who did quite a thorough review of GitHub Actions and the flows that GitHub Actions has. So it's a little bit critical against

161
00:14:16.400 --> 00:14:20.960
GitHub Actions, which kind of shows an interesting thing that there is still a lot of room for

162
00:14:20.960 --> 00:14:25.920
improvement in this space, even though I think everyone I talk to, they think the GitHub Action

163
00:14:25.920 --> 00:14:30.880
is the best thing ever. So this is probably giving all the competitors a little bit of room

164
00:14:30.880 --> 00:14:35.920
for improvement and maybe catching up with GitHub Actions. I think if they can fix some of the flows

165
00:14:35.920 --> 00:14:40.720
that GitHub Actions currently has, maybe we will see different numbers in the coming year. So maybe

166
00:14:40.720 --> 00:14:46.960
there is hope there for CircleCI and GitLab. Okay.

167
00:14:46.960 --> 00:14:52.240
Well, GitHub Action is, people don't move away from it. It looks like 95% retention. GitLab also so popular, but the AWS ones aren't doing

168
00:14:52.240 --> 00:14:57.200
too bad here. And yeah, GitHub Actions is like CDK for infrastructure as code. That's the one

169
00:14:57.200 --> 00:15:01.920
people are most interested in. So what can we see when we look at the trends year on year,

170
00:15:01.920 --> 00:15:06.720
if we look at usage, Jenkins is diving a little bit, but everything else is the same.

171
00:15:08.080 --> 00:15:09.360
Yeah. Maybe another thing to...

172
00:15:09.360 --> 00:15:10.240
It's not a lot of movement.

173
00:15:10.240 --> 00:15:14.800
Another thing to mention is that once you have a CI CD pipeline set up and it works and it does

174
00:15:14.800 --> 00:15:18.960
all the things you need to do, you really need to have a pretty strong reason to migrate to

175
00:15:18.960 --> 00:15:23.360
something else. So maybe that justifies the retention for pretty much any tools.

176
00:15:24.320 --> 00:15:29.040
And I guess the dangers might be when you build a new project, if you can get to production with

177
00:15:29.040 --> 00:15:34.000
all the things you need quicker, then probably you have a reason to adopt another tool.

178
00:15:35.360 --> 00:15:39.760
The positivity around GitHub Actions and the lack of negativity is reflected in this positive

179
00:15:39.760 --> 00:15:45.120
negative split chart, Jenkins, poor Jenkins, but they still can't switch it off because it's a 75%

180
00:15:45.120 --> 00:15:52.080
usage. CodeStar, I've never used CodeStar except for when you need to set up a CodeStar connection

181
00:15:52.080 --> 00:15:56.960
for code pipeline. And Proton. That's interesting actually, because Proton we didn't mention yet,

182
00:15:56.960 --> 00:16:03.040
but Proton is kind of last on the list in terms of awareness, usage, retention, everything,

183
00:16:03.040 --> 00:16:06.080
but the people who do use it don't seem to like it very much.

184
00:16:07.680 --> 00:16:12.400
Yeah. I cannot comment on that one because I don't have a lot of experience with it.

185
00:16:13.040 --> 00:16:17.520
Yeah. It had a lot of hope. Okay. Most people are pretty happy. Yeah.

186
00:16:17.520 --> 00:16:25.120
There's very few people who are seriously unhappy with CI CD services. Argo CD build kit. Okay. Okay. We've covered two

187
00:16:25.120 --> 00:16:29.760
topics and I think now to one, which is a special interest to us, which is the serverless space.

188
00:16:30.320 --> 00:16:35.680
And now we get into some of the tools we talked about earlier. The fact that AWS Sam is now top

189
00:16:35.680 --> 00:16:39.760
of the list when it comes to tools and the serverless space in terms of usage, that's

190
00:16:40.720 --> 00:16:45.360
also a little bit surprising, I would say. If we go back to the infrastructure as code chart,

191
00:16:45.360 --> 00:16:51.360
and we looked at CDK's popularity, CDK is actually lower than AWS Sam here. So I don't know

192
00:16:51.360 --> 00:16:57.440
how that can happen, but with serverless framework is also there, thereabouts. So those three are all

193
00:16:57.440 --> 00:17:03.200
around the 50% usage mark. 36% of people are using Amplify. What do you think of that? Does that

194
00:17:03.200 --> 00:17:08.320
come as a shock to you? A little bit, to be honest.

195
00:17:08.320 --> 00:17:13.760
Maybe again, this is my bias in not having been a huge user of Amplify for different reasons, but maybe people that use it, they

196
00:17:13.760 --> 00:17:19.520
really like it and makes their life simpler. So we're not using it more, I guess.

197
00:17:19.520 --> 00:17:25.920
It would be interesting if you could actually correlate the demographics and the tooling here, because I still

198
00:17:25.920 --> 00:17:30.480
see Amplify as a tool that helps you to get started and prototyping applications when you're early on

199
00:17:30.480 --> 00:17:36.080
in your journey learning AWS. Difficult to use it over the longterm. So I wonder which demographic

200
00:17:36.080 --> 00:17:40.080
this correlates with. And 12.7% application composer, which is still a pretty new tool.

201
00:17:41.680 --> 00:17:47.520
So CDK is top for retention. Serverless framework is top for awareness, so it still has the biggest

202
00:17:47.520 --> 00:17:53.680
brand recognition, it seems. Lambie is one I have never come across. Lambie for Ruby on Rails. Have

203
00:17:53.680 --> 00:17:58.160
you seen that one before, Luciano?

204
00:17:58.160 --> 00:18:05.040
I have seen it, never used it, and I'm surprised that that's such a big awareness, to be honest, which is like 33 point something percent. Yeah.

205
00:18:05.040 --> 00:18:11.120
Maybe the link to the survey got shared around their Discord or something. Okay. And in terms of interest,

206
00:18:11.120 --> 00:18:18.720
there's not much to separate these. Everybody's 40 to 50%, 40 to 60% interested in all these tools.

207
00:18:18.720 --> 00:18:25.440
Now the trend here is that CDK is, well, even though it has, in terms of interest,

208
00:18:25.440 --> 00:18:30.480
less than the last time, it's actually top now because everything else is so close to it. And

209
00:18:30.480 --> 00:18:36.000
in terms of usage, yeah, AWS Sam usage is on the rise as is CDK, significant jump for CDK.

210
00:18:36.000 --> 00:18:40.560
Serverless framework, still in there. It's just been passed out by CDK and Sam at this point.

211
00:18:41.440 --> 00:18:47.520
Okay. So what do people think of these tools in general? CDK is very positive, would use again 46%.

212
00:18:49.280 --> 00:18:53.120
Would not use again 11%. Okay. I'm just remembering how to interpret this chart now.

213
00:18:53.680 --> 00:18:58.560
So yeah, CDK, very positive. I'm surprised that there aren't more people who've been burned a

214
00:18:58.560 --> 00:19:05.840
little bit by CDK and constructs and version incompatibilities and issues with upgrading stacks

215
00:19:05.840 --> 00:19:11.280
having changed CDK modules. So it's a little bit surprising. So Sam is very popular, but a little

216
00:19:11.280 --> 00:19:17.360
bit more negative. Serverless framework has a bigger chunk of would not use again. 24% of

217
00:19:17.360 --> 00:19:23.280
people say they would not use it again, but still more positive than negative. Okay. So many people

218
00:19:23.280 --> 00:19:28.400
are unhappy with the tools used to build serverless applications. Not very positive at all.

219
00:19:28.400 --> 00:19:33.440
Really 15% with five stars. So I think what we're seeing here is there's a lot more to do.

220
00:19:34.000 --> 00:19:38.480
We take four or five stars, that's 50%, but there's still quite a lot of people who think

221
00:19:38.480 --> 00:19:42.240
serverless tooling is a bit meh.

222
00:19:42.800 --> 00:19:50.320
And I don't disagree to be honest, because if you take the experience end to end for building a serverless application, I think that there are a

223
00:19:50.320 --> 00:19:55.840
lot of gaps there to be filled to just give you a more cohesive experience. There isn't like one

224
00:19:55.840 --> 00:19:59.760
tool that can do everything for you. You need to jump across different tools. You need to figure

225
00:19:59.760 --> 00:20:04.080
out which tool is the best. And then every tool has its own pros and cons, and you need to learn

226
00:20:04.080 --> 00:20:09.440
exactly how to use them, what works, what doesn't work, where are the dangers. So I think that there

227
00:20:09.440 --> 00:20:14.000
is definitely lots to improve there and hopefully it's going to get better over the next few years.

228
00:20:14.000 --> 00:20:17.360
And the developer experience in itself is going to get better as well.

229
00:20:17.360 --> 00:20:22.640
Yeah.

230
00:20:23.120 --> 00:20:28.160
I suppose this is why we're seeing SSD and Wing Lang and Amped and all these other tools coming out and trying to really change the system because look, people are dissatisfied in general.

231
00:20:28.160 --> 00:20:33.120
So I understand that. I agree. And other things not mentioned then are architect,

232
00:20:33.120 --> 00:20:37.680
which I would be interested to hear from the architect users because it looks like a really

233
00:20:37.680 --> 00:20:42.640
nice developer experience. I know that the use cases it targets are more specific. It

234
00:20:42.640 --> 00:20:48.320
doesn't try to do everything. SST, Wing Lang, serverless.tf. That is-

235
00:20:48.320 --> 00:20:50.640
That's I think Anton. Yeah, exactly.

236
00:20:50.640 --> 00:20:55.760
Which is terra for modules that are more fine tuned for serverless use cases as far as I know.

237
00:20:55.760 --> 00:20:59.360
Okay. Interesting. Yeah. I'd like to hear more about those actually.

238
00:21:00.000 --> 00:21:05.680
I wonder what we have to do to reach people so that we can get data for those. Okay. Containers, Luciano, what are you seeing in

239
00:21:05.680 --> 00:21:10.880
the container when it comes to trends? This is not my main area of expertise.

240
00:21:10.880 --> 00:21:16.480
So I'm going to try to give my reading, but feel free to chime in and give me your opinion as well.

241
00:21:16.480 --> 00:21:22.480
So the main thing we can see here is that ECS is number one in terms of usage with more than 80%

242
00:21:23.280 --> 00:21:28.800
followed by Fargate. And again, definitely some overlapping there because Fargate, you can

243
00:21:28.800 --> 00:21:34.080
consider it as part of ECS if you want to. I don't know if it's really clear what is the difference

244
00:21:34.080 --> 00:21:39.760
there to people participating to the survey. Are we assuming that ECS is only when you provide your

245
00:21:39.760 --> 00:21:45.120
own EC2 instances and create your ECS cluster and Fargate is only the serverless version, or if you

246
00:21:45.120 --> 00:21:49.920
use Fargate, you are also using ECS. Yeah, it's very difficult to read into those numbers.

247
00:21:50.960 --> 00:21:56.240
Also, we have Lambda for running containers, but we know that you are not really running containers

248
00:21:56.240 --> 00:21:59.280
in Lambda. So that's another confusing piece of data there because...

249
00:21:59.280 --> 00:22:00.160
It's a recent number.

250
00:22:00.160 --> 00:22:05.760
Exactly. I mean, you can package a container image to provide Lambda, all the files that are needed

251
00:22:05.760 --> 00:22:10.320
for your runtime, but you're not really running a container in itself. So definitely source of

252
00:22:10.320 --> 00:22:16.800
confusion there. The interesting one is that EKS is 56%, which is not necessarily a small number,

253
00:22:16.800 --> 00:22:21.440
but I was expecting it to be a little bit more just because in bigger enterprises, I've seen

254
00:22:21.440 --> 00:22:26.560
that they tend to prefer Kubernetes as an abstraction layer because generally they might be

255
00:22:26.560 --> 00:22:32.240
multi-cloud or they might be a little bit more concerned of portability. So Kubernetes is generally

256
00:22:32.240 --> 00:22:38.640
kind of a more agnostic default that you can pick just to... We're not really committed to the AWS

257
00:22:38.640 --> 00:22:41.040
offering 100%. So it's not bad.

258
00:22:41.040 --> 00:22:46.320
We do have self-managed Kubernetes as well, actually. So this is represented as 40%.

259
00:22:47.280 --> 00:22:51.040
So would you assume that these groups are more or less mutually exclusive,

260
00:22:51.040 --> 00:22:54.400
the EKS group and the self-managed, or there's a bit of overlap?

261
00:22:59.440 --> 00:23:05.360
I mean, they should be mutually exclusive, but just looking at the numbers, probably people interpret that as overlapping, right? Or maybe people would have bought EKS and self-managed

262
00:23:05.360 --> 00:23:07.680
Kubernetes, so they tend to pick both.

263
00:23:07.680 --> 00:23:13.280
Okay. 50% on Beanstalk is a surprise to me. Yes, maybe agencies, right? I remember,

264
00:23:14.080 --> 00:23:20.720
I mean, initially that was the target use case for Beanstalk. So maybe they still have lots of

265
00:23:20.720 --> 00:23:24.400
websites and web applications running on Beanstalk.

266
00:23:24.400 --> 00:23:27.040
And more on LightSail than there are on AppRunner.

267
00:23:28.240 --> 00:23:30.240
Wow. Which is also interesting, yeah. I

268
00:23:30.240 --> 00:23:34.800
think LightSail is also a little bit more... I mean, AppRunner is a little bit more recent

269
00:23:34.800 --> 00:23:40.720
than LightSail. So maybe it's just a catching up game. Maybe we'll see that on the retention

270
00:23:40.720 --> 00:23:46.080
or awareness chart, like how do they compare. The other interesting thing is that we have read that

271
00:23:46.080 --> 00:23:50.640
OpenShift, which is as far as I know, another distribution of Kubernetes. So is that an

272
00:23:50.640 --> 00:23:55.520
overlap with the self-managed Kubernetes or not? Good to know. Yeah.

273
00:23:55.520 --> 00:24:00.560
Good question. I think people are using Lambda then. Okay. Maybe we can exclude Lambda,

274
00:24:00.560 --> 00:24:06.480
but people who are using Lambda are still using Lambda. But Farghout, EKS, people are pretty

275
00:24:06.480 --> 00:24:13.520
happy with, it seems like. People would use it again. And AppRunner is also popular, but let's

276
00:24:13.520 --> 00:24:17.920
see. If we go to awareness and interest, are we seeing more... People know about AppRunner. More

277
00:24:17.920 --> 00:24:21.840
people know about LightSail than AppRunner. That really surprises me. But look, again, that's my

278
00:24:21.840 --> 00:24:28.960
filter bubble. And then interest, yeah, AppRunner is higher. So we can expect AppRunner to grow a

279
00:24:28.960 --> 00:24:33.280
bit. I know we're planning to do a deep dive on AppRunner. We've been planning it for a while,

280
00:24:33.280 --> 00:24:42.320
so stay tuned. Okay. So trend is, let's see, a lot of ECS, 85% of people now instead of 77%

281
00:24:43.040 --> 00:24:48.560
last year. Not a huge amount of movement overall. But also EKS is growing.

282
00:24:48.560 --> 00:24:52.560
So it's not like people are necessarily peaking one over the other. Probably it's just different workloads.

283
00:24:53.360 --> 00:24:59.680
Yeah, that makes sense. Okay. Yeah. Okay. So let's look at positive-negative split.

284
00:24:59.680 --> 00:25:02.480
Where's the... The negativity is most interesting to talk about, right?

285
00:25:02.480 --> 00:25:07.440
I think so. Yeah. It's interesting to see Red Hat to be absolutely negative. I mean,

286
00:25:07.440 --> 00:25:12.080
I never use it, so I cannot comment on... But that's...

287
00:25:12.080 --> 00:25:17.440
64% of people are not interested in it, which is fine because you have to be in a specific space. But only 11% would not use it again.

288
00:25:17.440 --> 00:25:20.480
That makes more sense. Only 2% would use it again.

289
00:25:21.040 --> 00:25:25.680
So yeah, maybe they've worked to do their beanstalk. People want to get away from it.

290
00:25:25.680 --> 00:25:33.920
It looks like 37% would not want to use it again. And self-managed Kubernetes is 28% would not use

291
00:25:33.920 --> 00:25:40.320
it again, which is pretty high, versus say EKS, which is 13% would not use it again. So I think

292
00:25:40.320 --> 00:25:45.920
ECS, Fargate, there's a lot of love for them in general. EKS also pretty good, but ECS and Fargate

293
00:25:45.920 --> 00:25:49.760
seems to be the way things are going. I suppose Fargate as well... I'm just thinking Fargate can

294
00:25:49.760 --> 00:25:55.600
be on EKS as well as ECS, can't it? So that could span the two spaces you can have people using

295
00:25:55.600 --> 00:26:03.280
Fargate with EKS. Okay, so in general, people are pretty happy with containers, given that there are

296
00:26:03.280 --> 00:26:08.000
how many are there? Many ways are there to run containers. I lost count. AWS 19, was it?

297
00:26:08.000 --> 00:26:10.720
We need to ask Cori Queen, what's the latest count?

298
00:26:10.720 --> 00:26:17.040
Yeah, yeah. Code build doesn't come up here. All right. What have we got to say about NoSQL?

299
00:26:21.920 --> 00:26:29.040
Yes, that's another area where I don't have a huge amount of knowledge, but it's also pretty broad because in this category here, we have all kinds of databases that are not SQL. So we even

300
00:26:29.040 --> 00:26:32.400
have Redis- All sorts of services that aren't databases maybe?

301
00:26:32.400 --> 00:26:38.640
Through that, yeah.

302
00:26:38.640 --> 00:26:44.320
For instance, you have Neptune or Timestream or MemoryDB, which of course you can use them as databases, but they are very specific use cases, I would say. Not like general purpose

303
00:26:44.320 --> 00:26:49.840
databases, so to speak. Yeah. Would you agree with Redis being classified as a database?

304
00:26:56.160 --> 00:26:59.040
I know that some people use it as a database, but again, there are constraints there which are important to know. I wouldn't call it a general purpose database.

305
00:26:59.760 --> 00:27:04.240
Yeah, yeah. I'd put it in a separate category, I think in general.

306
00:27:04.240 --> 00:27:09.920
OpenSearch is being shoehorned in as a database. And I know a lot of people do use Elasticsearch as a database, but let's look

307
00:27:09.920 --> 00:27:15.200
at the data. So 87% for DynamoDB, I'm not surprised because a lot of people are using it just

308
00:27:15.200 --> 00:27:19.040
even as a key value store for some small amount of data. You don't have to be all in on it.

309
00:27:19.040 --> 00:27:24.880
I think Redis is a fantastic product and so useful in so many different scenarios. I'm also not

310
00:27:24.880 --> 00:27:30.320
surprised to see that feature highly. DocumentDB is quite far down the list, isn't it? 38%. But I

311
00:27:30.320 --> 00:27:35.840
suppose a lot of people using MongoDB might use Atlas or a different hosted solution or self-managed.

312
00:27:36.080 --> 00:27:41.040
Which is also interesting that it's not here in this list because, I mean, with Atlas you can

313
00:27:41.040 --> 00:27:47.600
run it on AWS, right? So it could have been on this list, right? Yeah, exactly. Yeah.

314
00:27:47.600 --> 00:27:53.120
I guess this is provided by AWS, so maybe that's the difference here. And ElastiCache is the most

315
00:27:53.120 --> 00:27:57.040
popular. MemoryDB we haven't tried, but I think it just got such bad press for the pricing.

316
00:27:58.000 --> 00:28:00.800
That put a lot of people off. Have you tried QLDB?

317
00:28:01.680 --> 00:28:08.720
QLDB, no, no. I skipped. Well, yeah, we did see some projects in the blockchain space,

318
00:28:08.720 --> 00:28:14.880
but QLDB seems definitely more like a pragmatic solution for a lot of applications that ended up

319
00:28:14.880 --> 00:28:21.040
using blockchain because it's focused on the immutable ledger, but no, I haven't had an

320
00:28:21.040 --> 00:28:25.120
opportunity to use it properly. Yeah.

321
00:28:25.120 --> 00:28:31.680
The other one that I'm curious about is Neptune because I heard very mixed feelings, so I'm curious to see what is the love and hate kind of chart there.

322
00:28:31.680 --> 00:28:37.200
Okay. All right. Some people are most interested in DynamoDB. Yeah. This is kind of interesting,

323
00:28:37.200 --> 00:28:44.640
but I think because DynamoDB is really the only truly no SQL database from Amazon that they

324
00:28:44.640 --> 00:28:49.920
provide themselves, it would be nice just to see some more non-AWS solutions in this analysis.

325
00:28:50.640 --> 00:28:55.600
Yeah. There's not that much change in trend when it comes to usage. Okay. The positive-negative

326
00:28:55.600 --> 00:29:01.680
split. There's not a huge amount of would not use it again, actually. Open search is the highest,

327
00:29:01.680 --> 00:29:04.800
which is not surprised because it's difficult, I think, to use and manage,

328
00:29:04.800 --> 00:29:09.520
even though it's incredibly useful.

329
00:29:09.520 --> 00:29:14.160
I'm surprised that everyone loves DynamoDB because I personally always have mixed feelings when I use DynamoDB. It's really, really good in

330
00:29:14.160 --> 00:29:21.120
certain circumstances. In other circumstances, it might bite you back pretty badly. I don't know.

331
00:29:22.560 --> 00:29:28.400
I don't remember exactly which vote did I give to the questions here, but I will probably use

332
00:29:28.400 --> 00:29:34.320
DynamoDB again, of course, but with caution. There you go. Yes. Okay. That's fair enough.

333
00:29:34.320 --> 00:29:38.400
And I think that would reflect a lot of people's views because there has been a bit of negativity,

334
00:29:38.400 --> 00:29:43.760
not around DynamoDB per se, but around a bit of pushback against a single-table design,

335
00:29:43.920 --> 00:29:49.840
principles recently. I think we saw some ETA discussion on Twitter and I think Alex DeBrie

336
00:29:51.360 --> 00:29:55.360
mentioned that he would use it a little bit with more caution and overused it in the past.

337
00:29:55.920 --> 00:30:00.240
And I think it was interpreted by some people that you should just not use single-table design

338
00:30:00.240 --> 00:30:06.240
and Rick Houlihan got involved again. I think it's a topic maybe we should cover in a future episode,

339
00:30:06.240 --> 00:30:12.000
this whole idea of single-table design and DynamoDB. But in my view, it was always something

340
00:30:12.000 --> 00:30:15.760
that's very difficult for everybody to grasp, especially for everybody on a team. So it should

341
00:30:15.760 --> 00:30:20.720
be used with caution, but DynamoDB itself has so many other applications and uses. I would be

342
00:30:20.720 --> 00:30:25.760
positive in general. Absolutely.

343
00:30:25.760 --> 00:30:30.800
It's just that I don't know if I would consider a totally general purpose database. You need to be careful with the use cases. If you pick a good use case, it's

344
00:30:30.800 --> 00:30:36.080
an amazing tool, but for other use cases, it might be very difficult to achieve your goals with

345
00:30:36.080 --> 00:30:40.560
DynamoDB, or it might end up being very expensive or you need to write a lot of custom code.

346
00:30:41.040 --> 00:30:46.480
Yeah. Okay. Generally, most people seem pretty happy and memento.

347
00:30:46.480 --> 00:30:52.000
Yeah, it's a little bit strange, right? Because this section is titled ranking of the NoSQL databases provided by AWS,

348
00:30:53.120 --> 00:30:58.880
which is fine. And it sticks to services that are on AWS and then others. Other NoSQL databases

349
00:30:58.880 --> 00:31:02.720
provided by AWS, not mentioned above, include memento. But of course, memento is not provided

350
00:31:02.720 --> 00:31:08.320
by AWS, it's provided by memento.

351
00:31:08.320 --> 00:31:14.560
Maybe because some of them are ex-WS engineers, deserves to be that. I don't know. Okay.

352
00:31:14.560 --> 00:31:18.000
And NoSQL databases is its own category, but we don't have a category for SQL databases, SQL databases.

353
00:31:18.000 --> 00:31:22.160
Which is also interesting, yes.

354
00:31:22.160 --> 00:31:27.680
Because I'd love to hear people talking about Aurora serverless. Yes. How many people love it, right? And will keep using it.

355
00:31:28.640 --> 00:31:34.400
Yeah. Now we talked about... We had a whole series about event services in AWS. We did one,

356
00:31:34.400 --> 00:31:40.640
an individual episode on SNS, SQS, EventBridge, Kinesis, Kafka. Anything else did I miss? I think

357
00:31:40.640 --> 00:31:45.360
those are the main ones. And then we did another episode comparing them all. So if those interest

358
00:31:45.360 --> 00:31:48.960
you, feel free to check them out. They're always popular from the back catalog. So Luciano,

359
00:31:49.760 --> 00:31:53.040
if you had to guess beforehand what the most popular event service was, what would you have

360
00:31:53.040 --> 00:31:58.480
guessed? I was expecting SQS to be the first one just because, I don't know.

361
00:31:58.480 --> 00:32:03.920
In my personal experience, it's something that always comes up in almost every architecture. But to be fair,

362
00:32:03.920 --> 00:32:09.920
SNS also has so many use cases that it's not surprising either to see that. Even just for

363
00:32:09.920 --> 00:32:15.520
notifications. Yeah. Yeah. Alarms. And EventBridge is actually a bit surprising because it's still a

364
00:32:15.520 --> 00:32:20.720
relatively newer service compared to the other ones. So it is surprising that there's so much

365
00:32:20.720 --> 00:32:27.200
share, but to be fair, it is a great service. And it's so easy to start using it that I can see why

366
00:32:27.200 --> 00:32:30.560
there might be an uptake even though it's a relatively recent service.

367
00:32:30.560 --> 00:32:36.240
What's Step Functions doing in here? Yeah. That's a bit unexpected, to be honest.

368
00:32:36.240 --> 00:32:40.320
Yeah. Maybe they felt they had to put it somewhere. Because in some ways it's the opposite

369
00:32:40.320 --> 00:32:44.560
of event driven, isn't it? Even though you can have asynchronous execution patterns in there.

370
00:32:44.560 --> 00:32:48.800
I'd surprised that only 57.9% of people are using Kinesis. People should make more use of that.

371
00:32:49.440 --> 00:32:54.000
And 10% of people are still using the simple workflow service SWF, which is maybe again,

372
00:32:54.000 --> 00:32:59.440
it's just use cases they can't turn off. Okay. DynamoDB streams. Yeah. People like,

373
00:32:59.440 --> 00:33:03.840
I guess for people doing any kind of triggers, change data capture on DynamoDB,

374
00:33:03.840 --> 00:33:09.600
that's the way to do it or with Kinesis. Yeah.

375
00:33:09.600 --> 00:33:16.160
Here it's pretty equal the spread of retention. I think, yeah. I think every one of the services has its own specific use cases and

376
00:33:16.160 --> 00:33:20.160
it works really well for those use cases. So I guess if you need a queue, you're going to use

377
00:33:20.160 --> 00:33:25.440
SQS and you're probably going to stick to it. If you need an event system, you probably use

378
00:33:25.440 --> 00:33:30.400
EventBridge and you stick to it. Kinesis is more if you need high throughput, batching,

379
00:33:30.400 --> 00:33:36.880
that kind of stuff. So it makes sense that every one of them has a high rate of retention awareness

380
00:33:36.880 --> 00:33:41.520
and interest. It's probably more making sure that you use the right tool for the right use case.

381
00:33:42.960 --> 00:33:46.640
Some of these things I'd love to see the raw data. Is it possible, I wonder, to publish

382
00:33:46.640 --> 00:33:52.000
anonymized raw data for this? Is there a risk? Because 10% of people are using SWF,

383
00:33:52.000 --> 00:33:59.200
simpler workflow services, which is basically deprecated by AWS for 99% of use cases in favor

384
00:33:59.200 --> 00:34:04.000
of step functions. So 10% are using it, but half of the people are interested in using it.

385
00:34:06.080 --> 00:34:08.080
Yeah. That's a bit unexpected.

386
00:34:08.080 --> 00:34:14.000
A deprecated service. All right. Any major change here? More people are using step functions.

387
00:34:14.000 --> 00:34:18.800
DynamoDB Streams is a new entry on this list. It obviously wasn't in the survey last year.

388
00:34:19.600 --> 00:34:25.360
And EventBridge is on the increase, but every... Yeah. Adoption of event-driven services seems to

389
00:34:25.360 --> 00:34:32.160
be up everywhere. Nothing has gone down. Okay. So where's the positivity? SQS and SNS are

390
00:34:32.160 --> 00:34:37.360
positive. It's hard to fault them, really. I think they're just... They're the simple services that

391
00:34:37.360 --> 00:34:42.000
live up to their name along with S3. They're just fantastic services. Everything you want from a

392
00:34:42.000 --> 00:34:46.240
serverless service in those things. I think they just work and there's very little complexity to

393
00:34:46.240 --> 00:34:51.360
them. Yeah. Kafka. I suppose Kafka is a bit more of a complex beast, even with MSK. Even with MSK

394
00:34:51.360 --> 00:34:57.280
serverless, we reviewed it, we talked about it, we've used it, and there's still quite a lot to

395
00:34:57.280 --> 00:35:02.240
manage and monitor there. Incredibly powerful, but I can understand why people would be turned off if

396
00:35:02.240 --> 00:35:07.520
they've used it and didn't really get a great experience without putting in the effort to learn

397
00:35:07.600 --> 00:35:13.040
it fully. All right. Yeah. People are mostly happy. I don't know if these happiness charts are

398
00:35:13.040 --> 00:35:18.160
telling us too much. So our last category is AI and ML, Luciano. Yes. Let's run through it.

399
00:35:18.880 --> 00:35:24.160
Yeah. And it's interesting that the first one is OpenAI, which is not even AWS, but that's fair.

400
00:35:24.160 --> 00:35:31.200
Not every category is only AWS-specific services. Then we have SageMaker, which is 35%,

401
00:35:32.160 --> 00:35:38.640
Recognition34, Textract, again, close to 34, Bedrock, which is interesting to see that almost

402
00:35:38.640 --> 00:35:45.680
as 30% being a very new service. And yeah, then Poly, Comprehend, Transcribe, Translate,

403
00:35:45.680 --> 00:35:51.520
Personalize, Inference, Forecast, and Amazon Augmented AI, which I don't think I've come

404
00:35:51.520 --> 00:35:57.040
across it before, so not really sure. But my feeling is that these are, again, very different

405
00:35:57.040 --> 00:36:02.160
tools for very different use cases. So I don't know if there is really a comparison that you

406
00:36:02.160 --> 00:36:07.520
can make between them or is more, again, which kind of use cases are people having the most

407
00:36:07.520 --> 00:36:14.320
and do they pick up the right tool for that use case or not? Yeah.

408
00:36:14.320 --> 00:36:19.440
If we could influence the kind of questions or the design of the survey for next year, it would be interesting to get,

409
00:36:19.440 --> 00:36:23.200
well, what are you using these services for? What's your application? Because I think, yeah,

410
00:36:23.200 --> 00:36:27.760
a lot of this could be like OpenAI, 58%. That could be just people playing or using

411
00:36:27.760 --> 00:36:32.560
ChatGPT a few times a week, I guess. Yeah.

412
00:36:32.560 --> 00:36:36.800
Not necessarily integrating it into applications, right? Yeah. Yeah. The retention on all these services is quite high, isn't it?

413
00:36:36.800 --> 00:36:42.080
People are using them. People who use them tend to keep using them or want to keep using them. Awareness is

414
00:36:42.080 --> 00:36:45.840
pretty good across the board for these AI services, even things like Forecast. Yeah.

415
00:36:46.400 --> 00:36:52.800
And I'm surprised a little bit, like 50, 60% of people are using OpenAI, but only the same number

416
00:36:52.960 --> 00:36:57.680
are interested in using it. So it's like, is there a split of people who are just completely

417
00:36:57.680 --> 00:37:03.760
uninterested in OpenAI? That surprises me in this day. All right. So what are the trends here?

418
00:37:03.760 --> 00:37:08.640
Yeah, OpenAI is new there. Wasn't there last year, which makes sense. Same for Bedrock.

419
00:37:09.360 --> 00:37:15.280
Okay. But everything, machine learning usage seems to be on the increase in general. Amazon Translate,

420
00:37:16.080 --> 00:37:21.520
Comprehend, Transcribe, they're all increasing for this audience.

421
00:37:21.520 --> 00:37:28.080
Now let's see what people don't like SageMaker is probably- Yeah. SageMaker would not use again 9%. Yeah. I can understand that.

422
00:37:28.080 --> 00:37:32.560
Yeah. It's a bit of a mixed bag SageMaker, I guess, and some of the modes of execution

423
00:37:32.560 --> 00:37:36.800
are more complicated than I'd like them to be. They can be a bit slow to start up SageMaker

424
00:37:36.800 --> 00:37:41.040
endpoints, for example. We talked about this when we talk about in our episode about how to run

425
00:37:41.040 --> 00:37:45.040
machine learning. Yeah. So there's a lot more negative sentiment here, isn't there? Overall,

426
00:37:45.040 --> 00:37:50.320
50% of people are three stars or less. That's interesting.

427
00:37:50.560 --> 00:37:56.160
Another thing I would ask is that if there is a free form for future surveys, if there would be a free form on why are you

428
00:37:56.160 --> 00:38:01.120
not satisfied with it? Because otherwise it's just too difficult to extrapolate why people might be

429
00:38:01.120 --> 00:38:05.840
unhappy with these tools. I understand it would be really difficult to aggregate this kind of answers,

430
00:38:05.840 --> 00:38:10.160
but maybe they could do some kind of manual selection to try to extrapolate what is the

431
00:38:10.160 --> 00:38:16.560
sentiment there. Yeah, I agree. And look, I think it's well done on putting this stuff together.

432
00:38:16.640 --> 00:38:21.040
I mean, it's difficult to get this sort of output and make sure it's statistically relevant and

433
00:38:21.040 --> 00:38:27.040
unbiased. It's impossible, I would imagine, but it's been running for a few years now. I guess

434
00:38:27.040 --> 00:38:32.560
this is the second year. And if you want to, if you didn't know about it this year, if you want to

435
00:38:32.560 --> 00:38:37.200
be included next year, you can add your email for the 2025 and you'll get a notification when that one comes out next January.

436
00:38:37.200 --> 00:38:42.720
Yes. And I think this brings us to the end of this episode.

437
00:38:42.720 --> 00:38:47.440
I hope that you like this slightly different format from what we do generally. This was a little bit more

438
00:38:47.440 --> 00:38:53.280
open for us. We did do a little bit less preparation. So it's more of our real unfiltered

439
00:38:53.280 --> 00:38:58.480
opinions rather than preparing an entire set of things that we wanted to say in advance.

440
00:38:58.480 --> 00:39:04.000
So hopefully that comes across well, but if not, let us know and we'll try to stick to what you

441
00:39:04.000 --> 00:39:08.720
like the most and get better in the next episode. So as usual, leave us comments, reach out to us on

442
00:39:08.720 --> 00:39:13.760
social media and let's engage because that's what helps us to try to make this podcast better and

443
00:39:13.760 --> 00:39:23.600
better every single time. So thank you very much. And we'll see you in the next episode.
