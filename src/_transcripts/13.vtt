WEBVTT

1
00:00:00.000 --> 00:00:12.160
Hello everyone and welcome to another episode of AWS Bites, the show where we discuss interesting

2
00:00:12.160 --> 00:00:15.240
AWS questions in just about five minutes.

3
00:00:15.240 --> 00:00:20.360
But today it is a special show where we are actually going to spend more time than usual

4
00:00:20.360 --> 00:00:26.460
because we want to talk about re-invent, what we are going to spend from re-invent and what

5
00:00:26.460 --> 00:00:30.760
is going to be our wishlist for the event.

6
00:00:30.760 --> 00:00:35.240
And also we're going to take a little bit of time to discuss some of the, what we're

7
00:00:35.240 --> 00:00:38.060
going to call the pre-invent announcements.

8
00:00:38.060 --> 00:00:43.100
So services and features that were released just before re-invent.

9
00:00:43.100 --> 00:00:46.800
My name is Luciano and I'm joined by Eoin.

10
00:00:46.800 --> 00:00:52.500
And given that today we're going to talk about re-invent, you probably know that re-invent

11
00:00:52.500 --> 00:00:59.320
is a five rows of knowledge and announcements, and it's very easy to get lost in all the

12
00:00:59.320 --> 00:01:04.280
announcements and you don't really know where to read and what to follow, which talks you

13
00:01:04.280 --> 00:01:06.280
want to go and watch.

14
00:01:06.280 --> 00:01:11.040
So we are going to try to do a series of live streams on YouTube where we're going to be

15
00:01:11.040 --> 00:01:15.100
sharing our highlights, our favorite, our opinions and impressions.

16
00:01:15.100 --> 00:01:20.340
So make sure to subscribe and turn on the notifications on YouTube so you can be notified

17
00:01:20.340 --> 00:01:23.020
the next time we go live.

18
00:01:23.020 --> 00:01:30.240
So Eoin, do you want to give us a first impression on your wishlist for re-invent or maybe we

19
00:01:30.240 --> 00:01:33.840
can start by looking at last year's biggest announcements?

20
00:01:33.840 --> 00:01:34.840
Yeah.

21
00:01:34.840 --> 00:01:35.840
Ooh, yeah.

22
00:01:35.840 --> 00:01:36.840
It seems like a long time ago now.

23
00:01:36.840 --> 00:01:42.820
Last year, I remember that we had this big focus on hybrid cloud and they announced EKS

24
00:01:42.820 --> 00:01:45.340
anywhere and ECS anywhere.

25
00:01:45.340 --> 00:01:51.440
Basically you could run those container workloads in other clouds or on-prem.

26
00:01:51.440 --> 00:01:53.400
Last year we also had those big announcements on Lambda.

27
00:01:53.400 --> 00:01:55.420
So we had 10 gigabytes of RAM.

28
00:01:55.420 --> 00:02:00.660
We had millisecond pricing and container image support, which was probably a big one.

29
00:02:00.660 --> 00:02:05.480
So yeah, it'd be interesting, is there going to be a central focus on one big topic this

30
00:02:05.480 --> 00:02:06.480
year?

31
00:02:06.480 --> 00:02:07.480
What do you think?

32
00:02:07.480 --> 00:02:10.900
Do you have any, I suppose, what are your top wishlist items?

33
00:02:10.900 --> 00:02:12.440
What would you put top of your list?

34
00:02:17.240 --> 00:02:22.840
Yeah, given that you mentioned Lambda and Fargate, one of the things that I would like to see, and it doesn't feel too complicated from my perspective, so hopefully it's realistic

35
00:02:22.840 --> 00:02:33.040
as an ask to AWS, is to have the ability to enable GPU directly on Lambda or Fargate containers.

36
00:02:33.040 --> 00:02:37.540
Because sometimes you just have a need to do something small, like I don't know, process

37
00:02:37.540 --> 00:02:44.880
a small video or concatenate, I don't know, bits of video together and just assemble them.

38
00:02:44.880 --> 00:02:50.860
Like what we do sometimes to produce the videos for AWS bytes, it will be nice to just build

39
00:02:50.860 --> 00:02:54.400
a Lambda that can do that on demand very quickly.

40
00:02:54.400 --> 00:02:59.220
But because you don't have GPU, it gets trickier and yeah, maybe you can still do it, but it

41
00:02:59.220 --> 00:03:04.040
doesn't feel like you are using the system as best as you can.

42
00:03:04.040 --> 00:03:08.920
So that would be nice to see, I guess it's going to unlock a lot of opportunities to

43
00:03:08.920 --> 00:03:15.620
use Lambda and Fargate also for different kinds of tasks.

44
00:03:15.620 --> 00:03:21.960
Also I have another one that has been a little bit of a frustration lately, which is S3 partitioning

45
00:03:21.960 --> 00:03:25.440
visibility, I'm going to say.

46
00:03:25.440 --> 00:03:31.980
And maybe an opportunity to talk a little bit more about what that means, but in short,

47
00:03:31.980 --> 00:03:37.520
what I mean by that is that S3 is going to try to scale based on your needs and your

48
00:03:37.520 --> 00:03:44.280
usage, but if you really have big spikes of usage, S3 is not going to be able to keep

49
00:03:44.280 --> 00:03:50.200
up and you might get throttled in your attempt to create new files, for instance.

50
00:03:50.200 --> 00:03:53.480
And there are things you can do to improve the situation, you can reach out to support

51
00:03:53.480 --> 00:03:58.700
and you can try to describe them your use cases and they will make sure that the partitioning

52
00:03:58.700 --> 00:04:05.820
configuration that is generally automatic in S3 gets optimized for your use cases.

53
00:04:05.820 --> 00:04:11.640
But that's incredibly complex and not obvious, I guess to most people that you can do that.

54
00:04:11.640 --> 00:04:17.080
So it would be nice to have the opportunity to do all of that in a more self-service way,

55
00:04:17.080 --> 00:04:22.000
where you have maybe a panel, maybe you have APIs and you can say, okay, I'm going to create

56
00:04:22.000 --> 00:04:29.200
files using these patterns, so maybe we can define how to shard the usage of S3 based

57
00:04:29.200 --> 00:04:31.940
on these patterns.

58
00:04:31.940 --> 00:04:37.120
So yeah, I think these are the two things I would put at the top of my wishlist, but

59
00:04:37.120 --> 00:04:43.640
mostly driven by personal need and ideas that I had and frustration that I encountered in

60
00:04:43.640 --> 00:04:46.200
using AWS every day.

61
00:04:51.960 --> 00:04:56.960
Yeah, that one about S3 is, it kind of probably falls into a category of a whole load of, you know, metrics or, you know, features we'd like to see, but you don't get to see them

62
00:04:56.960 --> 00:05:00.500
through the console or they don't have CloudWatch metrics out of the box.

63
00:05:00.500 --> 00:05:04.040
I kind of think if there's anything that you're going to be billed on or throttled on, it

64
00:05:04.040 --> 00:05:06.440
should be available as a metric.

65
00:05:06.440 --> 00:05:11.760
And that also goes for like the number of running containers in ECS or the number of

66
00:05:11.760 --> 00:05:14.140
running EC2 instances.

67
00:05:14.140 --> 00:05:15.140
I'd really like to see that.

68
00:05:15.140 --> 00:05:18.240
So just to add that onto that one.

69
00:05:18.240 --> 00:05:22.760
For my wishlist, I guess I'd like to kind of restate what a lot of people have asked

70
00:05:22.760 --> 00:05:29.800
for in the serverless space, which is a serverless Redis option and a serverless Kinesis option.

71
00:05:29.800 --> 00:05:33.000
So they've been requested a lot of times, but I use them both quite a lot and having

72
00:05:33.000 --> 00:05:36.960
to provision and right-size them can be a bit of a pain when you don't have to with

73
00:05:36.960 --> 00:05:39.120
other things like DynamoDB.

74
00:05:39.120 --> 00:05:43.320
So I'm not surprised they haven't come very quickly because these are challenging things

75
00:05:43.320 --> 00:05:49.520
to do for AWS, but it would be interesting to see if we get them this year.

76
00:05:54.360 --> 00:05:57.840
Especially because I've seen that there are a few competitors, I'm going to say, or a few services offering that as a service.

77
00:05:57.840 --> 00:06:04.160
So it will be interesting to see if AWS decides to attack that space as well.

78
00:06:04.160 --> 00:06:05.160
I hope so.

79
00:06:05.160 --> 00:06:06.160
Yeah.

80
00:06:06.160 --> 00:06:10.440
I think a lot of people were underwhelmed by the MemoryDB announcement because it was

81
00:06:10.440 --> 00:06:14.720
an option for Redis, but it wasn't exactly the option that a lot of people were hoping

82
00:06:14.720 --> 00:06:15.720
for.

83
00:06:15.720 --> 00:06:18.920
I'd also like to hope we see some good Lambda announcements.

84
00:06:18.920 --> 00:06:24.240
I mean, feature-wise Lambda is pretty good as it is, but I'd like to see the SQS triggering

85
00:06:24.240 --> 00:06:28.240
scale up a bit faster and burst a bit faster.

86
00:06:28.240 --> 00:06:33.320
I also think, again, to beat this drum again, it would be great to see some better pricing

87
00:06:33.320 --> 00:06:37.180
options for Lambda so you can start using thousands of Lambdas for big data processing

88
00:06:37.180 --> 00:06:42.920
and batch processing workloads without having to worry about the massive differential between

89
00:06:42.920 --> 00:06:47.440
the Lambda cost for that and using EC2.

90
00:06:47.440 --> 00:06:53.040
Also then on serverless side of things, I'm really interested to watch EventBridge and

91
00:06:53.040 --> 00:06:54.040
Step Functions.

92
00:06:54.040 --> 00:06:57.980
We've seen Step Functions really just accelerate with all the features.

93
00:06:57.980 --> 00:07:03.240
The thing recently where you could invoke any AWS SDK from Step Functions was really

94
00:07:03.240 --> 00:07:08.680
great because it's like this integrate anything with anything capability.

95
00:07:08.680 --> 00:07:10.900
I really like to see more of that.

96
00:07:10.900 --> 00:07:14.840
If we could get some of that in EventBridge too, that would be awesome because it would

97
00:07:14.840 --> 00:07:20.240
remove a load of the need for glue Lambdas that are just forwarding an event from one

98
00:07:20.240 --> 00:07:26.360
source and passing it to another or doing some very basic data transformation.

99
00:07:26.360 --> 00:07:31.120
We're getting spoiled with a lot of these services now, but maintaining Lambdas has

100
00:07:31.120 --> 00:07:35.080
a cost would be great to get rid of a lot of that kind of stuff.

101
00:07:35.080 --> 00:07:36.680
I think those are probably my...

102
00:07:36.680 --> 00:07:40.600
On the last one actually on EventBridge, I'd also like to see...

103
00:07:40.600 --> 00:07:45.400
One of the reasons why I don't adopt EventBridge in all cases is just because you don't get

104
00:07:45.400 --> 00:07:52.600
a really great guarantee on latency and performance like you do with SNS or with Kinesis.

105
00:07:52.600 --> 00:07:56.040
So it would be good to see some improvements there because that would really make it a

106
00:07:56.040 --> 00:07:58.760
game changer for a whole set of new workloads.

107
00:07:58.760 --> 00:08:01.740
So those are probably my top wishlist items.

108
00:08:01.740 --> 00:08:02.740
What else didn't we cover?

109
00:08:02.740 --> 00:08:05.000
Do you have any special mentions?

110
00:08:05.000 --> 00:08:11.320
I have a few other smaller ones thinking again about pains that I encountered dealing with

111
00:08:11.320 --> 00:08:12.820
AWS.

112
00:08:12.820 --> 00:08:18.580
One that also was a very recent experience is that I was trying to do...

113
00:08:18.580 --> 00:08:22.260
To set up a custom domain for a private API.

114
00:08:22.260 --> 00:08:27.400
So an API with a private API gateway.

115
00:08:27.400 --> 00:08:33.880
And basically it is possible, but it requires you to set up so many different things like

116
00:08:33.880 --> 00:08:45.200
load balancers and VPC entry point is called for every gateway.

117
00:08:45.200 --> 00:08:46.760
Oh, the VPC endpoint.

118
00:08:46.760 --> 00:08:48.520
Yeah, you're right.

119
00:08:48.520 --> 00:08:49.520
Yeah.

120
00:08:49.520 --> 00:08:54.200
And yeah, it's doable, but it takes forever and it's very hard to test.

121
00:08:54.200 --> 00:08:59.080
And yeah, you have a feeling that you are doing something that should be much simpler.

122
00:08:59.080 --> 00:09:04.640
So hopefully AWS will figure out that, I don't know, maybe they can abstract all this complexity

123
00:09:04.640 --> 00:09:09.360
and just give you a flag that allows you, okay, just connect this domain to this private

124
00:09:09.360 --> 00:09:11.820
API gateway.

125
00:09:11.820 --> 00:09:17.160
So that's something I will make at least my life easier in some of the projects I've been

126
00:09:17.160 --> 00:09:18.960
involved with.

127
00:09:18.960 --> 00:09:23.200
And I'm sure there will be many other people that could use something like that.

128
00:09:23.200 --> 00:09:29.640
And on a similar note, the private static websites could be a lot easier as well, because

129
00:09:29.640 --> 00:09:35.000
if you want to do a public static website, there is plenty of options, especially now

130
00:09:35.000 --> 00:09:37.400
with Amplify, it's even easier.

131
00:09:37.400 --> 00:09:41.580
They will take care of all the setup for you.

132
00:09:41.580 --> 00:09:46.160
But if you want to do a private website, because maybe it's an internal website for a company

133
00:09:46.160 --> 00:09:52.640
and yeah, you are basically on your own again and you have to set up everything from scratch.

134
00:09:52.640 --> 00:09:56.520
So that should be something that could be simplified as well.

135
00:09:56.520 --> 00:10:02.060
And finally, just because you mentioned Redis, I've been thinking that even Redis, it is

136
00:10:02.060 --> 00:10:06.680
trickier than it should be when you just want to debug something and you probably have in

137
00:10:06.680 --> 00:10:09.720
production Redis in a private VPC.

138
00:10:09.720 --> 00:10:14.360
It would be nice to have, I don't know, some UI that can easily just start from the web

139
00:10:14.360 --> 00:10:19.640
console and connect to your Redis instance so that you don't have to set up, I don't

140
00:10:19.640 --> 00:10:26.480
know, Bastion host or VPN access, or sometimes I've done even quick Lambdas in the same VPC

141
00:10:26.480 --> 00:10:32.140
just to be able to quickly interrogate Redis and verify quickly what was going on.

142
00:10:32.140 --> 00:10:37.600
And again, that feels a little bit of an overkill that there could be better ways to just be

143
00:10:37.600 --> 00:10:42.440
able to debug what's going on with a Redis instance in a private VPC.

144
00:10:42.440 --> 00:10:48.560
Yeah, big time I've heard our colleague Gil as well ask for the same thing.

145
00:10:48.560 --> 00:10:51.320
Especially when you're working in a very servilous environment, you don't want to have to spin

146
00:10:51.320 --> 00:10:55.180
up easy to Bastion hosts anymore.

147
00:10:55.180 --> 00:10:58.920
And last year, I think it was last year, we had the announcement of Cloud Shell, which

148
00:10:58.920 --> 00:11:06.000
is like, seemed like a great announcement and similar to what Google Cloud offers.

149
00:11:06.000 --> 00:11:10.440
They're kind of famous for their really nice shell that allows you to get gain access to

150
00:11:10.440 --> 00:11:12.920
cloud.

151
00:11:12.920 --> 00:11:17.640
But as far as I know, they announced that they would add VPC support, but we haven't

152
00:11:17.640 --> 00:11:18.640
seen it arrive yet.

153
00:11:18.640 --> 00:11:22.600
And if you get VPC support, then you could probably access your Redis host and a lot

154
00:11:22.600 --> 00:11:27.720
of other things without having to have that easy to Bastion.

155
00:11:27.720 --> 00:11:32.160
So let's keep our fingers crossed for something around that.

156
00:11:32.160 --> 00:11:40.320
I'm also so interested to see like just on a more kind of blue sky kind of projects to

157
00:11:40.320 --> 00:11:45.640
see if they do any more of a push around kind of low code or no code solutions.

158
00:11:45.640 --> 00:11:51.400
We haven't seen really any great advancements with Honeycode on AWS, but we have seen a

159
00:11:51.400 --> 00:11:54.600
lot of machine learning advancements over the last few years for sure.

160
00:11:54.600 --> 00:12:00.020
And we've had CodeGuru and last year we had Natural Language Interface for QuickSight.

161
00:12:00.020 --> 00:12:07.280
So we can see the kind of potential there around using business language, business domain

162
00:12:07.280 --> 00:12:12.920
expertise to express technology requirements and have a lot of that automated for you.

163
00:12:12.920 --> 00:12:16.320
It's really interesting to see like we still find ourselves with all this great serverless

164
00:12:16.320 --> 00:12:21.960
technology, but we still have to create code applications with APIs and a database and

165
00:12:21.960 --> 00:12:26.040
define all of these layers ourselves, even though for a lot of us, there's a huge amount

166
00:12:26.040 --> 00:12:28.280
of overlap in what we're doing.

167
00:12:28.280 --> 00:12:32.100
So are they going to take that to another level and allow us to create code applications

168
00:12:32.100 --> 00:12:35.360
using Natural Language Interface?

169
00:12:35.360 --> 00:12:40.920
I think that this has obviously been a long time coming, you know, no effective low code

170
00:12:40.920 --> 00:12:43.740
solutions or no code solutions.

171
00:12:43.740 --> 00:12:49.200
But I think with all of the capabilities that AWS has, surely they're best placed to really

172
00:12:49.200 --> 00:12:52.760
deliver first on a really comprehensive solution for this.

173
00:12:52.760 --> 00:12:54.160
Who knows?

174
00:12:54.160 --> 00:13:00.040
So let's see what else.

175
00:13:00.040 --> 00:13:07.920
On the data services, I think we've been using Glue and Athena and I was talking to another

176
00:13:07.920 --> 00:13:13.000
colleague of ours, Mark Hodnett, who's been using Glue and Athena quite a lot recently.

177
00:13:13.000 --> 00:13:16.920
And one of the items he had on his wishlist was bigger nodes for Athena.

178
00:13:16.920 --> 00:13:20.420
I think we've seen Athena grow and grow.

179
00:13:20.420 --> 00:13:25.680
It's become quite popular and quite capable, but it's still quite limited in the default

180
00:13:25.680 --> 00:13:30.880
query execution and also the amount you can do with one worker.

181
00:13:30.880 --> 00:13:35.640
So one of the things Mark suggested was that we might have different pricing options for

182
00:13:35.640 --> 00:13:41.960
Athena where you could pay more for bigger execution capacity.

183
00:13:41.960 --> 00:13:45.360
So bigger memory, a bigger CPU in the backend.

184
00:13:45.360 --> 00:13:50.240
And so I think that's really powerful because that would really help Athena to be a compelling

185
00:13:50.240 --> 00:13:56.200
alternative to a lot of the other data like query solutions out there.

186
00:13:56.200 --> 00:13:58.280
And yeah, I don't know.

187
00:13:58.280 --> 00:14:03.680
Do you think that we hear a lot of complaints around the AWS console and the UI and there's

188
00:14:03.680 --> 00:14:05.520
always some improvements there.

189
00:14:05.520 --> 00:14:10.760
There was some great improvements recently in like the Cognito interface, which got a

190
00:14:10.760 --> 00:14:11.760
lot of attention.

191
00:14:11.760 --> 00:14:14.760
What do you think about documentation?

192
00:14:14.760 --> 00:14:21.120
Do you think there's potentially a documentation update that's worthy of a reinvent keynote

193
00:14:21.120 --> 00:14:23.160
announcement?

194
00:14:23.160 --> 00:14:25.880
I honestly hope for something like that.

195
00:14:25.880 --> 00:14:30.280
I don't know if it's something that, I mean, I think that there are a lot of people inside

196
00:14:30.280 --> 00:14:36.840
AWS that realize that what we have today is maybe a little bit suboptimal, I'm going to

197
00:14:36.840 --> 00:14:43.440
dare to say, because it's easy to get the yellow word of pretty much every AWS service.

198
00:14:43.440 --> 00:14:48.320
But then for any realistic production use case, you are pretty much on your own.

199
00:14:48.320 --> 00:14:51.920
And the reason why I said that there are people inside AWS that understand that is because

200
00:14:51.920 --> 00:14:58.240
I've seen a lot of evangelists in AWS publishing very good tutorials, very good sample application

201
00:14:58.240 --> 00:15:03.360
and spending a lot of time actually trying to show you what it takes to build a more

202
00:15:03.360 --> 00:15:07.360
serious application, maybe even combining different services.

203
00:15:07.360 --> 00:15:12.320
I want to give a shout out for instance to Aitor Lesser for the serverless airline booking

204
00:15:12.320 --> 00:15:19.600
application, which I know is kind of a multi-year effort, but it really shows a serious project,

205
00:15:19.600 --> 00:15:24.120
how it might look like, what kind of challenges you might have to face, how do you set up

206
00:15:24.120 --> 00:15:28.720
deployment, observability and all these kinds of interesting topics.

207
00:15:28.720 --> 00:15:32.300
So definitely a lot more than a simple yellow word.

208
00:15:32.300 --> 00:15:39.040
There has been other activities similar to that that I've seen before, like the Uber

209
00:15:39.040 --> 00:15:40.040
for unicorns.

210
00:15:40.040 --> 00:15:45.520
I'm not sure that's the actual name, but it was an amazing workshop that I did once with

211
00:15:45.520 --> 00:15:51.320
Danilo Poce where basically you were using Lambda to build something like Uber, but you

212
00:15:51.320 --> 00:15:54.660
were booking a unicorn that will take you somewhere.

213
00:15:54.660 --> 00:15:59.560
Of course, fictional application, but you will see some interesting challenges while

214
00:15:59.560 --> 00:16:01.040
trying to build that.

215
00:16:01.040 --> 00:16:04.440
So definitely a lot more in depth than a yellow word.

216
00:16:04.440 --> 00:16:09.580
You will need to use many services together and set up APIs from then and a number of

217
00:16:09.580 --> 00:16:10.820
different things.

218
00:16:10.820 --> 00:16:11.920
I remember the unicorn thing.

219
00:16:11.920 --> 00:16:13.680
I think it was called Wild Ride.

220
00:16:13.680 --> 00:16:14.680
It just came into my head.

221
00:16:14.680 --> 00:16:17.520
Oh yeah, that's the right name.

222
00:16:17.520 --> 00:16:20.920
I think it's good that you gave a shout out there because it's probably worth mentioning.

223
00:16:20.920 --> 00:16:27.400
You know, everybody's constantly adding to our wishlist items and it's okay to demand

224
00:16:27.400 --> 00:16:31.280
great features from a company called AWS, but it's probably worth giving a thank you

225
00:16:31.280 --> 00:16:36.720
and a shout out to all the AWS engineers who have to put in the long hours and the hard

226
00:16:36.720 --> 00:16:42.240
work to put all these things together and probably have a significant amount of workload

227
00:16:42.240 --> 00:16:44.440
and stress at this time of year.

228
00:16:44.440 --> 00:16:45.440
Absolutely.

229
00:16:45.440 --> 00:16:49.000
I can barely imagine what they're going through right now.

230
00:16:49.000 --> 00:16:50.000
Yeah.

231
00:16:50.000 --> 00:16:57.000
On the same topic, I've seen that there is the workshops.aws that maybe is an answer

232
00:16:57.000 --> 00:16:58.400
to this request.

233
00:16:58.400 --> 00:17:04.880
I feel like it's starting to take in a lot more material and a lot more structured workshops

234
00:17:04.880 --> 00:17:10.960
categorized in a way that you can search for the services you need and you want to use.

235
00:17:10.960 --> 00:17:15.920
But I've seen that, for instance, the CDK one, I had a feeling that was very superficial

236
00:17:15.920 --> 00:17:17.420
the first time I did it.

237
00:17:17.420 --> 00:17:23.080
I've seen some updates, but I think there could be a little bit more investment, again,

238
00:17:23.080 --> 00:17:28.080
to make them a little bit more complete and comprehensive and not just be like a list

239
00:17:28.080 --> 00:17:32.720
of bullet points of things to do, but maybe also give you an idea why you might want to

240
00:17:32.720 --> 00:17:38.980
do that or give you different options or maybe a decision tree that tries to guide you through

241
00:17:38.980 --> 00:17:44.800
given a certain use case, you have different options and you can be guided through what's

242
00:17:44.800 --> 00:17:49.000
the best option for your particular use case.

243
00:17:49.000 --> 00:17:56.520
So yeah, that's something that would be, I think, a massive differentiator in AWS because

244
00:17:56.520 --> 00:18:00.680
it's getting more and more traction, more and more people are starting to use it.

245
00:18:00.680 --> 00:18:05.280
And I'm hearing a lot of people complaining that it's very hard to build that knowledge

246
00:18:05.280 --> 00:18:10.760
because most of the time everyone feels left on their own to find out how to solve the

247
00:18:10.760 --> 00:18:13.560
different problems that they have to face.

248
00:18:13.560 --> 00:18:18.120
Yeah, that makes a lot of sense.

249
00:18:18.120 --> 00:18:23.360
So have we covered everything on our wish list, do you think?

250
00:18:23.360 --> 00:18:24.360
Oh yeah.

251
00:18:24.360 --> 00:18:28.560
One last thing on this topic of, well, not necessarily the same topic, but I think it's

252
00:18:28.560 --> 00:18:30.520
quite related.

253
00:18:30.520 --> 00:18:35.520
Speaking of students and people approaching AWS, it's something we mentioned before in

254
00:18:35.520 --> 00:18:42.120
other avenues, but basically I want to stress again that I wish that there was some sort

255
00:18:42.120 --> 00:18:48.600
of support for having maybe limited accounts where you can just play around with AWS and

256
00:18:48.600 --> 00:18:54.800
have a feeling for what it is and understand if you want to learn it or not without having,

257
00:18:54.800 --> 00:18:59.720
for instance, to create an account that requires you to put a credit card and then you might

258
00:18:59.720 --> 00:19:04.220
abuse that account and maybe end up having to pay a lot of money, which can be scary

259
00:19:04.220 --> 00:19:05.620
for many people.

260
00:19:05.620 --> 00:19:11.360
So basically what I would like to see, it's some sort of easy access to AWS that of course

261
00:19:11.360 --> 00:19:17.200
needs to be somewhat limited, but that will give a lot more confidence to students who

262
00:19:17.200 --> 00:19:21.920
just try it and play around with it without being worried about, is it going to cost me

263
00:19:21.920 --> 00:19:25.480
a lot of money that maybe I cannot even afford right now?

264
00:19:25.480 --> 00:19:29.120
Yeah, I'll second that.

265
00:19:29.120 --> 00:19:30.680
Good idea.

266
00:19:30.680 --> 00:19:37.480
Yeah, so should we talk about pre-invent announcement now?

267
00:19:37.480 --> 00:19:39.040
Yeah, that's a good idea.

268
00:19:39.040 --> 00:19:42.400
Let's look back at some of the things we've seen over the past couple of weeks.

269
00:19:42.400 --> 00:19:48.640
And yeah, there was really very recently, there was a data transfer cost change, which

270
00:19:48.640 --> 00:19:58.560
meant that the free tier limit changed for data transfer out of your region and to CloudFront.

271
00:19:58.560 --> 00:20:03.280
And the limit went from one gigabyte to 500 gigabytes, I believe.

272
00:20:03.280 --> 00:20:09.000
So it's quite a jump and it means a lot because there's been a lot of focus on AWS.

273
00:20:09.000 --> 00:20:17.520
AWS data transfer costs recently, especially with the Cloudflare R2 announcement, which

274
00:20:17.520 --> 00:20:20.680
is like S3 compatible alternative.

275
00:20:20.680 --> 00:20:26.560
Another thing I noticed was the SNS publish message batch change.

276
00:20:26.560 --> 00:20:31.200
It seems like a small change enough, but I think it makes sense when you're dealing with

277
00:20:31.200 --> 00:20:35.520
large volumes of messages in event driven applications that you can publish as many

278
00:20:35.520 --> 00:20:36.520
as possible.

279
00:20:36.520 --> 00:20:43.560
So that's the limit being increased from 10 for SNS and SQS actually.

280
00:20:43.560 --> 00:20:48.120
And there was some interesting stuff around Amplify and CDK.

281
00:20:48.120 --> 00:20:52.960
So going back to this kind of low code, no code thing, slightly related is a lot of the

282
00:20:52.960 --> 00:20:58.020
push around Amplify as the entry point to AWS for new users.

283
00:20:58.020 --> 00:21:01.000
And there's clearly been a lot of great work done around Amplify.

284
00:21:01.000 --> 00:21:07.480
And one of the things they're now providing is the ability to move from Amplify into more

285
00:21:07.480 --> 00:21:12.920
of a individual resource development or maintenance using CDK.

286
00:21:12.920 --> 00:21:17.880
So now you can export your application to a CDK application.

287
00:21:17.880 --> 00:21:22.640
It's kind of analogous to an eject button on Amplify maybe in some ways.

288
00:21:22.640 --> 00:21:23.640
But I like that.

289
00:21:23.640 --> 00:21:30.880
I like that idea that you're giving people a more developer friendly and user friendly

290
00:21:30.880 --> 00:21:36.200
onboarding experience for good apps or for mobile apps, but then allowing them to move

291
00:21:36.200 --> 00:21:42.440
on and move into more of a power user cloud formation mode, if you like.

292
00:21:42.440 --> 00:21:43.440
Yeah.

293
00:21:43.440 --> 00:21:48.800
We spoke a lot in a previous episode about how do you move from, I don't know, creating

294
00:21:48.800 --> 00:21:52.720
things more manually to proper infrastructure as code.

295
00:21:52.720 --> 00:21:57.920
I don't think we've mentioned Amplify, but I think this is now a nice addition to a part

296
00:21:57.920 --> 00:22:02.220
where you start a little bit more easily, but then if you really need to scale in production

297
00:22:02.220 --> 00:22:07.560
and build a team around your product, you'd need something like CDK or to manage infrastructure

298
00:22:07.560 --> 00:22:08.560
as code.

299
00:22:08.560 --> 00:22:14.540
So I think this definitely helps that transition from maybe an MVP to something a little bit

300
00:22:14.540 --> 00:22:16.240
more structured.

301
00:22:16.240 --> 00:22:17.960
Yeah.

302
00:22:17.960 --> 00:22:26.820
Speaking of CDK, there was another announcement that was a CDK hot swap and some accelerate,

303
00:22:26.820 --> 00:22:29.520
which seems particularly interesting.

304
00:22:29.520 --> 00:22:37.440
I haven't tried it yet, but basically the promise is that you can have much faster,

305
00:22:37.440 --> 00:22:41.440
I'm going to say deploy time, even though it's not maybe the right word, but basically

306
00:22:41.440 --> 00:22:49.240
every change you do is going to more easily reflected to a development account.

307
00:22:49.240 --> 00:22:56.720
So you can basically try things quickly and see how they look like in a production that

308
00:22:56.720 --> 00:22:58.240
is not a local environment.

309
00:22:58.240 --> 00:23:02.000
So an environment that maybe is not production, but it's not even a local environment.

310
00:23:02.000 --> 00:23:09.080
So imagine it's a real AWS environment that you are using for development.

311
00:23:09.080 --> 00:23:10.520
So that's interesting.

312
00:23:10.520 --> 00:23:16.640
And one pain point that I had recently is around ECS, which seems to be one of the services

313
00:23:16.640 --> 00:23:24.760
supported here for this kind of a new way of trying things on dev accounts.

314
00:23:24.760 --> 00:23:30.520
It's something I really want to try because it takes notoriously a long time to roll out

315
00:23:30.520 --> 00:23:35.400
changes on ECS, just because there is that entire workflow where they try to guarantee

316
00:23:35.400 --> 00:23:37.600
that your service is never going to go down.

317
00:23:37.600 --> 00:23:42.260
So they will hot swap the old new version.

318
00:23:42.260 --> 00:23:45.060
So they need to guarantee that transition in a nice way.

319
00:23:45.060 --> 00:23:49.280
So sometimes it can take up to half an hour to just see deployments.

320
00:23:49.280 --> 00:23:54.600
And while you are trying to troubleshoot something, maybe something like CDK hot swap can help

321
00:23:54.600 --> 00:23:59.980
you to play around and see how things will look like in an environment that is closer

322
00:23:59.980 --> 00:24:04.600
to what you're going to get in production rather than your local environment.

323
00:24:04.600 --> 00:24:10.080
One of the things that we might cover in a future episode is local development and what

324
00:24:10.080 --> 00:24:16.080
the best practices are for development workflows in AWS, particularly for serverless.

325
00:24:16.080 --> 00:24:20.700
I guess this is like AWS saying, don't worry about the local development environment and

326
00:24:20.700 --> 00:24:23.480
trying to simulate the cloud on your laptop.

327
00:24:23.480 --> 00:24:30.040
Just let's help you to get your code to the cloud quicker and improve that developer feedback

328
00:24:30.040 --> 00:24:31.600
loop.

329
00:24:31.600 --> 00:24:33.400
Mm-hmm.

330
00:24:33.400 --> 00:24:39.360
And I hope that that is going to be another topic where AWS is going to invest more and

331
00:24:39.360 --> 00:24:44.640
more because it's definitely something that I'm hearing everyone, the first time they

332
00:24:44.640 --> 00:24:50.480
approach the cloud moving maybe from on-premise where they're used to do a lot of local development

333
00:24:50.480 --> 00:24:54.040
and then just ship some sort of package.

334
00:24:54.040 --> 00:24:56.960
They are all saying, okay, now what do I do?

335
00:24:56.960 --> 00:25:03.040
I am on my own and I cannot wait half an hour before I see what things look like in production.

336
00:25:03.040 --> 00:25:06.360
Yeah, they shouldn't have to.

337
00:25:06.360 --> 00:25:08.800
Absolutely.

338
00:25:08.800 --> 00:25:14.760
There was also something around SQS partial batch responses.

339
00:25:14.760 --> 00:25:22.400
So if I understood correctly, it is now possible to basically take a batch from SQS and be

340
00:25:22.400 --> 00:25:27.160
able to say from this batch, a certain number of messages succeeded.

341
00:25:27.160 --> 00:25:28.760
So all good.

342
00:25:28.760 --> 00:25:31.920
We can remove them from the queue and other ones failed.

343
00:25:31.920 --> 00:25:36.640
So they will be automatically put back in the queue and then picked again in the next

344
00:25:36.640 --> 00:25:39.740
batch from another worker.

345
00:25:39.740 --> 00:25:46.540
And I think that looks like something small, but I think it could make a big difference

346
00:25:46.540 --> 00:25:53.340
because I remember this has been a problem for a long time and certain frameworks also

347
00:25:53.340 --> 00:25:57.520
had their own built-in solution that was trying to kind of re-implement this feature inside

348
00:25:57.520 --> 00:26:01.960
the framework just because this is such a common problem and it's very hard to build

349
00:26:01.960 --> 00:26:06.000
your own solution that works effectively.

350
00:26:06.000 --> 00:26:10.800
And yeah, sometimes you just end up missing messages or not retrying things or trying

351
00:26:10.800 --> 00:26:15.520
things more than needed just because you haven't figured out how to deal with SQS batching

352
00:26:15.520 --> 00:26:16.520
errors.

353
00:26:21.620 --> 00:26:29.260
Yeah, that is great because you've had it in Kinesis, I think for a while, but it's good to have this support in Lambda for SQS as well.

354
00:26:29.260 --> 00:26:38.040
So I guess I'm going to throw one last question for this special episode that is given that

355
00:26:38.040 --> 00:26:42.840
we are going to start re-invent very soon, how are we going to keep up?

356
00:26:42.840 --> 00:26:48.120
Do we have any recommendation for people?

357
00:26:48.120 --> 00:26:54.580
I recommend that don't expect to be able to keep up to date with everything.

358
00:26:54.580 --> 00:26:59.280
If you're busy, like most people are busy and working day jobs and have plenty to deal

359
00:26:59.280 --> 00:27:03.160
with, so I would say first thing is if you're busy, don't worry about it.

360
00:27:03.160 --> 00:27:06.680
The best thing you can hope for often is just to get some peripheral awareness of what's

361
00:27:06.680 --> 00:27:12.400
going on and maybe it'll help you some point in the future.

362
00:27:12.400 --> 00:27:19.980
Like if you're getting into AWS, it's probably worth dedicating time and attention to it

363
00:27:19.980 --> 00:27:25.160
most if you are starting on AWS, if you happen to be able to get to re-invent physically

364
00:27:25.160 --> 00:27:28.920
in Las Vegas, but if you're starting new projects and you're keen to learn more and have the

365
00:27:28.920 --> 00:27:34.540
time and the opportunity, re-invent is a really great training and learning opportunity because

366
00:27:34.540 --> 00:27:39.380
there's so much knowledge, the speakers are excellent, the topics are really well presented

367
00:27:39.380 --> 00:27:42.740
in great detail and it's always up to date content.

368
00:27:42.740 --> 00:27:45.600
So it's probably the best way to learn about AWS resources.

369
00:27:45.600 --> 00:27:52.800
I still go back to previous re-invent talks all the time to learn about new services.

370
00:27:52.800 --> 00:27:53.800
So that's what I'd recommend.

371
00:27:53.800 --> 00:27:59.880
Do you have any great tips for staying up to date and keeping up to date with re-invent?

372
00:28:06.880 --> 00:28:10.600
Maybe the only thing I want to add to that is that you don't have to follow every single announcement or every single talk.

373
00:28:10.600 --> 00:28:16.440
Obviously there are areas of AWS that are more interesting to you based on the services

374
00:28:16.440 --> 00:28:17.600
you use the most.

375
00:28:17.600 --> 00:28:22.980
So you can have a look at the agenda in advance and just select topics that are more relevant

376
00:28:22.980 --> 00:28:25.680
to you rather than trying to absorb everything.

377
00:28:25.680 --> 00:28:30.000
I think if you try to do that, it's definitely going to be an overkill rather than just focusing

378
00:28:30.000 --> 00:28:32.640
on the things that are more important to you.

379
00:28:32.640 --> 00:28:37.000
So maybe that's small tip, but I suppose it can help or at least that's how I'm trying

380
00:28:37.000 --> 00:28:40.880
to approach the event myself.

381
00:28:40.880 --> 00:28:46.740
And then finally, of course, we have to do our user promotional message where we say,

382
00:28:46.740 --> 00:28:51.720
if you follow us with AWS Bites, we'll try to summarize things as best as we can for

383
00:28:51.720 --> 00:28:52.720
you.

384
00:28:52.720 --> 00:28:56.040
So that's another option on the table for you.

385
00:28:56.040 --> 00:28:57.040
Yep.

386
00:28:57.040 --> 00:29:03.520
Those live episodes, we'll try and distill everything down to some brief and digestible

387
00:29:03.520 --> 00:29:04.520
highlights.

388
00:29:04.520 --> 00:29:07.360
That's the plan anyway.

389
00:29:07.360 --> 00:29:08.760
Yeah, absolutely.

390
00:29:08.760 --> 00:29:13.480
And with that, I realized that we don't probably have the perfect strategy.

391
00:29:13.480 --> 00:29:18.640
So definitely feel more than welcome to share with us what is going to be your strategy.

392
00:29:18.640 --> 00:29:24.480
So leave us a comment, send us a message, and we'll be more than happy to compare ideas

393
00:29:24.480 --> 00:29:29.400
and results with you during and after reInvent.

394
00:29:29.400 --> 00:29:31.200
Okay.

395
00:29:31.200 --> 00:29:34.800
Any final remark?

396
00:29:34.800 --> 00:29:40.120
If anybody else has any last minute wishlist items or any highlights they want to call

397
00:29:40.120 --> 00:29:43.540
out, then let us know in the comments or on Twitter.

398
00:29:43.540 --> 00:29:47.400
And we'd love to share them and talk more about them as we go through the live episodes

399
00:29:47.400 --> 00:29:49.520
during reInvent.

400
00:29:49.520 --> 00:29:51.120
Absolutely.

401
00:29:51.120 --> 00:29:55.440
And with that, I think we are going to close here this special episode.

402
00:29:55.440 --> 00:29:57.960
I hope it was interesting to you.

403
00:29:57.960 --> 00:30:02.320
Definitely give us feedback even on the format of this kind of special episode.

404
00:30:02.320 --> 00:30:06.440
Maybe we'll do even more of them even after reInvent if you're liking them.

405
00:30:06.440 --> 00:30:10.160
So definitely send us all the feedback that you have.

406
00:30:10.160 --> 00:30:11.760
And with that, that's all.

407
00:30:11.760 --> 00:30:13.880
We'll see you at the next episode.

408
00:30:13.880 --> 00:30:14.880
Bye.

409
00:30:14.880 --> 00:30:28.140
I'll see you next time.

410
00:30:28.140 --> 00:30:30.200
you
