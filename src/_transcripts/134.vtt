WEBVTT

1
00:00:00.000 --> 00:00:05.040
Hello, friends of AWS Bites podcast, the show where we share stories and hard-learned lessons

2
00:00:05.040 --> 00:00:05.960
from the cloud trenches.

3
00:00:06.080 --> 00:00:08.700
Today, we are here to sound the alarm on something very serious.

4
00:00:09.100 --> 00:00:13.220
You need to eliminate IAM users from your AWS accounts and fast.

5
00:00:13.420 --> 00:00:16.660
Seriously, if you are still using them, it's like an incident just waiting to happen.

6
00:00:16.820 --> 00:00:20.600
It's like handing your credit card details to a stranger online and hoping they will

7
00:00:20.600 --> 00:00:21.440
surprise you with a gift.

8
00:00:21.600 --> 00:00:22.300
But I'll give you a spoiler.

9
00:00:22.500 --> 00:00:24.060
You won't like the gift that you will get.

10
00:00:24.220 --> 00:00:25.320
So just be very careful.

11
00:00:25.560 --> 00:00:26.140
Don't do that.

12
00:00:26.300 --> 00:00:29.540
And we have talked already about governance and lending zone in the past.

13
00:00:29.540 --> 00:00:34.460
But today, we want to focus specifically on why IAM users and long-lived credentials

14
00:00:34.460 --> 00:00:38.100
are one of the biggest foot guns that exists today in AWS.

15
00:00:38.300 --> 00:00:42.000
And hopefully, we'll also share some strategies on how you can start to get rid of them if

16
00:00:42.000 --> 00:00:42.580
you are still using them.

17
00:00:42.620 --> 00:00:46.580
My name is Luciano, and today I'm joined by Conor, our new co-host, who brings tons of

18
00:00:46.580 --> 00:00:48.520
experience in managing AWS accounts.

19
00:00:48.620 --> 00:00:49.580
So I'm really excited.

20
00:00:49.800 --> 00:00:50.720
Let's get into it.

21
00:00:50.720 --> 00:01:00.820
AWS Bites is brought to you by fourTheorem.

22
00:01:00.980 --> 00:01:05.820
If you are looking for a partner to architect, develop, and modernize on AWS, give fourTheorem

23
00:01:05.820 --> 00:01:06.220
a call.

24
00:01:06.440 --> 00:01:08.460
Check us out at fourtheorem.com.

25
00:01:08.580 --> 00:01:10.960
So as I said, we already covered similar topics.

26
00:01:11.160 --> 00:01:15.260
But today, we have Conor, who brings lots of expertise and fresh perspective.

27
00:01:15.260 --> 00:01:19.940
So maybe it's a good idea to start with just Conor introducing yourself so people can

28
00:01:19.940 --> 00:01:21.840
know all the amazing things that you have done.

29
00:01:22.380 --> 00:01:22.500
Sure.

30
00:01:23.680 --> 00:01:27.240
Long-time listener, first-time caller, I guess, to AWS Bites.

31
00:01:27.640 --> 00:01:29.960
So I joined fourTheorem about 18 months ago.

32
00:01:30.360 --> 00:01:32.580
I'm a senior infrastructure engineer.

33
00:01:33.020 --> 00:01:36.520
And I guess I've worked with a lot of startups over my career.

34
00:01:36.680 --> 00:01:42.520
Very interested in the security space in AWS and infrastructure as code and all things safety

35
00:01:42.520 --> 00:01:44.380
and security in the cloud, I guess.

36
00:01:44.380 --> 00:01:48.960
So I've had the privilege of joining a lot of excellent teams over the years.

37
00:01:49.120 --> 00:01:54.960
But a lot of times, I may have been the first security nerd or AWS practitioner to join the

38
00:01:54.960 --> 00:01:55.220
team.

39
00:01:55.460 --> 00:02:01.760
So I have often encountered very mature AWS accounts with lots of IAM users.

40
00:02:02.560 --> 00:02:07.640
And what we want to chat about today, I guess, is there's a lot of modern techniques and tooling

41
00:02:07.640 --> 00:02:13.020
that help us totally eliminate those IAM users, which have become a bit of a security

42
00:02:13.020 --> 00:02:18.880
nightmare or certainly a potential rake in the grass for a lot of organizations.

43
00:02:19.380 --> 00:02:20.920
So yeah, that's me.

44
00:02:21.260 --> 00:02:25.280
I can only add that you are one of the people I know with the most Terraform expertise.

45
00:02:25.680 --> 00:02:29.380
So I'm really lucky to have you as a colleague every time I have a question about Terraform.

46
00:02:29.380 --> 00:02:32.120
So that's just to send a little bit more context.

47
00:02:32.380 --> 00:02:37.320
But yeah, going back to IAM users, I guess one main question that people might have is

48
00:02:37.320 --> 00:02:38.940
like, what is really the problem, right?

49
00:02:38.980 --> 00:02:41.600
It seems like something that has been in AWS forever.

50
00:02:41.800 --> 00:02:44.360
So why should it be a problem in the first place, right?

51
00:02:44.460 --> 00:02:47.840
And we said it is one of the biggest foot guns that you have today.

52
00:02:47.960 --> 00:02:52.400
And the main reason to that is that when you use IAM users, generally, you are also using

53
00:02:52.400 --> 00:02:53.420
long-lived credentials.

54
00:02:53.420 --> 00:02:58.100
So you go into that specific user and maybe through the web UI and you generate credentials

55
00:02:58.100 --> 00:02:58.820
for that user.

56
00:02:59.200 --> 00:03:03.600
And then God knows where you're going to copy-paste those credentials, store them somewhere forever,

57
00:03:03.800 --> 00:03:04.920
maybe forget about them.

58
00:03:05.340 --> 00:03:07.940
And I don't know, they can end up in development machines.

59
00:03:07.940 --> 00:03:09.200
They can end up in servers.

60
00:03:09.320 --> 00:03:12.680
They can end up inside applications that somehow need to interact with AWS.

61
00:03:13.160 --> 00:03:15.980
And the problem with that is that they are generally clear text.

62
00:03:16.360 --> 00:03:19.700
So easy to exploit or exfiltrate or copy-paste.

63
00:03:20.020 --> 00:03:23.080
And the other problem is that generally they are very broadly scoped.

64
00:03:23.080 --> 00:03:25.460
So you can have permissions to do lots of things.

65
00:03:25.460 --> 00:03:29.780
Even if originally you didn't intend to do all these different things, maybe it was convenient

66
00:03:29.780 --> 00:03:33.220
to just give this particular user lots of open permissions.

67
00:03:33.680 --> 00:03:37.420
And then whoever has access to the credentials inherits all of these permissions.

68
00:03:37.780 --> 00:03:42.280
So imagine, yeah, you might end up with somebody just spinning up the most expensive EC2 instance

69
00:03:42.280 --> 00:03:45.160
just because that particular user has permissions to do that.

70
00:03:45.340 --> 00:03:48.240
And the other problem is that those credentials get rarely rotated.

71
00:03:48.620 --> 00:03:51.620
There are ways that you can rotate the credentials, but there's generally something that people

72
00:03:51.620 --> 00:03:52.660
don't bother doing.

73
00:03:52.660 --> 00:03:57.420
And I personally have seen, it's funny that you can go to the web UI and see how long

74
00:03:57.420 --> 00:03:58.700
those credentials existed.

75
00:03:59.040 --> 00:04:02.620
Like, it's not rare to see like these credentials existed for like 2000 days.

76
00:04:02.760 --> 00:04:07.500
And yeah, you can think of how many things could have gone wrong in so much time.

77
00:04:07.500 --> 00:04:11.880
Like how many people could have had opportunities to take these credentials and use them to do

78
00:04:11.880 --> 00:04:12.220
something.

79
00:04:12.220 --> 00:04:17.260
So the other interesting use case that we have seen a lot is that if you create IAM users

80
00:04:17.260 --> 00:04:21.040
for, I don't know, developers in your company, people will come and go in the company.

81
00:04:21.280 --> 00:04:25.340
And sometimes you don't have a very strict process for offboarding people from your AWS

82
00:04:25.340 --> 00:04:25.800
accounts.

83
00:04:26.220 --> 00:04:32.100
So I know of people that were able to access accounts in AWS from not their first company,

84
00:04:32.100 --> 00:04:35.880
but like two previous companies that they were working before, like years before.

85
00:04:35.880 --> 00:04:40.180
And still their credentials were totally valid and they could see everything in the account

86
00:04:40.180 --> 00:04:43.880
and do all kinds of actions that they could do as developers, even though they were not

87
00:04:43.880 --> 00:04:45.340
employed anymore in that company.

88
00:04:45.580 --> 00:04:48.060
So just be aware that these are just some of the risks.

89
00:04:48.300 --> 00:04:50.980
But I don't know, Conor, if you have anything else you would like to add.

90
00:04:50.980 --> 00:04:54.580
Yeah, I guess it is one of those difficult challenges.

91
00:04:55.580 --> 00:05:01.780
You know, a lot of my history was in IT and onboarding and offboarding people from teams.

92
00:05:02.100 --> 00:05:09.160
So you tend to bias towards single sign on and role based access control and credentials

93
00:05:09.160 --> 00:05:13.440
that you can expire or at least reason about their status.

94
00:05:13.720 --> 00:05:20.500
And like you mentioned, IAM users are incredibly challenging to keep on top of, especially in larger

95
00:05:20.500 --> 00:05:21.460
organizations.

96
00:05:21.460 --> 00:05:27.360
So just to add to your war stories there, like I've seen, I've seen it all, I guess, you

97
00:05:27.360 --> 00:05:33.100
know, that the worst is when you find the root account that has an access key and secret

98
00:05:33.100 --> 00:05:35.980
access key generated and it's being used in a pipeline.

99
00:05:35.980 --> 00:05:43.860
But I've always seen, you know, front end engineer Bob has a large team and they're great

100
00:05:43.860 --> 00:05:46.400
and they're tenacious about getting work done.

101
00:05:46.400 --> 00:05:52.720
But eventually, you know, Bob moves on and suddenly all of the other front end engineers

102
00:05:52.720 --> 00:05:54.660
development environments stop working.

103
00:05:54.820 --> 00:05:59.360
It's typically because Bob has been really helpful and, you know, shared his IAM access

104
00:05:59.360 --> 00:06:02.660
keys with the team, maybe check them into that repo for that app.

105
00:06:03.060 --> 00:06:08.940
So very difficult to manage that as a, you know, a central cloud team or a practitioner that's

106
00:06:08.940 --> 00:06:10.860
trying to keep on top of the AWS environment.

107
00:06:10.860 --> 00:06:14.960
So I guess it's not usually somebody's fault.

108
00:06:15.120 --> 00:06:20.300
You know, it's up to the platform team or the security team to try and put the correct

109
00:06:20.300 --> 00:06:24.060
guardrails in place so that it's easy to do the right thing and very difficult to do the

110
00:06:24.060 --> 00:06:24.540
wrong thing.

111
00:06:24.780 --> 00:06:28.440
And I guess later on in the episode, we're going to get into a lot of the modern techniques

112
00:06:28.440 --> 00:06:32.640
for doing things the right way that just make it much more difficult to create these

113
00:06:32.640 --> 00:06:34.260
kind of edge cases in the first place.

114
00:06:34.700 --> 00:06:37.740
But yeah, IAM users will end up on developer machines.

115
00:06:37.740 --> 00:06:40.840
They'll end up in Dropbox, Google Drive, Slack messages.

116
00:06:41.460 --> 00:06:46.200
You know, you'll have users that were intended for human access that end up in pipelines or

117
00:06:46.200 --> 00:06:47.160
production systems.

118
00:06:47.700 --> 00:06:54.080
So I guess our goal today is to tell everybody that there is a better way and you can get

119
00:06:54.080 --> 00:06:56.040
to the point that you have no IAM users at all.

120
00:06:56.320 --> 00:07:00.040
Depending on your environment, that's going to be a simple or very arduous journey.

121
00:07:00.260 --> 00:07:01.980
But I guess we want to help you to get there.

122
00:07:02.280 --> 00:07:06.580
So I guess the reason you end up with these in the first place is because somebody wants to

123
00:07:06.580 --> 00:07:09.380
do programmatic access to AWS, right?

124
00:07:09.440 --> 00:07:15.860
Whether it's from a pipeline that's running on an EC2 instance or ECS Fargate, or more

125
00:07:15.860 --> 00:07:21.280
commonly, the development flow where you want to interact with S3 or CloudFormation or you

126
00:07:21.280 --> 00:07:23.680
want to run CDK deploy from your laptop.

127
00:07:23.860 --> 00:07:26.280
You need programmatic access to the AWS account.

128
00:07:26.580 --> 00:07:31.140
All requests to AWS have to be signed with the SIG V4 algorithm.

129
00:07:31.140 --> 00:07:35.440
So I think what we want to focus on initially is how does it work?

130
00:07:35.520 --> 00:07:42.400
If I run AWS S3 LS from the CLI, what goes on under the hood there in the SDK for it to

131
00:07:42.400 --> 00:07:46.440
try and find credentials and authenticate itself against AWS APIs?

132
00:07:47.140 --> 00:07:50.060
Do you want to chat about your experience with that, Luciano?

133
00:07:50.380 --> 00:07:53.040
Yeah, that's a very interesting topic.

134
00:07:53.400 --> 00:07:55.520
I actually really like that kind of stuff.

135
00:07:55.580 --> 00:07:57.140
Like you mentioned, the SIG V4 algorithm.

136
00:07:57.140 --> 00:08:01.360
We're not going to go into detail on that one today, but we'll post a link in the show

137
00:08:01.360 --> 00:08:02.140
notes if you're curious.

138
00:08:02.460 --> 00:08:07.240
What we want to focus a bit more on is that there needs to be a process for if you're using

139
00:08:07.240 --> 00:08:12.600
the SDK or the CLI to locate credentials in that execution environment.

140
00:08:12.880 --> 00:08:18.440
And there are specific pages that you can find in the AWS docs, depending if you're using a

141
00:08:18.440 --> 00:08:23.380
specific SDK, like for instance, the JavaScript one, there is a page that details exactly all the

142
00:08:23.380 --> 00:08:28.460
steps that are performed to try to find a viable set of credentials when you create a client

143
00:08:28.460 --> 00:08:29.240
using the SDK.

144
00:08:29.660 --> 00:08:33.660
And there is a similar page for the CLI, so we'll make sure to share the links as well.

145
00:08:33.780 --> 00:08:36.100
But just to summarize, what are the different steps?

146
00:08:36.220 --> 00:08:42.160
So you can have an idea of all the different things that can provide credentials to a given

147
00:08:42.160 --> 00:08:42.620
environment.

148
00:08:42.820 --> 00:08:47.620
So the first thing is that as you create a client, you are effectively instantiating a

149
00:08:47.620 --> 00:08:47.920
class.

150
00:08:48.240 --> 00:08:51.840
Let's imagine in JavaScript, you say, I don't know, new S3 client, something like that.

151
00:08:51.840 --> 00:08:56.000
You can provide options there as the constructor of that function call.

152
00:08:56.300 --> 00:09:01.440
And some of the options there are specifically put in place so that you can provide inline

153
00:09:01.440 --> 00:09:01.880
credentials.

154
00:09:02.120 --> 00:09:06.240
So if you do that, this is the first thing that the client is going to look for.

155
00:09:06.400 --> 00:09:09.180
And if you provide the credentials there, those credentials will be used.

156
00:09:09.340 --> 00:09:11.420
But those credentials there are not mandatory.

157
00:09:11.640 --> 00:09:13.160
So what happens if you don't provide them?

158
00:09:13.280 --> 00:09:18.320
And the next step is that if credentials are not there in the constructor options, the client

159
00:09:18.320 --> 00:09:20.380
is going to look for specific environment variables.

160
00:09:20.380 --> 00:09:25.020
And I'm sure you have seen the AWS secret key and that kind of environment variables.

161
00:09:25.300 --> 00:09:27.500
So this is the next thing that the client is going to look for.

162
00:09:27.580 --> 00:09:31.680
So if in the current execution environment, you have those variables set, those will be

163
00:09:31.680 --> 00:09:33.860
used for your client to interact with AWS.

164
00:09:34.160 --> 00:09:37.280
Then the next step is that if you don't have those environment variables, then it's going

165
00:09:37.280 --> 00:09:38.740
to look for shared credentials files.

166
00:09:39.420 --> 00:09:45.440
You can imagine similar to when you configure your CLI that you might have credentials files that

167
00:09:45.440 --> 00:09:45.680
way.

168
00:09:45.680 --> 00:09:49.900
And then you can have in specific environments, for instance, if you're running your code in

169
00:09:49.900 --> 00:09:54.780
ECS, ECS has mechanisms to provide credentials through, for instance, roles.

170
00:09:54.980 --> 00:09:56.240
You can have short-lived credentials.

171
00:09:56.600 --> 00:10:01.460
So if you have done all of that, configure correctly, the SDK can actually load these credentials.

172
00:10:01.900 --> 00:10:02.960
So that would be another step.

173
00:10:02.960 --> 00:10:04.700
And we can keep going.

174
00:10:04.840 --> 00:10:05.720
There are other steps.

175
00:10:06.180 --> 00:10:11.520
You can use credential processes, which is just a mechanism where you can have custom ways

176
00:10:11.520 --> 00:10:13.800
to say, I can call a specific process.

177
00:10:13.980 --> 00:10:18.240
And that process is responsible for somehow fetching credentials that I can use.

178
00:10:18.560 --> 00:10:21.740
And this is generally when you want to integrate with, I don't know, third-party tools.

179
00:10:22.260 --> 00:10:26.680
Maybe you have some kind of vault or secret manager and you store configuration there.

180
00:10:26.680 --> 00:10:32.500
That configuration can contain your AWS credentials and you can create that mechanism to load credentials

181
00:10:32.500 --> 00:10:33.380
from a custom place.

182
00:10:33.640 --> 00:10:39.480
And then finally, another example is if you're using EC2 as a concept of instance metadata.

183
00:10:40.080 --> 00:10:44.460
So that's basically a mechanism where if you provide a role to an EC2 instance, that role

184
00:10:44.460 --> 00:10:46.700
can have effectively permissions attached to it.

185
00:10:46.780 --> 00:10:52.160
And the way that your client inside that EC2 inherits those permissions is by accessing this

186
00:10:52.160 --> 00:10:57.020
metadata server, let's call it, it's kind of a local server that if you call it through

187
00:10:57.020 --> 00:11:01.720
an HTTP endpoint, it's going to give you temporary credentials that are scoped specifically with

188
00:11:01.720 --> 00:11:03.180
the role attached to the instance.

189
00:11:03.520 --> 00:11:08.260
And I guess some of these ideas are better than others because they will give you shorter

190
00:11:08.260 --> 00:11:09.480
term credentials.

191
00:11:09.900 --> 00:11:15.220
But because the most common or at least historically the most used option is just copy-paste some

192
00:11:15.220 --> 00:11:19.980
credentials into the environment, people tend to do IAM users, copy-paste credentials and

193
00:11:19.980 --> 00:11:24.700
use them even for programmatic access on a kind of server process or something that should

194
00:11:24.700 --> 00:11:26.420
have been managed differently.

195
00:11:26.780 --> 00:11:31.340
So that's, I guess, probably trying to shed some light on the fact that, yeah, there are

196
00:11:31.340 --> 00:11:34.760
different ways to provide credentials and it's kind of a step-by-step.

197
00:11:34.880 --> 00:11:37.520
If the first step fails, it's going to look for the second step and so on.

198
00:11:37.540 --> 00:11:41.780
So it's important to also understand what is the priority of what the SDK or the CLI is

199
00:11:41.780 --> 00:11:42.260
looking for.

200
00:11:42.620 --> 00:11:46.880
So again, link to the links in the description if you're curious to find out exactly from the

201
00:11:46.880 --> 00:11:48.180
docs what are the different steps.

202
00:11:48.180 --> 00:11:53.860
So the question now could be, okay, I kind of get the point that I shouldn't use IAM users,

203
00:11:54.040 --> 00:11:58.640
but if I am, what are some of the mitigation strategies that I can start to use today?

204
00:11:58.840 --> 00:11:58.960
Yeah.

205
00:11:59.040 --> 00:12:04.360
So I guess the community kind of arrived at a lot of interesting patterns.

206
00:12:05.160 --> 00:12:09.960
I was trying to find the article this morning, but it seems to be removed probably because

207
00:12:09.960 --> 00:12:11.540
there's better strategies available now.

208
00:12:11.620 --> 00:12:14.220
But I think it was Coinbase back in 2017.

209
00:12:14.220 --> 00:12:18.920
I had a great article on their engineering blog about the Bastion IAM account.

210
00:12:19.300 --> 00:12:22.820
So that might be a more typical pattern for an SSH jump host or something.

211
00:12:22.940 --> 00:12:25.900
People would usually mention Bastion in that context, I guess.

212
00:12:26.020 --> 00:12:31.420
But what Coinbase had established, and it was a pattern that I saw used a lot across the industry,

213
00:12:31.760 --> 00:12:34.100
was they would elect an account.

214
00:12:34.260 --> 00:12:35.920
Let's call it the Bastion account.

215
00:12:36.140 --> 00:12:38.640
Maybe it was the management account of the organization.

216
00:12:38.640 --> 00:12:39.600
It didn't really matter.

217
00:12:39.880 --> 00:12:45.420
And what you could do is you would create your concrete IAM users in that account.

218
00:12:45.700 --> 00:12:48.140
So we'd create an account for Conor and an account for Luciano.

219
00:12:48.380 --> 00:12:50.100
Straight away, that was a big win, right?

220
00:12:50.140 --> 00:12:52.860
Because you were at least centralizing the IAM user.

221
00:12:53.140 --> 00:12:57.840
And when you had access to maybe dozens of accounts, we still had one Conor and one Luciano

222
00:12:57.840 --> 00:12:59.160
instead of dozens of each.

223
00:12:59.420 --> 00:13:05.160
And so the pattern that was established there was to try and enable role-based access control.

224
00:13:05.160 --> 00:13:10.920
So typically then you'd create maybe an admin or a power user or a view-only role in each

225
00:13:10.920 --> 00:13:12.720
of the accounts that we operate in.

226
00:13:12.960 --> 00:13:18.360
And then what they would do is they would set strict conditions in the trust relationships

227
00:13:18.360 --> 00:13:19.460
of those roles.

228
00:13:19.660 --> 00:13:26.460
And that might say, the only person who can assume me is Luciano or Conor from this Bastion

229
00:13:26.460 --> 00:13:26.820
account.

230
00:13:26.980 --> 00:13:33.300
And you could attach other STS conditions like a multi-factor token must be present and must

231
00:13:33.300 --> 00:13:33.820
be valid.

232
00:13:33.820 --> 00:13:39.360
So that was one of the ways that practitioners tried to create this kind of role-based access

233
00:13:39.360 --> 00:13:42.260
control, centralize it through a single IAM user.

234
00:13:42.780 --> 00:13:49.680
And at least then we had our sane access pattern, easy to onboard users, easy revocation.

235
00:13:50.160 --> 00:13:55.060
So that was a pattern that was kind of a battle-tested pattern.

236
00:13:55.360 --> 00:14:00.180
And then on the client side, I guess, or on your developer machine, you've still got that

237
00:14:00.180 --> 00:14:01.980
plain text long-lived credential.

238
00:14:01.980 --> 00:14:04.220
Okay, so how do we protect that?

239
00:14:04.460 --> 00:14:10.180
So another excellent tool that people might recognize was by 99designs, and that was a

240
00:14:10.180 --> 00:14:11.480
tool called AWS Vault.

241
00:14:11.720 --> 00:14:16.300
And I guess the innovation there was they allowed you to use whatever keychain you had on your

242
00:14:16.300 --> 00:14:19.720
system, whether it was Linux or even the macOS keychain.

243
00:14:19.720 --> 00:14:25.160
It would essentially escrow the access key and secret access key in the keychain.

244
00:14:25.160 --> 00:14:30.960
And then instead of directly exposing those credentials to the SDK or the CLI, like we just

245
00:14:30.960 --> 00:14:37.260
spoke about, it would either make some sort of STS get temporary credentials API call, or

246
00:14:37.260 --> 00:14:43.840
you would perform the STS assume role operation to assume that concrete role in the target account,

247
00:14:44.060 --> 00:14:44.180
right?

248
00:14:44.180 --> 00:14:46.660
Let's say the admin role in my development account.

249
00:14:46.660 --> 00:14:50.900
And so now you had a scenario where your access keys were protected in the keychain.

250
00:14:51.020 --> 00:14:56.440
You were only ever retrieving temporary credentials and exposing them to the runtime, whether it

251
00:14:56.440 --> 00:15:01.320
was the SDK or the CLI, where a lot of these tools actually injected the environment variables

252
00:15:01.320 --> 00:15:01.980
into the shell.

253
00:15:02.140 --> 00:15:03.220
Multiple reasons for that.

254
00:15:03.420 --> 00:15:07.040
One reason is because all of the SDKs understand that, as we just covered.

255
00:15:07.040 --> 00:15:10.920
But also it has one of the highest precedences in the credential chain.

256
00:15:11.280 --> 00:15:15.220
So more often than not, that's the behavior you wanted when you were running locally.

257
00:15:15.540 --> 00:15:19.520
So that was kind of the mitigation strategy that the community arrived at.

258
00:15:19.580 --> 00:15:20.980
It was a very common pattern.

259
00:15:21.520 --> 00:15:27.040
And I guess I'm showing my bias here where I've always worked at smaller startups and organizations.

260
00:15:27.660 --> 00:15:34.680
Obviously, at larger enterprises, you'd have your SAML identity provider, which would provide

261
00:15:34.680 --> 00:15:36.820
similar entry point to the system.

262
00:15:37.000 --> 00:15:39.860
You would still assume roles in target accounts.

263
00:15:40.280 --> 00:15:42.520
So that's one way it worked.

264
00:15:42.600 --> 00:15:45.340
And you can still operate that methodology.

265
00:15:45.620 --> 00:15:47.160
It has a good few moving parts.

266
00:15:47.160 --> 00:15:51.260
You need to really understand trust relationships and multi-account strategy.

267
00:15:51.260 --> 00:15:55.400
And you've got to have all your infrastructure's code tooling in place to make that a feasible

268
00:15:55.400 --> 00:15:55.840
pattern.

269
00:15:56.300 --> 00:15:59.140
But there are modern alternatives today.

270
00:15:59.700 --> 00:16:01.140
Finally, spoiler alert.

271
00:16:01.140 --> 00:16:04.820
I'm really curious to learn what those alternatives looks like.

272
00:16:05.140 --> 00:16:10.920
Because yeah, I'm sure that there are more scalable ways today to deal with, especially if you start

273
00:16:10.920 --> 00:16:16.280
to have multiple accounts, lots of potential users, different kinds of access levels that you need

274
00:16:16.280 --> 00:16:16.740
to ensure.

275
00:16:16.980 --> 00:16:19.940
And you might have lots of people coming and going in the organization as well.

276
00:16:20.120 --> 00:16:25.340
So yes, what are those better ways to deal with user access in general and permissions?

277
00:16:31.060 --> 00:16:33.640
Yeah, so I think there's been previous episodes on creating a landing zone and then some of the infrastructure's code tooling around that.

278
00:16:33.980 --> 00:16:40.800
But a core component of all of those modern landing zone setups is AWS IAM Identity Center

279
00:16:40.800 --> 00:16:44.920
and more so its integration with AWS organizations.

280
00:16:45.560 --> 00:16:51.960
So what the Identity Center service lets you do is essentially implement the pattern we spoke

281
00:16:51.960 --> 00:16:52.260
about.

282
00:16:52.260 --> 00:16:59.580
So Identity Center has the concept of permission sets and permission sets are almost like a

283
00:16:59.580 --> 00:17:03.660
wrapper for a role and then it can have targets.

284
00:17:03.940 --> 00:17:07.340
So the target could be another AWS account or an organizational unit.

285
00:17:07.660 --> 00:17:09.740
But essentially, we now have single sign-on.

286
00:17:09.980 --> 00:17:12.800
Okay, Identity Center lets us create an individual identity.

287
00:17:13.200 --> 00:17:16.180
You can use Identity Center's built-in Identity Store.

288
00:17:16.420 --> 00:17:17.440
It's a great way to start.

289
00:17:17.440 --> 00:17:22.760
If you're a small organization, you may not necessarily have an IDP, Azure or AD.

290
00:17:23.380 --> 00:17:29.620
And if you just want a sane way to manage users into your AWS organization, you can use the

291
00:17:29.620 --> 00:17:30.620
built-in Identity Store.

292
00:17:30.960 --> 00:17:34.960
So you then have your kind of standard, you know, groups.

293
00:17:35.220 --> 00:17:40.100
You could have a group for certain application teams, security group, platform team.

294
00:17:40.100 --> 00:17:43.320
And you can map the groups and permission sets to accounts.

295
00:17:43.640 --> 00:17:48.020
And then Identity Center and its integration with organizations does the rest of the heavy

296
00:17:48.020 --> 00:17:48.740
lifting for you.

297
00:17:49.060 --> 00:17:54.780
So if you have 10 accounts or 200 accounts, the admin role will be created automatically

298
00:17:54.780 --> 00:17:56.240
by the permission set.

299
00:17:56.380 --> 00:17:59.280
And then the appropriate users will be able to access it.

300
00:17:59.540 --> 00:17:59.660
Okay.

301
00:17:59.660 --> 00:18:06.040
So Identity Center really does all of the heavy lifting for you here as regards access to a

302
00:18:06.040 --> 00:18:07.920
large AWS estate.

303
00:18:08.320 --> 00:18:14.340
So the other option you have, which is convenient then, is that you can integrate most identity

304
00:18:14.340 --> 00:18:14.840
providers.

305
00:18:15.140 --> 00:18:15.240
Okay.

306
00:18:15.300 --> 00:18:17.580
So at 4th Erem, we have Google Workspace integrated.

307
00:18:18.040 --> 00:18:23.880
You can have manual user management, or you can even use something like Skim to get full

308
00:18:23.880 --> 00:18:29.220
automated user just-in-time provisioning into the Identity Center.

309
00:18:29.220 --> 00:18:34.040
So it's quite flexible and, you know, nice to be able to integrate it with an existing

310
00:18:34.040 --> 00:18:35.440
identity provider.

311
00:18:35.940 --> 00:18:41.360
So that then gives you a lovely, you know, SSO landing page that you might be familiar with,

312
00:18:41.500 --> 00:18:45.820
and it'll present all of the AWS accounts and all of the roles that you have access to.

313
00:18:46.080 --> 00:18:50.300
So it solves the console access problem quite well.

314
00:18:50.460 --> 00:18:55.780
And then I guess, you know, the next step is getting your programmatic access.

315
00:18:55.780 --> 00:19:01.100
So one thing that the Identity Center portal will let you do is grab temporary credentials

316
00:19:01.100 --> 00:19:04.300
in the context of any role that you have access to.

317
00:19:04.560 --> 00:19:10.080
So it's like the Identity Center console has essentially performed the, you know, STS assume

318
00:19:10.080 --> 00:19:13.140
role or assume role with web identity operation for you.

319
00:19:13.140 --> 00:19:17.380
And it's going to give you back an access key, a secret key, and a session token.

320
00:19:17.840 --> 00:19:23.280
And if you want, you can just paste that in a shell or, you know, configure it in an AWS

321
00:19:23.280 --> 00:19:25.880
credentials file, and you have your programmatic access.

322
00:19:26.200 --> 00:19:32.020
Now, that is fine for, you know, maybe a tiny investigation or access to an account you don't

323
00:19:32.020 --> 00:19:32.860
often use.

324
00:19:32.980 --> 00:19:37.760
But the tool that we recommend to a lot of customers and we use internally ourselves is

325
00:19:37.760 --> 00:19:39.800
a tool called Granted by CommonFate.

326
00:19:39.800 --> 00:19:44.460
And the really nice thing about that tool is that you sign in, you perform the single sign-on

327
00:19:44.460 --> 00:19:48.440
flow, and it's able to enumerate all of the accounts and roles you have access to.

328
00:19:48.580 --> 00:19:50.900
It's able to automatically generate the config file.

329
00:19:51.340 --> 00:19:56.420
And now you have this tool that you can run in your shell, and it can inject credentials

330
00:19:56.420 --> 00:19:59.840
into the shell for any role in any account that you have access to.

331
00:20:00.000 --> 00:20:04.040
So we find it, you know, a really great way to access accounts.

332
00:20:04.200 --> 00:20:06.460
You're only ever getting back a temporary credential.

333
00:20:06.460 --> 00:20:12.400
And it just, in an environment where you have lots of accounts, which we often encourage,

334
00:20:12.580 --> 00:20:16.860
it just makes the, you know, the user experience really nice.

335
00:20:17.240 --> 00:20:19.300
So what else did we want to chat about there?

336
00:20:19.540 --> 00:20:22.780
So when you, if you do that, like this is what we think great looks like, I guess.

337
00:20:22.840 --> 00:20:27.200
It's a lot easier in a greenfields environment to create this.

338
00:20:27.340 --> 00:20:31.840
But we would then recommend, you know, creating an SCP policy that blocks the creation of IAM

339
00:20:31.840 --> 00:20:32.240
users.

340
00:20:32.240 --> 00:20:36.600
That's a common security best practice now, I guess, because once you've gotten to this

341
00:20:36.600 --> 00:20:39.060
point, you don't want people to be able to go off piste.

342
00:20:39.220 --> 00:20:41.700
You know, you don't want them to be able to do the bad thing.

343
00:20:41.880 --> 00:20:44.980
Like we said, we want to make the good thing easy.

344
00:20:44.980 --> 00:20:47.600
So we can just block the creation of IAM users.

345
00:20:48.080 --> 00:20:52.840
Now you've got to use your single point of entry into the AWS organization to do what you

346
00:20:52.840 --> 00:20:53.600
wanted to do.

347
00:20:53.600 --> 00:20:56.220
Yeah, that sounds easy.

348
00:20:56.500 --> 00:21:00.660
Again, when you are starting from scratch and you have total freedom, so you can set up

349
00:21:00.660 --> 00:21:03.660
things in a way that looks modern and good from scratch.

350
00:21:03.660 --> 00:21:08.060
But I would imagine that if you already have, I'm just going to say quite a legacy setup,

351
00:21:08.300 --> 00:21:11.940
maybe with lots of stuff running there, you have been using it for years.

352
00:21:12.200 --> 00:21:14.640
Like how do you start to enforce this kind of things?

353
00:21:14.700 --> 00:21:18.760
I'm sure that there are cases where you cannot just get read from one day to the next one of

354
00:21:18.760 --> 00:21:24.240
all IAM users, you need to, I don't know, probably take a few shortcuts or a few half

355
00:21:24.240 --> 00:21:26.980
baked solutions that maybe are still better than nothing.

356
00:21:27.120 --> 00:21:31.240
But yeah, you're probably incrementally going to get to a great place to be, but it's not

357
00:21:31.240 --> 00:21:33.340
going to happen from like one day to the next.

358
00:21:33.720 --> 00:21:37.940
So do you have any recommendations for people that might be more in this camp where it's not

359
00:21:37.940 --> 00:21:41.640
going to be easy to change things, but they can still have opportunities to make things

360
00:21:41.640 --> 00:21:41.920
better?

361
00:21:42.160 --> 00:21:42.880
Yeah, absolutely.

362
00:21:43.080 --> 00:21:48.660
And it is a thankless job sometimes, you know, to say, look, we've got

363
00:21:48.660 --> 00:21:50.520
a glaring security issue here.

364
00:21:50.660 --> 00:21:51.780
We want to pay it down.

365
00:21:52.040 --> 00:21:56.480
So I think it's just important to have buy-in from the team and the organization, you know,

366
00:21:56.640 --> 00:22:01.880
get it on the Kanban board, get it on the backlog and start to approach it systematically

367
00:22:01.880 --> 00:22:03.460
because it is worth doing.

368
00:22:03.820 --> 00:22:08.240
You're closing off one of the biggest attack vectors you have in a modern cloud environment,

369
00:22:08.340 --> 00:22:08.680
I guess.

370
00:22:08.980 --> 00:22:10.600
So how do you start, right?

371
00:22:10.660 --> 00:22:14.940
The two problems we really usually have to solve is like the human access problem, which

372
00:22:14.940 --> 00:22:17.780
tends to be simpler, and then the machine access problem.

373
00:22:17.780 --> 00:22:22.600
Okay, like we spoke about in the intro, you're probably going to have a smattering of IAM

374
00:22:22.600 --> 00:22:23.900
users that represent humans.

375
00:22:24.020 --> 00:22:25.720
You might have ones that represent machines.

376
00:22:25.720 --> 00:22:29.260
And if you're really unlucky, you're going to have the ones that were intended for humans

377
00:22:29.260 --> 00:22:30.980
that are now being used on machines.

378
00:22:31.280 --> 00:22:32.820
So how do we approach it?

379
00:22:33.020 --> 00:22:36.180
The IAM credential report is super helpful.

380
00:22:36.320 --> 00:22:37.760
We'll put a link to that in the show notes.

381
00:22:37.880 --> 00:22:41.260
You can generate this using the CLI or from the IAM console.

382
00:22:41.260 --> 00:22:45.240
That will give you a CSV export, which is a great place to start.

383
00:22:45.460 --> 00:22:51.860
You know, you can sort it by access key age, or you can start to examine some of the policies

384
00:22:51.860 --> 00:22:53.260
that are attached to the users.

385
00:22:53.680 --> 00:22:59.380
And you can decide to organize them by danger, which sometimes makes sense, right?

386
00:22:59.500 --> 00:23:02.440
Now, often that first pass will be a big win.

387
00:23:02.640 --> 00:23:05.760
You're going to find people that have left the company months ago or years ago.

388
00:23:05.760 --> 00:23:09.100
You're going to find access keys that haven't been used in some window.

389
00:23:09.500 --> 00:23:13.620
You're going to find machine users that are for services you no longer operate.

390
00:23:14.080 --> 00:23:17.920
And like very quickly, you might be able to shed half of the IAM users.

391
00:23:18.260 --> 00:23:18.440
All right.

392
00:23:18.600 --> 00:23:24.640
Now, I would also recommend implementing identity center permission sets on board yourself and

393
00:23:24.640 --> 00:23:27.700
maybe other people on the platform team or the security team.

394
00:23:28.040 --> 00:23:32.920
Start to kick the tires on that and introduce it for a trusted group at the organization.

395
00:23:32.920 --> 00:23:39.120
And then you can start to reimplement your role-based access control in identity center, right?

396
00:23:39.180 --> 00:23:44.700
So you now have a permission set that represents maybe what the DevOps IAM user does.

397
00:23:44.860 --> 00:23:45.780
That's a typical thing.

398
00:23:45.840 --> 00:23:51.480
You might find an overprivileged IAM user that was used by a certain group or a group of individuals.

399
00:23:51.480 --> 00:23:55.960
So you can start to take little slices off of the problem like that, okay?

400
00:23:56.760 --> 00:24:01.160
You'll often find then, you know, you could find an IAM user called S3 backup.

401
00:24:01.160 --> 00:24:06.180
It's quite obvious what it does, but you might find that it has the Amazon S3 full access

402
00:24:06.180 --> 00:24:08.060
managed policy attached.

403
00:24:08.440 --> 00:24:12.520
Now, you know, we could replace that with an IAM role and just move on.

404
00:24:12.640 --> 00:24:18.620
But we know deep within our soul, the correct thing to do here is to also evaluate that workload

405
00:24:18.620 --> 00:24:20.860
and look at what access it actually needs.

406
00:24:21.020 --> 00:24:23.420
So you might be able to talk to the team responsible.

407
00:24:23.840 --> 00:24:28.820
You might be able to use IAM access analyzer, and you'll be able to create a really fine grain

408
00:24:28.820 --> 00:24:30.840
permission for that role, right?

409
00:24:30.840 --> 00:24:32.340
It probably only accesses one bucket.

410
00:24:32.620 --> 00:24:36.800
It might only access a soap key within the bucket, and you can give it a very strict,

411
00:24:36.900 --> 00:24:38.220
you know, put object policy.

412
00:24:38.760 --> 00:24:45.120
And with every step you encounter, you're incrementally improving your posture, okay?

413
00:24:45.160 --> 00:24:47.840
So the scream test is going to be your friend.

414
00:24:48.480 --> 00:24:51.140
You're going to have a lot of rinse and repeat on this process.

415
00:24:51.260 --> 00:24:52.240
But I have done it.

416
00:24:52.300 --> 00:24:52.940
It is painful.

417
00:24:52.940 --> 00:24:54.360
But it can be done.

418
00:24:54.520 --> 00:24:59.820
And it's definitely one of the best things you can do for your organization from a security

419
00:24:59.820 --> 00:25:00.600
standpoint.

420
00:25:00.820 --> 00:25:05.360
The other aspect then is, well, what if I have a different cloud?

421
00:25:05.600 --> 00:25:11.160
And what I mean by that usually is you could have CircleCI, GitHub Actions, HashiCorp Cloud.

422
00:25:11.160 --> 00:25:16.420
Often, these IAM users are created because you need access from a system that is not AWS,

423
00:25:16.720 --> 00:25:19.800
where we can't rely on assuming a role or something like that.

424
00:25:19.940 --> 00:25:23.740
So that was a very common source of IAM users, you know, some sort of pipeline user.

425
00:25:24.280 --> 00:25:29.040
Thankfully, in the last couple of years, OIDC identity providers have solved a lot of this.

426
00:25:29.040 --> 00:25:33.620
I believe there's previous episodes where they're covered, but stuff like GitHub Actions will

427
00:25:33.620 --> 00:25:38.220
now give you, you know, fine-grained access to a role to a particular repo or even to a

428
00:25:38.220 --> 00:25:44.960
particular operation in a repo, like the repo being tagged or a release being created or a

429
00:25:44.960 --> 00:25:47.020
certain branch name being pushed to.

430
00:25:47.320 --> 00:25:52.160
So you can get extremely fine-grained access from GitHub Actions into AWS now as well.

431
00:25:52.280 --> 00:25:58.020
So that's kind of the tried and true method to replace those cloud-to-cloud IAM users.

432
00:25:58.020 --> 00:26:02.540
And I guess finally, you know, we can strive for perfection, but we're probably going to

433
00:26:02.540 --> 00:26:04.360
have a handful of IAM users when we're finished.

434
00:26:04.520 --> 00:26:05.840
Could be some legacy system.

435
00:26:06.340 --> 00:26:10.500
There could be a user with a customer or on a server somewhere in the wild that we don't

436
00:26:10.500 --> 00:26:11.340
control anymore.

437
00:26:11.760 --> 00:26:14.260
Unfortunately, you might end up with a handful of IAM users.

438
00:26:14.600 --> 00:26:19.940
What we recommend there is the SCP to block creation of new ones so we can at least plug

439
00:26:19.940 --> 00:26:20.400
the leak.

440
00:26:20.520 --> 00:26:22.120
And then we can document those users.

441
00:26:22.420 --> 00:26:26.600
We could import them into Terraform or CloudFormation so that we have them in infrastructure as code.

442
00:26:26.600 --> 00:26:28.880
It's easy to kind of ring fence the problem.

443
00:26:29.660 --> 00:26:34.800
We could introduce rotation, again, if we have access to the system where they're used.

444
00:26:35.160 --> 00:26:40.260
And you could even implement, you know, event bridge notifications, AWS Config.

445
00:26:40.780 --> 00:26:46.160
You can just really scrutinize those IAM users and make sure we know whenever they do something

446
00:26:46.160 --> 00:26:46.640
interesting.

447
00:26:47.000 --> 00:26:50.080
So I think that's all I have on the topic.

448
00:26:50.080 --> 00:26:54.600
It's a challenge, but I would say it's definitely worth doing.

449
00:26:55.000 --> 00:27:00.600
It's a game changer for your security posture, particularly in AWS environments that have

450
00:27:00.600 --> 00:27:01.880
been around for a couple of years.

451
00:27:02.140 --> 00:27:02.240
Yeah.

452
00:27:02.300 --> 00:27:03.960
Thank you for all these amazing suggestions.

453
00:27:04.240 --> 00:27:09.520
I especially like the last one about importing the users, making sure that they're well documented,

454
00:27:10.000 --> 00:27:11.880
creating SCPs to avoid new users.

455
00:27:12.280 --> 00:27:12.680
And yeah.

456
00:27:12.680 --> 00:27:16.920
Rotating credentials is something that most often, at least, is done manually.

457
00:27:17.160 --> 00:27:20.760
So probably you want to have some kind of playbook where you kind of document very well

458
00:27:20.760 --> 00:27:21.560
all the steps.

459
00:27:21.820 --> 00:27:25.840
At least you can do it in a repeatable way and have a process that kind of reminds yourself

460
00:27:25.840 --> 00:27:27.040
to do it often enough.

461
00:27:27.380 --> 00:27:29.700
So with that, I think it's a wrap for today.

462
00:27:30.060 --> 00:27:33.900
I hope that we have convinced you that IAM users are not a good practice.

463
00:27:34.080 --> 00:27:39.100
I hope that we have given you enough suggestions and motivation to get started on getting rid of

464
00:27:39.100 --> 00:27:39.300
them.

465
00:27:39.580 --> 00:27:41.960
And hopefully you enjoyed this episode.

466
00:27:42.260 --> 00:27:44.900
So if you've done that, please give us feedback.

467
00:27:45.020 --> 00:27:48.700
As always, thumbs up, share, like, subscribe, and all the usual things.

468
00:27:48.940 --> 00:27:53.500
And I want to conclude with a big thank you to Conor for bringing us a fresh perspective

469
00:27:53.500 --> 00:27:55.860
and to be our new host for this episode.

470
00:27:56.140 --> 00:27:58.060
So until next time, thank you very much.

471
00:27:58.140 --> 00:28:00.020
And we'll see you in the next episode.
