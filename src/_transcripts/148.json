{
  "speakers": {
    "spk_0": "Luciano",
    "spk_1": "Mark"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 5.98,
      "text": " What if Java is too old for serverless is the biggest myth holding teams back in 2025?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 6.4,
      "end": 12.32,
      "text": " Today, we are putting that idea to the test with someone who has seen Java succeed at a very high"
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.32,
      "end": 17.94,
      "text": " scale, especially with Lambda. I'm joined by Mark Sailes, former AWS engineer and internationally"
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.94,
      "end": 23.6,
      "text": " recognized expert on Java and all things serverless. By the way, if you know me, you probably know that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 23.6,
      "end": 28.3,
      "text": " Java isn't necessarily on my list of favorite programming languages when it comes to Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 28.3,
      "end": 32.8,
      "text": " especially. But if there is somebody who can change my mind, that's definitely Mark."
    },
    {
      "speakerLabel": "spk_0",
      "start": 33.160000000000004,
      "end": 40.3,
      "text": " I have compiled a long list of questions, so we'll cover all things Lambda and Java. And just to give"
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.3,
      "end": 45.66,
      "text": " you a spoiler, I'm very keen to hear when Java is the right call for Lambda and when it isn't,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 45.900000000000006,
      "end": 49.92,
      "text": " what are the trade-offs that actually matter, and what are the tools that move the needle,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 50.08,
      "end": 54.7,
      "text": " especially when it comes to latency and cost. And you know, we'll probably be talking a lot"
    },
    {
      "speakerLabel": "spk_0",
      "start": 54.7,
      "end": 59.720000000000006,
      "text": " about Snapstart and provision concurrency and things like that. I'm sure that Mark will also"
    },
    {
      "speakerLabel": "spk_0",
      "start": 59.720000000000006,
      "end": 64.72,
      "text": " share some practical tips, and those tips I'm sure are going to be valuable for both juniors and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 64.72,
      "end": 69.46000000000001,
      "text": " experts. So I hope you are going to enjoy this episode. My name is Luciano. This is another episode"
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.46,
      "end": 83.61999999999999,
      "text": " of AWS Bites. And today we are joined by Mark Sailes. So Mark, thank you for joining us. And I just want to start by letting you introduce yourself. "
    },
    {
      "speakerLabel": "spk_1",
      "start": 83.61999999999999,
      "end": 88.89999999999999,
      "text": "Thank you very much. And it's great to be here."
    },
    {
      "speakerLabel": "spk_1",
      "start": 88.89999999999999,
      "end": 93.91999999999999,
      "text": " I've watched a lot of your episodes. They're all really cool. So it's great to be part of this podcast."
    },
    {
      "speakerLabel": "spk_1",
      "start": 93.92,
      "end": 101.84,
      "text": " So yeah, I'm Mark Sailes. I worked at AWS for six and a half years. And at that time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 102.06,
      "end": 106.8,
      "text": " I did a whole heap of different jobs in different industries, all to do with solutions architecture."
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.46000000000001,
      "end": 113.24000000000001,
      "text": " And then the majority of my time was as a specialist solutions architect for serverless,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.36,
      "end": 119.38,
      "text": " so really diving deep into serverless workloads with some of AWS's biggest customers. And that was just"
    },
    {
      "speakerLabel": "spk_1",
      "start": 119.38,
      "end": 126.06,
      "text": " a fantastic experience. It really did give me a lot of insight into how big companies are using"
    },
    {
      "speakerLabel": "spk_1",
      "start": 126.06,
      "end": 133.04,
      "text": " serverless. Some of the scale that Lambda can handle, which is just fantastic. And then,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 133.42,
      "end": 141.64,
      "text": " yeah, where I found my niche, which was helping customers who are using Java that just don't have a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 141.64,
      "end": 148.34,
      "text": " lot of material to kind of learn from. So I spent a lot of time looking at what their problems were,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 148.34,
      "end": 152.74,
      "text": " and then trying to work with the service teams to fix them. And that was something that I really"
    },
    {
      "speakerLabel": "spk_1",
      "start": 152.74,
      "end": 158.32,
      "text": " enjoyed and something I hadn't really done before in my developer kind of led career. So yeah,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 158.4,
      "end": 164.24,
      "text": " definitely, you know, looking behind the scenes into the product side of the business and seeing how it works."
    },
    {
      "speakerLabel": "spk_0",
      "start": 164.24,
      "end": 169.56,
      "text": " That's a great intro. Thank you for sharing that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 169.56,
      "end": 174.26,
      "text": " I remember in one of our previous conversations, you mentioned you had been working on something like 100 projects or close to that with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 174.26,
      "end": 182.73999999999998,
      "text": " AWS. And I assume many of them involving Java. So I'm sure you heard a lot that criticism of Java being"
    },
    {
      "speakerLabel": "spk_0",
      "start": 182.73999999999998,
      "end": 189.04,
      "text": " around for a long time. It's kind of an outdated language. So I guess my question would be why? Well,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 189.16,
      "end": 194.7,
      "text": " I'm sure that's not true that there are ways to kind of dismantle that myth. But in general,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 194.7,
      "end": 196.78,
      "text": " why should we bet on Java in 2025?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 198.45999999999998,
      "end": 205.48,
      "text": " I, you know, I really don't think we should be coming at, you know, it in that direction. You"
    },
    {
      "speakerLabel": "spk_1",
      "start": 205.48,
      "end": 211.42,
      "text": " know, when I come to a new project, or come to an existing project that I'm looking at again,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 211.82,
      "end": 217.89999999999998,
      "text": " I don't start with saying, which language should I use? You know, if I'm working as a team lead,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 217.9,
      "end": 223.42000000000002,
      "text": " or if I've joined a team, or if I'm an architect working with a team, I look at the skills of that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 223.42000000000002,
      "end": 230.46,
      "text": " team, and the application that we're working with and the wider context. And that's how I'm choosing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 230.46,
      "end": 237.66,
      "text": " every part of the stack, you know, do we have any skills in NoSQL? If we don't have any skills in NoSQL,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 237.66,
      "end": 243.98000000000002,
      "text": " we probably won't be using DynamoDB. If we haven't got any Go skills, we're probably not going to be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 243.98,
      "end": 252.22,
      "text": " writing the code in Go. So I'm thinking much more in that direction. So if I'm speaking with a large"
    },
    {
      "speakerLabel": "spk_1",
      "start": 252.22,
      "end": 259.76,
      "text": " bank, and they are wanting to adopt serverless, I am definitely going to help them to adopt serverless,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 259.82,
      "end": 264.82,
      "text": " because serverless is really going to help that business to actually gain some momentum and cut"
    },
    {
      "speakerLabel": "spk_1",
      "start": 264.82,
      "end": 270.56,
      "text": " some of the overhead that they've traditionally spent a long time dealing with. And Java is one of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 270.56,
      "end": 275.44,
      "text": " those things where, you know, it got a bad reputation, and it hasn't been able to shrug"
    },
    {
      "speakerLabel": "spk_1",
      "start": 275.44,
      "end": 284.22,
      "text": " that bad reputation off. And I talk about it similar to the way that Lambda used to have a bad reputation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 284.22,
      "end": 290.86,
      "text": " with VPC. If you've been using Lambda for long enough, you'll remember if you had a VPC attached"
    },
    {
      "speakerLabel": "spk_1",
      "start": 290.86,
      "end": 298.46,
      "text": " Lambda function, a cold start would take at least 30 seconds. But now, no one even considers that because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 298.46,
      "end": 306.38,
      "text": " it's kind of been fixed. And the same is true of Java. You know, there's a lot of tools and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 306.38,
      "end": 311.68,
      "text": " techniques that you can use. Some of them easy, some of them hard, some of them, you know, you don't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 311.68,
      "end": 318.38,
      "text": " need to invest much time into. You know, it's very easy to get a cold start less than one second."
    },
    {
      "speakerLabel": "spk_1",
      "start": 318.38,
      "end": 326.3,
      "text": " But can you get the same sort of cold start as a Rust function with 128 megabytes of memory? No."
    },
    {
      "speakerLabel": "spk_1",
      "start": 326.3,
      "end": 334.94,
      "text": " But that's just the different behaviors of the language. And, you know, teams have been using Java for a long time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 334.94,
      "end": 340.3,
      "text": " They're very familiar with Java. They have all of their tools, libraries written in Java. So I'm much more"
    },
    {
      "speakerLabel": "spk_1",
      "start": 340.3,
      "end": 348.3,
      "text": " interested in helping them to adopt serverless rather than, you know, them having to, you know, rip up everything that they know."
    },
    {
      "speakerLabel": "spk_1",
      "start": 348.3,
      "end": 349.42,
      "text": " And start from scratch."
    },
    {
      "speakerLabel": "spk_0",
      "start": 355.58,
      "end": 361.90000000000003,
      "text": " And to be fair, one of the things that I really like about Lambda and FaaS in general is that you could use a language for most of the code base. And then in those very small pieces of the entire"
    },
    {
      "speakerLabel": "spk_0",
      "start": 361.90000000000003,
      "end": 366.86,
      "text": " software where you need, I don't know, some different characteristics, it might be performance, it might be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 366.86,
      "end": 371.26,
      "text": " something else. You can pick another language that maybe is more suitable for that particular"
    },
    {
      "speakerLabel": "spk_1",
      "start": 371.26,
      "end": 377.82,
      "text": " absolutely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 377.82,
      "end": 383.98,
      "text": " This is the very nature of distributed systems and being able to have something that's composable. But also, you know, Java does have the capabilities to now compile to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 383.98,
      "end": 390.62,
      "text": " native bytecode. So this is a technology that Oracle has developed called GraalVM Native Image. So I have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 390.62,
      "end": 399.09999999999997,
      "text": " seen that very pattern. I was working with a large bank and they produced a Lambda authorizer for API"
    },
    {
      "speakerLabel": "spk_1",
      "start": 399.1,
      "end": 405.1,
      "text": " gateway that had to be low latency. So they spent the time and the effort that is required to use that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 405.1,
      "end": 411.26000000000005,
      "text": " technology to make sure that it was, you know, cold starting in, you know, 100, 200 milliseconds"
    },
    {
      "speakerLabel": "spk_1",
      "start": 411.26000000000005,
      "end": 416.70000000000005,
      "text": " with 128 megabytes of memory. But, you know, that use case was very specific. It didn't have a lot of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 416.70000000000005,
      "end": 424.54,
      "text": " dependencies. There was no, you know, external network calls. It was able to be, you know, done in such a way that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 424.54,
      "end": 429.74,
      "text": " it really excelled. And the time and effort spent doing that was worthwhile."
    },
    {
      "speakerLabel": "spk_1",
      "start": 429.74,
      "end": 437.26000000000005,
      "text": " absolutely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.26000000000005,
      "end": 441.90000000000003,
      "text": " And with that in mind, when you would advise teams to use Java on Lambda and when maybe you will say, actually, for this particular use case, you're better off with something else?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 442.70000000000005,
      "end": 449.74,
      "text": " So in that scenario, I, you know, the first question I'm asking is what sort of traffic profile are you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 449.74,
      "end": 459.5,
      "text": " seeing? What is the kind of ceiling on cold starts that you need? Because that's probably the biggest"
    },
    {
      "speakerLabel": "spk_1",
      "start": 459.5,
      "end": 466.78000000000003,
      "text": " blocker to get something below, you know, a one second cold start with any meaningful application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 466.78000000000003,
      "end": 473.58,
      "text": " So when I say that, I guess I mean, you know, does it need to get parameters from a parameter store or"
    },
    {
      "speakerLabel": "spk_1",
      "start": 473.58,
      "end": 479.18,
      "text": " secret manager? Does it need to connect to a database? Does it need to connect to any other AWS services?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 479.18,
      "end": 485.02,
      "text": " Is it some sort of meaningful application like a microservice? It's unlikely that you're going to get"
    },
    {
      "speakerLabel": "spk_1",
      "start": 485.02,
      "end": 492.06,
      "text": " a 500, 500 millisecond cold start. So if you need something below that number, you either have to put in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 492.7,
      "end": 499.98,
      "text": " additional effort to go to ahead of time compilation or use a compiled programming language like Go"
    },
    {
      "speakerLabel": "spk_1",
      "start": 500.7,
      "end": 508.7,
      "text": " or Rust or C or C++. But after that, I think the majority of people are building microservices and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 509.18,
      "end": 516.0600000000001,
      "text": " the world is the world is built on Java microservices. I mean, the amount of spring"
    },
    {
      "speakerLabel": "spk_1",
      "start": 517.02,
      "end": 523.5,
      "text": " framework microservices in the world is just phenomenal. And, you know, those are the ones that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 523.5,
      "end": 530.54,
      "text": " I see running on EC2 servers, high availability, you know, 10 different environments, and they're just"
    },
    {
      "speakerLabel": "spk_1",
      "start": 530.54,
      "end": 535.98,
      "text": " stacking up the costs every month, having to be maintained every month. And those are really the kind of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 535.98,
      "end": 541.82,
      "text": " targets that I want to help people migrate to serverless and have a much better life."
    },
    {
      "speakerLabel": "spk_1",
      "start": 541.82,
      "end": 547.1800000000001,
      "text": " that makes a lot of sense."
    },
    {
      "speakerLabel": "spk_0",
      "start": 547.82,
      "end": 554.14,
      "text": " I think a slightly related question, what do you think is the unique selling proposition of Java when it comes to serverless and Lambda? Like what's unique about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 554.14,
      "end": 557.9,
      "text": " the language itself that maybe other languages don't have?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 564.4599999999999,
      "end": 571.9,
      "text": " I don't know if it's necessarily to do with serverless, but Java's unique position is that it is the language of integration. It probably, I imagine if there was any sort of data behind this,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 571.9,
      "end": 579.34,
      "text": " I'm not sure, but I think it has probably the richest, longest history, the most developed SDKs for a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 579.34,
      "end": 585.8199999999999,
      "text": " variety of different tools. And I mean, Lambda Snapstart is a really cool technology,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 585.82,
      "end": 592.46,
      "text": " being able to have that additional phase that you can affect your Lambda functions at deployment time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 592.46,
      "end": 598.3000000000001,
      "text": " So you can do a lot of preparation before your application is ever invoked by a customer."
    },
    {
      "speakerLabel": "spk_1",
      "start": 598.3000000000001,
      "end": 606.22,
      "text": " Now, obviously this is now usable by Python and .net. I'm sure it'll be rolled out to the other languages as"
    },
    {
      "speakerLabel": "spk_1",
      "start": 606.22,
      "end": 613.5,
      "text": " well. But yeah, I mean, Java is really the language of integration. And that's where I see the superpower."
    },
    {
      "speakerLabel": "spk_0",
      "start": 621.82,
      "end": 629.82,
      "text": " So I will maybe rephrase that as it has been more kind of the adoption patterns rather than the language itself, having specific unique characteristics. Maybe what we could focus on is giving people some examples of,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 629.82,
      "end": 635.66,
      "text": " I don't know, use cases where you have seen, where you will say proudly, yes, I think Java was the right choice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 635.66,
      "end": 644.54,
      "text": " And I mean, I've just seen, you know, countless microservices where it has run on EC2."
    },
    {
      "speakerLabel": "spk_1",
      "start": 644.54,
      "end": 651.8199999999999,
      "text": " It's a microservice that is an office based application. And it runs from nine to five. I mean, these are the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 651.8199999999999,
      "end": 658.86,
      "text": " the bread and butter applications that have been written by, by large enterprises for 20, 25 years. And"
    },
    {
      "speakerLabel": "spk_1",
      "start": 658.86,
      "end": 664.7,
      "text": " there's that sort of maintainability that Java is famous for. There's no breaking changes, very easy to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 664.7,
      "end": 673.5,
      "text": " upgrade. And I don't see serverless being a something that, you know, is has to be only"
    },
    {
      "speakerLabel": "spk_1",
      "start": 674.7,
      "end": 682.0600000000001,
      "text": " small companies, agile companies. You know, I think one of the real benefits is actually in enterprises where"
    },
    {
      "speakerLabel": "spk_1",
      "start": 682.06,
      "end": 687.7399999999999,
      "text": " they are having to spend a lot of time doing the high availability fault tolerant architectures,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 688.3,
      "end": 695.0999999999999,
      "text": " that they're just churning out EC2s. And that's where I see the real, the real benefit is by, you know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 695.0999999999999,
      "end": 701.66,
      "text": " bringing that vast volume of applications that has been built over the last 25 years and helping people to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 702.3,
      "end": 703.7399999999999,
      "text": " gain the benefits of serverless."
    },
    {
      "speakerLabel": "spk_0",
      "start": 711.18,
      "end": 716.62,
      "text": " I will add to that that even the, the ability to offload a lot of the kind of security and compliance aspects, just because you give that to the provider, in this case, AWS with the serverless"
    },
    {
      "speakerLabel": "spk_0",
      "start": 716.62,
      "end": 721.7399999999999,
      "text": " runtime, I think it will be a huge benefit to this kind of companies because they have entire departments"
    },
    {
      "speakerLabel": "spk_0",
      "start": 721.7399999999999,
      "end": 726.62,
      "text": " that generally look after those things and reducing the work for those, I think will be extremely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 726.62,
      "end": 732.54,
      "text": " beneficial for those businesses."
    },
    {
      "speakerLabel": "spk_1",
      "start": 732.54,
      "end": 743.5,
      "text": " So, you know, for me, that really came to light when I was working at AWS during the Log4Shell vulnerability. So this was when, Java's largest logging framework had a, a critical CVE,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 743.9,
      "end": 754.4599999999999,
      "text": " which actually scored 10 out of 10 for ability to be enacted and the effect that it could have."
    },
    {
      "speakerLabel": "spk_1",
      "start": 754.46,
      "end": 765.6600000000001,
      "text": " And the Lambda team were actually able to work with the AWS Corretto team, which is the team that distribute, Amazon's version of the Java runtime."
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.6600000000001,
      "end": 777.82,
      "text": " And they were able to mitigate that attack by, checking whenever a vulnerable class was loaded into the runtime and strip away the vulnerable code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 777.82,
      "end": 789.0200000000001,
      "text": " and, you know, for me, that was just an amazing capability that that team was able to, to bring to protect customers, you know, within days of it's being released."
    },
    {
      "speakerLabel": "spk_1",
      "start": 789.0200000000001,
      "end": 803.0200000000001,
      "text": " And, and being part of that team while that was happening was a real highlight of my, of my career. you know, the, the fact that we saved so many customers from being attacked was, was super cool."
    },
    {
      "speakerLabel": "spk_1",
      "start": 803.02,
      "end": 815.74,
      "text": " That probably goes to show how powerful it is to be able to offload some of that responsibility to a team like the one in AWS that is extremely experienced and they have people on call."
    },
    {
      "speakerLabel": "spk_0",
      "start": 816.06,
      "end": 822.98,
      "text": " So I think it would be very, very unlikely for even a big company to be able to have a team dedicated to this kind of activities."
    },
    {
      "speakerLabel": "spk_0",
      "start": 823.38,
      "end": 826.1,
      "text": " With that level of efficiency, I'd say."
    },
    {
      "speakerLabel": "spk_1",
      "start": 826.1,
      "end": 849.1800000000001,
      "text": " And just the fact that it, it would be easy to, you know, even if it hadn't been so transparent, you know, if it would just been an SDK change to, to bump to a, you know, a new version of the runtime, it's just so much easier to do than having to, you know, patch, runtimes and servers and different OSs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 849.18,
      "end": 856.04,
      "text": " I mean, it was very similar when, spectre and heartbleed, came out."
    },
    {
      "speakerLabel": "spk_1",
      "start": 856.1999999999999,
      "end": 875.8599999999999,
      "text": " I was actually a customer of AWS when that happened and we were using, Lambda at the time, but all of the other teams on the floor were using EC2 and they were not only having to patch the machines, but there was also a very, very real risk at that time that the, the patches would, degrade performance on machines."
    },
    {
      "speakerLabel": "spk_1",
      "start": 875.86,
      "end": 882.1,
      "text": " So not only were they having to patch, but they were also having to benchmark to see what capacity they needed to add."
    },
    {
      "speakerLabel": "spk_1",
      "start": 882.32,
      "end": 889.02,
      "text": " Whereas the, the team that I was leading on Lambda, you know, very smugly, we didn't have to make any changes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 889.32,
      "end": 893.94,
      "text": " that patch was already applied to Amazon Linux before the announcements was made."
    },
    {
      "speakerLabel": "spk_1",
      "start": 894.2,
      "end": 904.28,
      "text": " So again, you know, these are very, very attractive features to companies that use Java, which are the enterprise companies that have to be compliant."
    },
    {
      "speakerLabel": "spk_1",
      "start": 904.28,
      "end": 906.3399999999999,
      "text": " Absolutely. I totally agree on that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 906.4399999999999,
      "end": 921.74,
      "text": " Maybe we can revert a little bit back to some of the points we touched before, because I think I really like the way you, you tend to approach like new, new projects and work with different teams, which is what you have been doing for most time in AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 921.74,
      "end": 935.96,
      "text": " So I will probably ask you a bit more about like, what, what is your, let's say strategy for lack of better words, like what kind of common problems and fears you have to, to work with."
    },
    {
      "speakerLabel": "spk_0",
      "start": 935.96,
      "end": 941.74,
      "text": " And then how do you effectively end up with the entire team having a great experience and the project being successful?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 941.74,
      "end": 953.2,
      "text": " I, I, I guess typically I get brought in, when teams are having a bad time and they'll probably have spoken to their AWS account team."
    },
    {
      "speakerLabel": "spk_1",
      "start": 953.64,
      "end": 956.72,
      "text": " Maybe they have some experience, but don't have a lot of experience."
    },
    {
      "speakerLabel": "spk_1",
      "start": 956.72,
      "end": 964.72,
      "text": " And, and basically that, that kind of request kind of funnels up to, to somebody in AWS who can handle those sorts of requests."
    },
    {
      "speakerLabel": "spk_1",
      "start": 964.72,
      "end": 971.1,
      "text": " And I was kind of the top most, person in AWS handling a lot of Java Lambda questions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 971.1,
      "end": 991.0400000000001,
      "text": " So, you know, typically you'd join a call and people, you know, really enthused about serverless and, and really wanting to make a really good go of it, but just needing some help on how to think about, Java, ephemeral environments, how to use Lambda efficiently."
    },
    {
      "speakerLabel": "spk_1",
      "start": 991.04,
      "end": 1001.4399999999999,
      "text": " So, you know, very quickly, you can look at their code and say, all right, okay, you you've, you've kind of understood some of it, but maybe not all of it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1001.5999999999999,
      "end": 1006.02,
      "text": " So, you know, this is an environment that needs to focus on starting up quickly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1006.02,
      "end": 1014.06,
      "text": " So do you need, you know, all of these external network calls to, to load in these various things?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1014.5999999999999,
      "end": 1020.5,
      "text": " can you change your architecture slightly to, to be more, more, serverless friendly?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1020.5,
      "end": 1034.5,
      "text": " You know, can you get away with, you know, changing this library that doesn't really help you to this other library that it's a lot smaller, a lot leaner, and probably includes all of the features that you actually need?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1035.1,
      "end": 1043.52,
      "text": " you know, just, just giving slight advice into, into cold starts, because that's typically where everyone kind of panics."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1043.52,
      "end": 1046.04,
      "text": " The, the developers try something new."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1046.18,
      "end": 1049.2,
      "text": " they're not entirely familiar with the technology."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1049.2,
      "end": 1059.44,
      "text": " They have a bad experience because they're uploading code, pressing test on the console, getting a cold start, changing the code, uploading it, getting a cold start."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1059.44,
      "end": 1062.2,
      "text": " And they just think that, that Lambda is really slow."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1062.2,
      "end": 1066.3600000000001,
      "text": " so, you know, typically I talk to them about their use case."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1066.3600000000001,
      "end": 1067.88,
      "text": " What's your traffic profile?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1068.22,
      "end": 1070.68,
      "text": " What's your existing application latency?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1071.4,
      "end": 1076.72,
      "text": " And, you know, trying to understand what they're trying to achieve and then working backwards from that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1076.72,
      "end": 1088.72,
      "text": " And often when companies just run a benchmark or some sort of, of load test, they'll see that actually the performance is completely different to what they've seen in their development cycles."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1088.72,
      "end": 1092.4,
      "text": " Because their development cycles are always the worst case scenario."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1093.16,
      "end": 1106.72,
      "text": " When they do some sort of, you know, nine to five, traffic pattern, then suddenly the P99 is like 50 milliseconds instead of, you know, two seconds, which is what they see during development."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1106.72,
      "end": 1114.54,
      "text": " And then everyone kind of calms down and, you know, then it just becomes an optimization conversation more than a, you know, a world ending."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1115.02,
      "end": 1116.72,
      "text": " How is this so slow conversation?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1116.72,
      "end": 1128.2,
      "text": " that actually reminds me of something that I've seen quite a lot myself, which is, new people approaching Lambda, not realizing the difference between the init phase and the handler phase."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1128.2,
      "end": 1133.96,
      "text": " And they just ignore the init phase entirely and they put all the initialization logic in the handler."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1133.96,
      "end": 1143.74,
      "text": " And then they don't realize that they are just accumulating all that extra time for every single request when it could be offloaded at the creation of the Lambda instance."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1143.74,
      "end": 1158.84,
      "text": " And this, I'm sure I've seen that a million times as well, but I think there are lots of like tactical tips like that, that when you have the experience, you can help teams be much more effective just by spotting those things and helping them to understand them and fix them."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1159.56,
      "end": 1172.1200000000001,
      "text": " And maybe that's a, you know, UX problem in Lambda, you know, you know, it's very clear that the handler is called on a customer request, but, you know, for different languages, it actually handles the init phase differently."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1174.12,
      "end": 1195.8,
      "text": " And, you know, when you think of technology, all the differences between technology, between something like an on-demand Lambda function and a provision concurrency Lambda function and the expectations and latency, but it's not particularly clear, from a, from a UX or a developer experience point of view, like how you should be programming, those differently for different, latency characteristics."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1195.8,
      "end": 1207.2,
      "text": " So it's easy for us to, to kind of understand these things after, you know, working with the technology for years and years, but I can definitely understand, you know, newcomers having a hard time with it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1207.26,
      "end": 1208.74,
      "text": " So, so very sympathetic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1208.74,
      "end": 1225.28,
      "text": " And just to get a little bit more practical, is there, I will say a specific list of tips that you can give people like, I don't know, I'm thinking stuff like which version of Java should they use and should they always use Snapstart and how to configure it correctly?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1225.74,
      "end": 1235.58,
      "text": " And maybe, I don't know, are there specific JVM flags that you always would enable or maybe, I don't know, consider when to enable and what, which values to use?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1237.1799999999998,
      "end": 1240.5,
      "text": " Mostly you're not really tuning the JVM anymore."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1240.5,
      "end": 1244.96,
      "text": " That was definitely something of, older versions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1244.96,
      "end": 1250.26,
      "text": " but since, you know, the, the newer versions, that's not really a thing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1250.26,
      "end": 1261.74,
      "text": " So specifically with, with Lambda runtimes pre Java 17, there was a JVM flag that, AWS recommended."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1261.74,
      "end": 1274.46,
      "text": " And there's a whole heap of blog articles about a feature flag called tiered compilation, but that was, added by default in, JVM versions after Java 17."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1274.46,
      "end": 1282.66,
      "text": " So Java 17, Java 21, and probably the future Java 25 will all have this, flag enabled by default."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1282.66,
      "end": 1288.78,
      "text": " so at the moment, you know, there's probably no JVM flags that I'd recommend at the moment."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1288.78,
      "end": 1301.26,
      "text": " I think it'd have to be a very specific use case where you would go into something in depth, but you know, normal microservice architectures, you know, there's, there's no real additional, JVM flags."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1301.26,
      "end": 1310.3,
      "text": " And that's a good thing because we've, we've worked or, you know, I worked with the Lambda team to make sure that these were enabled by default."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1310.64,
      "end": 1320.82,
      "text": " The sort of things that I like to tell people, straight away is, you know, there's a logging library called Log4J and this is a logging library."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1320.82,
      "end": 1322.34,
      "text": " That's been around forever."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1322.76,
      "end": 1328.52,
      "text": " Very, very fantastic piece of software, but now is one and a half megabytes in size."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1328.52,
      "end": 1335.8,
      "text": " and this, I think is just not, a tailored solution that you probably want to be using in Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1336.1399999999999,
      "end": 1341.6399999999999,
      "text": " So, you know, now I recommend another, another library called Penna."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1342.1399999999999,
      "end": 1351.72,
      "text": " So if you search for, you know, Java, logging library Penna, you'll find this fantastic open source library, which is 50 kilobytes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1351.72,
      "end": 1363.46,
      "text": " It does structured, structured, JSON logging has zero external dependencies, super fast, very low garbage, collection overhead."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1363.56,
      "end": 1372.54,
      "text": " And, you know, these are the sort of things that we need to be, you know, looking out for in this community and helping people to understand that, you know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1372.54,
      "end": 1378.86,
      "text": " you've used to have no real consideration about startup time with application servers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1379.02,
      "end": 1387.8999999999999,
      "text": " It didn't really matter whether your application started up fast or slow because your application servers stayed up for a week, but now we do need to."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1387.8999999999999,
      "end": 1396.68,
      "text": " So what are, the best of breed application dependencies to, to help you do these things that you need to do, quickly and effectively."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1396.68,
      "end": 1406.26,
      "text": " So Penna is a drop-in replacement for, for the most common, logging abstraction in Java, which is called, SLF4J."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1406.5800000000002,
      "end": 1408.1200000000001,
      "text": " And it's a drop-in replacement."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1408.3600000000001,
      "end": 1412.52,
      "text": " So again, you know, it's not even like you have to refactor your code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1412.68,
      "end": 1420.0600000000002,
      "text": " You can drop in the dependency and your application code will, will continue to log or log in a structured logging way."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1420.0600000000002,
      "end": 1425.6200000000001,
      "text": " And you just carry on with your life, but you've gone from a one and a half megabyte dependency to 50 kilobytes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1425.62,
      "end": 1434.9399999999998,
      "text": " And, you know, those are the sort of considerations that you need to be looking at through your application code to say, am I really focusing on ephemeral environments?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1435.6799999999998,
      "end": 1438.8799999999999,
      "text": " You know, is there, is there a better way of doing this?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1439.6599999999999,
      "end": 1449.78,
      "text": " And that is a balancing act because, you know, maybe you don't even need the super, super efficient, cold starts because you have an application profile."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1449.78,
      "end": 1452.78,
      "text": " It doesn't really cause you to have a lot of cold starts."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1452.78,
      "end": 1461.76,
      "text": " So it's all weighing up, you know, how much time you want to invest in, you know, technical people always like geeking out on optimization."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1461.76,
      "end": 1466.16,
      "text": " So it's hard to put the tools down and, and, you know, get on with features."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1466.5,
      "end": 1467.8999999999999,
      "text": " That's, that's absolutely fair."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1468.34,
      "end": 1471.84,
      "text": " I'm definitely, one of my mistakes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1471.84,
      "end": 1478.3799999999999,
      "text": " I recognize it's always focusing a bit too much on performance, which sometimes makes sense, but not always."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1478.3799999999999,
      "end": 1483.32,
      "text": " Most of the time, as you said, it's more important to ship features and deliver value to the business."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1483.32,
      "end": 1488.48,
      "text": " And then whenever performance becomes a bottleneck, you can work on it and improve it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1488.6999999999998,
      "end": 1489.22,
      "text": " So definitely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1489.98,
      "end": 1491.4599999999998,
      "text": " That I agree with that point."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1491.98,
      "end": 1496.28,
      "text": " What about, we mentioned it already, snap start a few times."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1496.28,
      "end": 1509.98,
      "text": " We mentioned provision concurrency are those things that you would always use by default, or is there like a point where it makes sense to invest into those, those features, enabling them correctly and learn how to use them correctly?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1510.54,
      "end": 1517.8999999999999,
      "text": " I mean, I, I remember distinctly, I, you know, a conversation with a pretty major bank."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1517.9,
      "end": 1524.9,
      "text": " There was probably 10 people on the call and we were discussing provision concurrency and the cost of provision concurrency."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1525.5800000000002,
      "end": 1528.3000000000002,
      "text": " I think they had a concurrency of two at the time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1529.0400000000002,
      "end": 1536.4,
      "text": " And I was, I was just, man, the, the, the time we've spent discussing this problem and the salaries of everyone in the room."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1536.5600000000002,
      "end": 1541.24,
      "text": " I mean, why are we, why are we even, you know, talking about 20, $30 a month?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1541.24,
      "end": 1551.2,
      "text": " So provision concurrency is, is definitely a way of, you know, mitigating a lot of the optimizations, but there is a cost involved."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1551.46,
      "end": 1558.3,
      "text": " I guess what people sometimes forget though, is that provision concurrency can actually be cheaper than on demand."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1558.3,
      "end": 1570.86,
      "text": " So if you are, if you do have a Lambda function that has significant traffic, then you probably should be using provision concurrency because every invoke with provision concurrency is cheaper."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1570.86,
      "end": 1571.82,
      "text": " than on demand."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1572.1,
      "end": 1585.26,
      "text": " So if you can use provision concurrency at the base utilization, you will actually save money, but it does get a bit of a bad rap as a way of kind of optimizing, in exchange for cash."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1585.7199999999998,
      "end": 1588.62,
      "text": " So I'm not against using provision concurrency."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1588.9799999999998,
      "end": 1599.62,
      "text": " but again, it's understanding, how it works and a lot of the optimizations that you would do to, help provision concurrency be even better."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1599.62,
      "end": 1602.4599999999998,
      "text": " help you when you use Snapstart."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1602.6399999999999,
      "end": 1610.36,
      "text": " And I guess at the time of recording Snapstart for Java is I think still free, whereas I don't think it is free for the other languages."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1611.26,
      "end": 1613.9799999999998,
      "text": " so, you know, would I use Snapstart?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1614.1999999999998,
      "end": 1615.1599999999999,
      "text": " absolutely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1615.86,
      "end": 1626.12,
      "text": " it's gonna, even just turning it on without doing any further optimizations, it is going to save you, latency, using Java."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1626.12,
      "end": 1629.1,
      "text": " And so I would definitely use it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1629.28,
      "end": 1636.9599999999998,
      "text": " It does increase the deployment time because now you are using, you have to use, Lambda versions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1637.1799999999998,
      "end": 1645.3799999999999,
      "text": " And each time you deploy a new version, you have to go through a life cycle where a Lambda function is snapshotted."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1645.38,
      "end": 1652.8400000000001,
      "text": " So when you deploy that new version, that code is put onto a separate, fleet of execution environments."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1653.16,
      "end": 1654.72,
      "text": " It's initialized."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1654.88,
      "end": 1656.7800000000002,
      "text": " You do any work that you need to do."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1657.18,
      "end": 1658.5,
      "text": " A snapshot is taken."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1658.7600000000002,
      "end": 1659.6000000000001,
      "text": " It's encrypted."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1659.98,
      "end": 1661.42,
      "text": " It's put into storage."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1661.64,
      "end": 1663.8200000000002,
      "text": " That, that whole process takes time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1664.0800000000002,
      "end": 1667,
      "text": " So your deployments do take longer."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1667,
      "end": 1690.14,
      "text": " So you might not necessarily have Snapstart enabled full of your development environments where you're wanting to do, high change cycle, but you would probably have it on all of your, pre-production environments where you want to have, you know, the, the best performance and performance that's going to be applicable or similar to production."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1690.8,
      "end": 1692.16,
      "text": " That makes a lot of sense."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1692.16,
      "end": 1699.3600000000001,
      "text": " let's stay a little bit longer on this kind of topic, that covers all things optimization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1699.3600000000001,
      "end": 1702.8600000000001,
      "text": " I will say like call starts and performance, maybe cost as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1702.8600000000001,
      "end": 1708.52,
      "text": " do you prefer a specific like combination of runtime and by runtime?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1708.74,
      "end": 1718.96,
      "text": " I mean that the standard supported Java runtimes versus maybe something like, I don't know, a custom image using GraalVM or something like that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1718.96,
      "end": 1736.48,
      "text": " And at the same time, you already mentioned some libraries like the login library, but in terms of framework, like you mentioned Spring is like almost ubiquitous in Java, but I know that there has been a lot of advancement with like newer frameworks that tend to be, I guess, more optimized for serverless and microservices."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1736.48,
      "end": 1744.5,
      "text": " So I'd say, I'm going to phrase the question as like, what's your favorite setup when it comes to Java, if you could pick with like total freedom."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1745.5,
      "end": 1755.02,
      "text": " So for me, whether I'm building something for myself or whether I'm advising other people, I always start by saying, do you need a framework?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1755.02,
      "end": 1758.7,
      "text": " Cause if you don't need a framework, then you shouldn't use a framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1758.7,
      "end": 1783.92,
      "text": " So especially for, for event driven architectures, it's probably unlikely that you need a framework unless you have an application that really benefits from dependency injection or, you know, you have a existing set of libraries where, you are used to using dependency injection and you want to maintain similarity across the, the estate, which I can understand."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1783.92,
      "end": 1788.64,
      "text": " People get annoyed when, you know, certain teams do things in a special different way."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1788.8400000000001,
      "end": 1794.68,
      "text": " I think people should have the flexibility to use the best approaches, but I can understand it from, from both sides."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1794.8600000000001,
      "end": 1807.1200000000001,
      "text": " So if you're doing event driven architectures where, you know, you're receiving an S3 object or whether you're processing a messaging, a message from a queue, I think you should definitely be challenging yourself to not use a framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1807.1200000000001,
      "end": 1812.74,
      "text": " If you're, if you're used to using Spring, start with no framework and see how far you get."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1812.74,
      "end": 1817.94,
      "text": " And then if you have to take on an application framework, then, then that's fine."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1817.94,
      "end": 1819.66,
      "text": " Spring is fantastic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1820.1,
      "end": 1825.96,
      "text": " Quarkus and Micronaut are probably the two, next most popular frameworks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1826.1200000000001,
      "end": 1832.86,
      "text": " And the big thing about those two frameworks is they were both kind of born at the same time in reaction to Spring."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1832.86,
      "end": 1848.86,
      "text": " And they've both been developed in a way that reduces the amount of, reflection, reflection that is used in the, in the, application framework, which is one of the features of, of Java that tends to lead to more latency."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1848.86,
      "end": 1855.4399999999998,
      "text": " At the same time, Oracle was developing, Graal VM native image."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1855.4399999999998,
      "end": 1861.36,
      "text": " And the, the two things basically accidentally became very well aligned."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1861.36,
      "end": 1866.26,
      "text": " The, Graal VM native image doesn't really like you using reflection."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1866.26,
      "end": 1868.58,
      "text": " And these frameworks didn't use reflection."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1868.58,
      "end": 1874.72,
      "text": " So it was very easy to have an application built with Quarkus or Micronaut."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1874.72,
      "end": 1879.6,
      "text": " It was very easy to become an ahead of time compiled, binary."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1879.86,
      "end": 1895.8999999999999,
      "text": " Whereas, if you were using other frameworks, previously you would have to hint to the compiler that, you know, this is a resource that's dynamically loaded, which became, you know, an awkward, awkward process."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1895.9,
      "end": 1906,
      "text": " But, but, but since, Spring has done a lot of work to, you know, really, make sure that ahead of time compilation is supported well in Spring."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1906,
      "end": 1911.98,
      "text": " So with Spring Boot 3 and Spring Framework 7, it's really well, supported as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1912.14,
      "end": 1921.14,
      "text": " So, so, you know, really you're looking at the features of these application frameworks as a whole and, and picking which suits, best for you and your project."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1921.14,
      "end": 1925.1000000000001,
      "text": " all of them are very capable and all of them have a lot of support."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1925.1,
      "end": 1929.1,
      "text": " So Spring is now owned by Broadcom after the acquisition."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1929.54,
      "end": 1933.4399999999998,
      "text": " you know, there's a large open source team working on Spring."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1933.74,
      "end": 1939.8,
      "text": " Oracle have been adding more developers to, Micronaut and building out the team at Micronaut."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1940,
      "end": 1945.08,
      "text": " And then Red Hat, have been investing heavily in Quarkus for a number of years."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1945.26,
      "end": 1952.3799999999999,
      "text": " So you've got three really good options that are well invested and will, will definitely, stand the test of time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1952.64,
      "end": 1953.66,
      "text": " That's pretty cool."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1954.1000000000001,
      "end": 1961.0800000000002,
      "text": " And I think I've only used Spring Boot myself, so I cannot speak for the other frameworks, but I only heard very good things."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1961.66,
      "end": 1962.5,
      "text": " So I'm curious."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1962.8600000000001,
      "end": 1966.3600000000001,
      "text": " Maybe eventually I will try them and see how they play with Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1967.12,
      "end": 1974.8,
      "text": " So Micronaut has been developed, from a lot of people who spent a lot, a lot of time, building Spring."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1974.8,
      "end": 1985.02,
      "text": " So they, they looked at Spring, taken ideas and inspirations from it and built kind of their, version of, of an improved application framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1985.02,
      "end": 1992.54,
      "text": " And then the Quarkus team have built something, from scratch, but it's also very standard standards based."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1992.76,
      "end": 2000.5,
      "text": " Whereas Spring and Micronaut don't really follow the same sort of Java enterprise standards."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2001,
      "end": 2004.04,
      "text": " Quarkus is, is a standard based application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2004.04,
      "end": 2013.08,
      "text": " So you can imagine, migrating to Quarkus from, from previous, older, application frameworks easier."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2013.2,
      "end": 2024.2,
      "text": " So those are kind of some considerations that you can make if you're, if you're potentially moving or migrating applications or wanting to move to more serverless orientated framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2024.2,
      "end": 2024.8400000000001,
      "text": " Great."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2025.42,
      "end": 2030.8600000000001,
      "text": " Let's, probably related topic, but sounds like a little bit of a change of subject."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2031.04,
      "end": 2035.5800000000002,
      "text": " So what about testing and maybe developer experience in general?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2035.78,
      "end": 2040.22,
      "text": " Like how do you generally go about testing your Lambda functions in Java?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2040.74,
      "end": 2043.28,
      "text": " so I do a lot of testing locally."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2043.76,
      "end": 2046.5800000000002,
      "text": " So I know there's probably kind of like two camps."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2047.26,
      "end": 2052.86,
      "text": " you know, there's definitely people who love testing in the cloud and I, I love testing in the cloud."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2052.86,
      "end": 2060.88,
      "text": " But I try and, focus that on my, for my end to end tests where I'm doing integration and unit tests."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2060.88,
      "end": 2063.6200000000003,
      "text": " I, I favor, doing that locally."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2063.78,
      "end": 2067.1800000000003,
      "text": " So I'm a big, fan of local stack."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2067.34,
      "end": 2073.7200000000003,
      "text": " And, I think it's, supports multiple languages now, but, a framework called test containers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2073.92,
      "end": 2081.96,
      "text": " And in Java, it's very easy to, you know, spin up a Postgres database from a Docker container."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2081.96,
      "end": 2085.88,
      "text": " As part of a unit test and integrate my code against that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2085.96,
      "end": 2092.18,
      "text": " And in the same way I can boot up, an S3 bucket or well, actually an S3 service."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2092.38,
      "end": 2096.32,
      "text": " And then I can create a bucket and, you know, add any items that I need to add to it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2096.42,
      "end": 2099.6,
      "text": " And I can do that with, you know, other AWS services."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2099.6,
      "end": 2109.54,
      "text": " So if I want to queue and a Lambda function, it's very easy for me to, to kind of write a integration test that I can integrate, locally."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2109.74,
      "end": 2115.24,
      "text": " Now, obviously there's going to be stuff that I can't cover, in those tests."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2115.24,
      "end": 2120.14,
      "text": " And that's where I moved to the cloud for integration, for end-to-end tests."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2120.4199999999996,
      "end": 2124.72,
      "text": " So things like capacity, security, permissions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2125.3399999999997,
      "end": 2135.14,
      "text": " Those are the sort of things that I'm, I'm looking at an end-to-end point of view, but the rest of the application and the awkward integration stuff I'm kind of doing locally."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2135.14,
      "end": 2137.5,
      "text": " So I have the, the best tools."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2137.7,
      "end": 2139.9,
      "text": " I have my, have my idea of choice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2140.08,
      "end": 2141.7999999999997,
      "text": " I have my debugger."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2142.2599999999998,
      "end": 2147.3799999999997,
      "text": " I can, I can do stuff that I'm used to doing and have a lot of experience in the tools with."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2147.5,
      "end": 2148.8199999999997,
      "text": " So that's, that's my approach."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2148.96,
      "end": 2149.8599999999997,
      "text": " That's what works for me."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2150.16,
      "end": 2158.8399999999997,
      "text": " actually, I think I do the same, although mostly with different languages, but I generally try to push the local testing as far as I can."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2159.12,
      "end": 2161.06,
      "text": " Just because maybe it's just out of habit."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2161.06,
      "end": 2163.86,
      "text": " That's what I've been doing for the most part of my career."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2164.02,
      "end": 2169.14,
      "text": " And it's nice to have that fast reload and debugging experience."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2169.44,
      "end": 2178.32,
      "text": " But yeah, I think at some point you, you have to, to start testing also in the cloud and you end up with kind of a mix of the two approaches for different kinds of tests."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2178.44,
      "end": 2181.7999999999997,
      "text": " So I think that's, I will define it as a pretty standard approach."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2182.56,
      "end": 2190.2,
      "text": " But yeah, it's sometimes a controversial topic where people will say, well, with the cloud, you only have to test in the cloud because that's the true real environment, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2190.2,
      "end": 2204.8799999999997,
      "text": " I think maybe we can agree that I think mocking is on a decline because with distributed systems, it's hard to understand what behavior the system should emit."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2204.88,
      "end": 2209.1,
      "text": " So I think I'm using mocks less and less."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2209.4,
      "end": 2222.2000000000003,
      "text": " And, you know, I probably can't remember the last time I used mocks in a test because I'm much more likely to favor integration tests with test containers and local stuff."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2222.2,
      "end": 2234.7599999999998,
      "text": " And I feel like that's just way more productive and way more useful from a testing perspective and having to work out what the behavior actually is and then mock that behavior."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2235.12,
      "end": 2240.74,
      "text": " So that would be my hot take, mocking decline integration testing on the up."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2240.74,
      "end": 2248.68,
      "text": " which is, I think, something that I'm hearing from many people also with the inverse pyramid of testing model, which goes more or less in the same line."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2249.2999999999997,
      "end": 2267.5,
      "text": " And I find myself as well, maybe for simple cases, simple enough cases that I still see lots of value in mocking, just to be sure that maybe when you have, I don't know, complex behavior in reaction to an external, whatever, event provider database, to make it easy for me to unit test that complex behavior."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2267.5,
      "end": 2273.98,
      "text": " But then if I have to mock a lot, because I don't know, the event is very complex and it can have so many different states."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2274.7,
      "end": 2277.46,
      "text": " Then, yeah, I think there is a point where it's not worth it anymore."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2277.46,
      "end": 2283.64,
      "text": " And you end up spending so much time if you want to be comprehensive and also end up with code that is very brittle."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2283.84,
      "end": 2287.32,
      "text": " Every time something changes, you better have to rewrite most of your tests."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2287.56,
      "end": 2295.14,
      "text": " So it's not like I think, yeah, there is a line where it still makes sense, but then you cross that line and it doesn't make too much sense anymore."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2295.14,
      "end": 2303.1,
      "text": " I really like having, you know, the core journeys as end-to-end tests that run synthetically."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2303.92,
      "end": 2316.8799999999997,
      "text": " So, you know, when I'm designing systems, I'm trying to design systems in a way where I can, you know, segment data and make sure that I can send synthetic test data through the system."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2316.88,
      "end": 2328.58,
      "text": " So if I cast my mind back to when I worked in the betting industry, we would have a synthetic football match being played via a test handler."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2328.88,
      "end": 2334.92,
      "text": " So that meant that there was always events going through the system, whether or not there was any real football being played."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2334.92,
      "end": 2341.32,
      "text": " And that just meant that we were able to see if any component that we'd released had caused a breakage."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2341.76,
      "end": 2347.78,
      "text": " Because that's the other problem with kind of time-based systems or event-based systems."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2347.94,
      "end": 2353.32,
      "text": " If there's no events triggering the application, it's hard to know if they are currently in a working state."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2353.32,
      "end": 2363.28,
      "text": " So synthetic data going through the system that can be segmented in some way from production so that it's not, you know, displayed on the website."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2363.6600000000003,
      "end": 2365.78,
      "text": " I think it's a really, really good trick as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2366.04,
      "end": 2375.6200000000003,
      "text": " but probably that requires a significant investment as well because you are effectively building like a simulation of, in that case, like a football match, which might not be very trivial to build."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2375.62,
      "end": 2381.2999999999997,
      "text": " but I think these are the sort of things that you end up thinking is a heavy investment."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2382.12,
      "end": 2397.3599999999997,
      "text": " Well, maybe it is, but when you are able to, I mean, any non-trivial application, so any enterprise application that's going to have any sort of longevity, these are always going to be cost savings that just come back again and again."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2397.8599999999997,
      "end": 2402.4,
      "text": " And being able to have a, you know, a constant benchmark is a really valuable thing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2402.4,
      "end": 2414.5,
      "text": " So I would recommend investing in test tools and something that I always did as a tech leader, being able to, you know, not rely on an external dependency for testing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2414.5,
      "end": 2426.98,
      "text": " So if I'm integrating with a, I don't know, a data provider, I would often make a substitute of that data provider so that I could change the behavior."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2426.98,
      "end": 2439.78,
      "text": " You know, what happens to my application when that provider increases in latency or has a timeout period or some other behavior if it changes the format of that data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2440.28,
      "end": 2446.38,
      "text": " So being able to have, you know, really strong testing tools allows you to really test your application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2446.62,
      "end": 2453.7400000000002,
      "text": " Whereas if you just take the happy path of their integration, often you don't see these side quests that go wrong."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2454.26,
      "end": 2456.5,
      "text": " Awesome. I totally agree with that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2456.5,
      "end": 2458.56,
      "text": " Now I think we are getting close to the end."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2458.76,
      "end": 2471.42,
      "text": " I have only one final question, which is where people can find useful resources and maybe you can share something that is more appealing for beginners, something that can be more interesting for experienced people."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2471.68,
      "end": 2478.94,
      "text": " And I know you have been investing your own time in building material, books and simulations and lots of other interesting stuff."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2479,
      "end": 2483.1,
      "text": " So feel free to mention all of those things, which I think are super cool and extremely useful."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2483.1,
      "end": 2485.1,
      "text": " so there is a lot of material."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2485.1,
      "end": 2488.2599999999998,
      "text": " A lot of it is maybe not well connected."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2489.12,
      "end": 2493.12,
      "text": " So I think more of it will be more and more connected on the Lambda documentation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2493.36,
      "end": 2494.4,
      "text": " So that's a good place to start."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2495.02,
      "end": 2504.66,
      "text": " Serverless Lambda has a whole Java section with material on how to migrate and how to effectively use Java on Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2504.66,
      "end": 2509.24,
      "text": " So if you search for that phrase on Google, you'll probably find quite a lot of material."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2509.46,
      "end": 2511.8199999999997,
      "text": " So effectively using Java on Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2512.18,
      "end": 2522.2599999999998,
      "text": " And yeah, you know, something that I've been thinking about a lot is, you know, I've probably had more conversations about Java and Lambda than pretty much anybody in AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2522.26,
      "end": 2529.5200000000004,
      "text": " And that might be a bold statement, but I think the majority of people who I've worked with would probably agree with me on that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2530.2200000000003,
      "end": 2538.98,
      "text": " And I started to write down all of my kind of common notes that I would discuss with customers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2539.28,
      "end": 2540.9,
      "text": " And I started writing those down."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2540.98,
      "end": 2543.2400000000002,
      "text": " I'd try and do, you know, 500 words a day."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2543.24,
      "end": 2547.54,
      "text": " And now I think I'm at about 10,000 or 12,000 words."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2548.06,
      "end": 2549.8799999999997,
      "text": " And I've published a e-book."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2550.68,
      "end": 2558.58,
      "text": " So if you go to my website, sailes.co.uk, hopefully link in the description, you'll find a book that you can purchase."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2559.16,
      "end": 2560.2799999999997,
      "text": " It's incomplete."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2560.7599999999998,
      "end": 2568.3199999999997,
      "text": " So the price isn't too high, but it has a lot of good material around these sort of topics."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2568.8199999999997,
      "end": 2572.2599999999998,
      "text": " So, you know, how do I start thinking about optimizations?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 2572.26,
      "end": 2575.78,
      "text": " How do I get to the lowest possible cold start values?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 2576.34,
      "end": 2581.0600000000004,
      "text": " You know, what sort of considerations do I need to think about using observability and Lambda?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 2581.6800000000003,
      "end": 2582.5600000000004,
      "text": " Those sorts of things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2582.6800000000003,
      "end": 2587.88,
      "text": " So all of my kind of top tips in a very condensed short e-book."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2588.0400000000004,
      "end": 2590.94,
      "text": " So easy to read and easy to get value from."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2591.2400000000002,
      "end": 2596.2200000000003,
      "text": " I'm sure that if somebody buys the book now, they will get also future releases as well, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2596.28,
      "end": 2596.5,
      "text": " Yes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2596.5200000000004,
      "end": 2597.6800000000003,
      "text": " Is that the model you have in mind?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2598,
      "end": 2598.6400000000003,
      "text": " absolutely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2599.4,
      "end": 2599.76,
      "text": " Awesome."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2599.76,
      "end": 2602.96,
      "text": " Then we'll put all the links in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2603.38,
      "end": 2609.9,
      "text": " So not just the book, but all the other tools and links to libraries and frameworks that we mentioned today."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2609.9,
      "end": 2624.4,
      "text": " I also know that you have a few simulations about Lambda, Snapstart priming, and in general, like the lifecycle cold starts and reusage and reclaiming of Lambda environments."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2624.4,
      "end": 2633.8,
      "text": " I think those two are also two other great resources for people that are starting with serverless and Lambda to really understand what is the model that the platform is giving you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2633.96,
      "end": 2642.44,
      "text": " Like visually seeing it, I think it's much more powerful than reading a piece of documentation, trying to imagine in your mind, like all the different phases, I think."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2642.44,
      "end": 2646.16,
      "text": " And that's why I spent time creating those things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2646.34,
      "end": 2660.38,
      "text": " I think once you understand the execution model of a Lambda function, I think a lot of things click and then you start to understand what is a suitable use case, what is not a suitable use case."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2660.38,
      "end": 2666.54,
      "text": " Maybe where past decisions on applications don't help future performance."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2667,
      "end": 2673.96,
      "text": " So I think that's the real key thing to kind of understand as a new developer learning serverless or learning Lambda, should I say."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2674.62,
      "end": 2675.1400000000003,
      "text": " Absolutely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2675.54,
      "end": 2680.32,
      "text": " And to be fair, I think most serverless environments have similar characteristics."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2680.32,
      "end": 2689.38,
      "text": " So even if you want to go to something else later on, it's definitely useful to know the ins and outs of Lambda and then transpose them to another provider."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2689.48,
      "end": 2689.76,
      "text": " Absolutely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2690.1200000000003,
      "end": 2707.92,
      "text": " I mean, you know, a lot of the optimizations that you would do for Lambda, even if you did go to a container environment for whatever reason in the future, you're going to benefit from so much improvement, which means that your horizontal scaling will be faster."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2707.92,
      "end": 2712.88,
      "text": " And you know, just your costs will be more aligned to the traffic that your application receives."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2713.2000000000003,
      "end": 2714.5,
      "text": " So it's always a win-win."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2714.92,
      "end": 2715.52,
      "text": " All right."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2715.64,
      "end": 2721.52,
      "text": " So before we wrap up, I have to give a big shout out to our usual sponsor, fourTheorem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2721.84,
      "end": 2725.02,
      "text": " And what I want to say is that I work for fourTheorem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2725.1800000000003,
      "end": 2726.32,
      "text": " So of course, I'm biased."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2726.76,
      "end": 2729.06,
      "text": " And at fourTheorem, we work with the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2729.2200000000003,
      "end": 2732.3,
      "text": " We believe the cloud should be simple, scalable, cost effective."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2732.66,
      "end": 2735.4,
      "text": " And we help teams to succeed with the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2735.4,
      "end": 2745.32,
      "text": " So whether you are using containers or trying to build an event-driven architecture, or even just using SaaS and trying to scale it globally, keep us in mind."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2745.42,
      "end": 2746.42,
      "text": " We'd love to work with you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2746.6600000000003,
      "end": 2751.88,
      "text": " Check out fourTheorem.com where you can find everything about fourTheorem, some of our case studies."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2752.34,
      "end": 2754.7000000000003,
      "text": " And of course, feel free to reach out and talk to us."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2754.98,
      "end": 2757.32,
      "text": " So that brings us to the end of this episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2757.6,
      "end": 2759.6,
      "text": " Mark, it's been a real pleasure to have you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2759.7400000000002,
      "end": 2761.1600000000003,
      "text": " I think I learned a lot."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2761.28,
      "end": 2764.06,
      "text": " So thank you very much from myself in the first place."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2764.06,
      "end": 2767.7,
      "text": " Hopefully, everyone else here listening has been learning a lot."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2768.08,
      "end": 2770.42,
      "text": " Feel free to drop your comments, your experience."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2770.56,
      "end": 2778.38,
      "text": " We always love to hear from our listeners and learn from them and share everything we learn and build a better cloud together."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2779.04,
      "end": 2780.16,
      "text": " So thank you very much."
    },
    {
      "speakerLabel": "spk_0",
      "start": 2780.22,
      "end": 2782.38,
      "text": " And we'll see you in the next episode."
    },
    {
      "speakerLabel": "spk_1",
      "start": 2782.74,
      "end": 2783.12,
      "text": " Thank you."
    }
  ]
}