WEBVTT

1
00:00:00.000 --> 00:00:10.000
Hello everyone and welcome to another episode of AWS Bites.

2
00:00:10.000 --> 00:00:15.880
AWS Bites is the weekly show with bitesized episodes where we try to answer your questions

3
00:00:15.880 --> 00:00:17.440
about AWS.

4
00:00:17.440 --> 00:00:21.240
My name is Luciano and today I'm joined by Eoin.

5
00:00:21.240 --> 00:00:26.000
So before we get started, let me kindly ask you to give us a follow and subscribe so you

6
00:00:26.000 --> 00:00:31.960
can be up to date with our latest news and every time we have a new episode.

7
00:00:31.960 --> 00:00:37.080
And the question for today is actually one I really, really like and I'm really excited

8
00:00:37.080 --> 00:00:43.060
about and it's, is serverless good or bad if you are a startup?

9
00:00:43.060 --> 00:00:47.920
So I will probably ask you Eoin, first of all, to explain briefly what do we mean by

10
00:00:47.920 --> 00:00:48.920
serverless?

11
00:00:48.920 --> 00:00:50.520
What do you think?

12
00:00:50.520 --> 00:00:55.920
That's a really good place to start because it means different things for almost everybody.

13
00:00:55.920 --> 00:00:59.520
And we could probably divide it down into two categories.

14
00:00:59.520 --> 00:01:04.360
There's the mindset that serverless is all about using off the shelf managed services

15
00:01:04.360 --> 00:01:08.920
and offloading whatever effort you can to a third party provider.

16
00:01:08.920 --> 00:01:15.360
Now that could be AWS, but it could also be a provider of a specific service.

17
00:01:15.360 --> 00:01:20.960
So it could be like using DynamoDB as an example of a serverless approach, but also using Auth0

18
00:01:20.960 --> 00:01:27.080
to manage your user accounts, authentication and authorization is serverless or using Algolia

19
00:01:27.080 --> 00:01:33.240
as a search service or even using something like Firebase is an example of a serverless

20
00:01:33.240 --> 00:01:34.240
approach.

21
00:01:34.240 --> 00:01:35.400
So that's one part, right?

22
00:01:35.400 --> 00:01:38.760
It's the mindset of just doing the simplest thing possible and getting rid of all the

23
00:01:38.760 --> 00:01:40.720
maintenance effort.

24
00:01:40.720 --> 00:01:46.280
But the other perspective on it is serverless is about using Lambda and API gateway and

25
00:01:46.280 --> 00:01:53.300
step functions and in order to take that approach, I mean, that is definitely a serverless approach

26
00:01:53.300 --> 00:01:57.640
because you're not managing any servers, but there's a trade offs there, right?

27
00:01:57.640 --> 00:02:00.280
You still have to understand how they work together.

28
00:02:00.280 --> 00:02:01.280
What are their limits?

29
00:02:01.280 --> 00:02:04.720
What are the failure modes and how do you fit them all together to make a coherent system

30
00:02:04.720 --> 00:02:09.240
that you can sustain and is going to be robust?

31
00:02:09.240 --> 00:02:13.980
So then in that case, thank you so much to think about like, how do you do deployment?

32
00:02:13.980 --> 00:02:17.760
How do you do security and identity and access management?

33
00:02:17.760 --> 00:02:20.680
How are you going to do local development?

34
00:02:20.680 --> 00:02:21.820
What about observability?

35
00:02:21.820 --> 00:02:24.120
What about infrastructure as code?

36
00:02:24.120 --> 00:02:26.180
Where do you store your secrets?

37
00:02:26.180 --> 00:02:30.200
You know, you get the idea where there's a lot of considerations.

38
00:02:30.200 --> 00:02:33.200
That's not everything that you have to think about.

39
00:02:33.200 --> 00:02:38.680
So it's not necessarily, depending on your perspective on serverless, I guess the answer

40
00:02:38.680 --> 00:02:41.240
is going to be different, right?

41
00:02:41.240 --> 00:02:46.200
And I think it also depends what kind of startup you are and what kind of mode you're in and

42
00:02:46.200 --> 00:02:49.080
what your goals are.

43
00:02:49.080 --> 00:02:50.560
So that's the first thing.

44
00:02:55.040 --> 00:03:00.800
Yeah, I would say maybe we'll talk a little bit more about this later on during the episode, but I will say there is also a little bit of perspective of cost where to be serverless,

45
00:03:00.800 --> 00:03:02.320
it needs to scale to zero.

46
00:03:02.320 --> 00:03:08.840
So that can be another thing that might be advantageous depending on the circumstances.

47
00:03:13.800 --> 00:03:19.220
Yeah, that's a good point because some of these approaches, like with the third party services, sometimes you have higher cost considerations with Auth0 and other, they can be quite expensive

48
00:03:19.220 --> 00:03:20.220
in certain cases.

49
00:03:20.220 --> 00:03:21.640
So you do have to think about that.

50
00:03:21.640 --> 00:03:26.720
And unfortunately, it's a dilemma that startups will find themselves in where they feel they

51
00:03:26.720 --> 00:03:32.800
have, they might have no budget and they might have time, but do you want to spend your precious

52
00:03:32.800 --> 00:03:38.240
time assembling lots of disparate AWS services or do you want to be focusing on your business

53
00:03:38.240 --> 00:03:40.800
and product market fit?

54
00:03:40.800 --> 00:03:42.780
Yeah, exactly.

55
00:03:42.780 --> 00:03:48.620
So I suppose we can summarize what you just said from the opposite perspective, like when

56
00:03:48.620 --> 00:03:49.880
it's not good.

57
00:03:49.880 --> 00:03:58.900
So if we reiterate over what you just said, basically, I think if you are trying to build

58
00:03:58.900 --> 00:04:05.000
everything on AWS using the serverless services like Lambdas, the function, DynamoDB and so

59
00:04:05.000 --> 00:04:08.060
on, of course there is a learning curve there.

60
00:04:08.060 --> 00:04:12.400
So if you're starting from scratch, that's something that you're not going to acquire

61
00:04:12.400 --> 00:04:13.840
magically the next day.

62
00:04:13.840 --> 00:04:18.280
Like it's going to take you some time to build up the knowledge and the experience with these

63
00:04:18.280 --> 00:04:20.080
particular systems.

64
00:04:20.080 --> 00:04:24.680
And maybe you're coming from, I don't know, that type of company that has been using something

65
00:04:24.680 --> 00:04:28.840
like Django or Laravel or Express for a long time.

66
00:04:28.840 --> 00:04:34.680
And you already have a set of tools and practices where you can be very, very productive with

67
00:04:34.680 --> 00:04:37.400
these tools.

68
00:04:37.400 --> 00:04:40.200
Maybe it can be good for you to stick with the tools.

69
00:04:40.200 --> 00:04:44.560
Like if you're building a new product and you already have all that knowledge, you can

70
00:04:44.560 --> 00:04:50.000
focus on the business logic and get the product delivered very, very quickly.

71
00:04:50.000 --> 00:04:54.800
So in that case, if you are that kind of a startup, maybe serverless is not good for

72
00:04:54.800 --> 00:04:56.800
you.

73
00:04:56.800 --> 00:05:01.240
Yeah, I agree with that, Luciano.

74
00:05:01.240 --> 00:05:10.680
I would also say, if you're coming from like that Django Laravel world and you know exactly

75
00:05:10.680 --> 00:05:13.040
what scale you're going to reach.

76
00:05:13.040 --> 00:05:20.920
So if you've got a situation where you're not going to have bursty scale, you've got

77
00:05:20.920 --> 00:05:26.880
a fixed limited number of users and the load is going to be pretty even, then that's fine.

78
00:05:26.880 --> 00:05:31.840
Serverless isn't, there's a lot of benefits there, but it's not necessarily simple out

79
00:05:31.840 --> 00:05:32.840
of the box.

80
00:05:32.840 --> 00:05:34.540
You don't get simplicity for free.

81
00:05:34.540 --> 00:05:41.560
And sometimes people on the serverless side of these debates presented as, oh, it's so

82
00:05:41.560 --> 00:05:43.680
easy to get started with.

83
00:05:43.680 --> 00:05:48.100
And all you have to do to create a Lambda function is follow these quick steps.

84
00:05:48.100 --> 00:05:52.320
And then you already have a complete RESTful API up and running.

85
00:05:52.320 --> 00:05:56.720
But the getting started costs and the getting started simplicity factor is just one part

86
00:05:56.720 --> 00:05:57.720
of it.

87
00:05:57.720 --> 00:06:02.400
What you really need to think about is what is the long-term cost of developing, changing

88
00:06:02.400 --> 00:06:04.200
and maintaining a system like that.

89
00:06:04.200 --> 00:06:10.240
So while we were true believers in the world of serverless, we try not to oversell it because

90
00:06:10.240 --> 00:06:11.240
you certainly can.

91
00:06:11.240 --> 00:06:16.520
And you have to understand that there is a cost to understanding how to build services

92
00:06:16.520 --> 00:06:17.520
on AWS.

93
00:06:17.520 --> 00:06:18.520
Absolutely.

94
00:06:18.520 --> 00:06:24.360
And I have seen many companies that they are already struggling to move Monoliths to the

95
00:06:24.360 --> 00:06:28.680
cloud because even just doing that, it's an effort on its own.

96
00:06:28.680 --> 00:06:32.320
So going to serverless is like an additional gear, right?

97
00:06:32.320 --> 00:06:34.760
So you need to change even more.

98
00:06:34.760 --> 00:06:40.640
And sometimes you fail to account what is the cost for the company to do that.

99
00:06:40.640 --> 00:06:46.400
And it gets of course more risky, the more far away from your starting point it is that

100
00:06:46.400 --> 00:06:47.400
particular target.

101
00:06:47.400 --> 00:06:48.400
I agree.

102
00:06:48.400 --> 00:06:49.400
Yeah.

103
00:06:49.400 --> 00:06:50.800
I mean, it's a trade off.

104
00:06:50.800 --> 00:06:57.120
So once you understand that and you're happy to make that investment as you migrate, there's

105
00:06:57.120 --> 00:07:02.120
definitely long-term benefits, but you should go into it with your eyes open.

106
00:07:02.120 --> 00:07:04.360
And maybe with a more gradual approach.

107
00:07:04.360 --> 00:07:10.440
But yeah, let's maybe explore some of the goods, I guess.

108
00:07:10.440 --> 00:07:15.840
Let's say that you are in a position where it makes sense for you to go with serverless.

109
00:07:15.840 --> 00:07:23.000
What kind of benefits do we think as a user of serverless you are going to get?

110
00:07:23.000 --> 00:07:30.360
We already mentioned briefly that the cost can scale to zero, which basically means that

111
00:07:30.360 --> 00:07:32.500
you provision a bunch of infrastructure.

112
00:07:32.500 --> 00:07:35.440
Maybe you are doing an MVP so you don't really have a lot of traffic.

113
00:07:35.440 --> 00:07:39.040
Maybe you have test users that you are onboarding and they will be using the system only for

114
00:07:39.040 --> 00:07:41.880
a little while and give you feedback and that's it.

115
00:07:41.880 --> 00:07:45.920
I think that it's great to use serverless because you are only going to pay for that

116
00:07:45.920 --> 00:07:48.940
short period of time where you're actually using the system.

117
00:07:48.940 --> 00:07:53.680
So you can even afford to try a bunch of different things without being concerned of a very big

118
00:07:53.680 --> 00:07:55.780
upfront investment.

119
00:07:55.780 --> 00:07:57.820
So that's definitely an advantage.

120
00:07:57.820 --> 00:07:58.820
What do you think?

121
00:07:58.820 --> 00:08:01.280
Is there anything else worth mentioning?

122
00:08:01.280 --> 00:08:04.660
Yeah, cost is definitely a good one.

123
00:08:04.660 --> 00:08:10.740
Also in cost, I would say what we really see with serverless is that it gives you a mechanism

124
00:08:10.740 --> 00:08:14.940
to have a low cost for innovation, which is really, really important for startups.

125
00:08:14.940 --> 00:08:22.640
The ability to create complex systems pretty quickly once you understand how the services

126
00:08:22.640 --> 00:08:28.120
work and then refactor them, remove them.

127
00:08:28.120 --> 00:08:31.720
Everything you create is like this immutable infrastructure approach.

128
00:08:31.720 --> 00:08:37.640
So you can create massively scalable systems without having to provision lots of infrastructure.

129
00:08:37.640 --> 00:08:41.600
So you don't have all that upfront racking and stacking costs that you would have with

130
00:08:41.600 --> 00:08:47.960
instances, machines or Kubernetes clusters.

131
00:08:47.960 --> 00:08:54.160
You can really get event-driven systems or web-based systems up and running pretty quickly

132
00:08:54.160 --> 00:08:58.080
once you understand how these things work, but then remove them if they don't work.

133
00:08:58.080 --> 00:09:01.840
And that's really important for startups to be able to iterate quickly.

134
00:09:01.840 --> 00:09:05.280
So that's a really, really big one.

135
00:09:05.280 --> 00:09:10.440
So if you have the skills, you understand how these things work, it's definitely a good

136
00:09:10.440 --> 00:09:13.000
approach to take.

137
00:09:13.000 --> 00:09:16.960
But there's also, I suppose, going back to our first perspective, when we talked about

138
00:09:16.960 --> 00:09:20.040
the definition of serverless, we talked about the two perspectives and the first one wasn't

139
00:09:20.040 --> 00:09:22.320
necessarily AWS focused.

140
00:09:22.320 --> 00:09:26.400
It's like find the cheapest way you can build, you can get up and running.

141
00:09:26.400 --> 00:09:31.400
So if you're using a higher level of abstraction, that can also make it a very good choice for

142
00:09:31.400 --> 00:09:36.400
startups because you're not necessarily going all in on AWS and understanding all how things

143
00:09:36.400 --> 00:09:41.800
work together, but you can use something a bit more with a higher level of abstraction.

144
00:09:41.800 --> 00:09:44.840
And I know in the last episode, we talked a lot about Amplify.

145
00:09:44.840 --> 00:09:45.840
So that's one way.

146
00:09:45.840 --> 00:09:50.960
If you understand the things that Amplify is a good fit for, then why not use that?

147
00:09:50.960 --> 00:09:57.980
There's also other systems like Arc, which is like a simple kind of well thought out

148
00:09:57.980 --> 00:10:01.480
developer experience that hides a lot of the complexity for you and makes the developer

149
00:10:01.480 --> 00:10:07.080
experience a lot more seamless and kind of removes all these moving parts from you.

150
00:10:12.820 --> 00:10:18.400
Yeah, I think this is something we mentioned even in the previous episode that we have seen that AWS is recognizing that there is a need of a lower barrier to entry to all

151
00:10:18.400 --> 00:10:19.400
this ecosystem.

152
00:10:19.400 --> 00:10:27.040
Like AWS has always been a lot like it gives you a lot of control.

153
00:10:27.040 --> 00:10:32.180
If you understand the details, you can do a lot of things that are actually very...

154
00:10:32.180 --> 00:10:36.240
Give you a lot of powers, but it takes a while to get to that level of understanding.

155
00:10:36.240 --> 00:10:42.680
And with Amplify, I think AWS is recognizing that not everyone wants to start at that point.

156
00:10:42.680 --> 00:10:44.920
Maybe they need an easier way to get started.

157
00:10:44.920 --> 00:10:49.760
Maybe they need to be productive very quickly, but then they also give you ways to go back

158
00:10:49.760 --> 00:10:54.980
to the roots of every single system and get that control back after you have started.

159
00:10:54.980 --> 00:10:56.980
So maybe Amplify is a good trade off.

160
00:10:56.980 --> 00:10:59.940
If you don't have all the skills, you can get started.

161
00:10:59.940 --> 00:11:04.560
And then later on, when you feel you are more confident, you can start to use other things

162
00:11:04.560 --> 00:11:11.780
or export Amplify to CDK and work with the services directly.

163
00:11:11.780 --> 00:11:15.220
And we're kind of assuming, I guess, Luciano, that we're always dealing with kind of crowd

164
00:11:15.220 --> 00:11:19.680
applications and web based front ends and maybe mobile front end with an API behind

165
00:11:19.680 --> 00:11:20.680
it.

166
00:11:20.680 --> 00:11:25.080
You're talking about like a REST API, GraphQL, some database in the background.

167
00:11:25.080 --> 00:11:27.700
What if it's a different kind of ecosystem you're involved in?

168
00:11:27.700 --> 00:11:33.300
Like you're building at IoT devices and you need infrastructure to support that, or you

169
00:11:33.300 --> 00:11:37.840
have some sort of machine learning algorithm and you're building a service on top of that.

170
00:11:37.840 --> 00:11:42.900
Not everything is API driven and front end driven.

171
00:11:42.900 --> 00:11:48.920
How does the serverless equation fit into those classes of startup?

172
00:11:55.780 --> 00:12:02.420
Yeah, I think if we stick to that definition of serverless where you are basically using services that are most appropriate for your use case, I think AWS has a lot of services

173
00:12:02.420 --> 00:12:04.100
that can help you out.

174
00:12:04.100 --> 00:12:10.260
For instance, in the case of IoT, you have all sorts of different services, even to provision

175
00:12:10.260 --> 00:12:15.940
the different devices to update them, to keep them in sync or in a network where they can

176
00:12:15.940 --> 00:12:18.620
talk to each other.

177
00:12:18.620 --> 00:12:22.920
So definitely you are going to have big advantages in picking that option because otherwise you

178
00:12:22.920 --> 00:12:27.280
probably are on your own to rebuild all this infrastructure yourself.

179
00:12:27.280 --> 00:12:33.380
And similarly for machine learning, maybe not my best area of expertise, but I know

180
00:12:33.380 --> 00:12:39.220
that there are plenty of tools and services in AWS to basically satisfy all the different

181
00:12:39.220 --> 00:12:44.300
needs that you can have in terms of AI and machine learning.

182
00:12:44.300 --> 00:12:49.340
So if you're doing something that is standard enough, I'm going to say probably you can

183
00:12:49.340 --> 00:12:55.980
just use something off the shelf like that rather than building from zero your own platform.

184
00:12:55.980 --> 00:12:59.380
Yeah, I could definitely testify to that.

185
00:12:59.380 --> 00:13:06.860
Having worked with a startup previously that had developed an idea around IoT devices and

186
00:13:06.860 --> 00:13:12.140
the machine learning algorithm, and it was actually astonishing for both me and for them

187
00:13:12.140 --> 00:13:18.940
how quick it was to be able to productionize, I suppose, a prototype that wasn't running

188
00:13:18.940 --> 00:13:25.700
in AWS, bring it into AWS with AWS IoT, Lambda functions, DynamoDB, and machine learning

189
00:13:25.700 --> 00:13:26.700
all together.

190
00:13:26.700 --> 00:13:32.780
I mean, a couple of years ago, this would have been a project that ran into months or

191
00:13:32.780 --> 00:13:39.000
years, but in the world of AWS IoT and things like SageMaker, it's dramatically reduced

192
00:13:39.000 --> 00:13:42.100
the amount of effort you have to put in.

193
00:13:42.100 --> 00:13:43.200
Okay.

194
00:13:43.200 --> 00:13:48.920
Maybe just to close this episode off, let's try to explore another final question, which

195
00:13:48.920 --> 00:13:55.520
maybe some of you might have, which is what if you don't have the experience yet to go

196
00:13:55.520 --> 00:14:01.660
with serverless, but you see a long-term advantage in going with it because we described a bunch

197
00:14:01.660 --> 00:14:07.460
of pros of this approach, and maybe you see that there is a lot of value in some of these

198
00:14:07.460 --> 00:14:09.260
things that we mentioned.

199
00:14:09.260 --> 00:14:11.820
So what can you do?

200
00:14:11.820 --> 00:14:16.340
On one side, we said it's good for you to stick with what you know and be productive.

201
00:14:16.340 --> 00:14:19.620
On the other side, you might be missing out the benefits of serverless.

202
00:14:19.620 --> 00:14:21.660
So do we have any advice there?

203
00:14:21.660 --> 00:14:22.660
Okay.

204
00:14:22.660 --> 00:14:24.580
Yeah, that's a really good one.

205
00:14:24.580 --> 00:14:32.080
I think the question itself should prompt people to think, okay, what am I optimizing

206
00:14:32.080 --> 00:14:33.080
for here?

207
00:14:33.080 --> 00:14:39.500
Am I trying to get to market quickly with the basic MVP, or am I trying to strategically

208
00:14:39.500 --> 00:14:46.480
select a technology that's going to sustain me for years and allow me to hire developers

209
00:14:46.480 --> 00:14:50.220
in 18 months time who have the right skills to maintain this?

210
00:14:50.220 --> 00:14:51.620
And I think that's a really good one.

211
00:14:51.620 --> 00:14:54.740
It's a really good thing to think about.

212
00:14:54.740 --> 00:15:00.340
And I guess the answer I've kind of alluded to there, if you're willing to make that investment,

213
00:15:00.340 --> 00:15:02.580
you have the funding and you have the time.

214
00:15:02.580 --> 00:15:07.700
Say if you're really going to focus time on building a complete product and you wanted

215
00:15:07.700 --> 00:15:13.060
to have a sustainable, stable technology set of choices underneath it, then absolutely

216
00:15:13.060 --> 00:15:17.960
go for serverless and invest the time in acquiring the skills, especially if you have the funding.

217
00:15:17.960 --> 00:15:22.740
If you're budget constrained, you're bootstrapping and you're trying to get something out there

218
00:15:22.740 --> 00:15:28.340
to onboard users quickly, and you're happy to iterate and change the technology over

219
00:15:28.340 --> 00:15:32.700
time, then go with the technology you know.

220
00:15:32.700 --> 00:15:33.700
Absolutely.

221
00:15:33.700 --> 00:15:34.700
What would you say?

222
00:15:34.700 --> 00:15:38.300
Is there any other way you'd respond to that question?

223
00:15:38.300 --> 00:15:40.980
Because I think that's probably the most important question we're covering.

224
00:15:46.260 --> 00:15:52.040
Yeah, I think there might be another case where maybe you are a company that builds multiple products and you already have a bunch of different products in the market.

225
00:15:52.040 --> 00:15:56.520
If you're in that position, probably you can afford to experiment a little bit because

226
00:15:56.520 --> 00:16:01.100
it's always going to happen that in an existing product, you need to build a new feature.

227
00:16:01.100 --> 00:16:03.740
Why not trying to build that feature?

228
00:16:03.740 --> 00:16:07.660
If it's not the primary feature, of course, with something like serverless, maybe you're

229
00:16:07.660 --> 00:16:13.700
going to try to run that particular functionality in a Lambda, store some data in DynamoDB.

230
00:16:13.700 --> 00:16:18.560
And that way you can have a very low risk way of starting to try out these technologies.

231
00:16:18.560 --> 00:16:23.020
And probably at that point, you can see a lot more clearly whether that technology is

232
00:16:23.020 --> 00:16:25.460
going to give you benefits or not.

233
00:16:25.460 --> 00:16:32.700
Also people in the team, they can start to recognize if they feel more productive in

234
00:16:32.700 --> 00:16:36.020
using these technologies, if they can ship faster.

235
00:16:36.020 --> 00:16:40.060
And at that point, it's so new to decide, okay, I want to invest more or maybe my next

236
00:16:40.060 --> 00:16:45.540
product I'm going to try to build this from scratch using what I learned from these experiments.

237
00:16:45.540 --> 00:16:49.860
So that can be another way, but I suppose that makes more sense for more established

238
00:16:49.860 --> 00:16:56.180
companies that are seeing a longer term return on this kind of approach.

239
00:16:56.180 --> 00:17:00.700
And they want to de-risk, I suppose, jumping straight into serverless.

240
00:17:00.700 --> 00:17:03.820
Yep, yep, good call.

241
00:17:03.820 --> 00:17:04.820
Okay.

242
00:17:04.820 --> 00:17:08.940
And with that, I think we have covered enough for this episode.

243
00:17:08.940 --> 00:17:12.360
So thank you so much for being with us today.

244
00:17:12.360 --> 00:17:13.980
Please give us your feedback.

245
00:17:13.980 --> 00:17:19.760
Feel free to leave us comments or to reach out to us on Twitter or LinkedIn.

246
00:17:19.760 --> 00:17:24.400
And if you have any question that you would like us to address for the next episode, send

247
00:17:24.400 --> 00:17:28.380
it our way and we'll try our best to reply that question.

248
00:17:28.380 --> 00:17:29.820
And with that, thanks again.

249
00:17:29.820 --> 00:17:31.500
We'll see you in the next episode.

250
00:17:31.500 --> 00:18:01.100
Bye.

251
00:18:01.500 --> 00:18:31.100
Bye.

252
00:18:31.500 --> 00:18:47.100
Bye.
