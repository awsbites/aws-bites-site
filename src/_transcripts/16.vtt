WEBVTT

1
00:00:00.000 --> 00:00:09.360
Hello and welcome to AWS Bites, the weekly show with bite-sized episodes where we answer

2
00:00:09.360 --> 00:00:11.640
your questions about AWS.

3
00:00:11.640 --> 00:00:14.520
My name is Eoin and I'm joined by Luciano.

4
00:00:14.520 --> 00:00:17.760
Before we get started, make sure you give us a follow and subscribe so you can be notified

5
00:00:17.760 --> 00:00:20.320
when the next episode goes live.

6
00:00:20.320 --> 00:00:24.120
Today's question is, what are the pros and cons of CDK?

7
00:00:24.120 --> 00:00:28.600
And as always, let's start off by talking about definitions.

8
00:00:28.600 --> 00:00:30.160
What is CDK?

9
00:00:38.280 --> 00:00:44.360
Yeah, CDK is a relatively new tool slash service from AWS, which the name actually means Cloud Development Kit and is essentially another way of writing infrastructure as code.

10
00:00:44.360 --> 00:00:51.020
But this time, rather than using a declarative language like JSON or YAML or something similar,

11
00:00:51.020 --> 00:00:56.360
you can actually use real imperative programming languages and many of them are supported,

12
00:00:56.360 --> 00:00:59.640
for instance, TypeScript, Java, C-sharp, Python.

13
00:00:59.640 --> 00:01:02.600
I actually don't know if even Go is supported.

14
00:01:02.600 --> 00:01:07.660
Maybe it's in beta, but yeah, the idea is that you can use probably a language that

15
00:01:07.660 --> 00:01:11.360
you are already comfortable with when you're writing code.

16
00:01:11.360 --> 00:01:12.640
Yeah.

17
00:01:12.640 --> 00:01:15.840
Do you want to tell us how it works?

18
00:01:15.840 --> 00:01:17.340
Yeah.

19
00:01:17.340 --> 00:01:20.760
There's a lot of complexity under the hood and a lot of magic actually at supporting

20
00:01:20.760 --> 00:01:21.760
all those languages.

21
00:01:21.760 --> 00:01:27.120
I know that they've got this project called JSII, which allows, I think they write basically,

22
00:01:27.120 --> 00:01:32.320
write it in TypeScript and then it gets all these other languages get generated.

23
00:01:32.320 --> 00:01:34.840
But yeah, so it's generating cloud formation, as we said.

24
00:01:34.840 --> 00:01:39.040
We talked a lot about cloud formation in the past and how important cloud formation is

25
00:01:39.040 --> 00:01:42.040
as a service if you're using AWS.

26
00:01:42.040 --> 00:01:45.760
But CDK gives you layers of abstraction on top of it.

27
00:01:45.760 --> 00:01:51.720
So the question becomes how much of an abstraction do you want to have on top of your cloud formation?

28
00:01:51.720 --> 00:01:52.720
Good resources.

29
00:01:52.720 --> 00:01:57.720
Because cloud formation can be very verbose, but it's also very clear and declarative in

30
00:01:57.720 --> 00:01:59.280
some ways.

31
00:01:59.280 --> 00:02:03.840
When you're reading a JSON or YAML file, you can get very comfortable with that and it's

32
00:02:03.840 --> 00:02:06.400
very easy to see what you're about to deploy.

33
00:02:06.400 --> 00:02:08.160
Cloud formation will give you a number of levels.

34
00:02:08.160 --> 00:02:12.560
So there's these concept of L1 and L2 constructs.

35
00:02:12.560 --> 00:02:19.880
So an L1 or level one construct is basically a programmatic object oriented wrapper around

36
00:02:19.880 --> 00:02:21.400
all of these cloud formation resources.

37
00:02:21.400 --> 00:02:26.520
So you have these classes that would provide that begin with CFN.

38
00:02:26.520 --> 00:02:33.480
And those are really just a typed layer on top of the resources you're going to generate.

39
00:02:33.480 --> 00:02:38.040
Then you've got these L2 patterns, which are higher levels of abstraction.

40
00:02:38.040 --> 00:02:43.720
And those are like CDK classes that will give you same defaults for a lot of use cases.

41
00:02:43.720 --> 00:02:47.520
So you can create an SQS queue, but you don't have to declare all of the properties.

42
00:02:47.520 --> 00:02:50.720
It will give you some sensible defaults.

43
00:02:50.720 --> 00:02:57.680
And then beyond that, you've got higher level patterns and constructs that can be whole

44
00:02:57.680 --> 00:02:59.680
applications even.

45
00:02:59.680 --> 00:03:05.840
They're groups of cloud formation resources with lots of defaults, some configurability,

46
00:03:05.840 --> 00:03:11.240
but the idea about those is that they're kind of patterns that allows you to deploy a lot

47
00:03:11.240 --> 00:03:15.240
of resources with a couple of lines of code.

48
00:03:15.240 --> 00:03:21.200
And that'll lead us into, I guess, some of the advantages and disadvantages of CDK because

49
00:03:21.200 --> 00:03:26.200
people who are experienced with lots of abstractions in various different programming paradigms

50
00:03:26.200 --> 00:03:31.680
over numbers of decades will understand that abstractions don't always come for free.

51
00:03:31.680 --> 00:03:33.200
So let's go through the pros and cons.

52
00:03:33.200 --> 00:03:34.820
That's what we're here to talk about.

53
00:03:34.820 --> 00:03:38.600
What do you think are some of the advantages with CDK Luciano?

54
00:03:38.600 --> 00:03:44.880
I suppose the most obvious ones, you're probably getting that already, are that if you are

55
00:03:44.880 --> 00:03:49.920
already comfortable with a programming language because you are mostly writing code most of

56
00:03:49.920 --> 00:03:52.880
your time, you are already in a way good to go.

57
00:03:52.880 --> 00:03:55.760
You don't need to learn anything new.

58
00:03:55.760 --> 00:03:59.400
Of course, you need to learn what are the classes that you need to use to build different

59
00:03:59.400 --> 00:04:00.400
things.

60
00:04:00.400 --> 00:04:03.680
The different levels that you described are not so obvious at first.

61
00:04:03.680 --> 00:04:07.680
So there is still, of course, a learning curve, but at least you don't have to learn an entirely

62
00:04:07.680 --> 00:04:08.680
new language.

63
00:04:08.680 --> 00:04:13.660
Like for instance, when I started doing Terraform, I needed to learn all the syntax and the nitty

64
00:04:13.660 --> 00:04:18.880
gritty details of HCL, the AshuCorp language.

65
00:04:18.880 --> 00:04:25.720
And that sometimes is a little bit of a barrier that you can avoid with something like CDK.

66
00:04:25.720 --> 00:04:31.680
Also we mentioned that there are all the different levels and these levels exist for what you

67
00:04:31.680 --> 00:04:34.280
get out of the box from AWS.

68
00:04:34.280 --> 00:04:40.960
Like if you start to use CDK, but there are also third party patterns that you can just

69
00:04:40.960 --> 00:04:45.220
use, you can search your line and you can download the ones that you think they make

70
00:04:45.220 --> 00:04:47.020
the most sense for you.

71
00:04:47.020 --> 00:04:51.200
And you can even avail of work that other people are doing, just bringing it into your

72
00:04:51.200 --> 00:04:54.880
project and you are more or less, let's say, good to go.

73
00:04:54.880 --> 00:04:58.700
Probably we'll spend a little few words later on that.

74
00:05:03.800 --> 00:05:07.180
And I suppose another great thing is that because you are using all the languages that are supported are typed languages.

75
00:05:07.180 --> 00:05:12.580
And because of that, you get a very good level of auto-completion and type checking.

76
00:05:12.580 --> 00:05:19.140
So for instance, if you are writing, let's say a low level construct, like a CFN one,

77
00:05:19.140 --> 00:05:22.300
when you start to initialize the classes, you're going to get good auto-complete.

78
00:05:22.300 --> 00:05:24.200
You can immediately see all the properties.

79
00:05:24.200 --> 00:05:26.560
You can see documentation in line.

80
00:05:26.560 --> 00:05:32.800
So I feel that that flow that I used to have when I was doing a cloud formation or Terraform

81
00:05:32.800 --> 00:05:37.840
where you always have on one page of the documentation, on the other page, your editor, or maybe two

82
00:05:37.840 --> 00:05:41.720
different screens and you're always looking at two different places to try to reconcile

83
00:05:41.720 --> 00:05:42.720
them.

84
00:05:42.720 --> 00:05:47.040
Now it's a little bit more streamlined, like in one window, you are going to have everything

85
00:05:47.040 --> 00:05:53.260
you need to figure out like what kind of properties you need to set and where.

86
00:05:53.260 --> 00:05:58.600
When I started using CDK, when it first came out and it was in beta and I opened up, I

87
00:05:58.600 --> 00:06:03.160
think VS code and started writing TypeScript and I got all this auto-completion and type

88
00:06:03.160 --> 00:06:06.640
checking and immediate error feedback on what properties were missing.

89
00:06:06.640 --> 00:06:11.200
It was like, you know, it's something we're used to for developing code, but with cloud

90
00:06:11.200 --> 00:06:14.760
formation, even then, I don't know if CFN lint was available.

91
00:06:14.760 --> 00:06:18.560
It's deploying, getting feedback on cloud formation was typically, you know, something

92
00:06:18.560 --> 00:06:24.760
you needed to deploy in order to get, and this, that was a big productivity win.

93
00:06:24.760 --> 00:06:26.920
So it just, yeah, that was really good for me.

94
00:06:26.920 --> 00:06:32.600
And then other things as well, like IAM policy generation, have you found that like with

95
00:06:32.600 --> 00:06:39.600
CDK, you spend much less time hand crafting and tuning policies and figuring out why you're

96
00:06:39.600 --> 00:06:46.520
getting malformed, you policy document legacy particles failed, these kinds of errors.

97
00:06:46.520 --> 00:06:47.520
Yeah.

98
00:06:47.520 --> 00:06:52.400
And I really like, actually, this is a really good point because basically what you can

99
00:06:52.400 --> 00:06:55.120
do, I'm going to give a practical example.

100
00:06:55.120 --> 00:06:59.920
For instance, you define an S3 bucket and then you want to allow a particular EC2 instance

101
00:06:59.920 --> 00:07:04.560
to be able to read and write in that particular S3 bucket.

102
00:07:04.560 --> 00:07:09.880
What you will typically do with cloud formation, you create three distinct resources, the bucket,

103
00:07:09.880 --> 00:07:14.720
the EC2 instance, and then you craft your own policy that ties the two together, giving

104
00:07:14.720 --> 00:07:16.080
the right permission.

105
00:07:16.080 --> 00:07:20.800
With CDK, because you have this idea of kind of an object oriented approach, what you could

106
00:07:20.800 --> 00:07:26.680
say is you use the object that in your code describes the S3 bucket and you just say dot

107
00:07:26.680 --> 00:07:32.000
grant read and write to and pass a particular instance reference.

108
00:07:32.000 --> 00:07:34.440
And that will automatically generate a policy for you.

109
00:07:34.440 --> 00:07:39.080
So it's a little bit of abstraction, but I think it feels a lot more readable and it's

110
00:07:39.080 --> 00:07:44.320
easier to get the link between the two resources right because you don't really have to manually

111
00:07:44.320 --> 00:07:45.320
reference things.

112
00:07:45.320 --> 00:07:50.480
You just essentially let the autocomplete guide you and it will most likely do the right

113
00:07:50.480 --> 00:07:51.600
thing for you.

114
00:07:51.600 --> 00:07:56.400
So that's something I really liked and I think even when I gave that code to somebody else

115
00:07:56.400 --> 00:08:02.240
that wasn't familiar with either cloud formation or CDK, they immediately realized, okay, you

116
00:08:02.240 --> 00:08:07.460
are creating this instance, you are creating this bucket, and then you are granting permissions

117
00:08:07.460 --> 00:08:10.700
for the instance to read and write in that bucket.

118
00:08:10.700 --> 00:08:14.680
So I think that's another very clear advantage.

119
00:08:22.160 --> 00:08:26.680
There is one thing I like as well, which is that with cloud formation, you have the concept of change sets and it has a lot of features like change sets and stack sets, but change

120
00:08:26.680 --> 00:08:31.720
sets allow you to kind of make a plan for what you're about to deploy, inspect that

121
00:08:31.720 --> 00:08:34.400
plan and then apply it in separate steps.

122
00:08:34.400 --> 00:08:39.080
And Terraform also has this concept with Terraform plans.

123
00:08:39.080 --> 00:08:42.960
But change sets don't tend to be used very commonly.

124
00:08:42.960 --> 00:08:46.880
I think I heard somewhere recently saying that some ridiculously high percentage of

125
00:08:46.880 --> 00:08:52.920
cloud formation in the world is deployed using serverless framework, like 80 or 90%.

126
00:08:52.920 --> 00:08:57.080
And serverless framework doesn't use change sets by default.

127
00:08:57.080 --> 00:08:59.920
I think it's a plugin for it, but it tends not to get used.

128
00:08:59.920 --> 00:09:03.200
So people tend to just deploy.

129
00:09:03.200 --> 00:09:05.200
But CDK is very much built around change sets.

130
00:09:05.200 --> 00:09:09.480
So you create a change set, it allows you to inspect and verify.

131
00:09:09.480 --> 00:09:13.360
So it has this synthesis process, which allows you to see the template.

132
00:09:13.360 --> 00:09:18.720
Then when you're deploying, you can see the change set and you can verify the change set,

133
00:09:18.720 --> 00:09:21.200
particularly the security changes before you deploy.

134
00:09:21.200 --> 00:09:23.080
So this is nice.

135
00:09:23.080 --> 00:09:27.600
It's allowing you to follow best practices by default rather than having to add that

136
00:09:27.600 --> 00:09:28.600
in yourself.

137
00:09:33.960 --> 00:09:38.520
Yeah, this is something I used to do a lot with Terraform where I was prototyping something and even before deploying, I would do like a Terraform diff, which is pretty much the

138
00:09:38.520 --> 00:09:39.920
same thing we are describing.

139
00:09:39.920 --> 00:09:43.040
And you will get a list of, okay, this is what is going to change if you actually want

140
00:09:43.040 --> 00:09:44.760
to deploy right now.

141
00:09:44.760 --> 00:09:50.160
Maybe I didn't want to deploy, it was just a good sanity check to see, okay, I'm really

142
00:09:50.160 --> 00:09:55.240
going in the right direction where I am describing the changes that I want to happen in the infrastructure.

143
00:09:55.240 --> 00:10:00.360
And now with CDK, you can just do CDK diff, I think is the command, and it will give you

144
00:10:00.360 --> 00:10:05.800
like a list of, okay, at this stage, if you apply this, this is what's going to change

145
00:10:05.800 --> 00:10:08.760
compared to your current infrastructure.

146
00:10:08.760 --> 00:10:12.960
And I think that that's really powerful and really useful, especially if you are starting

147
00:10:12.960 --> 00:10:17.880
to use infrastructure as code, it will give you a lot more confidence when you are writing

148
00:10:17.880 --> 00:10:22.000
for the first time that you are going in the right direction.

149
00:10:22.000 --> 00:10:24.000
Yeah, yeah.

150
00:10:24.000 --> 00:10:29.900
One of the other things that is kind of really rising to the fore with CDK is how easy it

151
00:10:29.900 --> 00:10:31.840
can make to do pipelines.

152
00:10:31.840 --> 00:10:35.140
How easy it can make doing pipelines.

153
00:10:35.140 --> 00:10:40.160
So if you use CodePipeline and CodeBuild, CodeDeploy, all these services, creating pipelines

154
00:10:40.160 --> 00:10:45.880
for them with CloudFormation is hard work and maintaining those pipelines is really

155
00:10:45.880 --> 00:10:47.080
hard work.

156
00:10:47.080 --> 00:10:52.960
And I think pipelines are the first, building CI-CD stacks, this is one of the first things

157
00:10:52.960 --> 00:10:54.680
I ever used CDK for.

158
00:10:54.680 --> 00:10:59.160
And I still use it very commonly because it just makes that process much easier when you

159
00:10:59.160 --> 00:11:02.360
have particularly dynamic behavior in your pipelines.

160
00:11:02.360 --> 00:11:06.980
You know, the stacks you are deploying change, the number of steps in your pipeline change,

161
00:11:06.980 --> 00:11:12.780
you want to be able to replicate a deployment pipeline for a dev environment or for a new

162
00:11:12.780 --> 00:11:16.240
set of accounts, CDK really facilitates that.

163
00:11:16.240 --> 00:11:21.480
And beyond that, if you are really going all in on CDK and you are using L2 constructs

164
00:11:21.480 --> 00:11:27.080
for creating Lambda functions and all of your resources for each service in your application

165
00:11:27.080 --> 00:11:35.080
and multiple stacks within your application, it has a pattern of, a pattern, so it's kind

166
00:11:35.080 --> 00:11:38.980
of level three constructs for CDK pipelines.

167
00:11:38.980 --> 00:11:45.040
And this will basically create pipelines out of the box with very good defaults that would

168
00:11:45.040 --> 00:11:48.800
deploy all of the stacks in your application.

169
00:11:48.800 --> 00:11:50.700
And so this is really good.

170
00:11:50.700 --> 00:11:52.340
It means you have to go all in on CDK.

171
00:11:52.340 --> 00:11:55.960
That's the only thing, but it is a really nice advantage.

172
00:11:55.960 --> 00:12:00.480
And CDK pipelines then are also self-mutating.

173
00:12:00.480 --> 00:12:05.320
So if you have got the pipeline code in the same repo as all of your application stacks,

174
00:12:05.320 --> 00:12:10.700
then you commit to a branch or trigger a release, then when the pipeline runs, it will first

175
00:12:10.700 --> 00:12:14.080
make sure that the pipeline itself is running the latest version of that code, and then

176
00:12:14.080 --> 00:12:15.800
it will deploy everything else.

177
00:12:15.800 --> 00:12:18.160
So it's really nice from a change management point of view.

178
00:12:18.160 --> 00:12:22.680
You can imagine a PR that introduces a new service into your application and it includes

179
00:12:22.680 --> 00:12:24.900
the pipeline changes as well.

180
00:12:24.900 --> 00:12:30.000
So it makes it really easy from a code review, collaboration point of view.

181
00:12:30.000 --> 00:12:31.580
So that's really nice.

182
00:12:31.580 --> 00:12:36.980
Another thing that is probably relevant to what you just said is the concept of assets

183
00:12:36.980 --> 00:12:42.720
that exist in CDK, which I think is really clever and can simplify a little bit your

184
00:12:42.720 --> 00:12:44.720
life in many use cases.

185
00:12:44.720 --> 00:12:50.200
For instance, if you use, I don't know, something like Terraform, every time you need to, let's

186
00:12:50.200 --> 00:12:55.360
say, deploy a Lambda or a container in ECS, you need to, of course, to specify, okay,

187
00:12:55.360 --> 00:12:57.440
where is the source code for that?

188
00:12:57.440 --> 00:13:01.280
And generally that means, okay, I need to create an artifact, publish it to S3 or to

189
00:13:01.280 --> 00:13:05.800
a container registry, and then I can reference that particular artifact in my infrastructure

190
00:13:05.800 --> 00:13:06.800
as code.

191
00:13:06.800 --> 00:13:13.280
With CDK, there is a way that you can abstract all that work, and if you have the code collocated

192
00:13:13.280 --> 00:13:18.520
with your infrastructure as code, you can just reference assets in the same project.

193
00:13:18.520 --> 00:13:23.480
And then behind the scene, that asset abstraction will, for instance, deploy the source code

194
00:13:23.480 --> 00:13:28.720
of a Lambda in S3 or use a container registry to deploy the source code for a container.

195
00:13:28.720 --> 00:13:34.440
And they would even do the build phase within the context of CDK.

196
00:13:34.440 --> 00:13:38.380
So it's a little bit more streamlined process where you don't end up using different tools

197
00:13:38.380 --> 00:13:44.240
and different steps of a pipeline to just deploy your changes, which can be nice.

198
00:13:44.240 --> 00:13:47.880
I guess there are pros and cons, but it can be nice, especially if you're working on a

199
00:13:47.880 --> 00:13:52.560
small project because it makes your life easier.

200
00:13:52.560 --> 00:13:57.000
But now that we've talked a lot about the goods, what do we have to say about that?

201
00:13:57.000 --> 00:14:00.760
Do you want to mention something on that one?

202
00:14:00.760 --> 00:14:07.240
Yeah, there's quite a lot to cover here.

203
00:14:07.240 --> 00:14:10.600
In my own experience, one of the big things is that there hasn't been a lot of consistency

204
00:14:10.600 --> 00:14:16.600
in it, especially when you're talking about some of the L2 constructs.

205
00:14:16.600 --> 00:14:19.740
Not every service in AWS has L2 constructs.

206
00:14:19.740 --> 00:14:26.840
So I remember trying to deploy batch and you had to use the L1 constructs.

207
00:14:26.840 --> 00:14:33.800
So sometimes it falls a little bit behind the CloudFormation and it takes time for those

208
00:14:33.800 --> 00:14:35.920
L2 constructs to emerge.

209
00:14:35.920 --> 00:14:41.880
But I suppose one of the main things, if we're looking at disadvantages of CDK and approaches

210
00:14:41.880 --> 00:14:48.200
like that, is that this is an abstraction layer and abstractions should always be treated

211
00:14:48.200 --> 00:14:51.000
with a decent amount of caution.

212
00:14:51.000 --> 00:14:56.160
If you look at object relational mapping as an example of that, there's always a price

213
00:14:56.160 --> 00:14:59.120
to pay for abstractions.

214
00:14:59.120 --> 00:15:02.920
One of the things then is if you don't understand the details of what is being generated, this

215
00:15:02.920 --> 00:15:04.640
is a dangerous thing.

216
00:15:04.640 --> 00:15:11.360
So if you've got a client-side application that's making decisions for you about the

217
00:15:11.360 --> 00:15:15.160
resources that would be deployed on your cloud.

218
00:15:15.160 --> 00:15:22.860
And if you're using this as a way of escaping, getting the understanding of what you're deploying

219
00:15:22.860 --> 00:15:25.000
in the cloud, that's a dangerous thing, right?

220
00:15:25.000 --> 00:15:32.440
Because you can really end up having performance or cost or other unexpected behaviors emerging

221
00:15:32.440 --> 00:15:33.440
from what you're deploying.

222
00:15:33.440 --> 00:15:39.300
So there's a couple of cases where CDK is really good, but I wouldn't say it's good

223
00:15:39.300 --> 00:15:44.800
if you're just coming at it from a beginner and using it to completely skip having a good

224
00:15:44.800 --> 00:15:47.880
understanding of what CloudFormation does and what it's doing for you.

225
00:15:47.880 --> 00:15:52.200
I think going back to the episode where we talked about our favorite service, we mentioned

226
00:15:52.200 --> 00:15:54.920
it as one of our top service.

227
00:15:54.920 --> 00:15:57.860
I think it might've been on my number one spot.

228
00:15:57.860 --> 00:15:58.860
There's a reason for that, right?

229
00:15:58.860 --> 00:16:03.060
It's just critical to everything you do and having a predictable deterministic deployments

230
00:16:03.060 --> 00:16:04.060
is really important.

231
00:16:04.060 --> 00:16:07.520
If you don't understand what's being generated, you might lose that.

232
00:16:07.520 --> 00:16:08.520
Absolutely.

233
00:16:08.520 --> 00:16:12.440
So yeah, I can't emphasize that enough, right?

234
00:16:12.440 --> 00:16:15.800
So it's important to go in with your eyes open.

235
00:16:15.800 --> 00:16:19.240
So we have seen a lot of change as well.

236
00:16:19.240 --> 00:16:23.400
I started using it in the beta phase and as you would expect when it went to general release,

237
00:16:23.400 --> 00:16:28.280
there were some breaking changes, but you also have a lot of style changes since then,

238
00:16:28.280 --> 00:16:33.800
even across the version one series and deprecation of methods of doing things.

239
00:16:33.800 --> 00:16:38.600
And recently the last couple of weeks we've had version two come out and I've already

240
00:16:38.600 --> 00:16:42.680
seen a lot of people complain about breaking changes and how it's not ready for general

241
00:16:42.680 --> 00:16:45.720
release and how they have to start redesigning their stacks.

242
00:16:45.720 --> 00:16:49.600
So this is something that's important to clarify.

243
00:16:49.600 --> 00:16:54.360
There's always a trade off with these levels of abstraction.

244
00:16:54.360 --> 00:17:02.320
The other thing that can be quite confusing to new users is that you begin deploying a

245
00:17:02.320 --> 00:17:06.240
CDK application by executing this bootstrap phase.

246
00:17:06.240 --> 00:17:12.160
And it's not immediately obvious what this is for or why you would do it, but you need

247
00:17:12.160 --> 00:17:19.620
to start, I suppose, with a bucket and some things that CDK can use to deploy its resources.

248
00:17:19.620 --> 00:17:24.840
So it needs to prepare sometimes a bucket for assets and it actually now generates an

249
00:17:24.840 --> 00:17:31.000
ECR repository for container images and it'll generate some policies for deployment across

250
00:17:31.000 --> 00:17:32.000
account policies.

251
00:17:32.000 --> 00:17:36.400
And these are all useful things, but when you're deploying your own application stack,

252
00:17:36.400 --> 00:17:39.720
sometimes it's a surprise to see that you need to deploy another stack first in order

253
00:17:39.720 --> 00:17:43.780
to just deploy the stack you're actually targeting.

254
00:17:43.780 --> 00:17:48.420
So that's a bit of complexity and something that's not universally understood.

255
00:17:48.420 --> 00:17:51.560
So I put that down as a disadvantage.

256
00:17:51.560 --> 00:17:55.720
Yeah, actually I'm not sure I understood that so well until now.

257
00:17:55.720 --> 00:17:58.400
So thank you for explaining that to me as well.

258
00:17:58.400 --> 00:18:02.680
I always done the bootstrap phase, but I was a little bit like, okay, whatever, I guess

259
00:18:02.680 --> 00:18:08.480
I have to do this, but it's good to know what actually happens behind the scene, I think.

260
00:18:08.480 --> 00:18:13.840
I have another one, which is something that has been beaten me quite a few times actually.

261
00:18:13.840 --> 00:18:19.360
And that's basically you think about CDK as, okay, this is just code.

262
00:18:19.360 --> 00:18:21.400
I can do whatever I want.

263
00:18:21.400 --> 00:18:27.720
You can write all sorts of business logic in there, loops and if statements and do things

264
00:18:27.720 --> 00:18:32.280
as you would do in any other regular programming language, but sometimes you don't get the

265
00:18:32.280 --> 00:18:33.820
behavior you would expect.

266
00:18:33.820 --> 00:18:38.640
And this is because in reality, what CDK is doing is managing an entire life cycle and

267
00:18:38.640 --> 00:18:43.360
you are defining resources that will need to be provisioned at certain points.

268
00:18:43.360 --> 00:18:48.200
Sometimes you reference resources that might or might not exist at that particular moment

269
00:18:48.200 --> 00:18:52.920
in time and CDK will try to figure out that when you actually try to deploy.

270
00:18:52.920 --> 00:18:57.160
So for instance, one thing that happened to me a few times is that I was trying to read

271
00:18:57.160 --> 00:19:01.760
the content of an SSM variable and decide like a piece of business logic.

272
00:19:01.760 --> 00:19:05.720
If this is the content I'm going to, I don't know, maybe want to provision something else

273
00:19:05.720 --> 00:19:13.980
or I don't know, whatever business logic trying to make the type of resources that I wanted

274
00:19:13.980 --> 00:19:18.140
to provision determined by the value in an SSM parameter.

275
00:19:18.140 --> 00:19:19.320
And that doesn't always work.

276
00:19:19.320 --> 00:19:22.800
I mean, you need to do different things to make it work.

277
00:19:22.800 --> 00:19:26.000
So that was an interesting one.

278
00:19:26.000 --> 00:19:28.520
And it might be confusing why that happened.

279
00:19:28.520 --> 00:19:35.520
So that's a quirk, I would say, of CDK.

280
00:19:35.520 --> 00:19:36.520
There's another thing.

281
00:19:36.520 --> 00:19:43.960
I mean, I think there's a lot of debate in the community and on public discourse around

282
00:19:43.960 --> 00:19:49.460
CDK benefits versus disadvantages.

283
00:19:49.460 --> 00:19:55.000
And one of the things that's cited quite often is, you know, it's not a deterministic deployment

284
00:19:55.000 --> 00:20:00.800
path because if your client code that's generating your cloud formation code changes, that the

285
00:20:00.800 --> 00:20:04.240
cloud formation template can change without you having changed any of the inputs.

286
00:20:04.240 --> 00:20:06.000
So it's not really a deterministic path.

287
00:20:06.000 --> 00:20:11.100
We kind of talked about that when we're dealing with the disadvantage of abstraction.

288
00:20:11.100 --> 00:20:16.220
Another kind of disadvantage that I've seen referred to are the kind of cultural barriers

289
00:20:16.220 --> 00:20:21.860
that it can bring about in an organization or that it fails to deal with.

290
00:20:21.860 --> 00:20:26.260
And if you look at how things have gone over the past few years in cloud and the emergence

291
00:20:26.260 --> 00:20:33.080
of a DevOps culture, what you're trying to do is break down barriers and walls between

292
00:20:33.080 --> 00:20:35.100
operations and developers.

293
00:20:35.100 --> 00:20:39.300
And if you want to be able to create these cross-functional teams that can build it and

294
00:20:39.300 --> 00:20:47.580
run it, I think there's a danger that using programmatic constructs and using imperative

295
00:20:47.580 --> 00:20:53.000
languages can actually rebuild some of those walls because if you look at people who have

296
00:20:53.000 --> 00:21:01.180
great expertise and experience in SysOps and are coming maybe from a background of using

297
00:21:01.180 --> 00:21:06.060
change management tools like Ansible and Chef and Puppet and lots of other tools and even

298
00:21:06.060 --> 00:21:12.900
Terraform, if you start coming along and saying, well, this is better because it uses imperative

299
00:21:12.900 --> 00:21:16.440
languages and imperative languages are real programmatic languages and they're better

300
00:21:16.440 --> 00:21:21.180
because they allow you to do all of this great object-oriented stuff.

301
00:21:21.180 --> 00:21:27.800
I don't think that's a really genuine or helpful argument.

302
00:21:27.800 --> 00:21:30.220
These languages aren't inherently better at all.

303
00:21:30.220 --> 00:21:37.500
They're just more familiar to people who are used to writing software with business logic.

304
00:21:37.500 --> 00:21:39.860
It doesn't necessarily mean that they're a better tool for this job.

305
00:21:39.860 --> 00:21:44.200
In fact, there are plenty of arguments to say that infrastructure should always be declarative.

306
00:21:44.200 --> 00:21:49.420
So I think organizations kind of need to think about this before just going all in because

307
00:21:49.420 --> 00:21:54.040
sometimes what you can actually do is end up isolating people with really good skills

308
00:21:54.040 --> 00:21:59.860
and SysOps experience in your organization by essentially potentially gatekeeping by

309
00:21:59.860 --> 00:22:05.340
saying you now need to have this set of skills in order to be able to do infrastructure in

310
00:22:05.340 --> 00:22:07.180
a modern software application.

311
00:22:07.180 --> 00:22:08.820
And I don't think that's the case.

312
00:22:08.820 --> 00:22:14.780
I think we should be able to have cross-functional teams where we meet people where they are

313
00:22:14.780 --> 00:22:20.860
and understand that sometimes for infrastructure, imposing your set of tools on top of them

314
00:22:20.860 --> 00:22:22.700
isn't necessarily the best thing.

315
00:22:22.700 --> 00:22:27.220
I think that's really important disadvantage that can emerge and something that should

316
00:22:27.220 --> 00:22:30.540
kind of slow people down from just adopting it just for the sake of it because it seems

317
00:22:30.540 --> 00:22:32.700
easier to get started.

318
00:22:32.700 --> 00:22:35.540
Yeah, that's an amazing point.

319
00:22:35.540 --> 00:22:38.500
I totally agree on that.

320
00:22:38.500 --> 00:22:43.380
And it's interesting to see what the industry is going to decide, I suppose, in a few years

321
00:22:43.380 --> 00:22:48.580
if tools like CDK are going to be more mainstream or if eventually we are going to go back to

322
00:22:48.580 --> 00:22:54.540
more declarative approaches maybe, I don't know, with different tools or different languages.

323
00:22:54.540 --> 00:23:01.040
So how do you think people should get started then if they're, I guess, people are going

324
00:23:01.040 --> 00:23:02.220
to come at it from different angles.

325
00:23:02.220 --> 00:23:05.180
Maybe people are using CloudFormation already or using something else.

326
00:23:05.180 --> 00:23:07.260
What's the best place to get started with CDK?

327
00:23:13.540 --> 00:23:18.640
Yeah, I think I would like to suggest a little bit of a backward approach because what we say is that the main advantage of CDK is that it's a level of abstraction and you can deploy

328
00:23:18.640 --> 00:23:24.500
things probably quicker than you will do with just writing CloudFormation from scratch.

329
00:23:24.500 --> 00:23:28.140
But at the same time, we say that there is a danger that if you do that, you're not going

330
00:23:28.140 --> 00:23:33.460
to really know what's going on really at the stack level, like what kind of resources are

331
00:23:33.460 --> 00:23:35.460
you going to end up deploying.

332
00:23:35.460 --> 00:23:38.780
So what I would like to suggest, and maybe this is a little bit of an experiment, so

333
00:23:38.780 --> 00:23:44.140
please let us know if you do that, what do you think about this experiment, is try to

334
00:23:44.140 --> 00:23:47.920
start maybe using CDK almost like CloudFormation.

335
00:23:47.920 --> 00:23:51.960
And by that I mean, use just level one constructs.

336
00:23:51.960 --> 00:23:56.560
So you are literally just writing CloudFormation but in something like TypeScript.

337
00:23:56.560 --> 00:24:00.540
And that will give you a good approach, in my opinion, to the tooling around it and to

338
00:24:00.540 --> 00:24:03.220
like what's really happening in the different phases.

339
00:24:03.220 --> 00:24:06.500
And then from that point on, you can start to avail from the different abstraction.

340
00:24:06.500 --> 00:24:14.060
You can use level one constructs or you can use level two constructs or third party constructs

341
00:24:14.060 --> 00:24:19.880
to use that more level of abstraction where maybe, I don't know, you just want to create

342
00:24:19.880 --> 00:24:22.360
a VPC and you are okay with some of the defaults.

343
00:24:22.360 --> 00:24:26.740
But at that point, you should be comfortable enough knowing where to check to see what's

344
00:24:26.740 --> 00:24:28.800
actually going on behind the scene.

345
00:24:28.800 --> 00:24:30.200
So this is what I'm suggesting.

346
00:24:30.200 --> 00:24:34.980
Start from actually the lowest level and then add abstraction as you feel more and more

347
00:24:34.980 --> 00:24:39.260
comfortable and as you feel you understand what those abstraction are really doing for

348
00:24:39.260 --> 00:24:40.580
you.

349
00:24:40.580 --> 00:24:43.940
So maybe that will give you less surprises, I would say.

350
00:24:43.940 --> 00:24:50.260
Maybe a little bit more painful to reap the benefits of CDK, but also probably a safer

351
00:24:50.260 --> 00:24:53.120
approach and less surprises at the end of the day.

352
00:24:53.120 --> 00:24:54.120
I think that's good.

353
00:24:54.120 --> 00:24:56.120
Yeah, yeah, yeah.

354
00:24:56.120 --> 00:25:01.120
It's good to not jump into these things feed first and go into these high levels of abstraction.

355
00:25:01.120 --> 00:25:02.120
So that makes sense.

356
00:25:02.120 --> 00:25:06.180
And sometimes I've actually used CDK just to generate cloud formation so I can see what

357
00:25:06.180 --> 00:25:09.340
syntax I should be writing manually and then I just create the template.

358
00:25:09.340 --> 00:25:13.520
So you can always use it in that mode of operation as well.

359
00:25:13.520 --> 00:25:15.380
Maybe that's the best of both worlds.

360
00:25:15.380 --> 00:25:20.040
Okay, so I think given that we've finished up on how to get started and we've covered

361
00:25:20.040 --> 00:25:24.340
all the disadvantages and advantages we can think of, it's time to finish up and maybe

362
00:25:24.340 --> 00:25:29.280
ask for your feedback to anybody who's listening to let us know what you think in the comments,

363
00:25:29.280 --> 00:25:33.700
to share it with your colleagues and friends and let us know how you get on with CDK.

364
00:25:33.700 --> 00:25:38.020
And if you've enjoyed the episode, give us a thumbs up as well and follow and subscribe.

365
00:25:38.020 --> 00:25:39.580
So we're going to see you in the next episode.

366
00:25:39.580 --> 00:25:55.420
Thanks very much for listening and goodbye.
