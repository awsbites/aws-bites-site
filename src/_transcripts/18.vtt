WEBVTT

1
00:00:00.000 --> 00:00:09.080
Hello and welcome to AWS Bites, the weekly show with byte-sized episodes where we answer

2
00:00:09.080 --> 00:00:11.340
your questions about AWS.

3
00:00:11.340 --> 00:00:14.180
My name is Eoin and I'm joined by Luciano.

4
00:00:14.180 --> 00:00:18.440
Before we get started, make sure to subscribe to our YouTube channel, give us a follow and

5
00:00:18.440 --> 00:00:21.920
share the episode with others.

6
00:00:21.920 --> 00:00:25.280
Today the question is, how do you move to the cloud?

7
00:00:25.280 --> 00:00:29.600
So that's a pretty fundamental question and probably one that's relevant to more people

8
00:00:29.600 --> 00:00:34.400
than any of the topics we talked about today because most people aren't in the cloud yet.

9
00:00:34.400 --> 00:00:36.080
So Luciano, where would you start?

10
00:00:36.080 --> 00:00:41.080
Yeah, I hate to do this, but I suppose the real answer as in everything technical is

11
00:00:41.080 --> 00:00:43.640
it depends, right?

12
00:00:43.640 --> 00:00:47.440
And the reason why I say that is because of course it depends from, first of all, what

13
00:00:47.440 --> 00:00:48.960
is your starting point?

14
00:00:48.960 --> 00:00:52.680
What do you have today that you want to move to the cloud?

15
00:00:52.680 --> 00:00:57.600
Because depending on the answer to that question, you'll probably find different strategies.

16
00:00:57.600 --> 00:01:02.360
And I suppose things that are important to understand are what kind of architecture do

17
00:01:02.360 --> 00:01:03.360
you have today?

18
00:01:03.360 --> 00:01:10.560
Like, do you have a monolith running on premise maybe or in a virtual private service?

19
00:01:10.560 --> 00:01:15.440
Yeah, how do you deploy that particular monolith?

20
00:01:15.440 --> 00:01:21.040
It could be important to figure out what is an equivalent path to bring that monolith

21
00:01:21.040 --> 00:01:22.580
into the cloud.

22
00:01:22.580 --> 00:01:26.540
But another interesting point for instance is what are the skills of your team?

23
00:01:26.540 --> 00:01:32.240
Do you have anyone in your team that already knows a cloud provider of choice?

24
00:01:32.240 --> 00:01:38.000
Doesn't have to be AWS, but yeah, is there at least one or do you need to hire somebody

25
00:01:38.000 --> 00:01:40.720
that has the skills and needs to train your team?

26
00:01:40.720 --> 00:01:46.520
So I suppose if you try to start to assess what is your current starting point, that

27
00:01:46.520 --> 00:01:51.040
can help you to figure out what is the leap forward that you need to do to move to the

28
00:01:51.040 --> 00:01:52.240
cloud.

29
00:01:52.240 --> 00:01:55.240
But I know that that sounds probably very vague.

30
00:01:55.240 --> 00:02:01.320
I don't know if you have more kind of step-by-step strategy that can help people to figure out

31
00:02:01.320 --> 00:02:05.680
exactly what are the options at least to move to the cloud.

32
00:02:05.680 --> 00:02:07.520
Yeah, you're right.

33
00:02:07.520 --> 00:02:09.520
It depends.

34
00:02:09.520 --> 00:02:13.040
Maybe it's worthwhile to say that for...

35
00:02:13.040 --> 00:02:18.940
Let's try and focus on the most complicated cases or at least the more organizationally

36
00:02:18.940 --> 00:02:20.920
complex situations.

37
00:02:20.920 --> 00:02:25.480
So enterprise workloads where you've got a large enterprise with multiple different workloads

38
00:02:25.480 --> 00:02:27.280
migrating to the public cloud.

39
00:02:27.280 --> 00:02:32.540
If you've got a single workload, it's probably a little bit more tractable as a problem,

40
00:02:32.540 --> 00:02:36.860
but there was a really good blog post and it's about five years old now, I think by

41
00:02:36.860 --> 00:02:41.600
Stephen Orban on the AWS blog and it's called Six Strategies for Migrating Applications to

42
00:02:41.600 --> 00:02:42.600
the Cloud.

43
00:02:42.600 --> 00:02:47.100
And I've seen it referred to over and over and over again over the years and it uses

44
00:02:47.100 --> 00:02:49.960
the six R's for cloud migration.

45
00:02:49.960 --> 00:02:53.680
So if you're looking for a framework, I think this is a really good one because it just

46
00:02:53.680 --> 00:03:01.360
helps you kind of make a system for cloud migration and kind of categorize things.

47
00:03:01.360 --> 00:03:04.360
Really helps you to make sense, especially if you're like some enterprises have hundreds

48
00:03:04.360 --> 00:03:07.000
and hundreds of workloads they're going to migrate to the cloud.

49
00:03:07.000 --> 00:03:08.580
So it's no mean feat.

50
00:03:08.580 --> 00:03:11.540
You got to start somewhere and you need to have some structure around it.

51
00:03:11.540 --> 00:03:21.660
So the six R's are, I think, retire, retain, repurchase, and then you have rehosting, replatforming

52
00:03:21.660 --> 00:03:22.880
and rearchitecture.

53
00:03:22.880 --> 00:03:28.360
So we can go through them, but retire is, okay, you're not going to need this system

54
00:03:28.360 --> 00:03:29.360
anymore.

55
00:03:29.360 --> 00:03:34.360
You can bin it, which is the best outcome because you don't have to worry about it anymore.

56
00:03:34.360 --> 00:03:38.200
And then retain is like, okay, well, we're not really going to get a lot of value out

57
00:03:38.200 --> 00:03:40.540
of this migrating this one to the cloud.

58
00:03:40.540 --> 00:03:42.000
Let's just leave it where it is for now.

59
00:03:42.000 --> 00:03:45.160
It's not hurting anybody, which is also fine, right?

60
00:03:45.160 --> 00:03:49.040
Because if it's providing value and you don't have to move it, it's not going to cost you

61
00:03:49.040 --> 00:03:50.040
anything.

62
00:03:50.040 --> 00:03:55.140
And then repurchase one is another really nice one actually, because it's saying, well,

63
00:03:55.140 --> 00:03:58.540
let's not take any responsibility for this workload anymore.

64
00:03:58.540 --> 00:04:03.000
Let's just buy something in the cloud like a SaaS provider that's going to manage all

65
00:04:03.000 --> 00:04:04.920
this workload for us.

66
00:04:04.920 --> 00:04:07.400
And so these three are actually really good wins.

67
00:04:07.400 --> 00:04:12.380
If you can categorize some of your workloads under those three R's, you've already made

68
00:04:12.380 --> 00:04:14.800
a lot of progress in my view.

69
00:04:14.800 --> 00:04:18.600
But then those three are kind of, I suppose, the cop outs.

70
00:04:18.600 --> 00:04:21.340
The rest of them are actual cloud migrations.

71
00:04:21.340 --> 00:04:25.120
So then you're talking about rehosting, replatforming and rearchitecture.

72
00:04:25.120 --> 00:04:32.360
So rehosting, I guess, is what most people started to do when we started looking at cloud

73
00:04:32.360 --> 00:04:34.760
migration over the years.

74
00:04:34.760 --> 00:04:38.600
That's common now, but it still happens a lot and makes a lot of sense.

75
00:04:38.600 --> 00:04:40.440
It's essentially lift and shift.

76
00:04:40.440 --> 00:04:46.880
So you're taking what runs on-prem and in a data center and moving it into the cloud.

77
00:04:46.880 --> 00:04:49.600
So is there anything we need to say about that?

78
00:04:49.600 --> 00:04:52.720
Or what do you think, Lithianna, before we move on to the others?

79
00:04:57.280 --> 00:04:58.400
Yeah, just think that that one makes sense when, again, you have something a little bit monolithic.

80
00:04:58.400 --> 00:05:03.740
So you have one instance or a VPS and you have maybe an image that contains everything

81
00:05:03.740 --> 00:05:08.280
you need to run that particular application, like operative systems, all the tools and

82
00:05:08.280 --> 00:05:09.280
so on.

83
00:05:09.280 --> 00:05:15.780
If it's like a VMware instance, I think there are many ways to run that directly in AWS.

84
00:05:15.780 --> 00:05:20.240
So you don't even need to do any particular work in reconverting that instance into something

85
00:05:20.240 --> 00:05:21.240
else.

86
00:05:21.240 --> 00:05:28.080
But if you want to be a little bit more native to AWS, you can build an equivalent EC2 image

87
00:05:28.080 --> 00:05:33.280
and then you can just run that application as an EC2 instance.

88
00:05:33.280 --> 00:05:34.280
Yeah.

89
00:05:34.280 --> 00:05:36.200
So in that case, yeah, it's very easy.

90
00:05:36.200 --> 00:05:41.000
You just need to figure out how to rebuild the image if you have to and what is the size

91
00:05:41.000 --> 00:05:47.220
of the instance that you need to run it to basically have all the computing power and

92
00:05:47.220 --> 00:05:51.820
memory that you really need for that particular application.

93
00:05:51.820 --> 00:05:56.680
But yeah, one that I think it's really interesting are probably the other two, actually, the

94
00:05:56.680 --> 00:06:01.600
re-platforming and re-architecture, because those are the ones that could generally become

95
00:06:01.600 --> 00:06:08.320
like much bigger projects in a company, in a cloud migration, a list strategy.

96
00:06:08.320 --> 00:06:16.440
And re-platforming is not necessarily that crazy complicated, but it could be depending

97
00:06:16.440 --> 00:06:17.440
on how you do it.

98
00:06:17.440 --> 00:06:23.000
But the idea is that you basically change, I don't know, your database is still the same

99
00:06:23.000 --> 00:06:26.540
database, but it runs on RDS, for instance.

100
00:06:26.540 --> 00:06:31.120
So you need to change a few things, but they are not really changing the structure of the

101
00:06:31.120 --> 00:06:33.000
entire application.

102
00:06:33.000 --> 00:06:40.000
And I have seen recently a couple of interesting projects that did that, where they moved applications

103
00:06:40.000 --> 00:06:44.080
like classic web framework running in one monolithic approach.

104
00:06:44.080 --> 00:06:51.640
They moved it to either EC2, multiple instances, or maybe using ECS as a way to run the application

105
00:06:51.640 --> 00:06:52.640
as a container.

106
00:06:52.640 --> 00:06:57.080
And it was quite interesting because you could see that immediately there is a benefit there

107
00:06:57.080 --> 00:07:01.240
that you realize, okay, I've been running this particular application as one instance

108
00:07:01.240 --> 00:07:03.200
and it didn't scale so well.

109
00:07:03.200 --> 00:07:07.760
Now that I'm moving it to the cloud and making it a little bit more distributed, I get a

110
00:07:07.760 --> 00:07:13.280
lot of features in terms of scalability, even not just scaling up, but also scaling down

111
00:07:13.280 --> 00:07:15.680
when things cool off a little bit.

112
00:07:15.680 --> 00:07:22.000
And the only caveat I've seen that always bites people off a little bit is make sure

113
00:07:22.000 --> 00:07:23.840
that your application is stateless.

114
00:07:23.840 --> 00:07:29.080
So in one instance of your application, you are not keeping any state, for instance, I

115
00:07:29.080 --> 00:07:37.080
don't know, user session or files in the disk, but you need to use services like Redis for

116
00:07:37.080 --> 00:07:43.280
keeping the sessions, which could be an elastic edge in the case of AWS, or maybe use S3 to

117
00:07:43.280 --> 00:07:49.240
keep persistent files around and everything else maybe in RDS or DynamoDB.

118
00:07:49.240 --> 00:07:50.320
So that's the only-

119
00:07:51.320 --> 00:07:52.320
I guess there's a couple- Yeah, no go ahead.

120
00:07:52.320 --> 00:07:53.320
Sorry, I was just going to say.

121
00:07:53.320 --> 00:07:54.920
I guess there's a couple of other levels.

122
00:07:54.920 --> 00:07:59.200
I mean, even if you look at some on-prem systems, you might have like a hardware load balancer

123
00:07:59.200 --> 00:08:02.480
or a software load balancer, reverse proxies.

124
00:08:02.480 --> 00:08:07.700
There's lots of services that you might be running on-prem, which you could take advantage

125
00:08:07.700 --> 00:08:14.800
of a load balancer in EC2 then instead, and you might use a DNS for a failover and you

126
00:08:14.800 --> 00:08:20.160
might think that up to Route 53 is, so there's a lot of different levels you can go to in

127
00:08:20.160 --> 00:08:23.600
terms of re-platforming when you go to AWS.

128
00:08:23.600 --> 00:08:28.040
And it's just a question of how much work do you want to take on and how much of an

129
00:08:28.040 --> 00:08:32.000
advantage do you want to take of AWS?

130
00:08:32.000 --> 00:08:37.080
And how, I guess, because sometimes you could be just moving, it seems simpler to move exactly

131
00:08:37.080 --> 00:08:40.000
what you have into AWS, but it still takes work.

132
00:08:40.000 --> 00:08:43.720
So is there a lot of value in just moving something that will eventually be replaced?

133
00:08:43.720 --> 00:08:45.340
Yeah, exactly.

134
00:08:45.340 --> 00:08:48.440
And of course you can do that in multiple steps.

135
00:08:48.440 --> 00:08:53.040
You don't have to re-platform everything in one go.

136
00:08:53.040 --> 00:08:59.600
Maybe you can do that in few different releases, but with every release you have a usable application

137
00:08:59.600 --> 00:09:04.720
and you can start to get the benefits of that migration.

138
00:09:04.720 --> 00:09:06.040
And yeah, the next one is re-architecture.

139
00:09:12.740 --> 00:09:17.680
Yeah, it goes back to your question around skills as well, because even if you just lift and shift, it sounds like it's a simple copy paste exercise, but you still have to set

140
00:09:17.680 --> 00:09:23.720
up your AWS accounts and your network infrastructure and your VPNs or your Direct Connect link,

141
00:09:23.720 --> 00:09:33.720
maybe a transit gateway and your IAM roles in SSO and your VPCs and your IP CIDR blocks.

142
00:09:33.720 --> 00:09:39.780
There's so much at the foundation of it, you have to put in place, especially for an enterprise

143
00:09:39.780 --> 00:09:44.040
before you migrate your first workload, really.

144
00:09:44.040 --> 00:09:49.720
So lift and shift, there's a lot of work just to get the first step.

145
00:09:49.720 --> 00:09:50.720
Absolutely.

146
00:09:50.720 --> 00:09:58.280
Yeah, I would say that the next or is re-architecture, which is probably one of the more elaborate

147
00:09:58.280 --> 00:10:04.520
where you are literally redesign and re-architecting the entire workload to be, I suppose, more

148
00:10:04.520 --> 00:10:07.640
suitable to what the cloud can offer.

149
00:10:07.640 --> 00:10:12.080
And that could be, for instance, I don't know, you start to use serverless, but your starting

150
00:10:12.080 --> 00:10:14.480
point was not a serverless application.

151
00:10:14.480 --> 00:10:19.600
So you have to reimagine the entire application from a serverless perspective.

152
00:10:19.600 --> 00:10:23.480
And probably that if it's not like a full rewrite of the application, it's definitely

153
00:10:23.480 --> 00:10:28.520
a huge amount of work where you will have to rewrite and re-architecture many components.

154
00:10:28.520 --> 00:10:34.280
So that's, I don't know if I would recommend that because it's always like longer term,

155
00:10:34.280 --> 00:10:38.280
so it's always the riskiest approach, but it's probably the one that will give you more

156
00:10:38.280 --> 00:10:42.900
benefits in the long term because you get a lot more flexibility and you get all the

157
00:10:42.900 --> 00:10:44.660
advantages of the cloud.

158
00:10:44.660 --> 00:10:50.080
So you are less constrained, I suppose, at the end of that process.

159
00:10:50.080 --> 00:10:51.080
But yeah.

160
00:10:51.080 --> 00:10:52.500
I would say that this is one to go for.

161
00:10:52.500 --> 00:10:57.900
If you can already measure the fact that you're constantly firefighting bugs with your existing

162
00:10:57.900 --> 00:10:58.900
architecture.

163
00:10:58.900 --> 00:11:02.440
So if you move it as it is to AWS, that's not going to change.

164
00:11:02.440 --> 00:11:09.040
So if you're prepared to say, okay, let's just invest in refactoring this platform and

165
00:11:09.040 --> 00:11:17.000
taking advantage at the same time of paper use, serverless managed services, using DynamoDB,

166
00:11:17.000 --> 00:11:24.120
API Gateway, S3, event driven architectures with EventBridge, then yeah, I'd say go for

167
00:11:24.120 --> 00:11:25.120
it definitely.

168
00:11:25.120 --> 00:11:30.240
If it's going to take away from that firefighting pain you're in now, that's a good strategy.

169
00:11:30.240 --> 00:11:34.040
But it's not going to happen overnight.

170
00:11:34.040 --> 00:11:37.160
It requires you to start small in this rate.

171
00:11:37.160 --> 00:11:41.560
But there is a long term payoff for sure.

172
00:11:41.560 --> 00:11:42.560
Yes.

173
00:11:42.560 --> 00:11:43.560
Yeah.

174
00:11:43.560 --> 00:11:51.200
And I suppose, yeah, the next question is, let's say that you decide what you want to

175
00:11:51.200 --> 00:11:52.860
do already.

176
00:11:52.860 --> 00:11:58.120
What are some good guidelines to start to execute on a plan that you might have?

177
00:11:58.120 --> 00:12:02.000
Do you have any recommendation there?

178
00:12:02.000 --> 00:12:09.320
Yeah, I'd say it depends on the nature of your organization and the style of your company.

179
00:12:09.320 --> 00:12:10.800
There's two approaches.

180
00:12:10.800 --> 00:12:17.800
You could say, let's take a very methodical approach with a lot of upfront planning.

181
00:12:17.800 --> 00:12:20.140
And this is like really measured approach.

182
00:12:20.140 --> 00:12:22.300
So you break it down into steps.

183
00:12:22.300 --> 00:12:27.120
You first do a discovery phase where you assess all that exactly what you have.

184
00:12:27.120 --> 00:12:31.200
For a lot of enterprises, this can take a significant amount of time because it's rare

185
00:12:31.200 --> 00:12:35.720
that you find a large enterprise and a very good centralized understanding of what all

186
00:12:35.720 --> 00:12:40.480
the systems are and how they work and who they're used by and what capabilities are

187
00:12:40.480 --> 00:12:44.600
required and what all the gotchas are there.

188
00:12:44.600 --> 00:12:48.080
And then you would categorize them, create a plan.

189
00:12:48.080 --> 00:12:50.240
The plan involves training, upskilling.

190
00:12:50.240 --> 00:12:55.240
It revolves proofs of concept, MVPs.

191
00:12:55.240 --> 00:13:00.320
Then you have a project plan and you iterate on it and it's usually a multi-year plan.

192
00:13:00.320 --> 00:13:05.520
But you can categorize each of your system using the six R's and execute on that plan.

193
00:13:05.520 --> 00:13:12.440
But another approach, you could do that, but as an alternative or as a first step before

194
00:13:12.440 --> 00:13:19.040
you do that, you could say, let's just take a more lean, agile approach and pick a good

195
00:13:19.040 --> 00:13:28.840
candidate project that you can migrate and create, I suppose, an isolated team that's

196
00:13:28.840 --> 00:13:33.860
going to execute on it and try and pick a project that doesn't have interdependencies

197
00:13:33.860 --> 00:13:38.960
to a lot of other systems and migrate that and use it as a learning exercise.

198
00:13:38.960 --> 00:13:41.480
But try to do it in a lean way.

199
00:13:41.480 --> 00:13:46.840
Try to get an MVP of it out there in a matter of weeks, a couple of months maybe, but not

200
00:13:46.840 --> 00:13:51.500
a nine month or 12 month project because that's too long to be getting feedback.

201
00:13:51.500 --> 00:13:55.880
Try and execute on this thing quickly and learn about it and learn what works and what

202
00:13:55.880 --> 00:13:58.460
doesn't work and try and simplify it as well.

203
00:13:58.460 --> 00:14:02.420
Don't try and boil the ocean.

204
00:14:02.420 --> 00:14:06.800
This is a good thing because even if you're making a plan thereafter, a more comprehensive

205
00:14:06.800 --> 00:14:11.660
plan, then you've got an informed plan and you've got some evidence to back it up and

206
00:14:11.660 --> 00:14:15.480
you're not just speculating on how long things are going to take.

207
00:14:15.480 --> 00:14:16.480
Yeah, that's true.

208
00:14:16.480 --> 00:14:21.840
I think the tricky bit there is to figure out which service or which workload in your

209
00:14:21.840 --> 00:14:28.840
organization can be not too small and not too big so that you have a good enough risk

210
00:14:28.840 --> 00:14:34.520
there to understand what is the effort needed to move more and more things to the cloud,

211
00:14:34.520 --> 00:14:39.800
but also what are the benefits that you can get once you have done this step of moving

212
00:14:39.800 --> 00:14:43.360
a workload to the cloud.

213
00:14:43.360 --> 00:14:53.000
On that same topic, maybe we can mention what could be a good measure of success for a cloud

214
00:14:53.000 --> 00:14:54.400
migration.

215
00:14:54.400 --> 00:14:59.060
And I think that that's important because I feel that there is a little bit too much

216
00:14:59.060 --> 00:15:05.120
of a hype in terms of we need to move to the cloud, but it's not always clear why, like

217
00:15:05.120 --> 00:15:07.680
what is the advantage of doing that.

218
00:15:07.680 --> 00:15:11.520
It feels like it's trendy to do it and you are missing out if you're not doing it, but

219
00:15:11.520 --> 00:15:17.080
I think it's very important as a company because it's a very serious investment to really understand

220
00:15:17.080 --> 00:15:19.440
what is the return of that investment.

221
00:15:19.440 --> 00:15:22.400
And I think there are some pointers that you will keep in mind.

222
00:15:22.400 --> 00:15:27.040
For instance, you might have increasing performance, you might have cost benefits, you might get

223
00:15:27.040 --> 00:15:32.880
a different speed of innovation because you might make it easier for your team to build

224
00:15:32.880 --> 00:15:36.080
new services, to try new things.

225
00:15:36.080 --> 00:15:39.120
So maybe that's one of the main benefits you can get.

226
00:15:39.120 --> 00:15:42.560
And of course, there is no one single answer for every company.

227
00:15:42.560 --> 00:15:47.200
I suppose every company will be looking at different types of return.

228
00:15:47.200 --> 00:15:52.460
So try to do also that exercise where you try to understand why it is important for

229
00:15:52.460 --> 00:15:56.400
you to move to the cloud and what is your expectation because then you can use those

230
00:15:56.400 --> 00:16:02.180
expectations to measure your experiments and basically understand, okay, is this really

231
00:16:02.180 --> 00:16:05.760
what I wanted or maybe do I need to do something different?

232
00:16:05.760 --> 00:16:10.680
And of course, that's going to take a little bit of time, it's never an immediate return.

233
00:16:10.680 --> 00:16:15.200
So you have to have a little bit of trust in the process and realize that it's going

234
00:16:15.200 --> 00:16:19.640
to take a little bit of time to sync all this new information and make sure you do all the

235
00:16:19.640 --> 00:16:22.200
things correctly so that you can get the benefits.

236
00:16:22.200 --> 00:16:24.680
Yeah, that's a good point.

237
00:16:24.680 --> 00:16:30.960
I would also add that there are plenty of resources and tools that AWS will provide,

238
00:16:30.960 --> 00:16:33.720
particularly if you're a large enterprise trying to migrate to the cloud.

239
00:16:33.720 --> 00:16:38.520
I mean, they will clearly provide people to support that.

240
00:16:38.520 --> 00:16:44.200
They've also got a whole set of services that will help you to do the rehosting or replatforming,

241
00:16:44.200 --> 00:16:49.180
like migrating VMs in an automated way, doing discovery, doing database migration, but they'll

242
00:16:49.180 --> 00:16:55.720
also help you with people that will help to create a migration plan and execute on it.

243
00:16:55.720 --> 00:16:59.080
One of the things that you kind of have to do yourself is figure out the measures of

244
00:16:59.080 --> 00:17:04.600
success and the cost equations and the overall impact and the success factors.

245
00:17:04.600 --> 00:17:07.020
That's going to be quite challenging.

246
00:17:07.020 --> 00:17:10.520
If you're looking at it just from a cost point of view, you really need to look at the total

247
00:17:10.520 --> 00:17:16.040
cost of ownership and the amount of time your existing teams are spending in, say, firefighting,

248
00:17:16.040 --> 00:17:22.360
on-prem system, and really strategically think about, okay, if we're going to migrate to

249
00:17:22.360 --> 00:17:27.020
the cloud, it's not really just about the different cost model and moving from CapEx

250
00:17:27.020 --> 00:17:28.080
to OpEx.

251
00:17:28.080 --> 00:17:33.440
You've got what you should really be thinking about is how can I get out of the business

252
00:17:33.440 --> 00:17:41.200
of patching servers and troubleshooting network hardware, and how can I move to things that

253
00:17:41.200 --> 00:17:48.040
are provided by AWS so then I can free up people to execute more on actual meaningful

254
00:17:48.040 --> 00:17:49.200
business capabilities.

255
00:17:49.200 --> 00:17:54.360
So it's very hard to measure, but it is worthwhile spending some time actually defining what

256
00:17:54.360 --> 00:17:56.960
those measures of success are going to be.

257
00:17:56.960 --> 00:18:02.520
And not just focusing on the easy to measure things like just the running cost.

258
00:18:02.520 --> 00:18:08.800
Yeah, that makes a lot of sense.

259
00:18:08.800 --> 00:18:15.560
So yeah, I mean, I think we've given some decent words of caution there in terms of

260
00:18:15.560 --> 00:18:17.280
what to expect.

261
00:18:17.280 --> 00:18:23.720
I mean, there are definitely great benefits in moving to the cloud, but it's just not

262
00:18:23.720 --> 00:18:25.440
overnight.

263
00:18:25.440 --> 00:18:30.760
It's going to take time, I guess, especially if you're a large enterprise, but the benefits

264
00:18:30.760 --> 00:18:35.800
as well actually, it's worthwhile mentioning that there's always going to be organizational

265
00:18:35.800 --> 00:18:36.840
change challenges.

266
00:18:36.840 --> 00:18:40.040
It's not just a technical exercise, of course.

267
00:18:40.040 --> 00:18:43.800
And some of that can be helped by taking that kind of lean agile approach and doing that

268
00:18:43.800 --> 00:18:49.680
proof of concept project in a bubble at the start because it helps once people see that

269
00:18:49.680 --> 00:18:55.280
it can be done and successful and you can gather some excitement around it, then people

270
00:18:55.280 --> 00:18:56.280
will follow.

271
00:18:56.280 --> 00:19:01.600
I think it makes it easier to convince people and to show people that it can work and to

272
00:19:01.600 --> 00:19:07.520
prevent any, I suppose, unnecessary dissent that can happen when you haven't really delivered

273
00:19:07.520 --> 00:19:08.520
on anything yet.

274
00:19:08.520 --> 00:19:11.680
If you've got a long plan and you haven't actually executed on anything yet, it can

275
00:19:11.680 --> 00:19:17.480
become increasingly difficult to convince everybody that it's worthwhile.

276
00:19:17.480 --> 00:19:22.520
I think that's reasonably a comprehensive overview of the very complex world of cloud

277
00:19:22.520 --> 00:19:28.120
migration and so we can probably leave it out there, leave it at that for today.

278
00:19:28.120 --> 00:19:30.320
So thanks very much for listening everybody.

279
00:19:30.320 --> 00:19:35.080
And again, make sure to subscribe to our YouTube channel and keep following for more episodes

280
00:19:35.080 --> 00:19:53.440
and we'll see you in the next one.
