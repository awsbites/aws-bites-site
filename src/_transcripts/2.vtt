WEBVTT

1
00:00:00.000 --> 00:00:11.040
Hello and welcome to another episode of AWS Bites, the weekly show where we answer questions

2
00:00:11.040 --> 00:00:13.760
about AWS in about five minutes.

3
00:00:13.760 --> 00:00:18.080
My name is Eoin Shanaghy and I'm joined by Luciano Mammino.

4
00:00:18.080 --> 00:00:24.500
Today the question is, should you go for multi-cloud or go all in on AWS?

5
00:00:24.500 --> 00:00:28.600
Maybe the best place to start there is what is multi-cloud?

6
00:00:28.600 --> 00:00:30.920
Maybe that is not clear. What is multi-cloud?

7
00:00:30.920 --> 00:00:32.960
Let's start by defining what is multi-cloud.

8
00:00:32.960 --> 00:00:36.560
And I guess I'm going to try to provide my definition of it.

9
00:00:36.560 --> 00:00:40.280
I'm sure that's arguable.

10
00:00:40.280 --> 00:00:45.200
I'd say that multiple services across multiple clouds is kind of the way.

11
00:00:45.200 --> 00:00:47.280
I'd like to see multi-cloud.

12
00:00:47.280 --> 00:00:52.140
So for instance, you have developed an API and this API runs on AWS.

13
00:00:52.140 --> 00:00:55.720
Then maybe you have other services like, I don't know, databases.

14
00:00:55.720 --> 00:01:00.680
Even other APIs running in another cloud provider and so on.

15
00:01:00.680 --> 00:01:06.080
I would say that there are other things that might be confused with multi-cloud and I wouldn't

16
00:01:06.080 --> 00:01:08.120
include them into this definition.

17
00:01:08.120 --> 00:01:09.920
For instance, hybrid cloud.

18
00:01:09.920 --> 00:01:13.480
So you have some stuff in AWS and some stuff on premise.

19
00:01:13.480 --> 00:01:19.720
I would argue that that's not really multi-cloud, even though some people might say the opposite.

20
00:01:19.720 --> 00:01:25.200
And also cloud agnostic is kind of interesting and related, but not really multi-cloud.

21
00:01:25.200 --> 00:01:31.860
So basically when you build maybe with containers or Kubernetes, when you build software that

22
00:01:31.860 --> 00:01:35.320
can potentially run across multiple clouds.

23
00:01:35.320 --> 00:01:38.360
So that doesn't necessarily make it multi-cloud.

24
00:01:38.360 --> 00:01:42.060
It's just you have the option, but you are not necessarily deploying it straight away

25
00:01:42.060 --> 00:01:44.040
to different clouds.

26
00:01:44.040 --> 00:01:46.080
Would you agree with this definition?

27
00:01:46.080 --> 00:01:48.400
So do you want to add something there?

28
00:01:48.400 --> 00:01:51.040
No, I think this is good.

29
00:01:51.040 --> 00:01:57.560
Multi-cloud agnostic is definitely something we hear a surprising amount about.

30
00:01:57.560 --> 00:02:01.820
And I still fail to understand why it seems to be popular with a lot of people, but I'm

31
00:02:01.820 --> 00:02:06.800
curious to hear what drives people towards this.

32
00:02:06.800 --> 00:02:10.600
I think multi-cloud seems like a healthy thing.

33
00:02:10.600 --> 00:02:13.800
I think it's something that we see more and more of.

34
00:02:13.800 --> 00:02:19.400
I think we even see AWS recognizing that multi-cloud is a thing when they're launching services

35
00:02:19.400 --> 00:02:25.680
like EKS Anywhere and ECS Anywhere, which allow you to run some of your workload on-prem

36
00:02:25.680 --> 00:02:30.960
or in other clouds using their services, which is a bit of a departure for them.

37
00:02:30.960 --> 00:02:36.840
But I think it's an acceptance that for any company of any significant size, you'll end

38
00:02:36.840 --> 00:02:40.360
up with multiple cloud vendors in the picture somehow.

39
00:02:40.360 --> 00:02:49.300
Like if AWS shop for a lot of your core workloads, but a lot of enterprises have an investment.

40
00:02:49.300 --> 00:02:55.000
Microsoft for AD, SharePoint, Dynamics, maybe some SQL server.

41
00:02:55.000 --> 00:02:58.680
So the reality of it is that even companies through acquisition, they're going to end

42
00:02:58.680 --> 00:03:02.480
up with multiple estates across multiple clouds.

43
00:03:02.480 --> 00:03:05.900
So the question becomes, what do you deploy into what cloud?

44
00:03:05.900 --> 00:03:08.480
How can you be clear about that strategy?

45
00:03:08.480 --> 00:03:15.080
And not necessarily saying that we need to build everything so that it can run on multiple

46
00:03:15.080 --> 00:03:20.520
clouds, because that's a bit, I think that's a really dangerous fallacy, something people

47
00:03:20.520 --> 00:03:25.300
really need to be careful of because you have the potential there to waste a massive amount

48
00:03:25.300 --> 00:03:32.100
of engineering time in trying to be agnostic and building something that's generic enough

49
00:03:32.100 --> 00:03:33.680
to run on multiple clouds.

50
00:03:33.680 --> 00:03:39.140
Because you're already losing the benefits that each specific cloud provider gives you

51
00:03:39.140 --> 00:03:41.060
in their differentiating features.

52
00:03:41.060 --> 00:03:42.060
Is that fair?

53
00:03:42.060 --> 00:03:43.060
Absolutely.

54
00:03:43.060 --> 00:03:48.900
For instance, one thing that I've seen is if we want to stick to the example of serverless,

55
00:03:48.900 --> 00:03:54.900
that even though on the surface, if you compare, for instance, Lambda with the serverless functions

56
00:03:54.900 --> 00:03:58.180
you get in Azure, they look quite similar.

57
00:03:58.180 --> 00:04:01.940
But then when you go a little bit deeper, the running model, it's so different that

58
00:04:01.940 --> 00:04:07.780
it becomes harder to kind of find a way to generalize your code so that it can run well

59
00:04:07.780 --> 00:04:09.880
on both models.

60
00:04:09.880 --> 00:04:14.940
So I wouldn't definitely encourage people to do that because it might be very tricky

61
00:04:14.940 --> 00:04:16.460
to get it right.

62
00:04:16.460 --> 00:04:20.460
And as you said, you're also going to lose some of the benefits because you're basically

63
00:04:20.460 --> 00:04:25.660
going to try to find that subset that works for both, but it's definitely a subset.

64
00:04:25.660 --> 00:04:29.540
So you're going to miss out the big picture.

65
00:04:29.540 --> 00:04:35.380
And yeah, on that topic, I'm curious to think, to discuss maybe with you, like what do you

66
00:04:35.380 --> 00:04:44.880
see as other issues that might arise from trying to be multi-cloud?

67
00:04:44.880 --> 00:04:51.540


68
00:04:51.540 --> 00:04:56.340
So I think where a lot of people come from with multi-cloud is from a fear that there's a risk there that at some unknown point in the future, some unknown event is going to

69
00:04:56.340 --> 00:04:59.640
occur, which will cause them to have to migrate away.

70
00:04:59.640 --> 00:05:04.800
And I think for any business, you can probably try and quantify that risk and be realistic

71
00:05:04.800 --> 00:05:06.120
about it.

72
00:05:06.120 --> 00:05:10.060
When you do the maths on that, you'll figure out that the likelihood of the event occurring

73
00:05:10.060 --> 00:05:12.500
is pretty low.

74
00:05:12.500 --> 00:05:17.960
And the cost of switching, if you look at that and compare it to the cost you have to

75
00:05:17.960 --> 00:05:25.380
invest upfront in trying to be cloud agnostic, it's probably going to lead you to the decision

76
00:05:25.380 --> 00:05:30.900
that look, it's better off to be more agile and rapid in your product development now

77
00:05:30.900 --> 00:05:37.160
and just be more intentional about what you might do in the unlikely event that you will

78
00:05:37.160 --> 00:05:43.540
have to search away from your chosen cloud vendor completely.

79
00:05:43.540 --> 00:05:47.660
And even if that event occurs, you're going to have time to do it.

80
00:05:47.660 --> 00:05:54.580
So I think being realistic about it, you can say, look, our focus typically is on, for

81
00:05:54.580 --> 00:05:59.840
the majority of enterprises and startups, it's about time to market and getting product

82
00:05:59.840 --> 00:06:02.980
into customers hands so you can iterate on it quickly.

83
00:06:02.980 --> 00:06:09.000
If you're spending, I would say 60% of your engineering effort trying to be cloud agnostic

84
00:06:09.000 --> 00:06:13.480
and building layers of abstraction for some event that might never happen, you're really

85
00:06:13.480 --> 00:06:18.040
throwing out your opportunity to be agile and get to market quickly.

86
00:06:18.040 --> 00:06:25.660
So I think sometimes a lot of that is guided by maybe a misguided sense that there is a

87
00:06:25.660 --> 00:06:29.600
risk there, which really isn't going to happen.

88
00:06:29.600 --> 00:06:35.580
And I think once you accept that you're all in on a cloud vendor for any given workload,

89
00:06:35.580 --> 00:06:41.000
it suddenly takes away a huge amount of cognitive load that your developers, architects, and

90
00:06:41.000 --> 00:06:44.840
product managers have to think about, and you can really start going much faster.

91
00:06:44.840 --> 00:06:47.720
Have you come across a couple of cases where you've seen, I mean, one of the worst things

92
00:06:47.720 --> 00:06:52.240
for me is when you see a startup that's been getting some funding to build a product and

93
00:06:52.240 --> 00:06:58.140
they're investing it all in deploying Kubernetes clusters on three different clouds because

94
00:06:58.140 --> 00:07:03.820
they have some misconception that they're going to have to support them at some point

95
00:07:03.820 --> 00:07:04.820
in the future.

96
00:07:04.820 --> 00:07:06.440
Have you seen that?

97
00:07:06.440 --> 00:07:11.100
I have seen that happening, but I've seen also the opposite where you have large enough

98
00:07:11.100 --> 00:07:17.280
companies that are more motivated by financial reasons in terms of, I don't know, are we

99
00:07:17.280 --> 00:07:21.880
going to lose leverage if we are logged in to AWS rather than another cloud?

100
00:07:21.880 --> 00:07:27.380
And that's maybe their motivation for trying to be more cloud agnostic so that they can

101
00:07:27.380 --> 00:07:34.080
maybe try to get discounts or, I don't know, get more things from the cloud provider.

102
00:07:34.080 --> 00:07:38.200
And I don't know, that's kind of understandable, even though I think it's still not worth the

103
00:07:38.200 --> 00:07:40.000
investment personally.

104
00:07:40.000 --> 00:07:45.360
Most of the time, I think you're going to waste resources and time that you can spend,

105
00:07:45.360 --> 00:07:50.260
for instance, in terms of build more feature, make the product more optimized for the use

106
00:07:50.260 --> 00:07:56.080
cases that your customers have, rather than just making the software layer and the architecture

107
00:07:56.080 --> 00:08:01.500
layer so generic that it can work everywhere.

108
00:08:01.500 --> 00:08:07.480
And then one final remark I would like to make is probably that in general, I don't

109
00:08:07.480 --> 00:08:11.960
think I'm advocating for that needs to be only one cloud.

110
00:08:11.960 --> 00:08:16.320
I think the competition is really good and it's good to be aware of different clouds

111
00:08:16.320 --> 00:08:21.300
and what kind of features do they have and how similar services compare across multiple

112
00:08:21.300 --> 00:08:23.060
cloud vendors.

113
00:08:23.060 --> 00:08:26.640
Because I think we'll need that competition going forward because that's definitely going

114
00:08:26.640 --> 00:08:32.200
to help us to have better services across all the offering that you can get from cloud

115
00:08:32.200 --> 00:08:33.200
providers.

116
00:08:33.200 --> 00:08:34.200
Absolutely.

117
00:08:34.200 --> 00:08:40.040
Again, don't pick your favorites and just stick to that without looking at the others.

118
00:08:40.040 --> 00:08:43.960
Keep looking at the other cloud providers and support them if you think they are doing

119
00:08:43.960 --> 00:08:47.400
something better than your favorite cloud provider.

120
00:08:47.400 --> 00:08:52.440
So yeah, competition is good, but don't over engineer your software and architecture just

121
00:08:52.440 --> 00:08:53.440
to be multi-cloud.

122
00:08:53.440 --> 00:08:54.440
That's great.

123
00:08:54.440 --> 00:09:01.920


124
00:09:01.920 --> 00:09:05.280
Okay, well, on that note, I think that's all we have today, but thank you very much again for listening and let us know what you think in the comments.

125
00:09:05.280 --> 00:09:08.900
Tell us what you'd like us to talk about in future episodes.

126
00:09:08.900 --> 00:09:13.440
Follow us and subscribe on YouTube and all your favorite podcast platforms and we'll

127
00:09:13.440 --> 00:09:26.880
see you in the next episode.
