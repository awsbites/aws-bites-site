{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 4.4,
      "text": " Hello, today we are going to answer the question, how do you use SNS?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.4,
      "end": 9.36,
      "text": " By the end of this episode, you will know how SNS compares to EventBridge and SQS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.36,
      "end": 14,
      "text": " You'll know how to use it to send messages to customers, but also for microservice communication."
    },
    {
      "speakerLabel": "spk_0",
      "start": 14.88,
      "end": 19.68,
      "text": " We'll tell you what the costs and limits are, and also how you can integrate SNS with other"
    },
    {
      "speakerLabel": "spk_0",
      "start": 19.68,
      "end": 34.32,
      "text": " services in AWS. My name is Eoin, I'm joined by Luciano and this is the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 34.32,
      "end": 39.6,
      "text": " This is the fourth episode in the series all about services for events and messages on AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 39.6,
      "end": 44.08,
      "text": " We covered SQS and EventBridge in detail already, and today we're talking about SNS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 44.08,
      "end": 49.68,
      "text": " the simple notification service. Luciano, would you like to tell us how would you describe SNS?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 56.48,
      "end": 63.44,
      "text": " Yeah, so based on how we categorize the other events and messages services, I will place SNS in the category of PubSub. So you have this Publish and Subscribe API. It's interesting"
    },
    {
      "speakerLabel": "spk_1",
      "start": 63.44,
      "end": 70.96,
      "text": " because it can target what is generally called in AWS A2A, which is like application to application,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 70.96,
      "end": 76.32,
      "text": " but also something that they call A2P, application to person, which basically means that if you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 76.32,
      "end": 83.75999999999999,
      "text": " publish something to an SNS topic, then that message can be delivered also as an SMS or as"
    },
    {
      "speakerLabel": "spk_1",
      "start": 83.75999999999999,
      "end": 90.47999999999999,
      "text": " an email or even a push notification. By the way, this is interesting because it feels like a little"
    },
    {
      "speakerLabel": "spk_1",
      "start": 90.47999999999999,
      "end": 97.19999999999999,
      "text": " bit of a legacy feature because since this feature was available in SNS, we know that now we have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 97.2,
      "end": 102.16,
      "text": " other services that are more specialized to do that, like Pinpoint or even third parties that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 102.16,
      "end": 107.76,
      "text": " you would generally use for SMS or emails like Twilio or SendGrid or for push notification,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.76,
      "end": 113.68,
      "text": " probably you would use Firebase, Cloud Messaging. So it's interesting to see that, and we have to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.68,
      "end": 119.52000000000001,
      "text": " say that also SNS is one of the oldest AWS services. It's 12 years old, I believe now."
    },
    {
      "speakerLabel": "spk_1",
      "start": 119.52000000000001,
      "end": 125.28,
      "text": " So maybe this is a little bit of a legacy feature that was built there initially, but now you will"
    },
    {
      "speakerLabel": "spk_1",
      "start": 125.28,
      "end": 132.8,
      "text": " probably use other services. So in terms of advantages, what do you think are the strengths"
    },
    {
      "speakerLabel": "spk_1",
      "start": 132.8,
      "end": 140.32,
      "text": " of SNS compared to other services?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 140.32,
      "end": 144.88,
      "text": " I'd say that the main strength compared to things like EventBridge and some of the other services, again, simplicity, but also really fast delivery. I think we mentioned"
    },
    {
      "speakerLabel": "spk_0",
      "start": 144.88,
      "end": 150.88,
      "text": " that in the last episode that SNS is typically lower latency. It's also push-based. You don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 150.88,
      "end": 156.96,
      "text": " have any polling like you do with SQS. You can have subscribers that are notified immediately."
    },
    {
      "speakerLabel": "spk_0",
      "start": 156.96,
      "end": 161.35999999999999,
      "text": " So there's lots of really good things you can do with SNS. Typically what you're doing with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 161.35999999999999,
      "end": 167.2,
      "text": " SNS is fan out. You're taking a message and broadcasting it to multiple subscribers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 167.92,
      "end": 172.88,
      "text": " So the things you can do with it are like event-based communication across parts of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 172.88,
      "end": 178.07999999999998,
      "text": " microservice architectures, similar to what we discussed with EventBridge actually. So if you've"
    },
    {
      "speakerLabel": "spk_0",
      "start": 178.08,
      "end": 183.60000000000002,
      "text": " got a fan out pattern, so if you want to have the kind of behavior we talked about with SQS, where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 183.60000000000002,
      "end": 189.84,
      "text": " you're sending message from one system to another, and you need that durability with SNS, you can do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 189.84,
      "end": 195.52,
      "text": " that, but get multiple consumers involved rather than a single consumer. So you can combine SNS and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 195.52,
      "end": 202.72000000000003,
      "text": " SQS. For example, in our e-commerce application, a new order arrives, you can send the event to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 202.72,
      "end": 208.48,
      "text": " your fulfillment service, the analytic service, and your billing or invoicing service. One of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 208.48,
      "end": 215.04,
      "text": " the other things you can do with SNS is send handle system alerts. AWS services will often send"
    },
    {
      "speakerLabel": "spk_0",
      "start": 215.04,
      "end": 221.28,
      "text": " messages to SNS when certain things happen, like CloudWatch alarms or change state. That's how you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 221.28,
      "end": 227.2,
      "text": " get the notifications from CloudWatch alarms. And then you can take those alarm notifications,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 227.2,
      "end": 235.11999999999998,
      "text": " send them by email, or send them to a webhook or a Lambda function, which could then send it to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 235.11999999999998,
      "end": 240.07999999999998,
      "text": " Slack or Teams or wherever you want to receive those. It's also used for code pipeline"
    },
    {
      "speakerLabel": "spk_0",
      "start": 240.07999999999998,
      "end": 246.72,
      "text": " notifications. And if you use AWS config for compliance, it can send SNS messages when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 246.72,
      "end": 253.28,
      "text": " the compliance date changes. So I think that's a pretty... That's those are the kind of things I"
    },
    {
      "speakerLabel": "spk_0",
      "start": 253.28,
      "end": 258.72,
      "text": " would generally use SNS for. How would you describe the usage of SNS? We talked through"
    },
    {
      "speakerLabel": "spk_0",
      "start": 258.72,
      "end": 264.16,
      "text": " this, I think, for EventBridge and SQS. What are the steps?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 264.8,
      "end": 270.48,
      "text": " Yeah, it's interesting because we will see that compared to what we described for EventBridge, using SNS requires a little bit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 270.48,
      "end": 275.44,
      "text": " more work, I would say. And that's because for instance, just for starting, you need to create"
    },
    {
      "speakerLabel": "spk_1",
      "start": 275.44,
      "end": 281.28,
      "text": " a topic. And a topic is effectively the place, the channel where you're going to be able to publish"
    },
    {
      "speakerLabel": "spk_1",
      "start": 281.28,
      "end": 287.67999999999995,
      "text": " messages. Once you create a topic, you can create a subscription on that topic. And a subscription"
    },
    {
      "speakerLabel": "spk_1",
      "start": 287.67999999999995,
      "end": 293.76,
      "text": " basically allows you to say, somebody wants to receive the messages once they are published on"
    },
    {
      "speakerLabel": "spk_1",
      "start": 293.76,
      "end": 300,
      "text": " this particular topic. And a subscription, sometimes it's something you need to confirm."
    },
    {
      "speakerLabel": "spk_1",
      "start": 300.71999999999997,
      "end": 308,
      "text": " For instance, if you do a subscription that requires the destination to be an email or HTTP"
    },
    {
      "speakerLabel": "spk_1",
      "start": 308,
      "end": 314.64,
      "text": " or endpoints that live in another AWS account, AWS will actually ask you to confirm that that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 314.64,
      "end": 321.36,
      "text": " subscription needs to be confirmed before it's actually activated. And sometimes, for instance,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 321.36,
      "end": 326.16,
      "text": " you can receive an email and you have to click a link on that email or there are APIs that you can"
    },
    {
      "speakerLabel": "spk_1",
      "start": 326.16,
      "end": 332.96,
      "text": " use if you need to do that in an automated fashion. Then at that point, once you have a topic"
    },
    {
      "speakerLabel": "spk_1",
      "start": 332.96,
      "end": 337.44,
      "text": " and a subscription, you can publish one or more messages to that topic and you can use"
    },
    {
      "speakerLabel": "spk_1",
      "start": 337.44,
      "end": 342.08,
      "text": " either the publish API, which gives you one message, or the publish batch, which allows you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 342.08,
      "end": 347.92,
      "text": " to publish more than one message with one single request. And that's interesting. But another thing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 347.92,
      "end": 353.36,
      "text": " that is very interesting is that very often you need to also configure what are called access"
    },
    {
      "speakerLabel": "spk_1",
      "start": 353.36,
      "end": 360,
      "text": " control policies, which are something very similar to IAM policies, at least they have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 360,
      "end": 366.56,
      "text": " the very similar structure. But those are basically the way you can authorize, for instance,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 366.56,
      "end": 374.4,
      "text": " certain users to publish to a specific topic or SNS itself to be able to deliver to a queue."
    },
    {
      "speakerLabel": "spk_1",
      "start": 374.4,
      "end": 382.56,
      "text": " So give SNS the permission to use the put message API to SQS. And you can also put different"
    },
    {
      "speakerLabel": "spk_1",
      "start": 382.56,
      "end": 387.36,
      "text": " limitations in places. For instance, you could say for this particular topic, I only want"
    },
    {
      "speakerLabel": "spk_1",
      "start": 387.36,
      "end": 393.28,
      "text": " subscription that deliver to HTTPS, for instance. So you can use all this feature to create"
    },
    {
      "speakerLabel": "spk_1",
      "start": 393.28,
      "end": 401.91999999999996,
      "text": " restrictions on how messages are consumed, but also how messages are published to the topic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 401.91999999999996,
      "end": 408.32,
      "text": " Are there other interesting details that are worth mentioning in terms of, I don't know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 408.32,
      "end": 413.03999999999996,
      "text": " the user experience of creating messages and consuming them?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 413.03999999999996,
      "end": 417.28,
      "text": " If you remember with EventBridge, we were talking about rules and how you do pattern matching."
    },
    {
      "speakerLabel": "spk_0",
      "start": 417.28,
      "end": 422.32,
      "text": " And SNS has kind of a similar feature called message filtering. But the important"
    },
    {
      "speakerLabel": "spk_0",
      "start": 422.32,
      "end": 426.96,
      "text": " distinction there is that message filtering is based on message attributes and not the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 426.96,
      "end": 432.32,
      "text": " message content itself. So it's more like a filtering on metadata. So it can be used"
    },
    {
      "speakerLabel": "spk_0",
      "start": 432.32,
      "end": 438.48,
      "text": " to partition and filter messages. And that works pretty well, but it just doesn't have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 438.48,
      "end": 445.92,
      "text": " the flexibility that you have with EventBridge. It feels like we're comparing it with EventBridge"
    },
    {
      "speakerLabel": "spk_0",
      "start": 445.92,
      "end": 451.36,
      "text": " quite a lot when we mention all these features. But one of the interesting ones is that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 451.36,
      "end": 459.6,
      "text": " you can have up to 12.5 million subscribers per topic in SNS. EventBridge doesn't give you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 459.6,
      "end": 464.8,
      "text": " anything like that. You generally don't need it, but you would have five targets per rule"
    },
    {
      "speakerLabel": "spk_0",
      "start": 465.36,
      "end": 468.56,
      "text": " in EventBridge. Of course, you can have as many rules as you want."
    },
    {
      "speakerLabel": "spk_0",
      "start": 470.64,
      "end": 476.56,
      "text": " So then I guess we should talk about pricing. And it does seem like it's a little bit cheaper than"
    },
    {
      "speakerLabel": "spk_0",
      "start": 476.56,
      "end": 483.76,
      "text": " EventBridge because it's about 50 cents for a million SNS requests. And then you've got"
    },
    {
      "speakerLabel": "spk_0",
      "start": 484.72,
      "end": 489.76,
      "text": " additional costs for things like HTTP notification deliveries and email deliveries. So"
    },
    {
      "speakerLabel": "spk_0",
      "start": 489.76,
      "end": 494.32,
      "text": " if you want to target those endpoint types, that's something you should look at."
    },
    {
      "speakerLabel": "spk_0",
      "start": 496.8,
      "end": 504.48,
      "text": " What about reliability? With EventBridge, you have DLQ. With SQS, you can have another Q,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 504.48,
      "end": 512.08,
      "text": " which is a DLQ. You get that with SNS too, right? But you also have other similar features like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 512.08,
      "end": 516.32,
      "text": " FIFO topics, which is quite a new one for SNS. Do you want to talk about what that can give you?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 517.12,
      "end": 521.76,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_1",
      "start": 521.76,
      "end": 528.72,
      "text": " The only thing I know about that one, I haven't used it yet, but it's basically it allows you to push messages to FIFO queues and make sure that the order is respected in the process. So end"
    },
    {
      "speakerLabel": "spk_1",
      "start": 528.72,
      "end": 534.72,
      "text": " to end, you will be able to pull messages from the queue with the same order that the messages were"
    },
    {
      "speakerLabel": "spk_1",
      "start": 534.72,
      "end": 540.1600000000001,
      "text": " produced in the topic in the first place. This is as much as I know. I don't know if you have any"
    },
    {
      "speakerLabel": "spk_1",
      "start": 540.1600000000001,
      "end": 546.5600000000001,
      "text": " more detail that is worth sharing about that one. Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 546.5600000000001,
      "end": 552.24,
      "text": " I think the feature is, I guess the important thing is that with SNS, FIFO, the only subscriber type is an SQS queue. That's the only"
    },
    {
      "speakerLabel": "spk_0",
      "start": 552.24,
      "end": 558.64,
      "text": " one that makes sense. But yeah, it's really important, obviously, I guess if you have the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 558.64,
      "end": 561.92,
      "text": " kind of use case that you might normally use something like Kinesis or Kafka for, where you've"
    },
    {
      "speakerLabel": "spk_0",
      "start": 561.92,
      "end": 567.28,
      "text": " got strict ordering with multiple subscribers. So it's a really good addition. A lot of people"
    },
    {
      "speakerLabel": "spk_0",
      "start": 567.28,
      "end": 574.8,
      "text": " were very excited when that came out. We should also talk about, since we've been compared to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 574.8,
      "end": 580.8,
      "text": " EventBridge, how it compares to SQS. So you've got obviously multiple consumers and you don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 580.8,
      "end": 588,
      "text": " have durability built in. So I mean, those are really headline differences between SNS and SQS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 588,
      "end": 594.8,
      "text": " but they combine really well, don't they? So it's very common to see SNS with SQS subscribers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 594.8,
      "end": 601.5999999999999,
      "text": " I think we covered when we were talking about SQS, that if you need the best of both worlds,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 601.5999999999999,
      "end": 606.7199999999999,
      "text": " you can just essentially glue them together and you've got queues on the receiving end,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 606.72,
      "end": 616.08,
      "text": " a topic on the publication end. And once you link the two, you can even have cross account SQS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 616.08,
      "end": 620.4,
      "text": " subscriptions from an SNS topic. So you can imagine how that would work in a microservices"
    },
    {
      "speakerLabel": "spk_0",
      "start": 620.4,
      "end": 625.84,
      "text": " context when you have services deployed in different accounts or even across applications."
    },
    {
      "speakerLabel": "spk_0",
      "start": 627.12,
      "end": 631.84,
      "text": " Yeah, there are different patterns that you can probably achieve by just combining SNS and SQS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 631.84,
      "end": 638.8000000000001,
      "text": " So that's a very common integration, I will say. In terms of comparison with EventBridge,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 638.8000000000001,
      "end": 644.24,
      "text": " we already mentioned a few points. I think there are other ones that are also very interesting."
    },
    {
      "speakerLabel": "spk_1",
      "start": 644.96,
      "end": 649.2800000000001,
      "text": " And we already said, for instance, that topics need to be created in advance. In SNS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 649.2800000000001,
      "end": 654.1600000000001,
      "text": " while in EventBridge, you get a default bus, you can create new bus if you want,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 654.1600000000001,
      "end": 658.08,
      "text": " but you get something by default. So you don't necessarily need to provision any infrastructure"
    },
    {
      "speakerLabel": "spk_1",
      "start": 658.08,
      "end": 667.12,
      "text": " with EventBridge. In SNS, a subscription is bound to a topic. So you say, I want to listen for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 667.12,
      "end": 674.48,
      "text": " messages published in this particular topic, while in EventBridge, you listen for messages in a bus,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 675.6800000000001,
      "end": 680.4000000000001,
      "text": " which is kind of considered less granular if you want because a bus is more general purpose,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 680.4000000000001,
      "end": 686,
      "text": " while a topic is more specialized, at least. This will be the most common conception, in my opinion."
    },
    {
      "speakerLabel": "spk_1",
      "start": 686,
      "end": 692.64,
      "text": " And the reason why is because in a topic, when you subscribe, you generally get all the messages"
    },
    {
      "speakerLabel": "spk_1",
      "start": 692.64,
      "end": 700,
      "text": " in that topic, while in EventBridge, you generally provide rules that will allow you to select only"
    },
    {
      "speakerLabel": "spk_1",
      "start": 700,
      "end": 708.16,
      "text": " messages with a particular structure that you are interested in consuming. So EventBridge is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 708.16,
      "end": 712.96,
      "text": " generally, you have the common bus for everything, and you just select things that you are interested"
    },
    {
      "speakerLabel": "spk_1",
      "start": 712.96,
      "end": 719.52,
      "text": " in by providing a pattern. With SNS, you select the specific topic that has the information you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 719.52,
      "end": 724.5600000000001,
      "text": " want. You can probably achieve something similar with filtering, but we already mentioned that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 724.5600000000001,
      "end": 730.5600000000001,
      "text": " SNS filtering, you can only filter on metadata and not the message content. So you will need to craft"
    },
    {
      "speakerLabel": "spk_1",
      "start": 730.5600000000001,
      "end": 735.9200000000001,
      "text": " that metadata in advance for the rules that you expect if you want to use filtering to select a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 735.92,
      "end": 743.12,
      "text": " subset of the messages in the topic. Also, another interesting thing that we mentioned in the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 743.12,
      "end": 749.52,
      "text": " previous episode that EventBridge gives you AWS events or even third-party integration events,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 749.52,
      "end": 758.16,
      "text": " like Salesforce or stuff like that, while in SNS, you don't have any of that. It's up to you to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 758.16,
      "end": 765.12,
      "text": " publish something into the different topics. SNS is much faster. Typically, you have a latency"
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.12,
      "end": 770.8,
      "text": " of 30 milliseconds compared to something that can be around 500 milliseconds for EventBridge."
    },
    {
      "speakerLabel": "spk_1",
      "start": 770.8,
      "end": 776.88,
      "text": " So definitely, this is probably the killer feature that is going to make SNS win against EventBridge"
    },
    {
      "speakerLabel": "spk_1",
      "start": 776.88,
      "end": 782.16,
      "text": " in certain scenarios. Like when you really need good latency, SNS is your choice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 782.16,
      "end": 790.16,
      "text": " EventBridge has many supported targets, while SNS is a little bit more limited. We'll mention some"
    },
    {
      "speakerLabel": "spk_1",
      "start": 790.16,
      "end": 795.76,
      "text": " of them in a second. And the other interesting thing, this is very cool feature that I really"
    },
    {
      "speakerLabel": "spk_1",
      "start": 795.76,
      "end": 802.48,
      "text": " like from EventBridge, that when you do HTTP targets, you can define a template that allows"
    },
    {
      "speakerLabel": "spk_1",
      "start": 802.48,
      "end": 808.8,
      "text": " you to change the structure of how the HTTP request is going to be sent. Instead, with SNS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 808.8,
      "end": 814.24,
      "text": " there is a standard format and that's it. So you'll need to build your APIs to accept that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 814.24,
      "end": 817.68,
      "text": " format. Instead, EventBridge is a lot more flexible in that sense."
    },
    {
      "speakerLabel": "spk_1",
      "start": 817.68,
      "end": 821.4399999999999,
      "text": " Or you'd have to put a Lambda function in between, I guess, if you need to transform it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 821.4399999999999,
      "end": 823.5999999999999,
      "text": " Exactly. And then you use that seamlessness."
    },
    {
      "speakerLabel": "spk_0",
      "start": 823.5999999999999,
      "end": 829.28,
      "text": " Yeah. Do you want to tell us something about the integrations then?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 830.3199999999999,
      "end": 834.4799999999999,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 834.4799999999999,
      "end": 839.76,
      "text": " So we talked at the start about the consumer targeting versus application to application cases. So you've got SMS, mobile, push, and email. But in terms of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 839.76,
      "end": 847.1999999999999,
      "text": " service integrations, you can target SQS endpoints, Lambda, HTTPS endpoints, and Kinesis data,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 847.2,
      "end": 854.1600000000001,
      "text": " firehose. So that can be a sync for all of your events. And on the publication side, S3"
    },
    {
      "speakerLabel": "spk_0",
      "start": 854.1600000000001,
      "end": 864.48,
      "text": " notifications can target SNS. API gateway can target SNS. DynamoDB. Also, SES, EventBridge"
    },
    {
      "speakerLabel": "spk_0",
      "start": 864.48,
      "end": 869.84,
      "text": " itself can target SNS. But in the same account only, whereas with EventBridge to EventBridge,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 869.84,
      "end": 874.96,
      "text": " it's much easier to do cross-account. And Step Functions, of course, can publish to SNS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 874.96,
      "end": 881.6,
      "text": " because Step Functions can call any AWS API pretty much these days. So that, I think, covers the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 881.6,
      "end": 885.44,
      "text": " primary integrations you'd use. Obviously, a limited subset compared to EventBridge, but"
    },
    {
      "speakerLabel": "spk_0",
      "start": 886,
      "end": 893.84,
      "text": " that's one of the trade-offs. And I think that pretty much covers all of the details on SNS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 893.84,
      "end": 900.8000000000001,
      "text": " And wraps up this part of the series. Next focus will be on streaming, which is a different ball"
    },
    {
      "speakerLabel": "spk_0",
      "start": 900.8,
      "end": 905.28,
      "text": " game and should be really interesting. Before we go, I just wanted to call out one article,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 905.28,
      "end": 909.8399999999999,
      "text": " which is going to be in the show notes, which is from Cloud or Not blog, and it compares SNS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 909.8399999999999,
      "end": 915.3599999999999,
      "text": " to EventBridge. I think it's a topic people are really interested in these days, so I'd recommend"
    },
    {
      "speakerLabel": "spk_0",
      "start": 915.36,
      "end": 931.84,
      "text": " you take a look at that. So thanks for listening, and we will see you in the next episode."
    }
  ]
}