{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3.68,
      "text": " What can you do with 10 gigabytes of Lambda storage? This is a new feature that was released"
    },
    {
      "speakerLabel": "spk_0",
      "start": 3.68,
      "end": 7.84,
      "text": " in Lambda and everyone's very hyped about it. So in this episode we're going to give our take and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 7.84,
      "end": 12.4,
      "text": " talk about what does it really mean to have 10 gigabytes of ephemeral storage? What can you do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.4,
      "end": 16.72,
      "text": " with this new capability? And finally we're going to discuss if this is really an advantage or if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 16.72,
      "end": 21.76,
      "text": " it's just something useful you might use in niche use cases. My name is Eoin, I'm joined by Luciano"
    },
    {
      "speakerLabel": "spk_0",
      "start": 21.76,
      "end": 35.36,
      "text": " and this is the AWS Bites podcast. Luciano, what is this 10 gigabytes of ephemeral storage? What"
    },
    {
      "speakerLabel": "spk_0",
      "start": 35.36,
      "end": 40.24,
      "text": " does it mean and how is it different?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 40.24,
      "end": 46.08,
      "text": " Yeah, so one way that I will describe this ephemeral storage is basically if you have a Unix system and you have a TMP folder this is generally where you store"
    },
    {
      "speakerLabel": "spk_1",
      "start": 46.08,
      "end": 51.040000000000006,
      "text": " files that are somewhat persistent but yeah they generally have like a long and they don't have a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 51.04,
      "end": 55.6,
      "text": " long duration you just use them as a transient storage mechanism and this is something that's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 55.6,
      "end": 62.879999999999995,
      "text": " been available in Lambda for since the very beginning but the limit was 512 megabytes now"
    },
    {
      "speakerLabel": "spk_1",
      "start": 62.879999999999995,
      "end": 68.32,
      "text": " this has been extended up to 10 gigabytes so technically now you can store a lot more"
    },
    {
      "speakerLabel": "spk_1",
      "start": 68.96000000000001,
      "end": 74.96000000000001,
      "text": " data into this particular file system directory. Now what does that mean in the context of Lambda"
    },
    {
      "speakerLabel": "spk_1",
      "start": 74.96000000000001,
      "end": 80.24,
      "text": " is something we're going to discuss more and more throughout this episode but one interesting thing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 80.24,
      "end": 85.91999999999999,
      "text": " that I want to mention is that because of the characteristics of a Lambda where effectively you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.91999999999999,
      "end": 92.64,
      "text": " receive based on events a Lambda is triggered and you don't really know if for that particular"
    },
    {
      "speakerLabel": "spk_1",
      "start": 92.64,
      "end": 97.84,
      "text": " invocation an instance that was already available is going to be reused or if a new instance is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 97.84,
      "end": 102.8,
      "text": " going to be bootstrapped so imagine this as a container is probably the easiest way to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 102.8,
      "end": 107.03999999999999,
      "text": " understand this it's like you are running a new container or maybe you already have a container"
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.04,
      "end": 112.08000000000001,
      "text": " there initializer and going to reuse the same container so what happens to that temporary"
    },
    {
      "speakerLabel": "spk_1",
      "start": 112.08000000000001,
      "end": 116.48,
      "text": " storage in those two different use cases effectively every time you are running a new"
    },
    {
      "speakerLabel": "spk_1",
      "start": 116.48,
      "end": 124.64000000000001,
      "text": " instance you are starting with a new blank folder in the temp space if you are reusing an existing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 124.64000000000001,
      "end": 130.16,
      "text": " instance and you have saved something in that temporary folder you will find again the same"
    },
    {
      "speakerLabel": "spk_1",
      "start": 130.16,
      "end": 135.28,
      "text": " files available there for you to use so one interesting thing is that you could be using this"
    },
    {
      "speakerLabel": "spk_1",
      "start": 135.28,
      "end": 141.28,
      "text": " storage across invocations but of course there is no guarantee that your data will actually be there"
    },
    {
      "speakerLabel": "spk_1",
      "start": 141.28,
      "end": 145.36,
      "text": " depending on how many Lambdas you are running if they are running all the time or if you have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 145.92000000000002,
      "end": 150.8,
      "text": " spikes of time where nothing happens between one invocation or another and another interesting"
    },
    {
      "speakerLabel": "spk_1",
      "start": 150.8,
      "end": 156.88,
      "text": " thing that Yan Shui and we're going to mention the article of course in the show notes did some"
    },
    {
      "speakerLabel": "spk_1",
      "start": 156.88,
      "end": 161.04,
      "text": " experiments and he realized that there is no cold start overhead so this is another small detail"
    },
    {
      "speakerLabel": "spk_1",
      "start": 161.04,
      "end": 165.92,
      "text": " that is interesting to mention as we are talking about bootstrapping new Lambdas with more storage"
    },
    {
      "speakerLabel": "spk_1",
      "start": 167.35999999999999,
      "end": 173.28,
      "text": " so yeah I don't know what do you think in terms of application what is it something that we will do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 177.51999999999998,
      "end": 182.64,
      "text": " now that we have this additional capability there's a few things you could think of I guess if you've got video transcoding applications that's one of the examples that that has come up so if you're"
    },
    {
      "speakerLabel": "spk_0",
      "start": 182.64,
      "end": 187.84,
      "text": " producing a video you can imagine you might need to have intermediate artifacts you're producing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 187.84,
      "end": 193.12,
      "text": " so let's say you take some input it could be some images or an existing video that you need to split"
    },
    {
      "speakerLabel": "spk_0",
      "start": 193.12,
      "end": 198.96,
      "text": " into frames you might want to process those frames and then stitch them back together and encode them"
    },
    {
      "speakerLabel": "spk_0",
      "start": 198.96,
      "end": 203.36,
      "text": " with a video codec if with that intermediate data you might need somewhere to keep it and having 10"
    },
    {
      "speakerLabel": "spk_0",
      "start": 203.36,
      "end": 209.2,
      "text": " gigabytes of slash temp is going to be pretty useful for that there's also one of the probably"
    },
    {
      "speakerLabel": "spk_0",
      "start": 209.2,
      "end": 215.6,
      "text": " more likely use cases for this slash temp is when you're doing ETL or data processing and you have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 215.6,
      "end": 220.79999999999998,
      "text": " intermediate data steps as well so you know in general you probably don't want to be storing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 220.79999999999998,
      "end": 224.64,
      "text": " things in Lambda so it's more of an optimization for those cases where you really need it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 225.35999999999999,
      "end": 231.04,
      "text": " and you can imagine if you're processing gigabytes of data ideally you would like to just kind of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 231.04,
      "end": 234.79999999999998,
      "text": " stream it in and stream it out and not store anything but sometimes again you need to do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 234.79999999999998,
      "end": 239.2,
      "text": " aggregations which require you to store to read in all of the data store it in one format then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 239.2,
      "end": 244.64,
      "text": " process it further and your slash temp might be useful for that I've heard a lot of people say as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 244.64,
      "end": 249.27999999999997,
      "text": " well machine learning models it'll be useful for that because some machine learning models can be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 249.27999999999997,
      "end": 254.16,
      "text": " quite large you know they can run into gigabytes so having being able to pull them down from s3"
    },
    {
      "speakerLabel": "spk_0",
      "start": 254.16,
      "end": 259.12,
      "text": " put them in your slash temp and then use that across multiple invocations would be useful"
    },
    {
      "speakerLabel": "spk_0",
      "start": 259.84,
      "end": 264.88,
      "text": " I'd also kind of challenge that a little bit and say well if your model is part model is almost"
    },
    {
      "speakerLabel": "spk_0",
      "start": 264.88,
      "end": 269.44,
      "text": " part of your code so it might be more suitable to bundle that into a container image and deploy"
    },
    {
      "speakerLabel": "spk_0",
      "start": 269.44,
      "end": 275.44,
      "text": " your Lambda image as a container your Lambda as a container image but if your model changes more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 275.44,
      "end": 278.96,
      "text": " than the Lambda does then you might do it the other way and use slash time for it and one of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 278.96,
      "end": 286.4,
      "text": " the most I suppose slightly esoteric options was using Lambda for continuous delivery continuous"
    },
    {
      "speakerLabel": "spk_0",
      "start": 286.4,
      "end": 293.84,
      "text": " integration and there was a tweet from Will Dady which suggests that maybe AWS step functions and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 293.84,
      "end": 298.32,
      "text": " 10 gigabytes of ephemeral storage in Lambda could be a better option for a continuous build"
    },
    {
      "speakerLabel": "spk_0",
      "start": 298.32,
      "end": 303.52,
      "text": " continuous build performance than using code pipeline with code build I think that's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 303.52,
      "end": 307.59999999999997,
      "text": " definitely an interesting one I don't know if I would rush to use it I did try using step"
    },
    {
      "speakerLabel": "spk_0",
      "start": 307.59999999999997,
      "end": 314.8,
      "text": " functions for continuous build orchestration before and it's a little bit clunky it's improved"
    },
    {
      "speakerLabel": "spk_0",
      "start": 314.8,
      "end": 319.76,
      "text": " probably quite a lot now that you can use AWS SDK from step functions and I would imagine that the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 319.76,
      "end": 324.15999999999997,
      "text": " cold start time for a Lambda function to do a build is going to be significantly less than the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 324.15999999999997,
      "end": 328.24,
      "text": " code code build container but you still have to then go and implement your git clone and all of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.24,
      "end": 334.88,
      "text": " that stuff in Lambda if and deal with that the secrets and your access to git and everything so I"
    },
    {
      "speakerLabel": "spk_0",
      "start": 334.88,
      "end": 338.16,
      "text": " maybe leave it for someone else to iron out all the kinks before I go trying that option"
    },
    {
      "speakerLabel": "spk_0",
      "start": 339.04,
      "end": 344.24,
      "text": " so that's those are some of the applications that have come up I guess what do you think Luciano"
    },
    {
      "speakerLabel": "spk_1",
      "start": 349.2,
      "end": 355.84000000000003,
      "text": " is it have I missed anything maybe we can remark again the use case that we kind of inferred to previously about caching because again if you have this storage and maybe you have produced large"
    },
    {
      "speakerLabel": "spk_1",
      "start": 355.84,
      "end": 360.64,
      "text": " files that you might need to produce over and over again there is no guarantee that that file will be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 360.64,
      "end": 365.28,
      "text": " available across invocations but you could check if it's there you don't need to to recreate it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 365.28,
      "end": 370.23999999999995,
      "text": " again you can just use it so in that way could be kind of a soft layer of cache it's not going to be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 370.23999999999995,
      "end": 375.91999999999996,
      "text": " the most reliable but since you have it you can try to use it and maybe it will give you a little"
    },
    {
      "speakerLabel": "spk_1",
      "start": 375.91999999999996,
      "end": 382.4,
      "text": " bit of a boost in your overall computation time across invocations so yeah again I don't know if"
    },
    {
      "speakerLabel": "spk_1",
      "start": 382.4,
      "end": 387.12,
      "text": " it's the most useful thing but it's there and you can use it and it might give you some small"
    },
    {
      "speakerLabel": "spk_1",
      "start": 387.12,
      "end": 393.28,
      "text": " advantages what can we say instead in terms of pricing is this something that as a host is it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 399.35999999999996,
      "end": 404.08,
      "text": " something we need to enable or it's just available for everyone you get the so the existing volume of slash temp was 512 megabytes you still get that for free anything above that that you're charged"
    },
    {
      "speakerLabel": "spk_0",
      "start": 404.08,
      "end": 411.44,
      "text": " for and the unit prices per gigabyte per second so it's similar it scales linearly just like your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 411.44,
      "end": 416.96,
      "text": " lambda memory I did a pricing sheet just to compare what it would be like and see"
    },
    {
      "speakerLabel": "spk_0",
      "start": 416.96,
      "end": 421.6,
      "text": " for different function sizes how much of an impact would it have if you allocated the maximum 10"
    },
    {
      "speakerLabel": "spk_0",
      "start": 421.6,
      "end": 427.2,
      "text": " gigabytes of ram and in general my conclusion is it doesn't really make a lot of a difference it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 427.2,
      "end": 433.28,
      "text": " it's pretty cheap compared to your memory cost so if you've got a the maximum memory allocated of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 433.28,
      "end": 438.88,
      "text": " 10 gigs and you add also 10 gigs of ephemeral storage it almost makes it's an insignificant"
    },
    {
      "speakerLabel": "spk_0",
      "start": 438.88,
      "end": 442.96,
      "text": " difference I would say to your cost because most of your cost is about the memory now if you've"
    },
    {
      "speakerLabel": "spk_0",
      "start": 442.96,
      "end": 449.12,
      "text": " got a really frugal function let's say 128 megabytes of ram and you go for the max storage"
    },
    {
      "speakerLabel": "spk_0",
      "start": 449.12,
      "end": 454.56,
      "text": " with that then it's going to make around 15 to 20 percent of a cost increase so it's still not"
    },
    {
      "speakerLabel": "spk_1",
      "start": 459.92,
      "end": 465.76,
      "text": " particularly significant even if you're using a very low memory and high storage nice yeah that's that's interesting I did expect it would be kind of a free feature that you can just use more space"
    },
    {
      "speakerLabel": "spk_1",
      "start": 465.76,
      "end": 473.76,
      "text": " but it makes sense because it's still a significant amount of more disk space right so okay let's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 473.76,
      "end": 482.32,
      "text": " maybe try to compare how this feature plays against other types of storage that you can use"
    },
    {
      "speakerLabel": "spk_1",
      "start": 482.32,
      "end": 488.71999999999997,
      "text": " with lambda and I think that the most obvious one is of course S3 so the S3 is probably what you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 488.71999999999997,
      "end": 494.96,
      "text": " will be using most of the time and one of the big differences of course that S3 is durable and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 494.96,
      "end": 500.23999999999995,
      "text": " reliable so when you store something in S3 it's there and you are pretty much guaranteed it's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 500.23999999999995,
      "end": 504.71999999999997,
      "text": " going to be there so it's something you can reliably use across lambda invocations"
    },
    {
      "speakerLabel": "spk_1",
      "start": 504.71999999999997,
      "end": 509.76,
      "text": " but of course every time you need to fit to fetch that data again into the lambda so that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 510.32,
      "end": 514.8,
      "text": " if it's a big file of course expect that that's going to take some time and that time of course"
    },
    {
      "speakerLabel": "spk_1",
      "start": 514.8,
      "end": 518.4,
      "text": " becomes part of your lambda invocation time something you need to pay for something your"
    },
    {
      "speakerLabel": "spk_1",
      "start": 518.4,
      "end": 527.92,
      "text": " users are waiting for so that that is an interesting comparison to make another use case is EFS which"
    },
    {
      "speakerLabel": "spk_1",
      "start": 529.6,
      "end": 536.56,
      "text": " should be lower latency than a strip for bigger files I think there is again that article"
    },
    {
      "speakerLabel": "spk_1",
      "start": 537.12,
      "end": 543.04,
      "text": " maybe it's another article from from Lumigo that shows that there is from five to ten times lower"
    },
    {
      "speakerLabel": "spk_1",
      "start": 543.04,
      "end": 549.92,
      "text": " latency with EFS yeah and also it's a little bit more complex to set up because it requires the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 549.92,
      "end": 556.88,
      "text": " VPC and IOPS optimizations so EFS has pretty much the same characteristics as S3 in terms of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 569.76,
      "end": 574.64,
      "text": " it is a durable storage it should be reliable but it's a little bit more complex to set up definitely the other two interesting use cases are lambda layers and container images that we already mentioned a little bit but the idea is that another way that you could use to load data"
    },
    {
      "speakerLabel": "spk_1",
      "start": 574.64,
      "end": 581.28,
      "text": " into your lambda is you can build your lambda with a container and include the data as part of the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 581.28,
      "end": 586.64,
      "text": " container data or you could use lambda layers put the data in a layer and then load the layer with"
    },
    {
      "speakerLabel": "spk_1",
      "start": 586.64,
      "end": 592.24,
      "text": " the lambda but you need to keep in mind that in those cases the data is immutable so these are"
    },
    {
      "speakerLabel": "spk_1",
      "start": 592.24,
      "end": 597.04,
      "text": " good use cases when you have artifacts that need to live with your code maybe I don't know assets"
    },
    {
      "speakerLabel": "spk_1",
      "start": 597.04,
      "end": 601.8399999999999,
      "text": " like images or whatever you need to use inside your lambda but it's not something you can use to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 601.8399999999999,
      "end": 608.16,
      "text": " write into so these are just good use cases for when you need to bring immutable data into the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 608.16,
      "end": 613.28,
      "text": " lambda and there are different limits lambda layers is limited to 50 megabytes and container"
    },
    {
      "speakerLabel": "spk_1",
      "start": 613.28,
      "end": 618,
      "text": " images you can do up to 10 gigabytes so for instance you already mentioned that in the case"
    },
    {
      "speakerLabel": "spk_1",
      "start": 618,
      "end": 623.04,
      "text": " for instance you have a big ml model maybe you can just build the lambda as a container and include"
    },
    {
      "speakerLabel": "spk_1",
      "start": 623.04,
      "end": 627.5999999999999,
      "text": " the model together with your code because most likely you don't need to change your code for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 627.5999999999999,
      "end": 634.9599999999999,
      "text": " the model as the lambda executes so yeah I don't know in the end what do you feel you will be using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 644.4,
      "end": 650.9599999999999,
      "text": " and maybe kind of a summary of what we just said you will use more s3 or other types of storage for sure I think the decision tree for this is with lambda avoid storage if you can and do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 650.96,
      "end": 655.9200000000001,
      "text": " everything in memory because you can get up to 10 gigabytes of ram so if do you need 10 gigabytes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 655.9200000000001,
      "end": 659.84,
      "text": " of ephemeral storage if you can just store everything in memory stream what you need in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 659.84,
      "end": 666.32,
      "text": " and stream what you need out and if you do need to have any durability stream it in and out from s3"
    },
    {
      "speakerLabel": "spk_0",
      "start": 666.88,
      "end": 671.52,
      "text": " so the question there just comes down to s3 transfer performance which maybe we can talk"
    },
    {
      "speakerLabel": "spk_0",
      "start": 671.52,
      "end": 677.2,
      "text": " about a little bit but again the the rest of the decision tree is if you can't use s3 I would say"
    },
    {
      "speakerLabel": "spk_0",
      "start": 677.2,
      "end": 683.2,
      "text": " yeah use efs if you do need that shared storage with more guaranteed throughput and more of a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 683.2,
      "end": 689.2,
      "text": " file system type model rather than the object store model of s3 and then everything else like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 689.2,
      "end": 693.6800000000001,
      "text": " if it doesn't change that often bundle it into your image container images are it's one of the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 693.6800000000001,
      "end": 699.12,
      "text": " real benefits of you've been able to use container images is that you can bundle data in it so if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 699.12,
      "end": 703.36,
      "text": " you've got some sort of model data something that doesn't change across implications you can bundle"
    },
    {
      "speakerLabel": "spk_0",
      "start": 703.36,
      "end": 708.08,
      "text": " it in and then slash temp it's almost like the last resort so I don't want to be too negative"
    },
    {
      "speakerLabel": "spk_0",
      "start": 708.08,
      "end": 712,
      "text": " about this feature but I would say like it's a nice to have for those cases when you need to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 712,
      "end": 720,
      "text": " create a reasonable amount of ephemeral data if you're we talked about the caching use case you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 720,
      "end": 723.92,
      "text": " just covered it there lee channel and I would say like it's great that you can do caching across"
    },
    {
      "speakerLabel": "spk_0",
      "start": 723.92,
      "end": 728.88,
      "text": " instances but adding a caching layer is an extra piece of complexity you need to manage then you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 728.88,
      "end": 734.4,
      "text": " need to manage okay your cache capacity you don't want to overfill your cache you need to have a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 735.6,
      "end": 740.96,
      "text": " ejection algorithm for objects in your cache and you know you need to be a kind of monitoring your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 740.96,
      "end": 745.4399999999999,
      "text": " cache hit metrics and that kind of stuff if you're if it's really going to be a proper optimization"
    },
    {
      "speakerLabel": "spk_0",
      "start": 745.4399999999999,
      "end": 750.88,
      "text": " so in general it's much better to for lambda functions to remain stateless because that's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 750.88,
      "end": 754.96,
      "text": " where the beauty and the simplicity ultimately comes from so this is just for some of those edge"
    },
    {
      "speakerLabel": "spk_0",
      "start": 754.96,
      "end": 759.2,
      "text": " cases where you really need extra disk storage where you need to do kind of random access and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.2,
      "end": 771.6800000000001,
      "text": " seeks into the local file system and that exceeds 512 megs yeah you told me that you did a little bit of research in terms of how network speed could affect this decision tree so for instance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 771.6800000000001,
      "end": 777.44,
      "text": " if you really need to load big files and you try to do that from S3 like yeah how the other does"
    },
    {
      "speakerLabel": "spk_0",
      "start": 782.48,
      "end": 787.84,
      "text": " it really play out for you is it better to have something in temp maybe in that case or not yeah yeah this is this is a good question i think because when you say okay well that it's a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 788.4,
      "end": 792.5600000000001,
      "text": " optimization that you can keep this across multiple invocations then the question is okay"
    },
    {
      "speakerLabel": "spk_0",
      "start": 792.5600000000001,
      "end": 795.76,
      "text": " well how does the data get there in the first place and how much of an optimization are you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 795.76,
      "end": 802,
      "text": " going to get so let's say you're going for the maximum 10 gigabytes of storage i did some kind"
    },
    {
      "speakerLabel": "spk_0",
      "start": 802,
      "end": 808.24,
      "text": " of informal benchmarking on lambda and the maximum speed i could get for transferring"
    },
    {
      "speakerLabel": "spk_0",
      "start": 808.24,
      "end": 814.96,
      "text": " a gigabyte of data it was kind of approaching a gigabit per second but not really the average was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 814.96,
      "end": 820.88,
      "text": " actually around 600 megabits so around two-thirds of a gigabit say you know sometimes it got the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 820.88,
      "end": 825.44,
      "text": " the maximum speed got a little bit better than that it was kind of approaching a gigabit per"
    },
    {
      "speakerLabel": "spk_0",
      "start": 825.44,
      "end": 831.12,
      "text": " second but on average it was around two-thirds of a gigabit so if you want to fill your slash temp"
    },
    {
      "speakerLabel": "spk_0",
      "start": 831.12,
      "end": 838.4,
      "text": " on cold start with 10 gigs of data that's going to take you over two minutes at that speed so you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 838.4,
      "end": 843.84,
      "text": " can i guess what that says is that by caching it you're going to save two minutes in subsequent"
    },
    {
      "speakerLabel": "spk_0",
      "start": 843.84,
      "end": 849.6,
      "text": " invocations but what it also kind of suggests to us is maybe what we want instead of this cache is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 849.6,
      "end": 858.32,
      "text": " just better network throughput a faster highway to s3 if you like um i know that with ec2 you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 858.32,
      "end": 864.6400000000001,
      "text": " turn on enhanced networking and get 100 gigabytes of network performance now i haven't benchmarked"
    },
    {
      "speakerLabel": "spk_0",
      "start": 864.6400000000001,
      "end": 868.24,
      "text": " that to see what if you can get 100 gigabits directly to s3 you know your mileage is going to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 868.24,
      "end": 875.36,
      "text": " vary but that's a significant difference from the near gigabit performance we can observe from lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 875.36,
      "end": 879.12,
      "text": " so if you can imagine if we could increase the network performance by a factor of say 50"
    },
    {
      "speakerLabel": "spk_0",
      "start": 879.9200000000001,
      "end": 883.36,
      "text": " that would make a massive difference and the need for caching would suddenly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 883.36,
      "end": 888.64,
      "text": " dissipate i would definitely pay for some use cases i definitely pay a lot more just to get"
    },
    {
      "speakerLabel": "spk_1",
      "start": 894.5600000000001,
      "end": 899.76,
      "text": " that enhanced networking in lambda yeah that's a very good point and yeah will be interesting to see what other people think about this stuff and if they found particularly interesting use case"
    },
    {
      "speakerLabel": "spk_1",
      "start": 899.76,
      "end": 904.96,
      "text": " then maybe we are not seeing right now i remember i i heard somebody saying oh yeah you can load a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 904.96,
      "end": 910.32,
      "text": " sqlite database into the temp storage and then you can do kind of more dynamic queries and analytics"
    },
    {
      "speakerLabel": "spk_1",
      "start": 910.32,
      "end": 915.12,
      "text": " from that storage which is maybe an interesting use case but i don't know i would like to see"
    },
    {
      "speakerLabel": "spk_1",
      "start": 915.12,
      "end": 920.32,
      "text": " some like real application built using these ideas and then you can actually see if there are benefits"
    },
    {
      "speakerLabel": "spk_1",
      "start": 920.32,
      "end": 924,
      "text": " or maybe just a little bit of a stretch to just try to use this new feature"
    },
    {
      "speakerLabel": "spk_1",
      "start": 937.36,
      "end": 943.2,
      "text": " yeah it sounds all in all that it's more on the niche side than in the let's all adopt this feature kind of uh category would you agree is that a fair characterization yeah right now yes and again maybe it's just that we are not seeing some particularly useful use case but again that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 943.2,
      "end": 947.6800000000001,
      "text": " that proves that maybe it's a niche type of feature like it's not something that has a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 947.6800000000001,
      "end": 952,
      "text": " generally available utility that everybody everybody's going to leverage from tomorrow right"
    },
    {
      "speakerLabel": "spk_1",
      "start": 952.96,
      "end": 958.8000000000001,
      "text": " okay so should we remember that we have some resources we are going to link in the show"
    },
    {
      "speakerLabel": "spk_1",
      "start": 958.8000000000001,
      "end": 964.64,
      "text": " episodes we are going to link also the official announcement which is also surprisingly dry in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 964.64,
      "end": 969.1999999999999,
      "text": " terms of examples so that there was another interesting thing that we picked up on it's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 969.1999999999999,
      "end": 973.92,
      "text": " actually well detailed on how to use it and all but it doesn't give you a lot of examples on when"
    },
    {
      "speakerLabel": "spk_1",
      "start": 973.92,
      "end": 979.1999999999999,
      "text": " this could be useful and also we're going to mention the original tweet we discussed from"
    },
    {
      "speakerLabel": "spk_1",
      "start": 979.1999999999999,
      "end": 986.4,
      "text": " will dady and blog post from yan chui atlumigo describing more use cases and how to use it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 990.32,
      "end": 1000.5600000000001,
      "text": " excellent okay well with that please let us know if you found some really beneficial use cases that we haven't been able to spot and thanks for listening and we'll see you in the next episode"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1000.56,
      "end": 1011.3599999999999,
      "text": " you"
    }
  ]
}