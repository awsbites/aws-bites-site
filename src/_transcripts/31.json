{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3.7600000000000002,
      "text": " Should they use CloudFormation or should they use Terraform instead?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 3.7600000000000002,
      "end": 7.44,
      "text": " If you are just starting to do infrastructure as code, you probably have this question."
    },
    {
      "speakerLabel": "spk_0",
      "start": 7.44,
      "end": 11.040000000000001,
      "text": " And in today's episode, we'll try to cover these two technologies and highlight some"
    },
    {
      "speakerLabel": "spk_0",
      "start": 11.040000000000001,
      "end": 16.72,
      "text": " similarities and differences. We will also try to give you our opinions on which one is best"
    },
    {
      "speakerLabel": "spk_0",
      "start": 16.72,
      "end": 20.64,
      "text": " and which one you should use, but get ready for some debate because I think here we have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 20.64,
      "end": 25.44,
      "text": " a difference of opinion. My name is Luciano and today I'm joined by Eoin and this is AWS Bites"
    },
    {
      "speakerLabel": "spk_0",
      "start": 25.44,
      "end": 41.120000000000005,
      "text": " Podcast. So let's start by maybe recapping what both CloudFormation and Terraforms are useful"
    },
    {
      "speakerLabel": "spk_0",
      "start": 41.120000000000005,
      "end": 45.6,
      "text": " for and maybe what infrastructure as code is. What do you think there?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 52.16,
      "end": 57.68,
      "text": " When you're using infrastructure as code, what you're talking about is declaring the state of everything you want to be in AWS and you use some sort of tooling. It could be Terraform or"
    },
    {
      "speakerLabel": "spk_1",
      "start": 57.68,
      "end": 62.239999999999995,
      "text": " CloudFormation and that tooling will perform a set of actions to get you from your current state"
    },
    {
      "speakerLabel": "spk_1",
      "start": 62.239999999999995,
      "end": 66.39999999999999,
      "text": " into the target state that you've declared in code. And so why would you do that? Well,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 67.28,
      "end": 71.28,
      "text": " we've covered this in previous episodes, but with infrastructure as code, what you want is to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 72.16,
      "end": 75.92,
      "text": " make sure you've got a predictable deployment so you know exactly where you're coming from"
    },
    {
      "speakerLabel": "spk_1",
      "start": 75.92,
      "end": 80.4,
      "text": " and where you're going to, and you want to get some safety around what's in there and you don't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 80.4,
      "end": 85.60000000000001,
      "text": " want to have any kind of unpredictability there. So you can do things like code review, so you can"
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.60000000000001,
      "end": 90.80000000000001,
      "text": " have pull requests on your infrastructure as code and traceability, you know, you have a branch with"
    },
    {
      "speakerLabel": "spk_1",
      "start": 90.80000000000001,
      "end": 96,
      "text": " your resource code changes as well as your application code changes. So what it gives you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 96,
      "end": 100,
      "text": " is the ability to be able to deploy your infrastructure in multiple environments and make"
    },
    {
      "speakerLabel": "spk_1",
      "start": 100,
      "end": 107.60000000000001,
      "text": " sure that it's exactly the same in each one. So given that, I guess, yeah, that's we could"
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.6,
      "end": 113.28,
      "text": " that we could probably go into the two tools then. So we're talking today about CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.28,
      "end": 116.08,
      "text": " and Terraform. Would you like to talk about Terraform first? Yeah, I can start with Terraform."
    },
    {
      "speakerLabel": "spk_0",
      "start": 116.08,
      "end": 122.47999999999999,
      "text": " So Terraform is a tool that was not created by AWS, but by another company called AsciiCorp."
    },
    {
      "speakerLabel": "spk_0",
      "start": 123.28,
      "end": 129.12,
      "text": " And basically it's, yeah, it's an open source product. So you can just go on GitHub and look"
    },
    {
      "speakerLabel": "spk_0",
      "start": 129.12,
      "end": 133.6,
      "text": " at the source code, even contribute yourself. But of course, Terraform being a company as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 133.6,
      "end": 138.48,
      "text": " also a commercial offering and specifically in relationship to Terraform, they have something"
    },
    {
      "speakerLabel": "spk_0",
      "start": 138.48,
      "end": 143.6,
      "text": " called Terraform Cloud and Terraform Enterprise, which are tools that allow you to automate,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 143.6,
      "end": 147.68,
      "text": " I suppose, some of the manual work that you'll need to do yourself around if you're just using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 147.68,
      "end": 153.92,
      "text": " that, the bare bone open source Terraform. It supports, of course, infrastructure as code,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 153.92,
      "end": 159.68,
      "text": " but not just for AWS, but also for many other cloud providers. And by the way, not just the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 159.68,
      "end": 165.44,
      "text": " main one, like Google Cloud or Azure, there is a very long list and you can even support,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 165.44,
      "end": 171.20000000000002,
      "text": " I don't know, smaller DNS providers. So you can really get very granular. There is a huge variety"
    },
    {
      "speakerLabel": "spk_0",
      "start": 171.20000000000002,
      "end": 175.44,
      "text": " of providers, I guess is the technical terminology supported by Terraform."
    },
    {
      "speakerLabel": "spk_0",
      "start": 176.64000000000001,
      "end": 182.4,
      "text": " One interesting thing, which is very distinctive from other tools like Terraform is that they use,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 183.60000000000002,
      "end": 187.60000000000002,
      "text": " it's not really a proprietary language, but it's something that came out of Terraform itself. So"
    },
    {
      "speakerLabel": "spk_0",
      "start": 187.6,
      "end": 192.07999999999998,
      "text": " it's kind of a bespoke language to define infrastructure as code. And this language is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 192.07999999999998,
      "end": 214.35999999999999,
      "text": " called HCL, which stands for Azure"
    },
    {
      "speakerLabel": "spk_0",
      "start": 214.36,
      "end": 224.4,
      "text": " HCL. And the CLI allows you to, once you have defined your own infrastructure as code using HCL,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 224.4,
      "end": 230.56,
      "text": " allows you to create a plan, which basically means if I want to apply this particular configuration"
    },
    {
      "speakerLabel": "spk_0",
      "start": 230.56,
      "end": 236,
      "text": " to remote deployment, what's going to happen? And Terraform is basically going to give you a plan of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 236,
      "end": 240.72000000000003,
      "text": " the different things that will change. So this is something very visible that you can see and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 240.72,
      "end": 245.76,
      "text": " decide, okay, this looks correct. At that point, you can decide to execute that plan and actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 245.76,
      "end": 251.6,
      "text": " apply all the changes. Another interesting thing in Terraform is the concept of state."
    },
    {
      "speakerLabel": "spk_0",
      "start": 251.6,
      "end": 258.56,
      "text": " And by state, the way I like to think about it is basically the view that Terraform has of your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 258.56,
      "end": 263.76,
      "text": " current deployment in production or whatever other environment that is. And that is important"
    },
    {
      "speakerLabel": "spk_0",
      "start": 263.76,
      "end": 269.04,
      "text": " because every time you need to reapply something, like you want to change resources, Terraform will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 269.04,
      "end": 274.56,
      "text": " look into the last state, the last known state, and use that to decide what to do next. So this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 274.56,
      "end": 278.40000000000003,
      "text": " is another interesting thing because basically Terraform doesn't really go into the infrastructure"
    },
    {
      "speakerLabel": "spk_0",
      "start": 278.40000000000003,
      "end": 284,
      "text": " itself and try to assess the current state, but uses the previous representation of the state. So"
    },
    {
      "speakerLabel": "spk_0",
      "start": 284,
      "end": 288.88,
      "text": " very careful there because if you change things manually in between, Terraform is not going to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 288.88,
      "end": 295.20000000000005,
      "text": " see your manual changes. It only remembers the last state managed by Terraform. Now, by default,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 295.2,
      "end": 300,
      "text": " the state is just a JSON file that ends up in your file system when you run Terraform locally."
    },
    {
      "speakerLabel": "spk_0",
      "start": 300.56,
      "end": 304.4,
      "text": " But of course, this is not ideal because if you're working on a team, you might want to have that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 304.4,
      "end": 310.08,
      "text": " shared so that everyone deploying will have the same view of the world. So there are ways that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 310.08,
      "end": 317.44,
      "text": " you can store that state in S3 or in DynamoDB or in some other shared storage. And this leads"
    },
    {
      "speakerLabel": "spk_0",
      "start": 317.44,
      "end": 322.4,
      "text": " to another interesting feature of Terraform, which is we can say it's a client server model,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 322.4,
      "end": 328.32,
      "text": " where you are running these changes from a client. It could be like your own development machine,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.32,
      "end": 334.4,
      "text": " it could be a CI CD pipeline. But what happens is that once you try to run the CLI, the CLI itself"
    },
    {
      "speakerLabel": "spk_0",
      "start": 334.4,
      "end": 340.08,
      "text": " will do all the changes on your infrastructure by calling AWS APIs directly. At least this is in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 340.08,
      "end": 345.91999999999996,
      "text": " case of AWS. Of course, if you use other providers, it will interact with the APIs of those providers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 345.91999999999996,
      "end": 352,
      "text": " So this is kind of the idea that Terraform will call the APIs for you as if you were calling your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 352,
      "end": 357.36,
      "text": " APIs directly from the CLI or maybe if you were running CLI commands against AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 358.08,
      "end": 364.16,
      "text": " So just to recap, the main feature is that you can write your infrastructure as code using HCL,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 364.16,
      "end": 370.16,
      "text": " then you can plan what happens if you want to apply those changes. You can actually apply the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 370.16,
      "end": 375.44,
      "text": " changes or execute the plan. You also have rollbacks. So basically you can decide to go back"
    },
    {
      "speakerLabel": "spk_0",
      "start": 375.44,
      "end": 380.24,
      "text": " in case something went wrong. But there are also other interesting extensibility features like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 380.24,
      "end": 386.48,
      "text": " plugins and modules that we can probably discuss a little bit more later. And you can deploy to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 386.48,
      "end": 392,
      "text": " multiple cloud providers. And finally, you can also query existing resources. So for instance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 392,
      "end": 397.12,
      "text": " if you want to use things that are already online as part of your definition of infrastructure as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 397.12,
      "end": 401.12,
      "text": " code, like I don't know, you want to reference a bucket that was already provisioned before,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 401.76,
      "end": 406.56,
      "text": " you can do that as part of the HCL language. There are constructs that allow you to do that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.56,
      "end": 411.36,
      "text": " I hope that there was a comprehensive view, but yeah, what about CloudFormation at this point?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 413.36,
      "end": 417.84,
      "text": " Yeah, I think that sets it up nicely for a comparison."
    },
    {
      "speakerLabel": "spk_1",
      "start": 417.84,
      "end": 423.76,
      "text": " So I would describe CloudFormation as the primary difference really is that while Terraform is a tool that operates in that client"
    },
    {
      "speakerLabel": "spk_1",
      "start": 423.76,
      "end": 430.72,
      "text": " server mode you described, CloudFormation is an AWS service. So it has a client, but"
    },
    {
      "speakerLabel": "spk_1",
      "start": 431.28,
      "end": 436.08,
      "text": " the main features of CloudFormation happen and the AWS managed service. And that's the fun part"
    },
    {
      "speakerLabel": "spk_1",
      "start": 436.08,
      "end": 440.8,
      "text": " and that's the fundamental difference. And it's quite an important one as well. So what you're"
    },
    {
      "speakerLabel": "spk_1",
      "start": 440.8,
      "end": 444.88,
      "text": " doing essentially is you're declaring the state of all of your cloud resources and you're giving"
    },
    {
      "speakerLabel": "spk_1",
      "start": 444.88,
      "end": 452,
      "text": " the templates to AWS and asking AWS CloudFormation service to apply the differences for you. So it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 452,
      "end": 457.12,
      "text": " all happens then cloud side rather than this client server model. So in terms of how, what"
    },
    {
      "speakerLabel": "spk_1",
      "start": 457.12,
      "end": 463.28,
      "text": " the templates look like, it uses JSON or YAML. So it's not the language that CloudFormation gives"
    },
    {
      "speakerLabel": "spk_1",
      "start": 463.28,
      "end": 468.96,
      "text": " you out of the box is not as powerful as what you get with HCL, but there's additional tools"
    },
    {
      "speakerLabel": "spk_1",
      "start": 468.96,
      "end": 474.08,
      "text": " you can use to overcome some of the limitations of JSON or YAML. So there's a lot of features in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 474.08,
      "end": 477.35999999999996,
      "text": " CloudFormation. It's actually growing even in the last year, we've had a lot of new features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 478.55999999999995,
      "end": 482.55999999999995,
      "text": " but fundamentally the state in CloudFormation is stored in something called a stack. And that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 482.55999999999995,
      "end": 486.23999999999995,
      "text": " state is something that AWS manages for you. So you don't have to think about where that state is."
    },
    {
      "speakerLabel": "spk_1",
      "start": 486.96,
      "end": 489.67999999999995,
      "text": " So a stack is essentially a collection of resources with its own state."
    },
    {
      "speakerLabel": "spk_1",
      "start": 489.68,
      "end": 494.40000000000003,
      "text": " And there's also something called stack sets, which is essentially the same stack applied across"
    },
    {
      "speakerLabel": "spk_1",
      "start": 494.40000000000003,
      "end": 499.44,
      "text": " multiple accounts or regions. You also have things like nested stacks. So you can have a hierarchy"
    },
    {
      "speakerLabel": "spk_1",
      "start": 499.44,
      "end": 504.8,
      "text": " of CloudFormation templates. And when you mentioned Terraform plan, there's a similar idea in Cloud"
    },
    {
      "speakerLabel": "spk_1",
      "start": 504.8,
      "end": 510.16,
      "text": " formation called a change set. So you can create a change set and that's also created on the cloud"
    },
    {
      "speakerLabel": "spk_1",
      "start": 510.16,
      "end": 514.16,
      "text": " side. And it's essentially a list of changes that will be applied. And then you can decide whether"
    },
    {
      "speakerLabel": "spk_1",
      "start": 514.16,
      "end": 520.3199999999999,
      "text": " to execute that change set or not. You also mentioned rollbacks. So one of the things I"
    },
    {
      "speakerLabel": "spk_1",
      "start": 520.3199999999999,
      "end": 526.24,
      "text": " like about CloudFormation is that it has automated rollbacks. So I think about more like when you're"
    },
    {
      "speakerLabel": "spk_1",
      "start": 526.24,
      "end": 530,
      "text": " interacting with a database, you've got a transaction and within that transaction, you've"
    },
    {
      "speakerLabel": "spk_1",
      "start": 530,
      "end": 534.9599999999999,
      "text": " got a series of changes and a CloudFormation update is very much like a transaction. And if"
    },
    {
      "speakerLabel": "spk_1",
      "start": 534.9599999999999,
      "end": 540.24,
      "text": " one of those updates fails, CloudFormation will manage the rollback for you. And for that reason,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 540.24,
      "end": 545.6800000000001,
      "text": " it feels safer using CloudFormation because it's kind of AWS's responsibility to fulfill that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 545.6800000000001,
      "end": 552.64,
      "text": " rollback. Recently, you actually have support for removing or disabling rollbacks in development as"
    },
    {
      "speakerLabel": "spk_1",
      "start": 552.64,
      "end": 558,
      "text": " well. So that makes the development process a bit handier, a bit faster. And you also mentioned one"
    },
    {
      "speakerLabel": "spk_1",
      "start": 558,
      "end": 563.6,
      "text": " of the things that can happen with any of these tools is that manual changes, people can go in and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 563.6,
      "end": 568.08,
      "text": " make changes that aren't reflected in the stored state. And one of the newer features of CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 568.08,
      "end": 574.4000000000001,
      "text": " is drift detection. So it'll let you know and track the state of resources against the template."
    },
    {
      "speakerLabel": "spk_1",
      "start": 574.4000000000001,
      "end": 578.4000000000001,
      "text": " So you can see what's changed compared to that state. That can be useful. It doesn't support all"
    },
    {
      "speakerLabel": "spk_1",
      "start": 578.4000000000001,
      "end": 583.5200000000001,
      "text": " the resource types, but I think there's a growing set. There is support for information as well for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 583.5200000000001,
      "end": 588.1600000000001,
      "text": " importing existing resources. It's not something I would like to have to do very often because it's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 588.1600000000001,
      "end": 593.0400000000001,
      "text": " a little bit of a laborious process, but it's also a reasonably new feature where if you've got some"
    },
    {
      "speakerLabel": "spk_1",
      "start": 593.0400000000001,
      "end": 597.2,
      "text": " resources that you created manually in the console, you can kind of adopt them into your CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 597.2,
      "end": 603.9200000000001,
      "text": " stack. There's a lot of other new features as well, like hooks. So you can execute arbitrary"
    },
    {
      "speakerLabel": "spk_1",
      "start": 603.9200000000001,
      "end": 608.72,
      "text": " code at different stages in the deployment life cycle. And there's this kind of other stuff as"
    },
    {
      "speakerLabel": "spk_1",
      "start": 608.72,
      "end": 612.24,
      "text": " well. Like if you've got an auto scaling group, CloudFormation integrates with that as well and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 612.24,
      "end": 618.4000000000001,
      "text": " can do rolling deployments. I think one of the kind of last features I'd call out is that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 618.4000000000001,
      "end": 622.88,
      "text": " CloudFormation gives you very good secrets management. So it's well integrated with SSM,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 622.88,
      "end": 628,
      "text": " parameter store for secure secrets and also secrets manager. So you don't have to pass those"
    },
    {
      "speakerLabel": "spk_1",
      "start": 628.8,
      "end": 636.24,
      "text": " around. They can be imported securely within the cloud side, within the CloudFormation service for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 636.24,
      "end": 642.16,
      "text": " you. And again, because it's JSON or YAML, it's fairly flat and declarative and not very dynamic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 642.16,
      "end": 646.64,
      "text": " And that can be a benefit, but also a drawback. I know in Terraform, you have like loops. You can"
    },
    {
      "speakerLabel": "spk_1",
      "start": 646.64,
      "end": 651.52,
      "text": " do count, loops up to account, like a for loop essentially. In CloudFormation, you don't have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 651.52,
      "end": 655.28,
      "text": " loops, but you do have conditions. So you can decide whether to include something or not based"
    },
    {
      "speakerLabel": "spk_1",
      "start": 655.28,
      "end": 659.36,
      "text": " on the value of a parameter. And that parameter could come from inputs to the template, or it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 659.36,
      "end": 665.1999999999999,
      "text": " could come from a SSM parameter for you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 665.1999999999999,
      "end": 671.36,
      "text": " On that one, we have an article that we wrote some time ago with examples that we'll put it in the show description. Yeah, definitely. That's a good chat."
    },
    {
      "speakerLabel": "spk_1",
      "start": 672.56,
      "end": 675.84,
      "text": " Because it's an AWS service as well, I suppose it's worth calling out some of the integrations"
    },
    {
      "speakerLabel": "spk_1",
      "start": 675.84,
      "end": 679.92,
      "text": " that CloudFormation already has with other AWS services. So if you're into code deploy for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 679.92,
      "end": 684.4,
      "text": " deploying to EC2 or Lambda, CloudFormation integrates well with that. So you can do rolling"
    },
    {
      "speakerLabel": "spk_1",
      "start": 684.4,
      "end": 690.56,
      "text": " deployments there. Of course, it's integrated with IAM. So your CloudFormation actions are going to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 690.56,
      "end": 695.1999999999999,
      "text": " be done under a role that you can specify and control. And if you want to be able to deploy"
    },
    {
      "speakerLabel": "spk_1",
      "start": 695.1999999999999,
      "end": 701.68,
      "text": " CloudFormation templates, give users the capability to deploy stuff from the console on demand,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 701.68,
      "end": 706.48,
      "text": " like if they need a bucket or whatever application you might want to deploy on demand, there's a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 706.48,
      "end": 710.24,
      "text": " service called Service Catalog that uses CloudFormation under the hood for that. So those"
    },
    {
      "speakerLabel": "spk_1",
      "start": 710.24,
      "end": 715.36,
      "text": " are some integrations of note. And of course, you also have the tooling that's built on top of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 715.36,
      "end": 720.88,
      "text": " CloudFormation. I think I read somewhere recently that like 70% of CloudFormation is deployed using"
    },
    {
      "speakerLabel": "spk_1",
      "start": 720.88,
      "end": 729.6,
      "text": " the serverless framework. Don't quote me on that. Something pretty high. Yeah. And AWS SAM is a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 729.6,
      "end": 734.64,
      "text": " similar tool that's also built on CloudFormation. And since we mentioned that with YAML and JSON,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 734.64,
      "end": 739.28,
      "text": " it's not very dynamic. Of course, you have the CDK, which we have covered in a previous episode"
    },
    {
      "speakerLabel": "spk_1",
      "start": 739.28,
      "end": 744.72,
      "text": " in a lot of depth. And that's a programmatic imperative way of generating CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 744.72,
      "end": 752.8,
      "text": " in your language of choice. There are some limitations in quotas because it's an AWS service."
    },
    {
      "speakerLabel": "spk_1",
      "start": 753.76,
      "end": 759.04,
      "text": " In terms of numbers, you can put 500 resources in a stack and you can have up to like 2000 stacks,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 759.04,
      "end": 766.16,
      "text": " which should be plenty for a given account. That number of resources was increased a couple of years"
    },
    {
      "speakerLabel": "spk_1",
      "start": 766.16,
      "end": 772.24,
      "text": " ago, maybe even last year, but I've never, I definitely haven't reached the 500 resource limit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 773.36,
      "end": 779.12,
      "text": " because I tend to use small stacks. I prefer things that way. The template size itself can be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 779.12,
      "end": 784.24,
      "text": " 50K, but you can put it up on S3 and then you can use a template size of up to a megabyte."
    },
    {
      "speakerLabel": "spk_1",
      "start": 784.24,
      "end": 787.68,
      "text": " Which considering that's- One of the other important limitations, actually,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 787.68,
      "end": 793.12,
      "text": " just to mention it quickly, is that with CloudFormation, you cannot modify a resource"
    },
    {
      "speakerLabel": "spk_1",
      "start": 793.12,
      "end": 796.4,
      "text": " that isn't within the stack. And that's an important one to be aware of. So if you've"
    },
    {
      "speakerLabel": "spk_1",
      "start": 796.4,
      "end": 802.16,
      "text": " got an existing bucket and you wanted to add, like previously it was quite common, you'd want to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 802.16,
      "end": 806.56,
      "text": " create an application, but you wanted it to be a Lambda function to be triggered by a notification"
    },
    {
      "speakerLabel": "spk_1",
      "start": 806.56,
      "end": 811.1999999999999,
      "text": " in S3 bucket. If you were trying to modify the bucket's notification configuration, you couldn't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 811.1999999999999,
      "end": 815.8399999999999,
      "text": " do that in a different stack. So you had all these workarounds in serverless framework that would"
    },
    {
      "speakerLabel": "spk_1",
      "start": 815.84,
      "end": 822.08,
      "text": " create custom resources to fulfill that for you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 822.08,
      "end": 827.44,
      "text": " But you can also import something into a stack, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 827.44,
      "end": 831.9200000000001,
      "text": " Yeah, you could, you can import that, but you couldn't say have a shared bucket and then have lots of different other stacks that create notification configurations in that bucket."
    },
    {
      "speakerLabel": "spk_1",
      "start": 834.72,
      "end": 838.1600000000001,
      "text": " So that's it. Should we talk about some of the differences then?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 838.1600000000001,
      "end": 841.84,
      "text": " Yeah, let's try to- CloudFormation Terraform, let's try and pick a winner here."
    },
    {
      "speakerLabel": "spk_1",
      "start": 841.84,
      "end": 845.2,
      "text": " Let's try to summarize the differences first."
    },
    {
      "speakerLabel": "spk_0",
      "start": 845.2,
      "end": 850.72,
      "text": " We already mentioned some of them, but I think it's good to highlight them into a little bit more detail. So probably the first one,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 850.72,
      "end": 856.32,
      "text": " again, is that with Terraform, you have this client-side mode where everything is happening"
    },
    {
      "speakerLabel": "spk_0",
      "start": 856.32,
      "end": 861.9200000000001,
      "text": " in the machine that uses the Terraform CLI. So that machine is responsible for calling all the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 861.9200000000001,
      "end": 868.08,
      "text": " APIs and make sure that all the changes are applied through API calls. While in CloudFormation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 868.08,
      "end": 874.24,
      "text": " it's a managed service by AWS, you just submit your YAML or JSON, and then AWS will take care"
    },
    {
      "speakerLabel": "spk_0",
      "start": 874.24,
      "end": 878.24,
      "text": " of applying all the changes for you. So you could even disconnect the machine at that point,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 878.24,
      "end": 884.96,
      "text": " all the changes will still go on. So in that sense, probably plus one to CloudFormation for me,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 884.96,
      "end": 889.76,
      "text": " because of course it gives you a little bit more of peace of mind because you don't have to think,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 889.76,
      "end": 894.8,
      "text": " what's going to happen to this machine while the changes are happening? So AWS will take"
    },
    {
      "speakerLabel": "spk_0",
      "start": 894.8,
      "end": 899.12,
      "text": " care of all of that for you if you use CloudFormation. Do you agree with that?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 899.12,
      "end": 907.68,
      "text": " Yeah, I agree. It's just a managed service idea, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 907.68,
      "end": 914.8,
      "text": " It's taking more of the responsibility away from you, which is always a good thing in my book. I can cite Ben Quijo's tweet on the matter"
    },
    {
      "speakerLabel": "spk_1",
      "start": 914.8,
      "end": 921.36,
      "text": " there. I know he's a big fan of CloudFormation and that Cloud-side model. I think that I stole"
    },
    {
      "speakerLabel": "spk_1",
      "start": 921.36,
      "end": 927.28,
      "text": " that term, Cloud-side from him. But he mentioned in a tweet there, which we can link in as well"
    },
    {
      "speakerLabel": "spk_1",
      "start": 927.28,
      "end": 930.24,
      "text": " in the show notes, he said, going from CloudFormation to Terraform because of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 930.88,
      "end": 935.36,
      "text": " CloudFormation's shortcomings is like getting frustrated with Lambda and going to Kubernetes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 935.36,
      "end": 939.92,
      "text": " Sure, you can accomplish what you want there, but with a bigger TCO. So your total cost of ownership"
    },
    {
      "speakerLabel": "spk_1",
      "start": 939.92,
      "end": 944.4,
      "text": " might be higher because you're adopting a tooling that isn't a managed service from the cloud"
    },
    {
      "speakerLabel": "spk_1",
      "start": 944.4,
      "end": 950.4,
      "text": " provider. It's probably an opinionated view, but I would lean towards that side of the argument."
    },
    {
      "speakerLabel": "spk_1",
      "start": 950.4,
      "end": 954.9599999999999,
      "text": " Absolutely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 954.96,
      "end": 959.2,
      "text": " And if you want something like that, I think you can use one of the commercial offerings from Ashgore. But of course, at that point, you have to pay another provider and set up that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 959.2,
      "end": 965.2800000000001,
      "text": " account and manage that account. So maybe you have less responsibility at that point, but it comes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 965.2800000000001,
      "end": 971.2800000000001,
      "text": " with the additional cost of paying the provider, but also starting to use all new tools there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 973.0400000000001,
      "end": 973.9200000000001,
      "text": " For sure."
    },
    {
      "speakerLabel": "spk_1",
      "start": 973.9200000000001,
      "end": 977.6800000000001,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 977.6800000000001,
      "end": 983.44,
      "text": " Another interesting thing, and again, this is maybe a little bit opinionated, that Terraform feels a little bit more modular and extensible if you want, because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 983.44,
      "end": 987.6800000000001,
      "text": " there is a concept of modules, which is literally with the same syntax you use to define,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 988.24,
      "end": 994.5600000000001,
      "text": " I suppose we can call it a stack in Terraform. You can say, this is not a stack I want to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 994.5600000000001,
      "end": 999.9200000000001,
      "text": " apply right now to an actual deployment, but it's just like a prototype. And I'm going to accept"
    },
    {
      "speakerLabel": "spk_0",
      "start": 999.9200000000001,
      "end": 1004.5600000000001,
      "text": " some generic inputs, produce some outputs, and that becomes a module that at that point you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1004.5600000000001,
      "end": 1010.4000000000001,
      "text": " import in different stacks and just provide the different inputs that are expected. And it will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1010.4,
      "end": 1016.56,
      "text": " do the same things as if you were writing that same code copy-based into your actual ACL code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1016.56,
      "end": 1021.52,
      "text": " So that's a nice feature because basically by using the exact same syntax, there are very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1021.52,
      "end": 1026.6399999999999,
      "text": " small differences, you get that modularity and it feels like importing functions in a programming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1026.6399999999999,
      "end": 1031.44,
      "text": " language and just calling the functions. So that's something I really like from Terraform."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1032.16,
      "end": 1037.44,
      "text": " But also there are other ways to extend Terraform. There is already a concept of provider. There are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1037.44,
      "end": 1042.64,
      "text": " a lot of built-in providers like AWS, Azure, and all sorts of different providers. But of course,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1042.64,
      "end": 1048.16,
      "text": " you can also create your own if you want to support, I don't know, any provider or any cloud"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1048.16,
      "end": 1053.6000000000001,
      "text": " service that is not natively supported. Or if you just want to do custom things to interact even"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1053.6000000000001,
      "end": 1058,
      "text": " with providers that are supported, but maybe using features that are not currently existing in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1058,
      "end": 1063.28,
      "text": " actual built-in providers. And another interesting thing that I used in the past and I think is not"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1063.28,
      "end": 1070.3999999999999,
      "text": " that uncommon is this idea of null resource, which is basically a way to say I'm not really defining"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1070.3999999999999,
      "end": 1076.48,
      "text": " a resource that Terraform itself needs to manage. It's more I want to have a hook in my provisioning"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1076.48,
      "end": 1082.16,
      "text": " steps to say this is kind of a virtual resource and I can define conditions like, I don't know,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1082.16,
      "end": 1086.56,
      "text": " maybe when something else changes. And then with that condition, you can attach, for instance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1086.56,
      "end": 1092.08,
      "text": " a script or something else. And that way you can create mechanisms to say, okay, maybe before"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1092.08,
      "end": 1097.6799999999998,
      "text": " every deployment, if this particular condition happens, run a script that, I don't know, maybe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1097.6799999999998,
      "end": 1102.72,
      "text": " tries to get an SSL certificate from somewhere and then use that certificate as part of your stack."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1103.9199999999998,
      "end": 1108.6399999999999,
      "text": " So that's another, I suppose, easy enough way that you can create custom hooks into your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1108.6399999999999,
      "end": 1118.56,
      "text": " Terraform deployments. In that term, how do we compare extensibility from Terraform to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1118.56,
      "end": 1125.6,
      "text": " CloudFormation?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1125.6,
      "end": 1130.08,
      "text": " Yeah, this is an interesting one because it used to be difficult when you had, if you had a gap in the supported resource types in CloudFormation, you were quite limited,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1130.08,
      "end": 1135.6799999999998,
      "text": " but now there's so many options, there are almost too many. So the simplest one is probably custom"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1135.6799999999998,
      "end": 1140.96,
      "text": " resources where you can fairly quickly create a custom resource and you use AWS Lambda to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1140.96,
      "end": 1146.08,
      "text": " fulfill the creation update or delete of that resource in your account. And that's reasonably"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1146.08,
      "end": 1151.36,
      "text": " straightforward to create. It can be a little bit difficult to troubleshoot, but it's fairly easy"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1151.36,
      "end": 1155.36,
      "text": " to get started if you find that there's a gap in functionality or you want to create something"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1155.36,
      "end": 1161.04,
      "text": " unique to you in CloudFormation. Now you also have support for CloudFormation modules now."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1161.04,
      "end": 1167.52,
      "text": " So you can create either like a single resource or multiple resources. And it's a bit like a CDK"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1167.52,
      "end": 1173.1999999999998,
      "text": " construct, but you're just doing it with declarative CloudFormation. There's a new"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1173.2,
      "end": 1178.0800000000002,
      "text": " thing called the CloudFormation registry, where you can then register those modules publicly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1179.28,
      "end": 1183.76,
      "text": " And another thing you can put into the CloudFormation registry is a CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1183.76,
      "end": 1188.88,
      "text": " resource type. And this is where you're going all full in on creating your own CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1188.88,
      "end": 1194.88,
      "text": " resource type. And it's a much more involved process. There is some tooling, there's this"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1194.88,
      "end": 1198.72,
      "text": " CloudFormation command line tool that you can use to bootstrap this and to publish it to the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1198.72,
      "end": 1204.24,
      "text": " CloudFormation registry. But it's essentially like you're adding a feature into CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1204.24,
      "end": 1209.04,
      "text": " properly. So it includes validation, progress updates, all of the features you get with any"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1209.04,
      "end": 1213.6000000000001,
      "text": " CloudFormation resource type. I believe it's the same mechanism that CloudFormation internally"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1213.6000000000001,
      "end": 1219.2,
      "text": " uses for creating resources. And the difference between it and CloudFormation customer resources"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1219.84,
      "end": 1227.3600000000001,
      "text": " is that it's not running in your own Lambda, in your own AWS account. It's running in AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1227.36,
      "end": 1232.8799999999999,
      "text": " in their managed service. And there's something else called CloudFormation Macros, which allows"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1232.8799999999999,
      "end": 1238.8799999999999,
      "text": " you to do transformations and templating essentially. So people who have used AWS Sam"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1238.8799999999999,
      "end": 1245.1999999999998,
      "text": " might be familiar with the serverless transform, which allows you to create a Lambda function with"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1245.1999999999998,
      "end": 1250.1599999999999,
      "text": " just a few lines of code that actually uses the CloudFormation macro feature under the hood."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1250.8,
      "end": 1255.6799999999998,
      "text": " And there's also another popular one called CloudFormation include, which is just for doing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1255.68,
      "end": 1261.76,
      "text": " includes in your templates. And that's also using macros. But if I would recommend, if anyone is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1261.76,
      "end": 1267.52,
      "text": " interested in learning more about creating custom things in CloudFormation and extending"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1267.52,
      "end": 1272.96,
      "text": " CloudFormation support where there's missing resources, then the Cloudanaut blog, we've"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1272.96,
      "end": 1278.88,
      "text": " mentioned them on the podcast before. You guys know a lot about CloudFormation and they've"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1278.88,
      "end": 1282.3200000000002,
      "text": " created, they've a really good podcast called Three and a Half Ways to Work Around Missing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1282.32,
      "end": 1285.84,
      "text": " CloudFormation Support, which talks about all this stuff and more in depth."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1287.52,
      "end": 1294,
      "text": " Yeah. So at this point, another topic that comes to mind is what about multi-account deployments?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1294.56,
      "end": 1300.8799999999999,
      "text": " Does any of these tools out of the box allow you to start a deployment that actually is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1300.8799999999999,
      "end": 1305.2,
      "text": " going to deploy resources, not just in one account, but in a few different AWS accounts?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1305.2,
      "end": 1312.64,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1312.64,
      "end": 1318.56,
      "text": " So when you talk about multiple accounts, Luciano, I guess one of the things you think about is AWS organizations and you can create an AWS organization accounts using either CloudFormation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1318.56,
      "end": 1328.72,
      "text": " or, sorry, using Terraform, or you can also create them with the AWS SDK. But what I found is that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1328.72,
      "end": 1333.2,
      "text": " there's quite a lot of missing support across both of these ecosystems when it comes to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1333.2,
      "end": 1337.28,
      "text": " multiple accounts. Now, CloudFormation does give you stack sets. We mentioned that already."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1337.28,
      "end": 1342.56,
      "text": " So you can deploy the same stack to multiple accounts, but another tool which really fills in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1342.56,
      "end": 1349.8400000000001,
      "text": " all of the gaps here is organization formation or org formation. And this is just a really great"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1349.8400000000001,
      "end": 1354.48,
      "text": " bit of open source tooling that uses CloudFormation syntax, but extends it with lots of really,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1354.48,
      "end": 1359.76,
      "text": " really great multiple account deployment capability. So it allows you to create your"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1359.76,
      "end": 1366.24,
      "text": " accounts, but also decide what accounts you want to, sorry, what stacks you want to deploy into"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1366.24,
      "end": 1370.32,
      "text": " different accounts and perform tasks in each of those accounts and manage all of your organizations"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1370.32,
      "end": 1375.52,
      "text": " cross account infrastructure as code. Terraform does have some support, so you can create accounts,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1375.52,
      "end": 1381.68,
      "text": " like I said, but it's not as powerful as org formation. I don't think there's a really a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1381.68,
      "end": 1386.64,
      "text": " good replacement for org formations, org formations capabilities. There was something called"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1386.64,
      "end": 1392.8000000000002,
      "text": " Controlled Terra Account Factory for Terraform. And I know that AWS and HashiCorp have put a lot"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1392.8000000000002,
      "end": 1397.92,
      "text": " of effort into that experience to make it easy for people to manage accounts and all the resources"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1397.92,
      "end": 1403.68,
      "text": " across a large organization. But I think it's still fairly new. It's been a long time in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1403.68,
      "end": 1408,
      "text": " development and it's not yet widely adopted. So I haven't used it. I don't have personal experience"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1408,
      "end": 1412.5600000000002,
      "text": " of it. So your mileage may vary with it, but it's probably one to watch."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1412.56,
      "end": 1417.2,
      "text": " Yeah, absolutely. I never had to do cross account or multi-account deployments."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1417.76,
      "end": 1422.1599999999999,
      "text": " So I've seen these tools, but I never had the first-hand experience with them. So I"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1422.1599999999999,
      "end": 1427.52,
      "text": " wouldn't be able to compare them or give an opinion on those. Okay."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1432.56,
      "end": 1439.04,
      "text": " So one of the nice things we can do actually on that topic is AWS just announced the ability to close an AWS account via an API. So it kind of opens up a lot of new possibilities for people to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1439.04,
      "end": 1443.2,
      "text": " do kind of ephemeral account deployments with infrastructure as code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1443.2,
      "end": 1446.6399999999999,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1446.6399999999999,
      "end": 1452.1599999999999,
      "text": " Or even just to experiment with these features because you don't have to be worried about, I just created a new account just for testing out why I close it and that manual"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1452.1599999999999,
      "end": 1453.92,
      "text": " process. A lot of pain."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1453.92,
      "end": 1460.8799999999999,
      "text": " Okay. So just to try to wrap this up. So who is the winner? Let's start with when do you use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1460.8799999999999,
      "end": 1466.24,
      "text": " CloudFormesh? I'll leave this to you because you are on the CloudFormesh camp."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1466.24,
      "end": 1471.44,
      "text": " Yeah. Yeah."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1471.44,
      "end": 1476.08,
      "text": " The managed service aspect of it and the fact that AWS is managing your state for you is a big advantage for me. But of course that advantage only applies if you're only"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1476.08,
      "end": 1481.52,
      "text": " talking about AWS. So I would say use CloudFormesh if you're just talking about deployments to AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1481.52,
      "end": 1486.96,
      "text": " you're not dealing with multi-cloud deployments or other third-party resources. Then you'll get"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1486.96,
      "end": 1490.72,
      "text": " the benefit of automated rollbacks. You have lots of good tooling like the serverless framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1490.72,
      "end": 1494.64,
      "text": " So if you're doing serverless applications, you're going to be able to do that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1494.64,
      "end": 1500.48,
      "text": " If you're doing serverless applications, I would say embrace cloud formation and one of the tools"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1500.48,
      "end": 1504.4,
      "text": " that allows you to build on top of it like SAM or serverless framework, it makes it a lot, lot"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1504.4,
      "end": 1512,
      "text": " easier. So I would say my decision tree for infrastructure as code is use CloudFormesh."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1512,
      "end": 1516.8000000000002,
      "text": " If it's good tooling, obviously it depends on the organization you're working with and what"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1516.8000000000002,
      "end": 1521.0400000000002,
      "text": " skills people have. These are really important considerations. I'm not going to go in and try"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1521.04,
      "end": 1524.8,
      "text": " to convert everybody to CloudFormation if they're already using Terraform. That doesn't make sense."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1525.36,
      "end": 1529.12,
      "text": " But I would have a bias towards CloudFormation, especially if you're AWS only."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1529.68,
      "end": 1534.32,
      "text": " So what's the case for Terraform, the channel? Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1534.32,
      "end": 1538.3999999999999,
      "text": " So at this point, I think it's clear that I'm more on the Terraform camp, even though I've been using CloudFormation more and more in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1538.3999999999999,
      "end": 1544.3999999999999,
      "text": " last few years. But I still think that Terraform gives you a little bit of a better user experience"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1544.3999999999999,
      "end": 1549.12,
      "text": " still today. Like, yes, it's true that you need to learn a new custom language, but also that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1549.12,
      "end": 1554.7199999999998,
      "text": " custom language, I feel that gives you... It's a lot more expressive and you will not feel stuck"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1554.7199999999998,
      "end": 1560.2399999999998,
      "text": " about just limitations of trying to express certain concept in JSON or YAML. So I definitely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1560.2399999999998,
      "end": 1566.2399999999998,
      "text": " like that. And I also like how clear it is the diff of when you do a plan in Terraform, it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1566.2399999999998,
      "end": 1572,
      "text": " very clear to see what's changing, what not. And also Terraform has a very good documentation and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1572,
      "end": 1577.6799999999998,
      "text": " very good ID integration. So you get a lot of auto-complete and it's easy to figure out what"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1577.68,
      "end": 1582.96,
      "text": " are the right properties and resources of what you're trying to do. So in general, and of course,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1582.96,
      "end": 1588,
      "text": " this is opinionated, feel free to call me out if you think otherwise, I had a better user experience"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1588,
      "end": 1594.0800000000002,
      "text": " by using Terraform rather than CloudFormation. So that's maybe one data point to keep in mind."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1594.0800000000002,
      "end": 1597.76,
      "text": " But of course, if you are a company that is already heavily invested in Terraform,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1598.5600000000002,
      "end": 1602.8,
      "text": " go with that. You don't need to change just because you think CloudFormation could be better."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1602.8,
      "end": 1609.36,
      "text": " They are almost the same to some extent. The only win that I'm going to give to CloudFormation is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1609.36,
      "end": 1614.48,
      "text": " that with Terraform, you are a little bit on your own in figuring out how to manage deployment,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1614.48,
      "end": 1618.6399999999999,
      "text": " meaning which machine is going to actually do the deployment and where are you going to keep the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1618.6399999999999,
      "end": 1623.52,
      "text": " state so that it's consistent across deployments. And that it's always a little bit of a pain, but"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1624.48,
      "end": 1629.9199999999998,
      "text": " there are ways to automate all of that through CI-CD and by keeping the state in shared places"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1629.92,
      "end": 1636.4,
      "text": " like S3, Dynamo or other shared storages. And of course, one final point in favor of Terraform"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1636.4,
      "end": 1641.6000000000001,
      "text": " is that if you are building applications and those applications need to live in different"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1641.6000000000001,
      "end": 1647.28,
      "text": " cloud providers, or maybe your application uses resources in different cloud providers,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1647.28,
      "end": 1651.76,
      "text": " Terraform can give you a lot more control there because it supports out of the box a bunch of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1651.76,
      "end": 1656.72,
      "text": " different cloud providers. Now, that doesn't mean that it's doing some magic translation for you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1656.72,
      "end": 1662.72,
      "text": " You still need to explicitly say, I want to use this resource with this provider. So if you use,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1662.72,
      "end": 1666.64,
      "text": " I don't know, an Azure function compared to a Lambda, there isn't any abstraction for you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1666.64,
      "end": 1671.2,
      "text": " but you can reuse the same HGL syntax and the same Terraform concept to provision both."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1672,
      "end": 1675.3600000000001,
      "text": " It's going to be different code, but you have the same user experience."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1676.88,
      "end": 1682,
      "text": " I hope that that summarizes my opinion and maybe to finish off with this episode,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1682,
      "end": 1686.24,
      "text": " what we can do is give a quick mention to other tools that I personally haven't used,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1686.24,
      "end": 1691.76,
      "text": " but I've heard them coming up more and more in conversation. And I think the main one is Pulumi,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1691.76,
      "end": 1699.2,
      "text": " which is kind of a crossover between CDK and Terraform. And by that, I mean that it's like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1699.2,
      "end": 1704,
      "text": " CDK, meaning that you use programming languages to actually define that infrastructure as code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1704,
      "end": 1708.72,
      "text": " So you get something a lot more dynamic and well integrated with your idea of choice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1708.72,
      "end": 1713.6,
      "text": " You don't need to learn a new language, but at the same time, it's multi-cloud. So where CDK"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1713.6,
      "end": 1719.28,
      "text": " is targeting only AWS, in quotes, because I think that that's going to be changing in the near"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1719.28,
      "end": 1725.6,
      "text": " future, but right now is really well-built only for AWS. Pulumi is already aiming to target a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1725.6,
      "end": 1731.28,
      "text": " bunch of different cloud providers. And we already mentioned CDK as an alternative, but also SAM"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1731.28,
      "end": 1735.6,
      "text": " and serverless, which are built on top of cloud formation. So sometimes it can be convenient for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1735.6,
      "end": 1740.7199999999998,
      "text": " you to use these higher level abstractions rather than just going straight to cloud formation, which"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1740.72,
      "end": 1745.44,
      "text": " might be a lot more lower level and verbose than using these other tools."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1746.96,
      "end": 1751.44,
      "text": " And I think that concludes this episode. Do you have any final remark, Eoin?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1754.88,
      "end": 1759.3600000000001,
      "text": " I guess I'm really interested to hear what people think of it. And if we've got any"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1759.3600000000001,
      "end": 1765.3600000000001,
      "text": " strongly held opinions that cite any reasons for using one over the other, we haven't covered here."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1765.3600000000001,
      "end": 1769.2,
      "text": " Because it does tend to be a battle of camps sometimes when you're discussing cloud formation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1769.2,
      "end": 1773.3600000000001,
      "text": " versus Terraform. I think the main thing is that you use infrastructure as code. If you're doing,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1773.3600000000001,
      "end": 1777.52,
      "text": " no matter what tool you're using, you're already in a good place if you have infrastructure as code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1777.52,
      "end": 1782.72,
      "text": " And if not, it's time to pick one and move forward. Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1782.72,
      "end": 1787.1200000000001,
      "text": " And I'm also really curious to know if there is any other tool, maybe something older that I haven't seen, or maybe something really, really"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1787.1200000000001,
      "end": 1791.8400000000001,
      "text": " new that we haven't seen yet. So definitely let us know if there is any other tool that you think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1791.8400000000001,
      "end": 1797.2,
      "text": " should be part of this type of conversation and people should consider. So thank you very much"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1797.2,
      "end": 1802.48,
      "text": " for following and please give us a thumbs up, a like, share, whatever, if you are getting value"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1802.48,
      "end": 1830.32,
      "text": " from this episode. See you the next time."
    }
  ]
}