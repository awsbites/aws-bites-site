WEBVTT

1
00:00:00.000 --> 00:00:01.560
What are the benefits of tags?

2
00:00:01.560 --> 00:00:03.040
You've probably seen that you can add tags

3
00:00:03.040 --> 00:00:04.520
to almost every resource in AWS,

4
00:00:04.520 --> 00:00:06.380
but should you really do it?

5
00:00:06.380 --> 00:00:07.920
And if you do it, what is the point?

6
00:00:07.920 --> 00:00:09.160
What are the benefits?

7
00:00:09.160 --> 00:00:10.000
In today's episode,

8
00:00:10.000 --> 00:00:12.480
we'll give you a quick overview about what tags are,

9
00:00:12.480 --> 00:00:13.880
give you some examples on how to use them

10
00:00:13.880 --> 00:00:15.840
and what kind of benefits you can get from them.

11
00:00:15.840 --> 00:00:17.280
Finally, we'll give you a bunch of ideas

12
00:00:17.280 --> 00:00:19.040
on how to build a tagging strategy

13
00:00:19.040 --> 00:00:20.720
and get value from tags.

14
00:00:20.720 --> 00:00:22.280
My name is Eoin, I'm joined by Luciano

15
00:00:22.280 --> 00:00:24.720
and this is the AWS Bites podcast.

16
00:00:24.720 --> 00:00:29.720
So Luciano, maybe tags are one of those things like flossing

17
00:00:37.000 --> 00:00:39.280
or going to the gym that people should probably know

18
00:00:39.280 --> 00:00:40.920
they need to do, but they don't do as much

19
00:00:40.920 --> 00:00:43.480
as they probably should.

20
00:00:43.480 --> 00:00:45.800
But maybe first we could talk about what tags are.

21
00:00:45.800 --> 00:00:48.720
Yeah, so it's actually a very simple concept.

22
00:00:48.720 --> 00:00:51.960
You can imagine tags as just arbitrary key value waves

23
00:00:51.960 --> 00:00:55.840
that you can stick to all sorts of different AWS resources.

24
00:00:55.840 --> 00:00:58.440
Now, to be fair, they are not available

25
00:00:58.440 --> 00:01:00.520
in every single AWS resource.

26
00:01:00.520 --> 00:01:02.560
There are exceptions, but for the most part,

27
00:01:02.560 --> 00:01:05.200
you'll be able to use tags for almost every resource.

28
00:01:05.200 --> 00:01:07.800
So it's something you should be using

29
00:01:07.800 --> 00:01:10.560
and we'll discuss why in this episode.

30
00:01:10.560 --> 00:01:12.520
I just want to give you maybe some examples

31
00:01:12.520 --> 00:01:14.960
to make it a little bit more tangible

32
00:01:14.960 --> 00:01:16.160
and just to give you a feeling

33
00:01:16.160 --> 00:01:18.040
that at the end of the day, it's just metadata.

34
00:01:18.040 --> 00:01:20.520
So it's something that needs to make sense to you

35
00:01:20.520 --> 00:01:22.520
and to your team and needs to make sense

36
00:01:22.520 --> 00:01:25.760
in the context of the application you are building in AWS.

37
00:01:25.760 --> 00:01:27.920
And just to give you an example, you could say,

38
00:01:27.920 --> 00:01:29.400
for instance, I don't know,

39
00:01:29.400 --> 00:01:31.600
who is the owner of a particular resource

40
00:01:31.600 --> 00:01:33.400
and that can be the name of the team.

41
00:01:34.560 --> 00:01:37.120
Or you can say, rather than calling it owner,

42
00:01:37.120 --> 00:01:40.080
you can call it team, for instance, team e-commerce.

43
00:01:40.080 --> 00:01:42.960
You can say something like stage or environment

44
00:01:42.960 --> 00:01:46.560
and maybe say this is a production environment

45
00:01:46.560 --> 00:01:48.520
rather than a QA environment.

46
00:01:48.520 --> 00:01:52.040
Or you can use stock name and say, I don't know,

47
00:01:52.040 --> 00:01:54.000
shopping cart, this is an e-commerce

48
00:01:54.000 --> 00:01:56.960
and you might have a stock dedicated to the shopping cart

49
00:01:56.960 --> 00:01:59.640
or even the application name, maybe, I don't know,

50
00:01:59.640 --> 00:02:02.400
you are building an e-commerce that sells organic oranges.

51
00:02:02.400 --> 00:02:06.320
So your application tag could be organic oranges shop.

52
00:02:06.320 --> 00:02:09.480
So yeah, that should give you an idea of what tags are

53
00:02:09.480 --> 00:02:11.880
and how you could use it at a very high level.

54
00:02:11.880 --> 00:02:13.880
Okay, so that makes sense.

55
00:02:13.880 --> 00:02:16.640
And if you've got the capability to add these kinds of tags

56
00:02:16.640 --> 00:02:18.360
and you've given a good few examples there,

57
00:02:18.360 --> 00:02:22.600
what kind of use cases would you foresee by having tags?

58
00:02:22.600 --> 00:02:23.680
What would you do?

59
00:02:23.680 --> 00:02:26.920
What's the value of having the pre-production stage

60
00:02:26.920 --> 00:02:28.840
annotated for your EC2 instances

61
00:02:28.840 --> 00:02:30.840
or knowing that a Lambda function

62
00:02:30.840 --> 00:02:32.680
belongs to your organic oranges shop?

63
00:02:32.680 --> 00:02:34.160
Yeah, I think that the first thing

64
00:02:34.160 --> 00:02:35.840
that's probably a little bit obvious

65
00:02:35.840 --> 00:02:38.400
is that you have additional information

66
00:02:38.400 --> 00:02:40.440
attached to your resources.

67
00:02:40.440 --> 00:02:42.640
So if you are doing a review of all the resources

68
00:02:42.640 --> 00:02:44.760
in your account or in your organization,

69
00:02:44.760 --> 00:02:49.720
or I don't know, if you just want to know

70
00:02:49.720 --> 00:02:51.920
what is this resource being used for

71
00:02:51.920 --> 00:02:54.640
and you have done this kind of tagging consistently

72
00:02:54.640 --> 00:02:56.720
across your organization,

73
00:02:56.720 --> 00:02:59.880
then that becomes very useful piece of information.

74
00:02:59.880 --> 00:03:01.600
And you can also do search, for instance,

75
00:03:01.600 --> 00:03:04.520
you can use tools like Tag Editor to search

76
00:03:04.520 --> 00:03:05.760
across all your resources,

77
00:03:05.760 --> 00:03:07.640
the one matching particular tags,

78
00:03:07.640 --> 00:03:08.520
or even the opposite,

79
00:03:08.520 --> 00:03:10.880
you can search for resources that don't have tags.

80
00:03:10.880 --> 00:03:13.440
So it becomes an additional way

81
00:03:13.440 --> 00:03:16.400
to explore all the resources that you have in your account.

82
00:03:17.320 --> 00:03:19.560
But there is probably another use case

83
00:03:19.560 --> 00:03:22.080
which is probably the most used

84
00:03:22.080 --> 00:03:24.840
or the one for which tags are more commonly used

85
00:03:24.840 --> 00:03:27.440
and recommended, which is cost allocation.

86
00:03:27.440 --> 00:03:29.640
Because as soon as you do tags,

87
00:03:29.640 --> 00:03:33.760
you can use those tags to group cost.

88
00:03:33.760 --> 00:03:36.080
So for instance, you could group cost by team

89
00:03:36.080 --> 00:03:37.360
or application, and at that point,

90
00:03:37.360 --> 00:03:40.640
you can use that to basically see

91
00:03:40.640 --> 00:03:42.800
what kind of things you are paying more on

92
00:03:42.800 --> 00:03:44.840
and I don't know, you can see if there are spikes

93
00:03:44.840 --> 00:03:47.520
on particular application or particular teams.

94
00:03:47.520 --> 00:03:50.240
So that's probably the number one recommendation

95
00:03:50.240 --> 00:03:51.800
that you will find online

96
00:03:51.800 --> 00:03:53.400
about why you should be using tags

97
00:03:53.400 --> 00:03:55.800
is because they will give you much better visibility

98
00:03:55.800 --> 00:03:56.840
on your cost.

99
00:03:56.840 --> 00:03:59.480
And you can attach cost to things

100
00:03:59.480 --> 00:04:01.560
that make sense for your organization.

101
00:04:02.600 --> 00:04:05.240
There are another couple of interesting use cases though.

102
00:04:05.240 --> 00:04:07.960
So it's not just about cost and finding resources.

103
00:04:07.960 --> 00:04:10.720
You can also use tags for automation and security.

104
00:04:10.720 --> 00:04:13.400
And I want to give you a few other examples.

105
00:04:13.400 --> 00:04:14.840
For instance, in terms of security,

106
00:04:14.840 --> 00:04:16.720
what you could do, you could say,

107
00:04:16.720 --> 00:04:18.600
I'm gonna create an IAM policies

108
00:04:18.600 --> 00:04:22.840
that limits people from doing certain things

109
00:04:22.840 --> 00:04:26.040
if there are certain tags or if there aren't certain tags.

110
00:04:26.040 --> 00:04:27.760
For instance, you could say,

111
00:04:27.760 --> 00:04:29.880
I am gonna create a policy for an account

112
00:04:29.880 --> 00:04:32.120
that says that nobody can stop,

113
00:04:32.120 --> 00:04:33.040
or at least, I don't know,

114
00:04:33.040 --> 00:04:36.400
maybe developers cannot stop EC2 instances

115
00:04:36.400 --> 00:04:39.840
if they have the tag environment production, for instance.

116
00:04:39.840 --> 00:04:42.400
And that's basically something that gives you,

117
00:04:42.400 --> 00:04:45.440
using tags, you get that additional context

118
00:04:45.440 --> 00:04:47.320
to distinguish between resources

119
00:04:47.320 --> 00:04:49.320
that are maybe more sensible in production

120
00:04:49.320 --> 00:04:51.520
and resources that are less sensible.

121
00:04:51.520 --> 00:04:53.920
And similarly, you can use the same idea for automation.

122
00:04:53.920 --> 00:04:56.160
So for instance, you could create, I don't know,

123
00:04:56.160 --> 00:04:57.640
let's say a Lambda on a schedule

124
00:04:57.640 --> 00:05:00.080
that runs every day at midnight.

125
00:05:00.080 --> 00:05:01.560
And you can say, okay,

126
00:05:01.560 --> 00:05:04.920
get all the EC2 instances with the tag sandbox true

127
00:05:04.920 --> 00:05:07.840
and terminate them because maybe those are things

128
00:05:07.840 --> 00:05:10.200
that are supposed not to stay around forever

129
00:05:10.200 --> 00:05:12.160
and that somebody is just experimenting with them.

130
00:05:12.160 --> 00:05:13.160
So using that tag,

131
00:05:13.160 --> 00:05:16.000
you are automatically creating the capability of,

132
00:05:16.000 --> 00:05:16.840
don't worry too much.

133
00:05:16.840 --> 00:05:18.080
If you forgot about them,

134
00:05:18.080 --> 00:05:20.240
they would be automatically killed for you.

135
00:05:21.760 --> 00:05:22.680
That's really good.

136
00:05:22.680 --> 00:05:25.480
Yeah, so you can use tags

137
00:05:25.480 --> 00:05:27.920
to essentially audit what you have.

138
00:05:27.920 --> 00:05:31.000
You can use it to get control visibility of costs,

139
00:05:31.000 --> 00:05:32.720
also enforce security.

140
00:05:32.720 --> 00:05:34.520
So I think that's enough motivation

141
00:05:34.520 --> 00:05:36.120
to actually go ahead and create tags.

142
00:05:36.120 --> 00:05:38.160
So how do you actually do it?

143
00:05:38.160 --> 00:05:40.000
If you've got like a lot of people out there,

144
00:05:40.000 --> 00:05:42.800
lots of resources that are untagged, where do you start?

145
00:05:44.120 --> 00:05:46.080
Yeah, I suppose the easiest way

146
00:05:46.080 --> 00:05:49.800
and probably every tutorial will show you that way for sure

147
00:05:49.800 --> 00:05:52.080
is to just go in the web console

148
00:05:52.080 --> 00:05:55.960
and go around, wander through the different services.

149
00:05:55.960 --> 00:05:57.720
And when you see resources without tags,

150
00:05:57.720 --> 00:06:00.080
just use the web UI to add the tags.

151
00:06:00.080 --> 00:06:03.440
But of course, the bigger your deployments,

152
00:06:03.440 --> 00:06:04.840
the more complicated they will be

153
00:06:04.840 --> 00:06:08.040
to actually find all the resources and do it consistently.

154
00:06:08.040 --> 00:06:09.520
So of course, there are other tools

155
00:06:09.520 --> 00:06:12.840
that allow you to do this in a more automated

156
00:06:12.840 --> 00:06:15.680
or more kind of in bulk type of approach

157
00:06:15.680 --> 00:06:17.880
rather than just doing it one by one.

158
00:06:17.880 --> 00:06:21.320
And the first thing is you can do it from the CLI.

159
00:06:21.320 --> 00:06:25.520
So you can either tag existing resources from the CLI

160
00:06:25.520 --> 00:06:27.720
or when you create a new resource,

161
00:06:27.720 --> 00:06:30.480
most of the commands will allow you

162
00:06:30.480 --> 00:06:33.280
to also specify the tags you want to attach in line

163
00:06:33.280 --> 00:06:34.800
when you create that resource.

164
00:06:37.400 --> 00:06:40.600
Another thing is that if you are creating

165
00:06:40.600 --> 00:06:43.480
or updating resources through infrastructure as code,

166
00:06:43.480 --> 00:06:45.840
like CloudFormation, CDK, Terraform,

167
00:06:45.840 --> 00:06:48.040
all these tools will also give you the ability

168
00:06:48.040 --> 00:06:50.120
to add tags to the resources.

169
00:06:50.120 --> 00:06:52.600
Also interesting enough, with CloudFormation,

170
00:06:52.600 --> 00:06:54.560
CloudFormation will also take the liberty

171
00:06:54.560 --> 00:06:57.240
of adding a bunch of useful tags out of the box

172
00:06:57.240 --> 00:06:59.340
for you to almost every resource.

173
00:06:59.340 --> 00:07:02.600
For instance, the stack ID and the stack name,

174
00:07:02.600 --> 00:07:04.040
when you deploy with CloudFormation,

175
00:07:04.040 --> 00:07:06.080
you will probably notice that those tags

176
00:07:06.080 --> 00:07:08.140
will be applied to all the resources.

177
00:07:10.600 --> 00:07:12.640
Another interesting thing is that there is a tool

178
00:07:12.640 --> 00:07:14.240
called AWS Tag Editor.

179
00:07:14.240 --> 00:07:16.320
It's an actual service in AWS,

180
00:07:16.320 --> 00:07:19.720
and that one also give you different abilities to search.

181
00:07:19.720 --> 00:07:22.520
And I think you can also apply tags in bulk.

182
00:07:22.520 --> 00:07:23.700
I haven't used it that much,

183
00:07:23.700 --> 00:07:25.660
but something else you could explore

184
00:07:25.660 --> 00:07:27.360
and see what are the capabilities.

185
00:07:28.700 --> 00:07:30.740
Then there is resource group tagging,

186
00:07:30.740 --> 00:07:34.320
which I don't really remember what it does.

187
00:07:34.320 --> 00:07:38.120
So if you remember about that, I'll leave that one to you.

188
00:07:38.120 --> 00:07:42.560
Yeah, I think this tag editor you already mentioned,

189
00:07:42.560 --> 00:07:44.340
it's quite confusing the terminology here,

190
00:07:44.340 --> 00:07:47.280
but it's under the umbrella of resource groups,

191
00:07:47.280 --> 00:07:48.840
resource groups tag editor,

192
00:07:48.840 --> 00:07:51.200
and then you've got an API with that as well.

193
00:07:51.200 --> 00:07:55.640
So I think that's the resource group tagging API.

194
00:07:55.640 --> 00:07:58.880
And it's interesting, depending on the resource type,

195
00:07:58.880 --> 00:08:01.960
not every resource type is supported

196
00:08:01.960 --> 00:08:02.800
by each of these things,

197
00:08:02.800 --> 00:08:04.360
so you just have to check the documentation.

198
00:08:04.360 --> 00:08:05.900
Unfortunately, it's just the case with tags

199
00:08:05.900 --> 00:08:09.960
that consistency isn't there across all the services

200
00:08:09.960 --> 00:08:11.720
in terms of the tagging support.

201
00:08:11.720 --> 00:08:13.020
So you just have to check the docs

202
00:08:13.020 --> 00:08:15.940
and for your costly resources,

203
00:08:15.940 --> 00:08:17.880
like EC2 instances, that sort of stuff,

204
00:08:17.880 --> 00:08:19.960
it's generally very well, very mature,

205
00:08:19.960 --> 00:08:24.220
but for some of the other resources, it's just not there.

206
00:08:26.000 --> 00:08:27.040
Yeah.

207
00:08:27.040 --> 00:08:29.320
And I like the idea of using infrastructure as code

208
00:08:29.320 --> 00:08:30.160
really to enforce it.

209
00:08:30.160 --> 00:08:31.720
I mean, that's, again,

210
00:08:31.720 --> 00:08:33.640
it sounds like we're kind of beating the drum

211
00:08:33.640 --> 00:08:36.420
about infrastructure as code quite regularly on the podcast,

212
00:08:36.420 --> 00:08:38.600
but it's one of the real benefits

213
00:08:38.600 --> 00:08:39.600
of using infrastructure as code

214
00:08:39.600 --> 00:08:41.480
is that you can define your tags

215
00:08:41.480 --> 00:08:43.040
in the root of your repository

216
00:08:43.040 --> 00:08:45.760
and enforce it for all of the resources consistently.

217
00:08:45.760 --> 00:08:48.360
And you know that the tag names are right,

218
00:08:48.360 --> 00:08:49.680
the values are correct,

219
00:08:49.680 --> 00:08:52.080
and the casing, because they're case insensitive,

220
00:08:52.080 --> 00:08:53.920
and you might want to think about, you know,

221
00:08:53.920 --> 00:08:56.720
making sure they're consistent with casing,

222
00:08:56.720 --> 00:08:59.440
with infrastructure as code just makes that a lot easier.

223
00:08:59.440 --> 00:09:00.480
Mm-hmm.

224
00:09:00.480 --> 00:09:01.720
Absolutely, yeah.

225
00:09:01.720 --> 00:09:04.380
So now that we understand a little bit more

226
00:09:04.380 --> 00:09:06.800
what tags are useful for,

227
00:09:06.800 --> 00:09:10.340
is there a set of tags that you would particularly recommend?

228
00:09:12.400 --> 00:09:14.360
Yeah, I guess the good idea

229
00:09:14.360 --> 00:09:17.040
is to try and keep the number of tags reasonably small.

230
00:09:17.040 --> 00:09:18.680
I think you can create up to 50.

231
00:09:18.680 --> 00:09:22.520
So the recommended tags name

232
00:09:22.520 --> 00:09:24.920
is one that probably people will have used quite a lot.

233
00:09:24.920 --> 00:09:26.840
So if you've created an EC2 instance in the console,

234
00:09:26.840 --> 00:09:28.160
a lot of people skip that last step

235
00:09:28.160 --> 00:09:30.160
where you have to put in the tags,

236
00:09:30.160 --> 00:09:31.840
but if you've put the values in,

237
00:09:31.840 --> 00:09:33.480
you'd probably put in name at some point

238
00:09:33.480 --> 00:09:36.160
because that's recognized by the AWS console

239
00:09:36.160 --> 00:09:38.460
when it presents your list of EC2 instances,

240
00:09:38.460 --> 00:09:40.880
and it will give you the name column populated

241
00:09:40.880 --> 00:09:41.780
for all your instances.

242
00:09:41.780 --> 00:09:45.500
So name is an important one that's actually recognized.

243
00:09:46.360 --> 00:09:48.280
Other things, if you're using it for cost control,

244
00:09:48.280 --> 00:09:51.720
you might have like a department or a cost center tag,

245
00:09:51.720 --> 00:09:55.000
an owner, be that an individual,

246
00:09:55.000 --> 00:09:56.600
probably not a great idea to use individuals

247
00:09:56.600 --> 00:09:58.920
because they can change department and application,

248
00:09:58.920 --> 00:10:00.240
but you can put in the owner,

249
00:10:00.240 --> 00:10:02.940
like the name of the team responsible for a resource.

250
00:10:04.080 --> 00:10:05.400
As you already mentioned in your example,

251
00:10:05.400 --> 00:10:07.240
at the start, you could put in the application

252
00:10:07.240 --> 00:10:09.680
or service name, and I really liked the idea

253
00:10:09.680 --> 00:10:12.320
of adding like an environment or a stage tag.

254
00:10:12.320 --> 00:10:14.120
So knowing that it's a development environment,

255
00:10:14.120 --> 00:10:16.800
a test environment, or a production environment,

256
00:10:16.800 --> 00:10:19.360
is that allows you to enforce security.

257
00:10:19.360 --> 00:10:22.200
You gave a good example of like disallowing

258
00:10:22.200 --> 00:10:24.520
stock terminate instance access, for example,

259
00:10:24.520 --> 00:10:28.360
an EC2 instance, if it's a production environment.

260
00:10:28.360 --> 00:10:30.000
It's also just good for auditing, right?

261
00:10:30.000 --> 00:10:31.320
And also for cost control.

262
00:10:31.320 --> 00:10:35.440
You can also say, well, how much of my AWS resource cost

263
00:10:35.440 --> 00:10:38.240
is coming from production versus pre-production

264
00:10:38.240 --> 00:10:40.720
and test and development environments?

265
00:10:40.720 --> 00:10:43.220
So those, I think, cover it all.

266
00:10:43.220 --> 00:10:44.860
But the other one that you mentioned earlier

267
00:10:44.860 --> 00:10:46.740
was like version, which I really like.

268
00:10:46.740 --> 00:10:51.600
Like if you have a Lambda function or an AMI in particular,

269
00:10:51.600 --> 00:10:54.080
you could tag it with version numbers so you understand

270
00:10:54.080 --> 00:10:56.480
without having to boot up the AMI,

271
00:10:56.480 --> 00:10:57.960
and boot an instance based on the AMI,

272
00:10:57.960 --> 00:10:59.580
you can understand what version it is

273
00:10:59.580 --> 00:11:02.560
and even what operating system version, for example.

274
00:11:02.560 --> 00:11:04.960
Yeah, on environment or stage,

275
00:11:04.960 --> 00:11:07.000
it might sound a little bit contradictory

276
00:11:07.000 --> 00:11:08.580
with something we said in other episodes,

277
00:11:08.580 --> 00:11:11.360
where we recommend to have different accounts

278
00:11:11.360 --> 00:11:12.480
and structure your organization,

279
00:11:12.480 --> 00:11:15.840
so you have dedicated account for different environments.

280
00:11:15.840 --> 00:11:17.560
But in reality, if you do, for instance,

281
00:11:17.560 --> 00:11:20.260
consolidated billing, then you will have like

282
00:11:20.260 --> 00:11:22.720
a high level overview of all your accounts.

283
00:11:22.720 --> 00:11:24.280
And then if you use the tags,

284
00:11:24.280 --> 00:11:26.200
then it becomes easier to see how you are looking

285
00:11:26.200 --> 00:11:27.320
at the different resources,

286
00:11:27.320 --> 00:11:28.820
even if they live in different accounts,

287
00:11:28.820 --> 00:11:31.920
but then you can use tags to group them logically

288
00:11:31.920 --> 00:11:34.840
and see how they affect cost.

289
00:11:34.840 --> 00:11:35.960
Yeah, I agree.

290
00:11:35.960 --> 00:11:40.800
And we also do things like creating AWS config rules

291
00:11:40.800 --> 00:11:45.040
and config, I'm forgetting the term,

292
00:11:45.040 --> 00:11:47.560
but there's a way you can collect data

293
00:11:47.560 --> 00:11:49.820
from all of your AWS accounts

294
00:11:49.820 --> 00:11:53.380
and aggregate it into your AWS, say compliance account,

295
00:11:53.380 --> 00:11:55.440
where with AWS config, you can go in

296
00:11:55.440 --> 00:11:56.640
and write like SQL queries

297
00:11:56.640 --> 00:11:59.000
to query what resources you have in AWS.

298
00:11:59.000 --> 00:11:59.840
It's quite powerful.

299
00:11:59.840 --> 00:12:01.640
And if you can imagine that,

300
00:12:01.640 --> 00:12:03.840
if you've got things tagged with an environment,

301
00:12:03.840 --> 00:12:05.360
you could do a select statement

302
00:12:05.360 --> 00:12:08.440
that discovers how many Lambda functions you have

303
00:12:08.440 --> 00:12:09.800
that are used in development,

304
00:12:09.800 --> 00:12:13.360
or how many EC2 instances you've got running in production.

305
00:12:13.360 --> 00:12:15.360
So it's quite powerful.

306
00:12:17.800 --> 00:12:19.960
So how do you enforce tags then?

307
00:12:19.960 --> 00:12:21.320
If you've, we talked a little bit about things

308
00:12:21.320 --> 00:12:24.400
like AWS config, but what are the ways that you could say,

309
00:12:24.400 --> 00:12:26.240
okay, I'm going to try and get my house in order

310
00:12:26.240 --> 00:12:28.960
and put in tagging policies for my organization.

311
00:12:28.960 --> 00:12:30.620
How would you start?

312
00:12:30.620 --> 00:12:32.360
Yeah, there are a bunch of different ways,

313
00:12:32.360 --> 00:12:33.920
and I'm sure that there is more

314
00:12:33.920 --> 00:12:35.280
that we haven't discovered yet.

315
00:12:35.280 --> 00:12:38.200
So don't take this list as a comprehensive one.

316
00:12:38.200 --> 00:12:40.600
Probably we just scratched the surface there.

317
00:12:40.600 --> 00:12:43.880
But the first one that comes to mind is IAM,

318
00:12:43.880 --> 00:12:47.320
because with IAM, you could create policies,

319
00:12:47.320 --> 00:12:49.720
for instance, for, I don't know, developers,

320
00:12:49.720 --> 00:12:52.200
that says something like, okay,

321
00:12:52.200 --> 00:12:56.160
you can create an EC2 instance, but only,

322
00:12:56.160 --> 00:12:58.620
and this is where you specify a condition in the policy

323
00:12:58.620 --> 00:13:02.160
that says only if you are adding tags

324
00:13:02.160 --> 00:13:05.160
for environment and cost center, for example.

325
00:13:05.160 --> 00:13:09.040
So that that automatically enforces engineers

326
00:13:09.040 --> 00:13:11.560
that have that particular role to do that,

327
00:13:11.560 --> 00:13:12.960
because otherwise they wouldn't be able

328
00:13:12.960 --> 00:13:15.500
to create the EC2 instance in the first place.

329
00:13:15.500 --> 00:13:17.480
So this is actually a very powerful one,

330
00:13:17.480 --> 00:13:19.580
because it's not retroactive.

331
00:13:19.580 --> 00:13:22.400
So this is literally preventing resources from being created

332
00:13:22.400 --> 00:13:25.240
if they don't have the right tags in the first place.

333
00:13:25.240 --> 00:13:27.840
Another one is service control policy,

334
00:13:27.840 --> 00:13:30.580
where it's kind of a similar thing,

335
00:13:30.580 --> 00:13:33.200
but I suppose from a different perspective.

336
00:13:33.200 --> 00:13:35.520
So service control policies is something you can apply

337
00:13:35.520 --> 00:13:38.540
to entire accounts in your organization,

338
00:13:38.540 --> 00:13:43.200
and they can essentially deny certain operation

339
00:13:43.200 --> 00:13:45.200
if certain conditions apply.

340
00:13:45.200 --> 00:13:47.520
So you could think of the same use case

341
00:13:47.520 --> 00:13:49.080
where you want to prevent, for instance,

342
00:13:49.080 --> 00:13:52.040
engineers from creating EC2 instances

343
00:13:52.040 --> 00:13:54.600
if they are not tagged consistently with your rules,

344
00:13:54.600 --> 00:13:56.200
but you have to think it a little bit backward

345
00:13:56.200 --> 00:13:57.860
in terms of the policy, because you have to say,

346
00:13:57.860 --> 00:14:01.520
I'm gonna deny that operation if I don't see this tag.

347
00:14:01.520 --> 00:14:03.280
So the policy is kind of, yeah,

348
00:14:03.280 --> 00:14:04.560
it feels like the opposite policy

349
00:14:04.560 --> 00:14:06.560
from the one we described before,

350
00:14:06.560 --> 00:14:09.360
but effectively you can achieve the same result.

351
00:14:09.360 --> 00:14:11.560
And SCP are a little bit more powerful

352
00:14:11.560 --> 00:14:13.120
because then you can apply them

353
00:14:13.120 --> 00:14:16.760
to an entire sub-tree of organization

354
00:14:16.760 --> 00:14:17.600
in your organization.

355
00:14:17.600 --> 00:14:19.560
For your whole organization, yeah.

356
00:14:19.560 --> 00:14:21.800
Yeah, it's definitely the strictest option, isn't it?

357
00:14:21.800 --> 00:14:24.360
It sounds certainly, it's the strictest one I can think of

358
00:14:24.360 --> 00:14:25.920
because it's like a preventative control.

359
00:14:25.920 --> 00:14:27.400
It's like, no, you can't even,

360
00:14:27.400 --> 00:14:28.580
you can't go any further here.

361
00:14:28.580 --> 00:14:29.680
You're missing a tag.

362
00:14:30.600 --> 00:14:33.040
Exactly, so also use it carefully

363
00:14:33.040 --> 00:14:36.000
because maybe you will end up blocking your engineering,

364
00:14:36.000 --> 00:14:37.880
your engineer from doing progress

365
00:14:37.880 --> 00:14:40.320
because yeah, maybe there might be exceptions

366
00:14:40.320 --> 00:14:41.560
that you haven't talked about.

367
00:14:41.560 --> 00:14:45.200
And then yeah, people need to go through

368
00:14:45.200 --> 00:14:46.200
some sort of a process

369
00:14:46.200 --> 00:14:49.240
if they have to go around those particular cases.

370
00:14:49.240 --> 00:14:52.520
So other approaches that are a little bit more permissive,

371
00:14:52.520 --> 00:14:54.080
but they still give you visibility

372
00:14:54.080 --> 00:14:58.580
when something is not compliant with your tagging strategy

373
00:14:58.580 --> 00:15:00.520
is for instance, using AWS Config,

374
00:15:00.520 --> 00:15:02.520
you can create a rule that checks

375
00:15:02.520 --> 00:15:05.420
that your resources are actually tagged correctly.

376
00:15:05.420 --> 00:15:07.760
And if you find something that is not compliant,

377
00:15:07.760 --> 00:15:09.960
then you can trigger a notification

378
00:15:09.960 --> 00:15:13.280
and then you can use that notification in a reactive way,

379
00:15:13.280 --> 00:15:17.000
go in and check why those resources are not tagged,

380
00:15:17.000 --> 00:15:17.960
if you need to tag them,

381
00:15:17.960 --> 00:15:20.240
or maybe you need to create a new rule,

382
00:15:20.240 --> 00:15:23.080
or maybe you can make an exception in your rules.

383
00:15:23.080 --> 00:15:25.600
So this is a little bit of a more permissive approach

384
00:15:25.600 --> 00:15:28.600
and it's more kind of in that idea,

385
00:15:28.600 --> 00:15:29.880
yes, let's do compliance,

386
00:15:29.880 --> 00:15:36.040
but let's not block engineers from doing progress.

387
00:15:36.040 --> 00:15:40.280
Other ways that come to mind to you?

388
00:15:40.280 --> 00:15:43.320
Yeah, we mentioned AWS Resource Group.

389
00:15:43.320 --> 00:15:46.720
So this is where the Tag Policy Editor came in earlier,

390
00:15:46.720 --> 00:15:49.480
and there's also ability there to create tag policies.

391
00:15:49.480 --> 00:15:51.840
So this is an account level feature,

392
00:15:51.840 --> 00:15:54.280
but it's also an AWS organization feature.

393
00:15:54.280 --> 00:15:57.800
So within your AWS organizations in your management account,

394
00:15:57.800 --> 00:16:01.080
you can turn on tag policies.

395
00:16:01.080 --> 00:16:03.200
So there's different kinds of organization level policies.

396
00:16:03.200 --> 00:16:05.040
You mentioned service control policies already.

397
00:16:05.040 --> 00:16:07.160
There's another one called tag policies.

398
00:16:07.160 --> 00:16:10.560
And it gives you the ability to create policies

399
00:16:10.560 --> 00:16:13.660
saying these tags need to be created.

400
00:16:14.640 --> 00:16:16.840
You can specify whether they need to be case sensitive

401
00:16:16.840 --> 00:16:19.520
or not, whether the exact casing needs to be specified,

402
00:16:19.520 --> 00:16:22.280
and you can also specify the values that should be used.

403
00:16:23.400 --> 00:16:24.240
That's optional.

404
00:16:25.720 --> 00:16:26.720
It's quite useful.

405
00:16:26.720 --> 00:16:28.920
It's also like a detective control,

406
00:16:28.920 --> 00:16:33.040
like a permissive option rather than a preventative control.

407
00:16:34.320 --> 00:16:36.240
So it doesn't stop you from creating resources

408
00:16:36.240 --> 00:16:37.960
if the policy isn't complied with,

409
00:16:37.960 --> 00:16:39.880
but it does allow you to go in and see

410
00:16:39.880 --> 00:16:44.280
which resources are failing tag policy.

411
00:16:44.280 --> 00:16:45.960
So it's an alternative option.

412
00:16:45.960 --> 00:16:47.400
As with a lot of things in AWS,

413
00:16:47.400 --> 00:16:50.340
you kind of have multiple ways of doing the same thing.

414
00:16:50.340 --> 00:16:52.560
It's very similar to AWS config rules.

415
00:16:52.560 --> 00:16:56.100
So it just depends on what method you want to use.

416
00:16:56.100 --> 00:16:58.560
If you're already using AWS config rules

417
00:16:58.560 --> 00:16:59.880
for lots of other things,

418
00:16:59.880 --> 00:17:02.800
it might just make sense to use AWS config

419
00:17:03.600 --> 00:17:05.680
and detect compliance that way.

420
00:17:05.680 --> 00:17:06.720
But if you're not,

421
00:17:06.720 --> 00:17:09.320
then you might just use AWS resource groups instead.

422
00:17:11.240 --> 00:17:14.480
So it's probably worth mentioning as well

423
00:17:14.480 --> 00:17:16.360
that with AWS config rules,

424
00:17:18.400 --> 00:17:22.560
you can also remediate some of the compliance failures

425
00:17:22.560 --> 00:17:24.600
you see if one of your resource,

426
00:17:24.600 --> 00:17:26.120
if a resource gets created,

427
00:17:26.120 --> 00:17:29.560
a config rule spots that it hasn't got a tag,

428
00:17:29.560 --> 00:17:31.920
then you can actually use like a Lambda function,

429
00:17:31.920 --> 00:17:34.760
or you can also use system manager automation

430
00:17:34.760 --> 00:17:37.160
and go in and actually apply a tag to that.

431
00:17:37.160 --> 00:17:38.200
So you can figure out what tag

432
00:17:38.200 --> 00:17:40.080
might make most sense for the resource,

433
00:17:40.080 --> 00:17:42.320
or you could tag it with some sort of temporary value

434
00:17:42.320 --> 00:17:44.340
or just tag it so that you can come along

435
00:17:44.340 --> 00:17:47.120
and enforce it better later.

436
00:17:47.120 --> 00:17:52.120
Okay, that's a pretty good suggestion.

437
00:17:54.320 --> 00:17:57.600
I suppose the more you can automate the better

438
00:17:57.600 --> 00:17:59.880
because yeah, it's gonna make your life easier

439
00:17:59.880 --> 00:18:00.800
in the long term.

440
00:18:01.800 --> 00:18:04.280
One interesting thing I just want to mention very quickly

441
00:18:04.280 --> 00:18:07.900
is that there are limits in using tags.

442
00:18:07.900 --> 00:18:09.680
We already mentioned that a resource

443
00:18:09.680 --> 00:18:12.240
can have at most 50 tags.

444
00:18:12.240 --> 00:18:13.520
So this is an interesting one.

445
00:18:13.520 --> 00:18:14.880
Again, don't overdo.

446
00:18:14.880 --> 00:18:17.160
With tags, 50 is probably more than enough,

447
00:18:17.160 --> 00:18:18.400
but I don't know,

448
00:18:18.400 --> 00:18:21.600
maybe if you have a very aggressive tagging strategy,

449
00:18:21.600 --> 00:18:22.920
you might reach that number.

450
00:18:22.920 --> 00:18:25.180
So it might not be that big as well.

451
00:18:26.560 --> 00:18:30.280
Also, every tag key must be unique.

452
00:18:30.280 --> 00:18:31.720
That means that you cannot use,

453
00:18:31.720 --> 00:18:33.800
I don't know, the tag name twice, right?

454
00:18:33.800 --> 00:18:35.720
You can only use name once.

455
00:18:36.880 --> 00:18:38.840
Then there is a maximum key length

456
00:18:38.840 --> 00:18:43.840
and a maximum value length is 128 characters in Unicode

457
00:18:43.840 --> 00:18:48.060
for the key and 256 characters for the value.

458
00:18:48.060 --> 00:18:50.100
Again, it should be more than plenty

459
00:18:50.100 --> 00:18:52.100
for making sense of your tags,

460
00:18:52.100 --> 00:18:53.680
but it's not an endless amount.

461
00:18:53.680 --> 00:18:56.060
So don't try to put, I don't know,

462
00:18:56.060 --> 00:18:58.660
all the metadata as a JSON into one tag

463
00:18:58.660 --> 00:19:01.580
because that's not gonna scale very well.

464
00:19:01.580 --> 00:19:04.460
And also there is an interesting one is that tags,

465
00:19:04.460 --> 00:19:07.580
the key cannot start with AWS column.

466
00:19:07.580 --> 00:19:09.740
That's kind of a reserved one.

467
00:19:09.740 --> 00:19:11.660
And I'm not really sure if that's something

468
00:19:11.660 --> 00:19:15.340
that AWS uses internally, or if you, in some services,

469
00:19:15.340 --> 00:19:17.600
it will be a little bit more visible to you,

470
00:19:17.600 --> 00:19:20.060
but you cannot use AWS column yourself

471
00:19:20.060 --> 00:19:22.120
as a, for your own custom tags.

472
00:19:23.620 --> 00:19:26.080
Okay, that sounds very sensible.

473
00:19:26.080 --> 00:19:28.780
And are there some kind of best practices?

474
00:19:28.780 --> 00:19:30.560
It sounds like there's a lot of options here

475
00:19:30.560 --> 00:19:31.780
and there's plenty of flexibility.

476
00:19:31.780 --> 00:19:35.260
So can we simplify it with some kind of best practices

477
00:19:35.260 --> 00:19:36.500
and patterns for tagging?

478
00:19:38.820 --> 00:19:40.980
Yeah, so, well, the first thing that comes to mind

479
00:19:40.980 --> 00:19:42.920
is definitely try to avoid to store

480
00:19:42.920 --> 00:19:45.580
personal identifiable information in tags

481
00:19:45.580 --> 00:19:47.540
because of course those are not meant to be,

482
00:19:47.540 --> 00:19:51.140
I don't know, encrypted or hidden in any way.

483
00:19:51.140 --> 00:19:54.460
So just keep it to the metadata that makes sense

484
00:19:54.460 --> 00:19:57.940
from the service perspective or the resource perspective.

485
00:19:57.940 --> 00:20:00.140
And then the other overall suggestion

486
00:20:00.140 --> 00:20:03.180
is try to define a strategy and trying to keep it simple.

487
00:20:03.180 --> 00:20:07.140
And I don't think there is really a bulletproof strategy.

488
00:20:07.140 --> 00:20:10.340
So I suppose we can give some hints to people

489
00:20:10.340 --> 00:20:12.100
on how to approach that.

490
00:20:12.100 --> 00:20:14.460
And for instance, you could ask yourself,

491
00:20:14.460 --> 00:20:16.460
which tags are you going to use?

492
00:20:16.460 --> 00:20:18.460
So try to come up with a list that says,

493
00:20:18.460 --> 00:20:20.700
these are the five or six tags

494
00:20:20.700 --> 00:20:22.340
that we want to use consistently.

495
00:20:23.580 --> 00:20:25.460
Then what are they going to be used for?

496
00:20:25.460 --> 00:20:27.340
It's another question you should ask yourself.

497
00:20:27.340 --> 00:20:29.220
Don't just come up with six random tags,

498
00:20:29.220 --> 00:20:32.500
but try to find what is the goal of every single tag.

499
00:20:32.500 --> 00:20:33.340
Have a purpose.

500
00:20:33.340 --> 00:20:36.140
And like, I don't know, is it a technical tag?

501
00:20:36.140 --> 00:20:37.260
Is it related to cost?

502
00:20:37.260 --> 00:20:38.340
Is it related to security?

503
00:20:38.340 --> 00:20:40.060
Is it useful for some automation?

504
00:20:40.060 --> 00:20:41.460
So try to think that way.

505
00:20:41.460 --> 00:20:42.780
How are you going to group tags

506
00:20:42.780 --> 00:20:45.300
and what are you going to use them for?

507
00:20:45.300 --> 00:20:48.340
And the other thing is that if you're doing

508
00:20:49.820 --> 00:20:52.660
infrastructure as code, it's easy to think about,

509
00:20:52.660 --> 00:20:54.140
okay, I can keep them consistently

510
00:20:54.140 --> 00:20:55.540
because that's going to become part

511
00:20:55.540 --> 00:20:57.660
of my infrastructure as code.

512
00:20:57.660 --> 00:20:59.780
But ask that anyway.

513
00:20:59.780 --> 00:21:01.860
Like try to think, okay,

514
00:21:01.860 --> 00:21:03.300
am I going to make this consistent?

515
00:21:03.300 --> 00:21:06.060
Can I do something that helps me to keep it consistent?

516
00:21:06.060 --> 00:21:08.740
So both proactively and retroactively,

517
00:21:08.740 --> 00:21:11.980
try to have ways to simplify the aggression of tags,

518
00:21:11.980 --> 00:21:13.980
but also ways to check that your resources

519
00:21:13.980 --> 00:21:16.100
are actually compliant with your strategy.

520
00:21:18.100 --> 00:21:20.660
And finally, I think about naming conventions,

521
00:21:20.660 --> 00:21:25.100
like make sure the casing is correct and used consistently,

522
00:21:25.100 --> 00:21:27.420
and maybe have a review process

523
00:21:27.420 --> 00:21:30.260
and you can probably even automate some of that

524
00:21:30.260 --> 00:21:32.580
using some of the tools we discussed before.

525
00:21:33.540 --> 00:21:35.660
There are some interesting resources,

526
00:21:35.660 --> 00:21:38.820
one that I would like to add to the show notes

527
00:21:38.820 --> 00:21:42.220
is an example that's from the AWS blog

528
00:21:42.220 --> 00:21:44.980
that shows how you could use CrowdTrail

529
00:21:44.980 --> 00:21:47.260
to automatically tag resources,

530
00:21:47.260 --> 00:21:48.620
based at, for instance, I don't know,

531
00:21:48.620 --> 00:21:50.020
the time when it was created,

532
00:21:50.020 --> 00:21:52.660
who updated that resource or things like that.

533
00:21:52.660 --> 00:21:55.100
Maybe it's not the most amazing example

534
00:21:55.100 --> 00:21:56.700
for the use that they present,

535
00:21:56.700 --> 00:21:57.580
but I think it's cool to see

536
00:21:57.580 --> 00:21:59.780
that you can automate some of this stuff.

537
00:21:59.780 --> 00:22:03.060
So maybe you can find a different way

538
00:22:03.060 --> 00:22:06.420
of a different classification for tags, I suppose,

539
00:22:06.420 --> 00:22:08.060
because I don't think tagging the engineer

540
00:22:08.060 --> 00:22:10.900
that created the resources extremely useful,

541
00:22:10.900 --> 00:22:12.300
but maybe from CloudTrail,

542
00:22:12.300 --> 00:22:13.740
there are other things that you can use

543
00:22:13.740 --> 00:22:16.100
to do some of this tagging automatically.

544
00:22:18.780 --> 00:22:19.780
And there is also- I can imagine that, sorry,

545
00:22:19.780 --> 00:22:22.260
I was just gonna say that came to mind

546
00:22:22.260 --> 00:22:24.140
when you mentioned that if you've got a CloudTrail event,

547
00:22:24.140 --> 00:22:26.900
because somebody created a resource manually in the console,

548
00:22:26.900 --> 00:22:29.260
and you've got their, say, SSO identity

549
00:22:29.260 --> 00:22:31.420
as part of that CloudTrail event,

550
00:22:31.420 --> 00:22:33.220
then you could look up what department they're in

551
00:22:33.220 --> 00:22:36.100
and add the department tag to the resource.

552
00:22:36.100 --> 00:22:38.940
So at least when you're doing cost allocation tracking,

553
00:22:38.940 --> 00:22:41.420
you've got something to work with, right?

554
00:22:41.420 --> 00:22:42.260
And you don't have to go

555
00:22:42.260 --> 00:22:44.500
and constantly manually check and remediate.

556
00:22:46.540 --> 00:22:47.380
Yeah, absolutely.

557
00:22:47.380 --> 00:22:49.380
That's a much better example, I think,

558
00:22:49.380 --> 00:22:51.540
rather than just using the name of the engineer,

559
00:22:51.540 --> 00:22:53.460
which, yeah, as you said before,

560
00:22:53.460 --> 00:22:55.300
people might move around in the company

561
00:22:55.300 --> 00:22:56.860
or they might just go away.

562
00:22:56.860 --> 00:22:59.580
And it's also personally identifiable information anyway.

563
00:22:59.580 --> 00:23:02.780
So I would rather prefer their department name

564
00:23:02.780 --> 00:23:05.420
rather than their specific person name.

565
00:23:07.020 --> 00:23:10.020
Another interesting one, which is actually archived,

566
00:23:10.020 --> 00:23:12.200
but I think there are still some useful suggestion,

567
00:23:12.200 --> 00:23:16.280
is a white paper from AWS that was published in,

568
00:23:16.280 --> 00:23:17.540
I think, in 2018.

569
00:23:17.540 --> 00:23:19.420
So maybe that's the reason why it's archived,

570
00:23:19.420 --> 00:23:22.760
but we couldn't find a newer version of that.

571
00:23:22.760 --> 00:23:25.180
So I think there are still some useful suggestions there.

572
00:23:25.180 --> 00:23:27.900
So we'll put the link in the show notes as well.

573
00:23:27.900 --> 00:23:32.500
And I think this is plenty for this episode,

574
00:23:32.500 --> 00:23:34.460
but I don't know if you have a final takeaway

575
00:23:34.460 --> 00:23:37.020
that we want to use to kind of, yeah,

576
00:23:37.020 --> 00:23:39.220
give people something to walk away with.

577
00:23:42.860 --> 00:23:44.580
Yeah, I think it's worthwhile covering this, because I haven't seen a lot of commentary

578
00:23:44.580 --> 00:23:45.660
about tags in recent years.

579
00:23:45.660 --> 00:23:47.780
And I think it's something that could be discussed more

580
00:23:47.780 --> 00:23:50.580
and used more because you have to put a little bit

581
00:23:50.580 --> 00:23:52.500
of upfront effort in it, but once you've got it,

582
00:23:52.500 --> 00:23:53.340
the benefits are there.

583
00:23:53.340 --> 00:23:55.460
You can really get a lot of value out of it

584
00:23:55.460 --> 00:23:57.860
and it'll really help you to just have a better view

585
00:23:57.860 --> 00:24:00.260
and just sleep easy knowing that you've got more control

586
00:24:00.260 --> 00:24:02.780
over kind of auditing in terms of compliance,

587
00:24:02.780 --> 00:24:05.580
cost, and just visibility into your resources.

588
00:24:05.580 --> 00:24:08.180
Because if you don't know what's out there in your accounts,

589
00:24:08.180 --> 00:24:11.980
it can just get very messy over time.

590
00:24:11.980 --> 00:24:14.540
So yeah, I think our, both our takes on this is,

591
00:24:14.540 --> 00:24:16.780
yeah, use it more, but try to have a strategy,

592
00:24:16.780 --> 00:24:19.500
try to be consistent and keep it simple.

593
00:24:19.500 --> 00:24:21.700
Start with small number of tags that you know you'll use

594
00:24:21.700 --> 00:24:22.820
and have a tier purpose.

595
00:24:22.820 --> 00:24:23.940
And once you've got that established,

596
00:24:23.940 --> 00:24:26.260
I think you're going to start benefiting from it

597
00:24:26.260 --> 00:24:29.420
pretty much right away in terms of cost and visibility

598
00:24:29.420 --> 00:24:31.580
into your whole estate.

599
00:24:31.580 --> 00:24:34.100
So I'm glad we covered this topic.

600
00:24:34.100 --> 00:24:36.860
Let us know what you think and let us know

601
00:24:36.860 --> 00:24:39.900
if we missed any other ideas you can consider

602
00:24:39.900 --> 00:24:44.900
for tagging AWS resources, any other tools or resources.

603
00:24:45.840 --> 00:24:46.820
We'd love to hear from you.

604
00:24:46.820 --> 00:24:48.100
So thanks for listening and we'll see you

605
00:24:48.100 --> 00:24:49.100
in the next episode.

606
00:24:49.100 --> 00:24:51.180
ranch- backdrop-
