{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 2.96,
      "text": " There are lots of options for programming languages on AWS these days,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2.96,
      "end": 5.4,
      "text": " but one of the most popular ones remains JavaScript."
    },
    {
      "speakerLabel": "spk_0",
      "start": 5.4,
      "end": 8.24,
      "text": " Today, we're going to discuss what it's like to develop with JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 8.24,
      "end": 11.6,
      "text": " and Node.js on AWS and what's new in this field."
    },
    {
      "speakerLabel": "spk_0",
      "start": 11.6,
      "end": 13.72,
      "text": " So we're going to talk about why you'd use JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 13.72,
      "end": 15.120000000000001,
      "text": " and what are the trade-offs,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.120000000000001,
      "end": 18.84,
      "text": " what are the features of the all-new AWS SDK version 3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 18.84,
      "end": 21.92,
      "text": " We'll talk about runtime support and tooling for Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 21.92,
      "end": 24.88,
      "text": " and we'll talk about all the new developments in the ecosystem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 24.88,
      "end": 26.92,
      "text": " My name is Eoin, and I'm joined by Luciano,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 26.92,
      "end": 30.200000000000003,
      "text": " and this is AWS Bites."
    },
    {
      "speakerLabel": "spk_0",
      "start": 36.36,
      "end": 40.28,
      "text": " Luciano, I think you're well-placed to talk about this as a Node.js expert."
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.28,
      "end": 42.92,
      "text": " You have your book, the Node.js Design Patterns book,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 42.92,
      "end": 45,
      "text": " which is really popular."
    },
    {
      "speakerLabel": "spk_0",
      "start": 45,
      "end": 47.8,
      "text": " It's also very up-to-date on all the latest things you can do with Node."
    },
    {
      "speakerLabel": "spk_0",
      "start": 47.8,
      "end": 51.040000000000006,
      "text": " And not only that, you're also the author of the MIDI framework"
    },
    {
      "speakerLabel": "spk_0",
      "start": 51.040000000000006,
      "end": 53.6,
      "text": " for Node.js on Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 53.6,
      "end": 57.64,
      "text": " Yeah, but I think... Thank you for doing all that advertisement for me."
    },
    {
      "speakerLabel": "spk_1",
      "start": 57.64,
      "end": 58.64,
      "text": " Always appreciated."
    },
    {
      "speakerLabel": "spk_1",
      "start": 58.64,
      "end": 61.64,
      "text": " But I think you also deserve a little bit of advertisement"
    },
    {
      "speakerLabel": "spk_1",
      "start": 61.64,
      "end": 65.76,
      "text": " because you are the co-author of this book, AI as a Service,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 65.76,
      "end": 70.4,
      "text": " which is effectively a book that talks about serverless on AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 70.4,
      "end": 73.32,
      "text": " But I was particularly impressed by the choice of using JavaScript"
    },
    {
      "speakerLabel": "spk_1",
      "start": 73.32,
      "end": 75.92,
      "text": " as basically the main language for all the code examples."
    },
    {
      "speakerLabel": "spk_1",
      "start": 75.92,
      "end": 79.8,
      "text": " So I think you are also heavily invested in the JavaScript ecosystem"
    },
    {
      "speakerLabel": "spk_1",
      "start": 79.8,
      "end": 82.2,
      "text": " when it comes to AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 82.2,
      "end": 85.64,
      "text": " So maybe I would like to start by getting your opinion"
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.64,
      "end": 89.08,
      "text": " on why do you think that, yeah, it's actually a good choice,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 89.08,
      "end": 92.76,
      "text": " or not maybe, to use JavaScript on AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 92.76,
      "end": 95.64,
      "text": " Yeah, well, I mean, both of us use JavaScript pretty heavily on AWS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 95.64,
      "end": 99.16,
      "text": " but we're also fairly well used to using Python and other languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 99.16,
      "end": 101.72,
      "text": " I guess the thing about JavaScript is that it's well supported"
    },
    {
      "speakerLabel": "spk_0",
      "start": 101.72,
      "end": 103.84,
      "text": " and widely used in all the tools and tutorials,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 103.84,
      "end": 105.52000000000001,
      "text": " so it's a pretty safe choice,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 105.52000000000001,
      "end": 108.92,
      "text": " especially for the serverless type of development."
    },
    {
      "speakerLabel": "spk_0",
      "start": 108.92,
      "end": 112.12,
      "text": " It's also, of course, the fact that full-stack JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 112.12,
      "end": 114.32000000000001,
      "text": " if you're doing front-end work as well,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 114.32000000000001,
      "end": 116.28,
      "text": " it means you have a more reasonable skills requirement"
    },
    {
      "speakerLabel": "spk_0",
      "start": 116.28,
      "end": 118.16000000000001,
      "text": " and you can do JavaScript all the way down."
    },
    {
      "speakerLabel": "spk_0",
      "start": 118.16000000000001,
      "end": 119.80000000000001,
      "text": " But of course, there are trade-offs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 119.80000000000001,
      "end": 122.32000000000001,
      "text": " Generally, I think JavaScript gives you a pretty good balance"
    },
    {
      "speakerLabel": "spk_0",
      "start": 122.32000000000001,
      "end": 125.84,
      "text": " between performance and speed of iteration as a developer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 125.84,
      "end": 128.68,
      "text": " And it's also just a really good fit for AWS Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 128.68,
      "end": 132.04000000000002,
      "text": " Maybe we could talk about that a little bit later."
    },
    {
      "speakerLabel": "spk_0",
      "start": 132.04000000000002,
      "end": 134.8,
      "text": " But given that we're trying to focus on a lot of the new developments"
    },
    {
      "speakerLabel": "spk_0",
      "start": 134.8,
      "end": 137.4,
      "text": " in the ecosystem and on AWS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 137.4,
      "end": 140.52,
      "text": " I know that you've done a lot of work recently with the new AWS SDK,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 140.52,
      "end": 142.92000000000002,
      "text": " which is version 3, and it's a complete rewrite."
    },
    {
      "speakerLabel": "spk_0",
      "start": 142.92000000000002,
      "end": 146.24,
      "text": " So what's all of that about and what's new for everybody?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 148.56,
      "end": 151.60000000000002,
      "text": " Maybe a lot of work is an overstatement, but I did give it a spin and I quite like it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 151.60000000000002,
      "end": 155.96,
      "text": " So I'd like to share a few things that I was positively impressed by."
    },
    {
      "speakerLabel": "spk_1",
      "start": 155.96,
      "end": 158.28,
      "text": " Well, first of all is that you get very good support"
    },
    {
      "speakerLabel": "spk_1",
      "start": 158.28,
      "end": 160,
      "text": " for both JavaScript and TypeScript,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 160,
      "end": 165.52,
      "text": " meaning that all the functions and methods that you use have good types."
    },
    {
      "speakerLabel": "spk_1",
      "start": 165.52,
      "end": 168.32000000000002,
      "text": " So if you use TypeScript, you get that advantage,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 168.32000000000002,
      "end": 170.4,
      "text": " auto-completion, type checking and so on."
    },
    {
      "speakerLabel": "spk_1",
      "start": 170.4,
      "end": 172.44,
      "text": " But of course, you can use it also in plain JavaScript"
    },
    {
      "speakerLabel": "spk_1",
      "start": 172.44,
      "end": 175.44,
      "text": " and everything works as expected."
    },
    {
      "speakerLabel": "spk_1",
      "start": 175.44,
      "end": 177.88,
      "text": " One interesting change, and this is pretty big,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 177.88,
      "end": 179.84,
      "text": " I think people will see the difference"
    },
    {
      "speakerLabel": "spk_1",
      "start": 179.84,
      "end": 182.88,
      "text": " in just writing even the simplest integration, I don't know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 182.88,
      "end": 186.12,
      "text": " writing a file to S3 or sending a message to a queue,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 186.12,
      "end": 191.72,
      "text": " is that now the entire API is using a pattern called the command pattern."
    },
    {
      "speakerLabel": "spk_1",
      "start": 191.72,
      "end": 195.44,
      "text": " So you don't... you instantiate a client, let's say an S3 client,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 195.44,
      "end": 199.12,
      "text": " and then rather than saying client.putObject, for instance,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 199.12,
      "end": 200.64000000000001,
      "text": " if you want to write to S3,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 200.64000000000001,
      "end": 203.4,
      "text": " now you have to create a put object command"
    },
    {
      "speakerLabel": "spk_1",
      "start": 203.4,
      "end": 206.92000000000002,
      "text": " and then you can send that command through the client."
    },
    {
      "speakerLabel": "spk_1",
      "start": 206.92000000000002,
      "end": 210.64000000000001,
      "text": " And this is, I guess, a little bit unusual at first"
    },
    {
      "speakerLabel": "spk_1",
      "start": 210.64000000000001,
      "end": 212.92000000000002,
      "text": " when you come from the version of the API,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 212.92000000000002,
      "end": 214.24,
      "text": " but there are some advantages."
    },
    {
      "speakerLabel": "spk_1",
      "start": 214.24,
      "end": 216.68,
      "text": " First of all, that you can import only the commands"
    },
    {
      "speakerLabel": "spk_1",
      "start": 216.68,
      "end": 218.32,
      "text": " that you actually need to use."
    },
    {
      "speakerLabel": "spk_1",
      "start": 218.32,
      "end": 220.36,
      "text": " And we'll talk a little bit more about tree-shaking,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 220.36,
      "end": 221.84,
      "text": " but that's something advantageous"
    },
    {
      "speakerLabel": "spk_1",
      "start": 221.84,
      "end": 224.8,
      "text": " if you want to bundle your code and do tree-shaking."
    },
    {
      "speakerLabel": "spk_1",
      "start": 224.8,
      "end": 227.68,
      "text": " And also you get good typing for every single command."
    },
    {
      "speakerLabel": "spk_1",
      "start": 227.68,
      "end": 230.96,
      "text": " So it's basically an easier way to just define the kind of action"
    },
    {
      "speakerLabel": "spk_1",
      "start": 230.96,
      "end": 233.6,
      "text": " that you want to use and understand how to use them."
    },
    {
      "speakerLabel": "spk_1",
      "start": 233.6,
      "end": 235.8,
      "text": " And we'll put links in the show notes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 235.8,
      "end": 237.20000000000002,
      "text": " if you want to find the documentation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 237.20000000000002,
      "end": 241.4,
      "text": " and understand more how that changes the way you write your code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 241.4,
      "end": 243.88,
      "text": " Other interesting things, and these, to be fair,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 243.88,
      "end": 245.92000000000002,
      "text": " to some extent were available also in V2,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 245.92000000000002,
      "end": 249.64000000000001,
      "text": " but I think that they have improved the level of support in V3,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 249.64000000000001,
      "end": 254,
      "text": " is that the JavaScript SDK in general tends to be very idiomatic,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 254,
      "end": 256,
      "text": " like rather than just being... I don't know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 256,
      "end": 260.08,
      "text": " you don't get the feeling that you are using a pound-for-pine conversion"
    },
    {
      "speakerLabel": "spk_1",
      "start": 260.08,
      "end": 262.12,
      "text": " of a Java client or something like that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 262.12,
      "end": 263.84,
      "text": " You really get the feeling that that library"
    },
    {
      "speakerLabel": "spk_1",
      "start": 263.84,
      "end": 266.32,
      "text": " was natively written for JavaScript,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 266.32,
      "end": 269.52,
      "text": " even though if you look closely into the code,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 269.52,
      "end": 271.36,
      "text": " most of the code is automatically generated"
    },
    {
      "speakerLabel": "spk_1",
      "start": 271.36,
      "end": 275,
      "text": " by more high-level definition of the AWS APIs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 275,
      "end": 277.04,
      "text": " But still, I think the developers put a lot of effort"
    },
    {
      "speakerLabel": "spk_1",
      "start": 277.04,
      "end": 280.16,
      "text": " to make sure that the code generated is actually as idiomatic"
    },
    {
      "speakerLabel": "spk_1",
      "start": 280.16,
      "end": 282.6,
      "text": " as it could be for JavaScript developers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 282.6,
      "end": 284.52,
      "text": " And two things that I really like in that sense"
    },
    {
      "speakerLabel": "spk_1",
      "start": 284.52,
      "end": 288.12,
      "text": " are support for Node.js streams in a bunch of places."
    },
    {
      "speakerLabel": "spk_1",
      "start": 288.12,
      "end": 290.08,
      "text": " The best example to me is S3,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 290.08,
      "end": 293.2,
      "text": " because very often you need to read or write files"
    },
    {
      "speakerLabel": "spk_1",
      "start": 293.2,
      "end": 296.47999999999996,
      "text": " that could be big enough in the order of gigabytes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 296.47999999999996,
      "end": 300.12,
      "text": " And if you've done any Node.js, you know that you have an odd limit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 300.12,
      "end": 301.79999999999995,
      "text": " when it comes to two gigabytes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 301.79999999999995,
      "end": 305.15999999999997,
      "text": " You cannot put all the stuff in memory in one go."
    },
    {
      "speakerLabel": "spk_1",
      "start": 305.15999999999997,
      "end": 308.56,
      "text": " So you need to find other ways to deal with a lot of data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 308.56,
      "end": 311.32,
      "text": " And the canonical way is to use Node.js streams."
    },
    {
      "speakerLabel": "spk_1",
      "start": 311.32,
      "end": 313.56,
      "text": " So when you do a strip put object,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 313.56,
      "end": 315.92,
      "text": " the body of that request could be a stream."
    },
    {
      "speakerLabel": "spk_1",
      "start": 315.92,
      "end": 318.64,
      "text": " So you could be generating data at runtime,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 318.64,
      "end": 320.6,
      "text": " or you could even process data at runtime."
    },
    {
      "speakerLabel": "spk_1",
      "start": 320.6,
      "end": 323.72,
      "text": " A very good example is you're trying to write something to S3"
    },
    {
      "speakerLabel": "spk_1",
      "start": 323.72,
      "end": 328,
      "text": " and you maybe want to compress it and maybe even encrypt it as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 328,
      "end": 330.04,
      "text": " You could do all of that in a streaming fashion"
    },
    {
      "speakerLabel": "spk_1",
      "start": 330.04,
      "end": 335.16,
      "text": " and as you write, do all the processing to compress and encrypt."
    },
    {
      "speakerLabel": "spk_1",
      "start": 335.16,
      "end": 337.8,
      "text": " And similarly, when you read from S3, you can read as a stream."
    },
    {
      "speakerLabel": "spk_1",
      "start": 337.8,
      "end": 339.96,
      "text": " So that allows you to, as soon as you consume"
    },
    {
      "speakerLabel": "spk_1",
      "start": 339.96,
      "end": 341.96,
      "text": " the first few bytes of the file,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 341.96,
      "end": 344.96,
      "text": " you can already start to process them, send them somewhere else,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 344.96,
      "end": 347.12,
      "text": " build pipelines based on the data you're fetching."
    },
    {
      "speakerLabel": "spk_1",
      "start": 347.12,
      "end": 350.64,
      "text": " So that can also give you a good boost in performance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 350.64,
      "end": 352.96,
      "text": " because you're not waiting to load the entire file"
    },
    {
      "speakerLabel": "spk_1",
      "start": 352.96,
      "end": 355.28,
      "text": " before starting the processing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 355.28,
      "end": 358.12,
      "text": " Another interesting one is support for async iterators,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 358.12,
      "end": 362.15999999999997,
      "text": " which comes very handy, especially when it comes to pagination."
    },
    {
      "speakerLabel": "spk_1",
      "start": 362.15999999999997,
      "end": 366.47999999999996,
      "text": " And there is an entire API for pagination."
    },
    {
      "speakerLabel": "spk_1",
      "start": 366.47999999999996,
      "end": 369.96,
      "text": " And I don't know, the classic example could be DynamoDB, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 369.96,
      "end": 375.08,
      "text": " You want to scan a table, you're going to be doing that in pages, I suppose."
    },
    {
      "speakerLabel": "spk_1",
      "start": 375.08,
      "end": 378.4,
      "text": " You build a paginator and it gets the first few records."
    },
    {
      "speakerLabel": "spk_1",
      "start": 378.4,
      "end": 382.88,
      "text": " Then if you want more, you go to the next page and you keep going that way."
    },
    {
      "speakerLabel": "spk_1",
      "start": 382.88,
      "end": 385.44,
      "text": " There is one construct when you use async iterators,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 385.44,
      "end": 387.59999999999997,
      "text": " which is the for-await loop."
    },
    {
      "speakerLabel": "spk_1",
      "start": 387.59999999999997,
      "end": 391.56,
      "text": " So if you've never seen it, it looks like for-await const page"
    },
    {
      "speakerLabel": "spk_1",
      "start": 391.56,
      "end": 394.28,
      "text": " of an object, maybe a paginator."
    },
    {
      "speakerLabel": "spk_1",
      "start": 394.28,
      "end": 396.03999999999996,
      "text": " And that basically creates a loop for you,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 396.03999999999996,
      "end": 398.71999999999997,
      "text": " where inside the loop you have this concept of a page."
    },
    {
      "speakerLabel": "spk_1",
      "start": 405.48,
      "end": 408.08000000000004,
      "text": " But the loop, even though it's an asynchronous loop, it's kind of blocking in the sense that it's not going to continue the iteration until the next page is available."
    },
    {
      "speakerLabel": "spk_1",
      "start": 408.08000000000004,
      "end": 410.88000000000005,
      "text": " So it's managing all that asynchronicity for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 410.88000000000005,
      "end": 414.04,
      "text": " And your code looks synchronous, even though you are still"
    },
    {
      "speakerLabel": "spk_1",
      "start": 414.04,
      "end": 417.12,
      "text": " taking advantage of the asynchronous model of JavaScript."
    },
    {
      "speakerLabel": "spk_1",
      "start": 417.12,
      "end": 420.40000000000003,
      "text": " So that's something that I really like and also allows you to handle"
    },
    {
      "speakerLabel": "spk_1",
      "start": 420.40000000000003,
      "end": 422.68,
      "text": " asynchronous error with try-catch blocks,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 422.68,
      "end": 426.6,
      "text": " so makes also error handling much easier."
    },
    {
      "speakerLabel": "spk_1",
      "start": 426.6,
      "end": 430.6,
      "text": " And one last note that I have about the SDK v3"
    },
    {
      "speakerLabel": "spk_1",
      "start": 430.6,
      "end": 433.52000000000004,
      "text": " is that there is built-in support for mocking,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 433.52000000000004,
      "end": 436.64000000000004,
      "text": " which comes very convenient when you want to do unit tests."
    },
    {
      "speakerLabel": "spk_1",
      "start": 436.64000000000004,
      "end": 439.12,
      "text": " Now, built-in is a little bit of an overstatement."
    },
    {
      "speakerLabel": "spk_1",
      "start": 439.12,
      "end": 441.24,
      "text": " It's an additional library that you need to install,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 441.24,
      "end": 443.32000000000005,
      "text": " but that library is maintained by AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 443.32000000000005,
      "end": 445.36,
      "text": " and I'm quite sure they tried to keep it in sync"
    },
    {
      "speakerLabel": "spk_1",
      "start": 445.36,
      "end": 448.24,
      "text": " with the evolution of the SDK."
    },
    {
      "speakerLabel": "spk_1",
      "start": 448.24,
      "end": 450.8,
      "text": " But the cool thing is that once you import this library,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 450.8,
      "end": 454.64000000000004,
      "text": " you basically get a set of mock objects"
    },
    {
      "speakerLabel": "spk_1",
      "start": 454.64,
      "end": 456.8,
      "text": " that you can import for every single client,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 456.8,
      "end": 460.32,
      "text": " and then you can easily specify in your test."
    },
    {
      "speakerLabel": "spk_1",
      "start": 460.32,
      "end": 462.56,
      "text": " If your test, for instance, if your code depends on,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 462.56,
      "end": 465.64,
      "text": " let's say, I don't know, SQS, you can say, OK,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 465.64,
      "end": 468.03999999999996,
      "text": " create a mock SQS client and simulate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 468.03999999999996,
      "end": 469.12,
      "text": " this particular behavior."
    },
    {
      "speakerLabel": "spk_1",
      "start": 469.12,
      "end": 472.76,
      "text": " Maybe it fails to write, maybe returns a specific response."
    },
    {
      "speakerLabel": "spk_1",
      "start": 472.76,
      "end": 474.47999999999996,
      "text": " So all this stuff is very useful,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 474.47999999999996,
      "end": 476.91999999999996,
      "text": " and before, with the previous version of the client,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 476.91999999999996,
      "end": 478.2,
      "text": " you were a little bit on your own"
    },
    {
      "speakerLabel": "spk_1",
      "start": 478.2,
      "end": 481,
      "text": " to recreate all these types in your test"
    },
    {
      "speakerLabel": "spk_1",
      "start": 481,
      "end": 485.4,
      "text": " and simulate those behavior."
    },
    {
      "speakerLabel": "spk_1",
      "start": 485.4,
      "end": 488.52,
      "text": " Oh, yeah, there is one more thing that I almost forgot."
    },
    {
      "speakerLabel": "spk_1",
      "start": 488.52,
      "end": 490,
      "text": " There is another additional feature,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 490,
      "end": 493.16,
      "text": " which is something we saw in Python before,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 493.16,
      "end": 495.72,
      "text": " but in Python, it's not well-documented,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 495.72,
      "end": 497.36,
      "text": " I have to say."
    },
    {
      "speakerLabel": "spk_1",
      "start": 497.36,
      "end": 501.56,
      "text": " But it's basically the ability to create custom logic that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 501.56,
      "end": 505.64,
      "text": " can run before or after the client actually sends"
    },
    {
      "speakerLabel": "spk_1",
      "start": 505.64,
      "end": 508.56,
      "text": " the HTTP request to AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 508.56,
      "end": 511.72,
      "text": " So in the SDK v3, they actually formalized a little bit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 511.72,
      "end": 513.92,
      "text": " this thing into the middleware pattern."
    },
    {
      "speakerLabel": "spk_1",
      "start": 513.92,
      "end": 517.68,
      "text": " So basically, you can write code that wraps around,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 517.68,
      "end": 520.72,
      "text": " let's say, the HTTP request going to AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 520.72,
      "end": 523.76,
      "text": " and you can use that to either enhance the request going"
    },
    {
      "speakerLabel": "spk_1",
      "start": 523.76,
      "end": 527.2,
      "text": " to AWS or manipulate the response coming back to AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 527.2,
      "end": 529.96,
      "text": " So you can add behaviors like, I don't know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 529.96,
      "end": 533.56,
      "text": " add compression to a message that is going to AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 533.56,
      "end": 535.56,
      "text": " and that can be convenient, for instance."
    },
    {
      "speakerLabel": "spk_1",
      "start": 535.56,
      "end": 537.4,
      "text": " Something we mentioned in a previous episode,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 537.4,
      "end": 539.4399999999999,
      "text": " when you call CloudWatch put metric data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 539.4399999999999,
      "end": 543.6,
      "text": " you have very restrictive payload size limits."
    },
    {
      "speakerLabel": "spk_1",
      "start": 543.6,
      "end": 545.72,
      "text": " So in that case, you can leverage compression"
    },
    {
      "speakerLabel": "spk_1",
      "start": 545.72,
      "end": 547.52,
      "text": " to go a little bit over those limits"
    },
    {
      "speakerLabel": "spk_1",
      "start": 547.52,
      "end": 550.56,
      "text": " to be able to push more data while staying"
    },
    {
      "speakerLabel": "spk_1",
      "start": 550.56,
      "end": 552.4399999999999,
      "text": " between the boundaries."
    },
    {
      "speakerLabel": "spk_1",
      "start": 552.4399999999999,
      "end": 553.84,
      "text": " So that's something really cool."
    },
    {
      "speakerLabel": "spk_1",
      "start": 553.84,
      "end": 556.64,
      "text": " I haven't used it yet, but I had a look at the documentation,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 556.64,
      "end": 558.92,
      "text": " and it could be useful in cases like this."
    },
    {
      "speakerLabel": "spk_1",
      "start": 561.6,
      "end": 566.1999999999999,
      "text": " Yeah, that's a big spiel about the SDK v3."
    },
    {
      "speakerLabel": "spk_1",
      "start": 566.2,
      "end": 569.72,
      "text": " Maybe we should talk about serverless and Lambda in general."
    },
    {
      "speakerLabel": "spk_0",
      "start": 569.72,
      "end": 571.2,
      "text": " For Lambda, yeah, I think we mentioned"
    },
    {
      "speakerLabel": "spk_0",
      "start": 571.2,
      "end": 574.08,
      "text": " that Node.js is a good choice for runtime on Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 574.08,
      "end": 575.88,
      "text": " It's been around for a very long time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 575.88,
      "end": 577.84,
      "text": " It's been supported from the very beginning with Node.js."
    },
    {
      "speakerLabel": "spk_0",
      "start": 577.84,
      "end": 581.24,
      "text": " So it's, I would say, a first-class citizen,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 581.24,
      "end": 582.8000000000001,
      "text": " although you have lots of options these days,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 582.8000000000001,
      "end": 584.5600000000001,
      "text": " as well as custom runtimes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 584.5600000000001,
      "end": 586.6800000000001,
      "text": " It's also one of the most performant runtimes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 586.6800000000001,
      "end": 588.12,
      "text": " especially for scripting languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 588.12,
      "end": 590.8000000000001,
      "text": " So you'll get good cold start times."
    },
    {
      "speakerLabel": "spk_0",
      "start": 590.8000000000001,
      "end": 592.48,
      "text": " And there's lots of useful benchmarks out there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 592.48,
      "end": 595.32,
      "text": " on Lambda cold start times in general"
    },
    {
      "speakerLabel": "spk_0",
      "start": 595.32,
      "end": 596.96,
      "text": " for lots of different languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 596.96,
      "end": 599.72,
      "text": " I think, you know, languages like Go and Rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 599.72,
      "end": 604.2,
      "text": " are almost leading the way in terms of compiled languages,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 604.2,
      "end": 605.72,
      "text": " but you get very good performance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 605.72,
      "end": 608.12,
      "text": " and I have to say I'm pretty pleased with it in general."
    },
    {
      "speakerLabel": "spk_0",
      "start": 608.12,
      "end": 609.96,
      "text": " And there's lots of ways you can optimize it as well"
    },
    {
      "speakerLabel": "spk_0",
      "start": 609.96,
      "end": 612.6,
      "text": " when it comes to squeezing those last few tens"
    },
    {
      "speakerLabel": "spk_0",
      "start": 612.6,
      "end": 614.72,
      "text": " of milliseconds out of your cold start times."
    },
    {
      "speakerLabel": "spk_0",
      "start": 614.72,
      "end": 616.12,
      "text": " So we can link, actually, in the show notes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 616.12,
      "end": 619.84,
      "text": " to some really good benchmarks that you can take a look at."
    },
    {
      "speakerLabel": "spk_0",
      "start": 619.84,
      "end": 622.12,
      "text": " Some of the things that you've mentioned there,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 622.12,
      "end": 623.44,
      "text": " there's some new language features."
    },
    {
      "speakerLabel": "spk_0",
      "start": 623.44,
      "end": 626.32,
      "text": " Like we have ESM modules now."
    },
    {
      "speakerLabel": "spk_0",
      "start": 626.32,
      "end": 628.36,
      "text": " So we've moved away from common JS modules"
    },
    {
      "speakerLabel": "spk_0",
      "start": 628.36,
      "end": 630.24,
      "text": " to ESM modules with Node.js,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 630.24,
      "end": 633.32,
      "text": " and they've been supported since Node 14."
    },
    {
      "speakerLabel": "spk_0",
      "start": 633.32,
      "end": 635.7600000000001,
      "text": " I think there was a little bit of a bumpy road"
    },
    {
      "speakerLabel": "spk_0",
      "start": 635.7600000000001,
      "end": 639.0400000000001,
      "text": " in terms of supporting them when Node.js 14 support"
    },
    {
      "speakerLabel": "spk_0",
      "start": 639.0400000000001,
      "end": 642.08,
      "text": " was added to Lambda, but it is possible now."
    },
    {
      "speakerLabel": "spk_0",
      "start": 642.08,
      "end": 644.8000000000001,
      "text": " And you can also do things like top level await."
    },
    {
      "speakerLabel": "spk_0",
      "start": 644.8000000000001,
      "end": 648.6400000000001,
      "text": " So I think async await is very widely adopted"
    },
    {
      "speakerLabel": "spk_0",
      "start": 648.6400000000001,
      "end": 650.6400000000001,
      "text": " and almost de facto at this stage"
    },
    {
      "speakerLabel": "spk_0",
      "start": 650.6400000000001,
      "end": 653.1600000000001,
      "text": " for asynchronous programming in Node.js,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 653.16,
      "end": 657.4399999999999,
      "text": " but one of the things in Lambda handler"
    },
    {
      "speakerLabel": "spk_0",
      "start": 657.4399999999999,
      "end": 660.7199999999999,
      "text": " you'd like to do often is fetch some"
    },
    {
      "speakerLabel": "spk_0",
      "start": 660.7199999999999,
      "end": 663.64,
      "text": " maybe configuration parameters from SSM parameter store"
    },
    {
      "speakerLabel": "spk_0",
      "start": 663.64,
      "end": 664.8,
      "text": " outside of your handler logic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 664.8,
      "end": 666.7199999999999,
      "text": " so that it's done in the cold start phase"
    },
    {
      "speakerLabel": "spk_0",
      "start": 666.7199999999999,
      "end": 669.9599999999999,
      "text": " and you don't incur the penalty for each event."
    },
    {
      "speakerLabel": "spk_0",
      "start": 669.9599999999999,
      "end": 673,
      "text": " And that's something you can now do with async await"
    },
    {
      "speakerLabel": "spk_0",
      "start": 673,
      "end": 676.12,
      "text": " with, you know, if you're using the AWS SDK"
    },
    {
      "speakerLabel": "spk_0",
      "start": 676.12,
      "end": 679.6,
      "text": " outside of your handler functions, that's pretty nice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 679.6,
      "end": 681.4399999999999,
      "text": " I also believe that support for Node.js"
    },
    {
      "speakerLabel": "spk_0",
      "start": 681.44,
      "end": 683.48,
      "text": " is this is just like hot off the press."
    },
    {
      "speakerLabel": "spk_0",
      "start": 683.48,
      "end": 685.7600000000001,
      "text": " It's either on its way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 685.7600000000001,
      "end": 688.0400000000001,
      "text": " I don't think it's been officially announced by Node.js,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 688.0400000000001,
      "end": 689.6800000000001,
      "text": " but I can see that, you know,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 689.6800000000001,
      "end": 693.6,
      "text": " Vercel have added their functions built on Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 693.6,
      "end": 696.7600000000001,
      "text": " and it's serverless framework has added a support"
    },
    {
      "speakerLabel": "spk_0",
      "start": 696.7600000000001,
      "end": 698.5600000000001,
      "text": " and that's in mainline now as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 698.5600000000001,
      "end": 702.2,
      "text": " So you can actually deploy server Node.js 16 functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 704.1600000000001,
      "end": 705.5200000000001,
      "text": " as of today."
    },
    {
      "speakerLabel": "spk_0",
      "start": 705.5200000000001,
      "end": 709.08,
      "text": " We've also got lots of, I suppose,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 709.08,
      "end": 711.8000000000001,
      "text": " ecosystem support within Lambda as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 711.8000000000001,
      "end": 713.84,
      "text": " So we mentioned that one of the things you did"
    },
    {
      "speakerLabel": "spk_0",
      "start": 713.84,
      "end": 716.8000000000001,
      "text": " a number of years ago and has been really growing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 716.8000000000001,
      "end": 719.0400000000001,
      "text": " at pace since is create the MIDI framework,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 719.0400000000001,
      "end": 722.6,
      "text": " which is a middleware engine for AWS Lambda written in Node.js."
    },
    {
      "speakerLabel": "spk_0",
      "start": 722.6,
      "end": 724.08,
      "text": " Do you want to give us a brief update,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 724.08,
      "end": 727.08,
      "text": " a brief explainer for people who haven't encountered MIDI?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 727.08,
      "end": 728.5200000000001,
      "text": " What kind of problems does it solve?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 728.5200000000001,
      "end": 730.5600000000001,
      "text": " Why is it useful in Lambda?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 730.5600000000001,
      "end": 731.4000000000001,
      "text": " Yeah, absolutely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 731.4000000000001,
      "end": 735.36,
      "text": " So when I started to write my very first few Lambdas,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 735.36,
      "end": 738.6800000000001,
      "text": " I realized that because you have this such small unit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 738.68,
      "end": 740.9599999999999,
      "text": " of code, like you think more in functions"
    },
    {
      "speakerLabel": "spk_1",
      "start": 740.9599999999999,
      "end": 742.52,
      "text": " rather than services, most of that,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 742.52,
      "end": 744.28,
      "text": " when you're actually writing the code,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 744.28,
      "end": 747.4,
      "text": " what tends to happen is that you have a little bit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 747.4,
      "end": 750.0799999999999,
      "text": " of boilerplate always before and after"
    },
    {
      "speakerLabel": "spk_1",
      "start": 750.0799999999999,
      "end": 753,
      "text": " your main business logic for that Lambda function."
    },
    {
      "speakerLabel": "spk_1",
      "start": 753,
      "end": 755.2399999999999,
      "text": " So that boilerplate could be for instance,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 755.2399999999999,
      "end": 758.52,
      "text": " doing authentication, doing validation of the input,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 758.52,
      "end": 761.28,
      "text": " maybe fetching configuration from SSM"
    },
    {
      "speakerLabel": "spk_1",
      "start": 761.28,
      "end": 763.68,
      "text": " and then eventually you get to run your actual"
    },
    {
      "speakerLabel": "spk_1",
      "start": 763.68,
      "end": 766.64,
      "text": " business logic and then you might be ready"
    },
    {
      "speakerLabel": "spk_1",
      "start": 766.64,
      "end": 767.64,
      "text": " to produce a response,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 767.64,
      "end": 769.6,
      "text": " but you might want to do a few additional things"
    },
    {
      "speakerLabel": "spk_1",
      "start": 769.6,
      "end": 771.76,
      "text": " before the response is sent back to the user,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 771.76,
      "end": 773.56,
      "text": " maybe normalize that response."
    },
    {
      "speakerLabel": "spk_1",
      "start": 773.56,
      "end": 776.1999999999999,
      "text": " Can make sense if you're using the HTTP integration"
    },
    {
      "speakerLabel": "spk_1",
      "start": 776.1999999999999,
      "end": 780.14,
      "text": " with API gateway or you want to have error handling"
    },
    {
      "speakerLabel": "spk_1",
      "start": 780.14,
      "end": 782.46,
      "text": " in a more generalized way."
    },
    {
      "speakerLabel": "spk_1",
      "start": 782.46,
      "end": 785.64,
      "text": " So what I realized after probably the first year"
    },
    {
      "speakerLabel": "spk_1",
      "start": 785.64,
      "end": 788.1999999999999,
      "text": " that I was writing Lambdas for a project is,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 788.1999999999999,
      "end": 791.3199999999999,
      "text": " okay, I have all the Lambdas where it's very hard to tell"
    },
    {
      "speakerLabel": "spk_1",
      "start": 791.3199999999999,
      "end": 793.28,
      "text": " what's the actual business logic"
    },
    {
      "speakerLabel": "spk_1",
      "start": 793.28,
      "end": 795.48,
      "text": " and what's the boilerplate around it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 795.48,
      "end": 798.28,
      "text": " And I was told that the whole promise around Lambdas"
    },
    {
      "speakerLabel": "spk_1",
      "start": 798.28,
      "end": 800.36,
      "text": " was to focus more on the business logic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 800.36,
      "end": 802.82,
      "text": " So I was a little bit disappointed in that sense."
    },
    {
      "speakerLabel": "spk_1",
      "start": 802.82,
      "end": 804.72,
      "text": " And with the team I was working with at the time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 804.72,
      "end": 807.96,
      "text": " we figured out that we would use the middleware pattern"
    },
    {
      "speakerLabel": "spk_1",
      "start": 807.96,
      "end": 811.16,
      "text": " to try to isolate a little bit more all this boilerplate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 811.16,
      "end": 815.6800000000001,
      "text": " code into their own function and then keep your handler"
    },
    {
      "speakerLabel": "spk_1",
      "start": 815.6800000000001,
      "end": 818.44,
      "text": " as pure as possible, so just the business logic,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 818.44,
      "end": 821.12,
      "text": " and then use the handler as a function where you could"
    },
    {
      "speakerLabel": "spk_1",
      "start": 821.12,
      "end": 824.0600000000001,
      "text": " attach the boilerplate behavior that you wanted."
    },
    {
      "speakerLabel": "spk_1",
      "start": 824.06,
      "end": 827.3599999999999,
      "text": " But basically the function will read as everything is clean,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 827.3599999999999,
      "end": 828.88,
      "text": " everything has been already done for you,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 828.88,
      "end": 830.56,
      "text": " just do the business logic,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 830.56,
      "end": 834.1999999999999,
      "text": " and then you attach everything else in another place."
    },
    {
      "speakerLabel": "spk_1",
      "start": 834.1999999999999,
      "end": 837.2199999999999,
      "text": " And that also makes these behaviors,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 837.2199999999999,
      "end": 839.4,
      "text": " these additional behaviors or boilerplate if you want,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 839.4,
      "end": 843.14,
      "text": " more isolated and therefore testable, reusable, and so on."
    },
    {
      "speakerLabel": "spk_1",
      "start": 843.14,
      "end": 846.18,
      "text": " So that's kind of the use case for MIDI,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 846.18,
      "end": 848.16,
      "text": " and MIDI is basically a framework that allows you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 848.16,
      "end": 850.28,
      "text": " to do this thing in an easy way,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 850.28,
      "end": 851.64,
      "text": " just focus on the business logic"
    },
    {
      "speakerLabel": "spk_1",
      "start": 851.64,
      "end": 854.14,
      "text": " and attach the additional behavior afterwards."
    },
    {
      "speakerLabel": "spk_0",
      "start": 855.28,
      "end": 857.56,
      "text": " Yeah, I remember being in that situation"
    },
    {
      "speakerLabel": "spk_0",
      "start": 857.56,
      "end": 862.02,
      "text": " where you had all this boilerplate to parse your HTTP body"
    },
    {
      "speakerLabel": "spk_0",
      "start": 862.02,
      "end": 863.36,
      "text": " and then create the status code"
    },
    {
      "speakerLabel": "spk_0",
      "start": 863.36,
      "end": 864.76,
      "text": " and the headers on the way out."
    },
    {
      "speakerLabel": "spk_0",
      "start": 864.76,
      "end": 866.4,
      "text": " It was really nice to be able to just add in MIDI"
    },
    {
      "speakerLabel": "spk_0",
      "start": 866.4,
      "end": 869.48,
      "text": " and solve a lot of those problems with the middlewares"
    },
    {
      "speakerLabel": "spk_0",
      "start": 869.48,
      "end": 871.4399999999999,
      "text": " that you can add in from the community."
    },
    {
      "speakerLabel": "spk_0",
      "start": 872.38,
      "end": 875.08,
      "text": " I also know that this is part of something new,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 875.08,
      "end": 877.66,
      "text": " which is the Lambda Power Tools for TypeScript."
    },
    {
      "speakerLabel": "spk_0",
      "start": 877.66,
      "end": 880.6,
      "text": " And we might've mentioned the Lambda Power Tools for Python"
    },
    {
      "speakerLabel": "spk_0",
      "start": 880.6,
      "end": 882.48,
      "text": " a few times on previous episodes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 882.48,
      "end": 885.88,
      "text": " I believe the TypeScript version is due to come out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 885.88,
      "end": 889.16,
      "text": " in its stable version very soon, version 1.0."
    },
    {
      "speakerLabel": "spk_0",
      "start": 889.16,
      "end": 893.44,
      "text": " It has been available as a preview beta for some time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 893.44,
      "end": 896.32,
      "text": " That builds on MIDI and also allows you to do lots of stuff"
    },
    {
      "speakerLabel": "spk_0",
      "start": 896.32,
      "end": 899,
      "text": " like logging metrics and traces as well"
    },
    {
      "speakerLabel": "spk_0",
      "start": 899,
      "end": 900.5,
      "text": " for your Node.js Lambdas."
    },
    {
      "speakerLabel": "spk_0",
      "start": 900.5,
      "end": 903.64,
      "text": " So we might put a link to that in the show notes as well"
    },
    {
      "speakerLabel": "spk_0",
      "start": 903.64,
      "end": 905.84,
      "text": " and people can check it out."
    },
    {
      "speakerLabel": "spk_1",
      "start": 905.84,
      "end": 906.6800000000001,
      "text": " Yeah, absolutely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 906.6800000000001,
      "end": 909.28,
      "text": " And I think it's another very useful utility"
    },
    {
      "speakerLabel": "spk_1",
      "start": 909.28,
      "end": 912.8,
      "text": " when you care about making sure that your Lambdas"
    },
    {
      "speakerLabel": "spk_1",
      "start": 912.8,
      "end": 914.64,
      "text": " are basically production ready."
    },
    {
      "speakerLabel": "spk_1",
      "start": 914.64,
      "end": 918.6,
      "text": " Libraries like Power Tools can make that process much easier"
    },
    {
      "speakerLabel": "spk_1",
      "start": 918.6,
      "end": 921,
      "text": " because they have baked in a lot of defaults"
    },
    {
      "speakerLabel": "spk_1",
      "start": 921,
      "end": 923.8399999999999,
      "text": " that you don't have to rebuild on your own basically."
    },
    {
      "speakerLabel": "spk_0",
      "start": 923.8399999999999,
      "end": 924.66,
      "text": " Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 925.5,
      "end": 927.28,
      "text": " And speaking of TypeScript,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 927.28,
      "end": 929,
      "text": " because that's called Lambda Power Tools for TypeScript,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 929,
      "end": 931.66,
      "text": " even though it works with JavaScript as well,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 931.66,
      "end": 934.76,
      "text": " there may be a question people will have is,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 934.76,
      "end": 936.9,
      "text": " should I use JavaScript or TypeScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 936.9,
      "end": 939.84,
      "text": " when I'm building Node.js functions on Lambda?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 939.84,
      "end": 943.12,
      "text": " And even within JavaScript,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 943.12,
      "end": 945.84,
      "text": " do we just deploy vanilla raw JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 945.84,
      "end": 946.68,
      "text": " to our Lambda functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 946.68,
      "end": 948.34,
      "text": " or should we be using some sort of bundling"
    },
    {
      "speakerLabel": "spk_0",
      "start": 948.34,
      "end": 951.36,
      "text": " like esbuild or webpack to optimize the functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 951.36,
      "end": 952.24,
      "text": " in the deployment package?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 952.24,
      "end": 953.0799999999999,
      "text": " What do you think?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 954.02,
      "end": 956.04,
      "text": " Yeah, this is very opinionated,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 956.04,
      "end": 959.92,
      "text": " because I think there are three types of people"
    },
    {
      "speakerLabel": "spk_1",
      "start": 959.92,
      "end": 961.6,
      "text": " when it comes to TypeScript,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 961.6,
      "end": 964.04,
      "text": " three types of JavaScript developer, I would like to say."
    },
    {
      "speakerLabel": "spk_1",
      "start": 964.04,
      "end": 966.16,
      "text": " One that is like always use TypeScript."
    },
    {
      "speakerLabel": "spk_1",
      "start": 966.16,
      "end": 968.4599999999999,
      "text": " The other one is like, no, no, TypeScript is a bad idea."
    },
    {
      "speakerLabel": "spk_1",
      "start": 968.4599999999999,
      "end": 969.88,
      "text": " Always use poor JavaScript."
    },
    {
      "speakerLabel": "spk_1",
      "start": 969.88,
      "end": 972.76,
      "text": " And then there is the camp in between like, yes,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 972.76,
      "end": 974.88,
      "text": " use TypeScript, but not always."
    },
    {
      "speakerLabel": "spk_1",
      "start": 974.88,
      "end": 977.52,
      "text": " I am a little bit in that kind of moderate ground"
    },
    {
      "speakerLabel": "spk_1",
      "start": 977.52,
      "end": 981.48,
      "text": " where I like TypeScript, but with moderation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 981.48,
      "end": 983.4399999999999,
      "text": " I think the really good use case for TypeScript"
    },
    {
      "speakerLabel": "spk_1",
      "start": 983.4399999999999,
      "end": 986.8,
      "text": " is when you do a lot of complex data manipulation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 986.8,
      "end": 990.0799999999999,
      "text": " So if you put the effort in defining all the types,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 990.0799999999999,
      "end": 992.42,
      "text": " then you definitely get the advantage"
    },
    {
      "speakerLabel": "spk_1",
      "start": 992.42,
      "end": 994.28,
      "text": " that every time you are manipulating the data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 994.28,
      "end": 997.24,
      "text": " the type checker can prevent you from doing mistakes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 997.24,
      "end": 999.52,
      "text": " And this is something that happens all the time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 999.52,
      "end": 1002.16,
      "text": " like a type of undefined,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1002.16,
      "end": 1003.48,
      "text": " and you need to do all these checks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1003.48,
      "end": 1006.52,
      "text": " You cannot call undefined functions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1006.52,
      "end": 1008.72,
      "text": " All this kind of problems will go away"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1008.72,
      "end": 1010.48,
      "text": " in the sense that the TypeScript compiler,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1010.48,
      "end": 1012.14,
      "text": " if you did a good job with your typings,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1012.14,
      "end": 1014.8,
      "text": " will tell you before you actually run your code"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1014.8,
      "end": 1016.48,
      "text": " that there might be something wrong."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1016.48,
      "end": 1017.8399999999999,
      "text": " So definitely use TypeScript"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1017.8399999999999,
      "end": 1019.4,
      "text": " when you are in this kind of situation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1019.4,
      "end": 1022.28,
      "text": " doing a lot of heavy data transformation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1022.28,
      "end": 1024.44,
      "text": " where you have complex types,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1024.44,
      "end": 1026.3999999999999,
      "text": " which I think in Lambda happens a lot"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1026.3999999999999,
      "end": 1028.44,
      "text": " because most of the time you are writing glue code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1028.44,
      "end": 1032.44,
      "text": " So often you need to kind of map types from one system"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1032.44,
      "end": 1034.68,
      "text": " into type for another system."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1034.68,
      "end": 1035.6399999999999,
      "text": " Yeah, I've seen that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1035.6399999999999,
      "end": 1037.08,
      "text": " And sometimes it's useful to have,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1037.08,
      "end": 1038.8,
      "text": " if you're doing HTTP proxy integration,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1038.8,
      "end": 1041.68,
      "text": " having the types for the event that you know you'll receive,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1041.68,
      "end": 1042.52,
      "text": " that can be very useful,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1042.52,
      "end": 1044.28,
      "text": " but I guess you can take advantage of those"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1044.28,
      "end": 1046.58,
      "text": " even if you're using JavaScript."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1046.58,
      "end": 1049.52,
      "text": " I'm somewhat conflicted when it comes to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1049.52,
      "end": 1051.56,
      "text": " using TypeScript in Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1051.56,
      "end": 1053.12,
      "text": " because I often think Lambda functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1053.12,
      "end": 1055.12,
      "text": " should be small and simple as possible."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1055.12,
      "end": 1057.96,
      "text": " And if you need to have that level of typing support,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1057.96,
      "end": 1059.9199999999998,
      "text": " maybe you have too much complexity,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1059.9199999999998,
      "end": 1062.28,
      "text": " but that can't be a hard and fast rule"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1062.28,
      "end": 1064.24,
      "text": " because it's not always that simple"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1064.24,
      "end": 1067.04,
      "text": " and you can benefit from those typings in some cases."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1067.04,
      "end": 1069.3999999999999,
      "text": " But even with bundling, I often think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1069.3999999999999,
      "end": 1072.72,
      "text": " bundling adds an extra bit of development tooling complexity."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1072.72,
      "end": 1075.8799999999999,
      "text": " So if you want to reduce your package size,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1075.8799999999999,
      "end": 1077.72,
      "text": " you can definitely benefit from bundling,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1077.72,
      "end": 1080.04,
      "text": " but that means now you've got a minified JavaScript running"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1080.04,
      "end": 1082.44,
      "text": " and you need to make sure that your stack traces"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1083.48,
      "end": 1086.6399999999999,
      "text": " are readable from a developer when you're troubleshooting."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1086.6399999999999,
      "end": 1088.8799999999999,
      "text": " So you need to ensure that you've got source map support"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1088.8799999999999,
      "end": 1090.32,
      "text": " in there and all of that stuff,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1090.32,
      "end": 1092.24,
      "text": " as well as the fact that bundling adds"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1092.24,
      "end": 1094.12,
      "text": " a little bit of a latency to your build."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1094.12,
      "end": 1096.56,
      "text": " So it's a trade-off, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1096.56,
      "end": 1099.02,
      "text": " There was a really good benchmark exercise"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1099.02,
      "end": 1103,
      "text": " that Yan Shui did about AWS Lambda performance"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1103,
      "end": 1105.8799999999999,
      "text": " and the trade-offs with adding bundling support"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1105.8799999999999,
      "end": 1107.76,
      "text": " and how that benefits your cold start time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1107.76,
      "end": 1110.36,
      "text": " So there is a benefit there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1110.36,
      "end": 1112.76,
      "text": " It's just a question of what's the penalty"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1112.76,
      "end": 1114.8799999999999,
      "text": " you incur at build time as a developer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1114.8799999999999,
      "end": 1117.12,
      "text": " How does that matter to you?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1117.12,
      "end": 1118.24,
      "text": " Often it depends on how fast"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1118.24,
      "end": 1120.44,
      "text": " your developer machine is even."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1120.44,
      "end": 1124.18,
      "text": " So there's lots of different factors to weigh up there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1126,
      "end": 1127.96,
      "text": " At this point, should we talk about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1127.96,
      "end": 1129.82,
      "text": " some of the other things, parts of the ecosystem"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1129.82,
      "end": 1132.56,
      "text": " that are relevant for JavaScript and Node.js developers?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1133.72,
      "end": 1137.4,
      "text": " I think we mentioned one of the statistics recently"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1137.4,
      "end": 1140.1200000000001,
      "text": " about 70% of CloudFormation being deployed"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1140.1200000000001,
      "end": 1140.96,
      "text": " by the serverless framework."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1140.96,
      "end": 1143.5,
      "text": " So serverless framework is pretty ubiquitous"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1143.5,
      "end": 1146.3200000000002,
      "text": " when it comes to building and deploying Lambdas."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1146.3200000000002,
      "end": 1148.42,
      "text": " It's written in Node.js itself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1148.42,
      "end": 1152.48,
      "text": " Have you found as well that writing Node.js functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1152.48,
      "end": 1153.44,
      "text": " in serverless framework is always"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1153.44,
      "end": 1154.74,
      "text": " a little bit better supported"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1154.74,
      "end": 1156.2800000000002,
      "text": " or feels more like a first class citizen"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1156.2800000000002,
      "end": 1157.8000000000002,
      "text": " compared to writing other languages"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1157.8000000000002,
      "end": 1159.8400000000001,
      "text": " and deploying them with the serverless framework?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1159.8400000000001,
      "end": 1160.66,
      "text": " I think so."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1160.66,
      "end": 1162.1200000000001,
      "text": " And I mean, the first reason is because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1162.1200000000001,
      "end": 1164.1200000000001,
      "text": " I think the documentation is probably"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1164.1200000000001,
      "end": 1166.16,
      "text": " the first one to come out every day."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1166.16,
      "end": 1167.5600000000002,
      "text": " There's a new feature, I think,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1167.5600000000002,
      "end": 1168.92,
      "text": " that the first thing that they publish"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1168.92,
      "end": 1170.8400000000001,
      "text": " is the JavaScript version."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1170.8400000000001,
      "end": 1174.24,
      "text": " So maybe that's one reason, but I suppose because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1174.24,
      "end": 1176.4,
      "text": " the tool itself is written in JavaScript."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1176.4,
      "end": 1178.76,
      "text": " Probably the majority of developers in the team"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1178.76,
      "end": 1181.52,
      "text": " know JavaScript better than other languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1183.72,
      "end": 1185.5600000000002,
      "text": " Yeah, and from a packaging perspective, it kind of integrates seamlessly with NPM"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1185.5600000000002,
      "end": 1187.16,
      "text": " and your Node modules directory"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1187.16,
      "end": 1188.48,
      "text": " and you don't need additional tooling"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1188.48,
      "end": 1190.18,
      "text": " to package up your zip."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.18,
      "end": 1191.02,
      "text": " Exactly."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1191.02,
      "end": 1192.64,
      "text": " I guess that makes sense."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1192.64,
      "end": 1193.76,
      "text": " One of the other tools, of course,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1193.76,
      "end": 1195.8000000000002,
      "text": " that's well supported with JavaScript and TypeScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.8,
      "end": 1197.3999999999999,
      "text": " is CDK."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1197.3999999999999,
      "end": 1200.3999999999999,
      "text": " So we've covered that CDK in a previous episode"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1200.3999999999999,
      "end": 1201.76,
      "text": " in reasonable detail."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1201.76,
      "end": 1203.32,
      "text": " And although it supports a lot of languages,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1203.32,
      "end": 1206.06,
      "text": " I think it's a little bit more user friendly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1206.06,
      "end": 1207.84,
      "text": " or developer friendly when you're using JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1207.84,
      "end": 1208.96,
      "text": " and TypeScript."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1208.96,
      "end": 1210.78,
      "text": " Because I believe the way it's written"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1210.78,
      "end": 1214.98,
      "text": " with the JSII library is that it's essentially"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1214.98,
      "end": 1217.54,
      "text": " a TypeScript implementation with bindings"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1217.54,
      "end": 1218.54,
      "text": " for other languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1220.36,
      "end": 1223.04,
      "text": " So I think it's, yeah, it's a good option."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1223.04,
      "end": 1225.2,
      "text": " I really actually like one of the areas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1225.2,
      "end": 1226.8400000000001,
      "text": " where I really enjoy using TypeScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1226.8400000000001,
      "end": 1227.8400000000001,
      "text": " is when I'm using CDK"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1227.8400000000001,
      "end": 1230.32,
      "text": " because the tooling integration is so seamless."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1231.32,
      "end": 1232.64,
      "text": " Yeah, there is another tool"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1232.64,
      "end": 1234.32,
      "text": " that I would like to give it a shout out"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1234.32,
      "end": 1236,
      "text": " even though it's not exclusively something"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1236,
      "end": 1237.68,
      "text": " that you will use in AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1237.68,
      "end": 1239.56,
      "text": " It's kind of an interesting project from Google."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1239.56,
      "end": 1241.0800000000002,
      "text": " It's called ZX."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1241.0800000000002,
      "end": 1244.88,
      "text": " And the idea is that sometimes writing bash scripts"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1244.88,
      "end": 1247.76,
      "text": " is tedious or at least I would agree with that statement."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1247.76,
      "end": 1250.26,
      "text": " Maybe not everybody agrees with it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1250.26,
      "end": 1251.4,
      "text": " So the idea is like, okay,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1251.4,
      "end": 1253,
      "text": " because JavaScript and Node.js"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1253,
      "end": 1254.48,
      "text": " are becoming more and more ubiquitous"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1254.48,
      "end": 1255.64,
      "text": " and you probably use them"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1255.64,
      "end": 1257.2,
      "text": " in different parts of your application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1257.2,
      "end": 1260.68,
      "text": " What if you could write scripts that are JavaScript"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1260.68,
      "end": 1263.44,
      "text": " whereas in the past you would have been using bash?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1263.44,
      "end": 1265.84,
      "text": " So the idea is how do we make that easier for people?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1265.84,
      "end": 1269.04,
      "text": " Because of course you could have done that all the time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1269.04,
      "end": 1271.32,
      "text": " because at the end of the day, those are just scripts"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1271.32,
      "end": 1272.96,
      "text": " and you could do whatever you want with those scripts."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1272.96,
      "end": 1274.52,
      "text": " But I suppose the advantage of bash"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1274.52,
      "end": 1277.08,
      "text": " is that it's very easy to run all their commands,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1277.08,
      "end": 1279.6200000000001,
      "text": " all their processes with what we have in the system"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1279.6200000000001,
      "end": 1281.46,
      "text": " calling all their executables."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1281.46,
      "end": 1283.18,
      "text": " So what ZX did,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1283.18,
      "end": 1284.6000000000001,
      "text": " and this is probably the primary features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1284.6000000000001,
      "end": 1286.8,
      "text": " they made very easy for you to do that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1286.8,
      "end": 1289.2,
      "text": " in a JavaScript language effectively."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1289.2,
      "end": 1292.1200000000001,
      "text": " So you can use dollar and backticks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1292.1200000000001,
      "end": 1294.2,
      "text": " So they are basically exploiting the feature"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1294.2,
      "end": 1297.0600000000002,
      "text": " of template literal strings."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1297.0600000000002,
      "end": 1299.2,
      "text": " And what they say is, okay,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1299.2,
      "end": 1302.0600000000002,
      "text": " if you tag a literal string with the dollar,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1302.0600000000002,
      "end": 1304.0800000000002,
      "text": " then we are gonna execute the string for you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1304.0800000000002,
      "end": 1307.3600000000001,
      "text": " as a command in the system and give you back a promise"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1307.3600000000001,
      "end": 1309.96,
      "text": " that tracks the execution of that command."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1309.96,
      "end": 1313.24,
      "text": " So that way you can easily write a script in Node.js"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1313.24,
      "end": 1316.3600000000001,
      "text": " effectively, but also call other processes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1316.3600000000001,
      "end": 1317.68,
      "text": " with like one liner."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1317.68,
      "end": 1321.32,
      "text": " So that seems to be kind of a decent replacement for bash."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1321.32,
      "end": 1323.6000000000001,
      "text": " And I suppose in the context of doing automation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1323.6000000000001,
      "end": 1326.28,
      "text": " and deploying projects to the cloud,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1326.28,
      "end": 1327.8,
      "text": " that could be something convenient"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1327.8,
      "end": 1331.82,
      "text": " if you really want to be like 100% JavaScript end to end."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1331.82,
      "end": 1332.72,
      "text": " And that's pretty nice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1332.72,
      "end": 1334,
      "text": " How does that work then with,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1334,
      "end": 1336.96,
      "text": " because one of the primary features of Node.js"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1336.96,
      "end": 1338.18,
      "text": " is it's asynchronous nature"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1338.18,
      "end": 1340.76,
      "text": " and you have either callbacks or promises and await."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1340.76,
      "end": 1343.2,
      "text": " How does that fit into ZX?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1343.2,
      "end": 1345.04,
      "text": " So basically you,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1345.04,
      "end": 1347.44,
      "text": " it's like you have top level await out of the box."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1347.44,
      "end": 1349.46,
      "text": " Actually you effectively have top level await"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1349.46,
      "end": 1350.68,
      "text": " out of the box."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1350.68,
      "end": 1352.76,
      "text": " So you, every time you call a command"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1352.76,
      "end": 1355.46,
      "text": " with this kind of dollar backtick syntax,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1355.46,
      "end": 1357.52,
      "text": " you need to of course await that command."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1357.52,
      "end": 1359.68,
      "text": " If you care about our result"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1359.68,
      "end": 1361.16,
      "text": " before you continue your execution,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1361.16,
      "end": 1363.64,
      "text": " you could also use that for instance with promise all,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1363.64,
      "end": 1367.5600000000002,
      "text": " if you want to kind of do a bunch of things concurrently."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1367.56,
      "end": 1369.36,
      "text": " So it just makes it very nice to,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1369.36,
      "end": 1371.36,
      "text": " if you are used to of course the JavaScript patterns,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1371.36,
      "end": 1373.76,
      "text": " because if you are more used to bash than to JavaScript,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1373.76,
      "end": 1375.76,
      "text": " I would probably recommend stick to bash."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1376.76,
      "end": 1379.04,
      "text": " But if you're, exactly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1379.04,
      "end": 1380.6,
      "text": " But if you're more used to JavaScript,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1380.6,
      "end": 1383.3999999999999,
      "text": " you get something that is as close as possible"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1383.3999999999999,
      "end": 1385.6799999999998,
      "text": " to the experience of writing bash"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1385.6799999999998,
      "end": 1388,
      "text": " while keeping the JavaScript syntax."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1388.8999999999999,
      "end": 1389.74,
      "text": " That's really good."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1389.74,
      "end": 1391.72,
      "text": " Okay, well, maybe that's a good point to wrap up."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1391.72,
      "end": 1394.96,
      "text": " It might be useful if people have other suggestions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1394.96,
      "end": 1398.96,
      "text": " around great tips, tooling, improvements in JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1398.96,
      "end": 1400.76,
      "text": " that are relevant for AWS developers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1400.76,
      "end": 1402.28,
      "text": " Let us know in the comments."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1402.28,
      "end": 1404.32,
      "text": " And you can also reach out to us on Twitter"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1404.32,
      "end": 1406.42,
      "text": " to either Luciano or myself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1406.42,
      "end": 1408.2,
      "text": " Our links are all in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1408.2,
      "end": 1409.8,
      "text": " And maybe the last thing I do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1409.8,
      "end": 1412.44,
      "text": " is just point people back to episode four."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1412.44,
      "end": 1414.96,
      "text": " We discussed, I suppose the trade-offs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1414.96,
      "end": 1418.08,
      "text": " of using all the different languages for AWS Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1418.08,
      "end": 1420.48,
      "text": " including JavaScript, but all the other options as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1420.48,
      "end": 1421.92,
      "text": " So feel free to check that out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1421.92,
      "end": 1424.3600000000001,
      "text": " and we'll see you in the next episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1424.36,
      "end": 1425.28,
      "text": "be."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1425.28,
      "end": 1440.28,
      "text": " Thanks for watching!"
    }
  ]
}