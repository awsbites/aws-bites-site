{
  "speakers": {
    "spk_0": "Luciano",
    "spk_1": "Eoin"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 9,
      "text": " Migrating monoliths to the cloud can be scary, expensive, and time-consuming, but you don't have to massively re-engineer your application to do that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 9,
      "end": 15,
      "text": " Today, we are going to present a case study and a potential strategy to move a monolith to AWS with minimal drama."
    },
    {
      "speakerLabel": "spk_0",
      "start": 15,
      "end": 22,
      "text": " We will discuss how a typical on-premise, three-tier web application can be migrated to AWS and made scalable and resilient."
    },
    {
      "speakerLabel": "spk_0",
      "start": 22,
      "end": 26,
      "text": " We will discuss some of the steps that you can take to make that happen."
    },
    {
      "speakerLabel": "spk_0",
      "start": 26,
      "end": 33,
      "text": " And finally, we will present some of the new challenges, but also opportunities that come once you shift an application to the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 33,
      "end": 37,
      "text": " My name is Luciano, and today I'm joined by Eoin, and this is AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 45,
      "end": 49,
      "text": " Luciano, this is based on an article you wrote that's now available on InfoQ."
    },
    {
      "speakerLabel": "spk_1",
      "start": 49,
      "end": 52,
      "text": " It's called a recipe to migrate and scale monoliths in the cloud."
    },
    {
      "speakerLabel": "spk_1",
      "start": 52,
      "end": 54,
      "text": " We'll put a link to that article in the show notes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 54,
      "end": 59,
      "text": " I think it's really good because it's a very clear process on how you think about this kind of migration."
    },
    {
      "speakerLabel": "spk_1",
      "start": 59,
      "end": 66,
      "text": " There's also a really good case study that gives a context for all the steps that follow, and there's a really good checklist in it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 66,
      "end": 68,
      "text": " Maybe we can start with that case study."
    },
    {
      "speakerLabel": "spk_1",
      "start": 68,
      "end": 70,
      "text": " You talk about a fictitious legal company."
    },
    {
      "speakerLabel": "spk_1",
      "start": 70,
      "end": 73,
      "text": " What's the story with that? What's the context?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 73,
      "end": 81,
      "text": " Yeah, it's a fictitious company, but a reality that kind of company and the kind of project reflects the reality of many, many projects that I've seen in my career."
    },
    {
      "speakerLabel": "spk_0",
      "start": 81,
      "end": 85,
      "text": " And even projects that we are seeing every day at Forteorum."
    },
    {
      "speakerLabel": "spk_0",
      "start": 85,
      "end": 92,
      "text": " So I think it represents very well a good class of solutions that are still out there and that can benefit from moving to the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 92,
      "end": 99,
      "text": " In this particular case, just to set the stage, we can imagine that we have this startup that operates in the legal space."
    },
    {
      "speakerLabel": "spk_0",
      "start": 99,
      "end": 102,
      "text": " They've built a CMS for legal practices."
    },
    {
      "speakerLabel": "spk_0",
      "start": 102,
      "end": 110,
      "text": " So you can imagine that they offer this product to legal practices, and what they can do with it is that every practice can upload their legal documents."
    },
    {
      "speakerLabel": "spk_0",
      "start": 110,
      "end": 120,
      "text": " And there is like a search index mechanism that happens behind the scenes, and then people logging in in the system, they can use keywords to find documents that have been uploaded before."
    },
    {
      "speakerLabel": "spk_0",
      "start": 120,
      "end": 126,
      "text": " So it's effectively a way to make legal documents easily searchable within the context of a legal practice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 126,
      "end": 137,
      "text": " And we can assume that the current solution that exists today, like let's call it the MVP for this startup, is something built on premise in a very standard fashion."
    },
    {
      "speakerLabel": "spk_0",
      "start": 137,
      "end": 141,
      "text": " It's like a three tier web application where you have a front end, a back end, and a database."
    },
    {
      "speakerLabel": "spk_0",
      "start": 141,
      "end": 146,
      "text": " And we can imagine just for reference that, I don't know, the technology can be Python."
    },
    {
      "speakerLabel": "spk_0",
      "start": 146,
      "end": 155,
      "text": " So maybe they're using Django as a web framework and the database can be a relational database, let's say Postgres, just to mention one technology as a reference."
    },
    {
      "speakerLabel": "spk_0",
      "start": 155,
      "end": 160,
      "text": " So that's the system that we are operating in right now."
    },
    {
      "speakerLabel": "spk_0",
      "start": 160,
      "end": 162,
      "text": " Yep, it sounds very familiar."
    },
    {
      "speakerLabel": "spk_1",
      "start": 162,
      "end": 173,
      "text": " And I suppose that brings the question, so why do they have a problem? Why do they need to migrate? And what's the background story there? What are they actually trying to solve by migrating to the cloud?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 173,
      "end": 182,
      "text": " So right now, the whole application is hosted on premise on one machine. So everything is running in this like one monolithic server."
    },
    {
      "speakerLabel": "spk_0",
      "start": 182,
      "end": 193,
      "text": " And that has been working fine for the MVP. But of course, we know that it's not something that scales long term. And right now, this company is starting to grow a little bit because they released this MVP."
    },
    {
      "speakerLabel": "spk_0",
      "start": 193,
      "end": 203,
      "text": " They are working with sales to get new customers. And it turns out that they have been very lucky. They got quite a big legal practice that wants to try out this platform."
    },
    {
      "speakerLabel": "spk_0",
      "start": 203,
      "end": 208,
      "text": " So what's happening is that suddenly they have a bunch of new users using the system all at the same time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 208,
      "end": 213,
      "text": " And that's creating a lot of additional stress to the servers. So there is too much load on one machine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 213,
      "end": 219,
      "text": " The whole application is sometimes slow and unresponsive, sometimes even unavailable."
    },
    {
      "speakerLabel": "spk_0",
      "start": 219,
      "end": 226,
      "text": " And the other thing is that this is a system that stores files. So right now, everything is monolithic in one server."
    },
    {
      "speakerLabel": "spk_0",
      "start": 226,
      "end": 230,
      "text": " So there is literally a bunch of files that are being accumulated in the file system."
    },
    {
      "speakerLabel": "spk_0",
      "start": 230,
      "end": 238,
      "text": " So it has been happening a few times that the file system was totally full and somebody had to manually allocate more space, more disks."
    },
    {
      "speakerLabel": "spk_0",
      "start": 238,
      "end": 247,
      "text": " And while that was happening, the whole application was unresponsive and it was effectively a downtime and an incident that needed to be managed by somebody."
    },
    {
      "speakerLabel": "spk_0",
      "start": 247,
      "end": 251,
      "text": " So the customers were a little bit disappointed with all of that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 251,
      "end": 258,
      "text": " And similarly, you can imagine there is stress also in the database because if everything is in the same machine, everything is competing for resources."
    },
    {
      "speakerLabel": "spk_0",
      "start": 258,
      "end": 265,
      "text": " So as soon as something is stressed, everything else doesn't have the necessary resources to work optimally."
    },
    {
      "speakerLabel": "spk_0",
      "start": 265,
      "end": 269,
      "text": " So all of that is basically one single big point of failure."
    },
    {
      "speakerLabel": "spk_0",
      "start": 269,
      "end": 278,
      "text": " If anything fails for any reason, the whole application is failing, going down, being unreachable and customers cannot use the application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 278,
      "end": 283,
      "text": " They cannot search for their file and they cannot ultimately do their job."
    },
    {
      "speakerLabel": "spk_0",
      "start": 283,
      "end": 293,
      "text": " So the prompt that we got from this scenario is, okay, but if I move everything into the cloud, everything is going to be better."
    },
    {
      "speakerLabel": "spk_0",
      "start": 293,
      "end": 301,
      "text": " But at the same time, the feeling is that if you move to the cloud, it's a very big and scary investment that might take a lot of money and time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 301,
      "end": 306,
      "text": " So it's like, how do we find a trade-off there that makes everyone happy?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 306,
      "end": 313,
      "text": " Yeah, I guess that's an important question. We covered this before in one of the previous episodes on how do you migrate to the cloud."
    },
    {
      "speakerLabel": "spk_1",
      "start": 313,
      "end": 316,
      "text": " There's a lot of different options. It can be very overwhelming."
    },
    {
      "speakerLabel": "spk_1",
      "start": 316,
      "end": 325,
      "text": " So I suppose you have to bear in mind what are the skills, how many people, how much cloud awareness do you have, as well as real world problems."
    },
    {
      "speakerLabel": "spk_1",
      "start": 325,
      "end": 327,
      "text": " What are they going to solve? How much time do they have?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 327,
      "end": 338,
      "text": " And ultimately, really, they've got to get this out there in time for customers to achieve success with it, not impact existing customers and scale with their growth."
    },
    {
      "speakerLabel": "spk_1",
      "start": 338,
      "end": 340,
      "text": " So what do you suggest?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 340,
      "end": 351,
      "text": " Yeah, so my suggestion would be that trying to reach the best outcome with the minimum amount of investment in terms of time, money, effort."
    },
    {
      "speakerLabel": "spk_0",
      "start": 351,
      "end": 367,
      "text": " So an idea could be, can we find an architecture that is not dramatically different from the current one, but that at the same time allows us to move everything to the cloud and make it more resilient and scalable, which are the main problems that we are facing right now."
    },
    {
      "speakerLabel": "spk_0",
      "start": 367,
      "end": 372,
      "text": " The system doesn't scale, and if there is any crash, everything burns, basically."
    },
    {
      "speakerLabel": "spk_0",
      "start": 372,
      "end": 381,
      "text": " So that's kind of the line that I would like to keep here, so that the challenge is literally, how do we make that happen?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 381,
      "end": 393,
      "text": " And at the same time, we are working with a small team, so how do we minimize also the amount of information overload on that team that will need to actually do the work and learn all the new concepts that come with the cloud?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 393,
      "end": 402,
      "text": " Yeah, I guess it's a difficult thing to resist the temptation to adopt all of the new tools and toys you get with the cloud and to try and simplify."
    },
    {
      "speakerLabel": "spk_1",
      "start": 402,
      "end": 416,
      "text": " So what do you think is a reasonable approach that solves all the problems, gets some of the advantages of the cloud, achieves the business goals of scaling for the new customers, but doesn't overwhelm the team with a whole lot of new learnings and distractions?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 416,
      "end": 431,
      "text": " So the architecture that I had in mind is something actually quite common when it comes to cloud architectures, especially if we look at the very beginning of the cloud, it's like more traditional three-tier application cloud version, if you want."
    },
    {
      "speakerLabel": "spk_0",
      "start": 431,
      "end": 440,
      "text": " And basically, the idea is that you have an application load balancer, which is kind of the entry point to the entire architecture, so it's where we receive the requests from the users."
    },
    {
      "speakerLabel": "spk_0",
      "start": 440,
      "end": 455,
      "text": " Then that load balancer is going to forward all these requests, not to just one machine, but at this point you can use as many machines as you need, so you have this kind of pool of EC2 instances, and they all run the exact same copy of the application code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 455,
      "end": 465,
      "text": " So it's literally just taking the monolith and multiplying it n times, where n is going to be a factor of the traffic that you get and how much resources do you need to run the application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 465,
      "end": 484,
      "text": " And of course, another big problem that we mentioned is files, and those files cannot live in a file system. Well, I suppose they could, but it's more ideal once you are in the cloud to use something like S3, which has been literally built with that goal of making it easier to host files in a safe and distributed way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 484,
      "end": 496,
      "text": " So definitely, we should try to leverage S3, and if you have used S3, you know it's not dramatically complicated. It's a reasonable change to make in the architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 496,
      "end": 504,
      "text": " And we can also discuss some tricks to make it easier at the beginning if you don't have time to kind of adopt the SDK and do a lot of code changes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 504,
      "end": 519,
      "text": " And then, for instance, another big problem that comes with having multiple instances is that you cannot have a local state anymore. You need to, for instance, if you have users that log in, you need to manage their sessions, and this session cannot live in one machine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 519,
      "end": 525,
      "text": " And again, it could if you use TikiSessions, but that's not the best way of doing it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 525,
      "end": 536,
      "text": " So the best thing to do is to use a session storage. Maybe something like Redis can be used to host all that data. So connecting all the instances to Redis is another part of the architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 536,
      "end": 544,
      "text": " And finally, the database. We mentioned that the recurrent solution is essentially a process running in line in the same machine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 544,
      "end": 552,
      "text": " What we want to do is to ideally remove all of that from inside the machine and have it independent and scalable and resilient on its own."
    },
    {
      "speakerLabel": "spk_0",
      "start": 552,
      "end": 562,
      "text": " And there is a perfect service for that in AWS, which is RDS, that being a managed service allows you to get a Postgres database running, make it distributed."
    },
    {
      "speakerLabel": "spk_0",
      "start": 562,
      "end": 571,
      "text": " You can have read replica. You can have all the features you need, just a click away from you. You don't need to manually write the scripts to provision all that stuff yourself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 571,
      "end": 582,
      "text": " Okay, I like that. I mean, it's, I guess, a sane approach to this problem, right? It's not overwhelming the team with new things like serverless architecture and containers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 582,
      "end": 593,
      "text": " And so it keeps a lot of the skills in their comfort zone, right? And it minimizes the amount of new cloud technologies they have to adopt and sets them up pretty well for the future."
    },
    {
      "speakerLabel": "spk_1",
      "start": 593,
      "end": 603,
      "text": " So I hope a lot of people would kind of copy this model, especially when you're working with a team that's compromised in terms of the amount of time they have to adopt new skills."
    },
    {
      "speakerLabel": "spk_1",
      "start": 603,
      "end": 611,
      "text": " And no, this is a good first step, I think. So maybe we can talk about the steps to actually make this happen."
    },
    {
      "speakerLabel": "spk_1",
      "start": 611,
      "end": 620,
      "text": " So now we've got the target architecture in mind. We need a roadmap, right, to get there. So where do we start? What are the first things we need to start preparing?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 620,
      "end": 627,
      "text": " Yeah, I will definitely start by, of course, creating an AWS account. So let's create the target environment."
    },
    {
      "speakerLabel": "spk_0",
      "start": 627,
      "end": 641,
      "text": " And one thing that I will try to do straight away, and this is probably a little bit of a burden to the team if it's something that they haven't done before, but I consider it almost necessary if you want to be successful in the cloud, is to start to adopt infrastructure as code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 641,
      "end": 647,
      "text": " So everything you do in the cloud is not something you do manually by going to the web console and clicking around."
    },
    {
      "speakerLabel": "spk_0",
      "start": 647,
      "end": 653,
      "text": " Of course, you can do that while you're learning, but when you're building production-ready solutions, you should use infrastructure as code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 653,
      "end": 661,
      "text": " So this is a step where the team needs to maybe invest a little bit of time and play a little bit around with it and learn the basic concept."
    },
    {
      "speakerLabel": "spk_0",
      "start": 661,
      "end": 674,
      "text": " And of course, they can select whatever tool feels more natural to them. We have another episode dedicated to that, but CDK, Platform, Terraform, Pulumi, there are many tools out there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 674,
      "end": 680,
      "text": " Whatever feels more natural, they are all good enough for the goal that we want to achieve."
    },
    {
      "speakerLabel": "spk_0",
      "start": 680,
      "end": 690,
      "text": " And then finally, the other thing we need to do as something that is needed to set the stage is to create a network where the whole application will be deployed."
    },
    {
      "speakerLabel": "spk_0",
      "start": 690,
      "end": 697,
      "text": " So that can be also a little bit of a learning curve if the team doesn't have experience with building visual networks in the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 697,
      "end": 705,
      "text": " And in particular, with AWS, there are some concepts that you need to learn. What is a VPC? What are availability zones? What are public and private subnets?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 705,
      "end": 726,
      "text": " And how to configure all of that. If you use CDK, maybe you can get some defaults, but we spoke in another episode how that can also be dangerous because you might end up not really understanding what's going on in the architecture and maybe provisioning things that you don't really need and end up with an expensive setup, like NAT gateways and all this stuff."
    },
    {
      "speakerLabel": "spk_0",
      "start": 726,
      "end": 741,
      "text": " So yeah, this is probably another point where the team needs to spend a little bit of time, learn at least the basics, do a few experiments, and once they are comfortable, they can start to use that learning from the infrastructure as code to provision the VPC."
    },
    {
      "speakerLabel": "spk_0",
      "start": 741,
      "end": 752,
      "text": " And at that point, we have an AWS account, minimal understanding of infrastructure as code, and a virtual private network that we can use to host the entire application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 752,
      "end": 769,
      "text": " I think those points you just made give a good outline of why you don't want to burden a team with too much when you're migrating to the cloud, because even with this simplified, sane approach, you already have an AWS account and possibly AWS organization fundamentals to understand."
    },
    {
      "speakerLabel": "spk_1",
      "start": 769,
      "end": 779,
      "text": " You have infrastructure as code to understand. And the basics of AWS networking, like what's a private subnet? What's a public subnet? What's an internet gateway and a NAT gateway?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 779,
      "end": 789,
      "text": " What are the pricing impacts and security impacts of all of these components? So there's enough there in terms of good, solid AWS foundations to understand."
    },
    {
      "speakerLabel": "spk_1",
      "start": 789,
      "end": 795,
      "text": " I think it's probably enough for the first dive into AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 795,
      "end": 811,
      "text": " So with those fundamentals in place, I think with migrations in general, data is key and data retention and avoiding data loss is important. So data is probably a good topic for the next phase of this journey."
    },
    {
      "speakerLabel": "spk_1",
      "start": 811,
      "end": 827,
      "text": " What do we have to think about? You mentioned file storage. I think moving from an on-premise disk or an on-premise NAS to S3 is one of the lowest overhead parts of this and one of the biggest benefits because you can suddenly stop worrying about disks filling up."
    },
    {
      "speakerLabel": "spk_1",
      "start": 827,
      "end": 834,
      "text": " And it's one of the biggest wins, I think. So is that where you'd start with the file migration?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 834,
      "end": 850,
      "text": " Probably, yes. I think in general, as you said, if you can show the customer that all the data is already in the new environment and all the data gets replicated automatically or as automatic as possible to the new environment, that gives a lot of confidence boost."
    },
    {
      "speakerLabel": "spk_0",
      "start": 850,
      "end": 862,
      "text": " Because as you said, the data is king and that's the main concern. Like maybe I'm not too concerned about being offline for a few hours while I migrate, but I'm definitely going to be concerned if I'm going to lose some data."
    },
    {
      "speakerLabel": "spk_0",
      "start": 862,
      "end": 876,
      "text": " So if we can reassure a customer, a company that that's not going to be the case, that there are ways to actually keep the data in sync as we move through two different systems, I think that that's literally a big win and we should aim to that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 876,
      "end": 884,
      "text": " So I agree that this is a good next step to address to build more and more confidence that we are going in the right direction."
    },
    {
      "speakerLabel": "spk_0",
      "start": 884,
      "end": 898,
      "text": " So yeah, talking about S3, the easiest thing that I could think of is, okay, let's start by creating an S3 bucket and let's make sure that every new file that gets created in the old system is also created in S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 898,
      "end": 917,
      "text": " So that might require code changes, but there are tricks there. I mentioned that before. For instance, you can use virtual file system like Fuses 3 and things like that to keep the code as unchanged as possible because the code is good at reading and writing files from the file system."
    },
    {
      "speakerLabel": "spk_0",
      "start": 917,
      "end": 930,
      "text": " With a virtual file system, you will only have like a different virtual folder that you use to read and write and that virtual file system will take the burden of actually using the AWS APIs to actually read and write into S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 930,
      "end": 943,
      "text": " I don't necessarily recommend that because there are problems that come with that solution, but at the same time, if you don't want to change the code too much because you don't have the time, it's something else you need to learn, it's new dependencies that you need to bring into the application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 943,
      "end": 952,
      "text": " And maybe at that moment in time, it's not easy to do that. That can be a solution right now to just start to see the data popping into the S3 bucket."
    },
    {
      "speakerLabel": "spk_0",
      "start": 952,
      "end": 968,
      "text": " Then another thing you can do once you have new data being written also to S3 is to just go into the current machine, the current monolith, and do an S3 sync from the CLI and that will copy all the existing files over into the bucket as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 968,
      "end": 977,
      "text": " So at that point, you have all the new data coming in, but you also copied all the historic data. So at that point, you have S3 perfectly in line."
    },
    {
      "speakerLabel": "spk_0",
      "start": 977,
      "end": 989,
      "text": " The next problem is the database data. And that's also a big one because if you have a relational database, how do you keep it in sync with another copy of the relational database, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 989,
      "end": 999,
      "text": " Then it's going to be running in AWS. We mentioned you can use RDS. So the next thing you should do is just go to RDS and create a cluster for your Postgres."
    },
    {
      "speakerLabel": "spk_0",
      "start": 999,
      "end": 1006,
      "text": " And then how do you actually bring the data from the current system to this new RDS cluster?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1006,
      "end": 1010,
      "text": " And there is actually a service dedicated to that. It's called Database Migration Service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1010,
      "end": 1030,
      "text": " And one of the things that it does other than just helping you to migrate all your schema and copying the data, but it can also work in the original system, so in the on-premise system, and make sure that every time there is new data in that on-premise database, this data is also replicated to the RDS database."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1030,
      "end": 1046,
      "text": " So this way, again, we are creating that system that allows not just to copy the data once, but also to keep copying new data as it arrives, which gives us confidence that we can take all the time that is needed for this migration without having to put the system offline."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1046,
      "end": 1054,
      "text": " So that the old system can still work and new data will be replicated, and we can switch over to the new system whenever we feel ready."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1054,
      "end": 1061,
      "text": " That sounds like a good pragmatic set of decisions there. I think you also have the option of manually migrating your database data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1061,
      "end": 1067,
      "text": " But maybe that's a little bit more difficult than it was with S3 where you can use the AWS CLI to do an S3 sync."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1067,
      "end": 1077,
      "text": " Similarly, you could probably go a step further and migrate your S3 data using Storage Gateway and have more of a pattern like you have with the Database Migration Service."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1077,
      "end": 1085,
      "text": " But S3 is probably just a little bit simpler to migrate because you don't have to think about all the transactional updates happening and file systems are a little bit simpler to reason about."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1085,
      "end": 1094,
      "text": " So you've got options there, but you don't have to go all in and choose Storage Gateway, which has lots of options and its own set of complexities."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1094,
      "end": 1101,
      "text": " Yeah, and then the last thing is to provision Redis, and you can do that in a managed way on AWS using something like Elasticash, for instance."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1101,
      "end": 1111,
      "text": " And the good thing about Redis is that it tends to be quite schema-less, so you don't need to really worry too much right now about, I don't know, how are you going to structure the data in Redis."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1111,
      "end": 1117,
      "text": " So just spinning up the cluster is probably enough for you right now to get started."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1117,
      "end": 1132,
      "text": " Okay, so Redis, I suppose the important thing is to size it correctly, make sure you have enough memory, and it's going to work for your performance, but assuming, it depends on what you're using it for, and that probably brings us to the application and how the application leverages Redis."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1132,
      "end": 1139,
      "text": " And I think we've talked about preparation, we've got our data migrations started. So this is everything in the right order so far, I think."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1139,
      "end": 1146,
      "text": " Probably a good time to start thinking about compute and the application itself. So is it just a lift and shift? Do we need to make much change there?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1146,
      "end": 1154,
      "text": " I would say almost, but there is like a big mindset shift, I think, when it comes to this kind of architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1154,
      "end": 1162,
      "text": " And the reason why is because in the initial state, we have only one machine. So you can imagine that machine to be like totally stateful."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1162,
      "end": 1169,
      "text": " Everything that happens, connections, sessions, are all managed. They could be managed in memory in that one machine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1169,
      "end": 1178,
      "text": " The problem is that as soon as you have multiple machines, even just two machines, the load balancer will route traffic to them in kind of a round robin fashion."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1178,
      "end": 1185,
      "text": " So it's not guaranteed that a user sending a request the first time will end up in the same machine when they send a request the second time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1185,
      "end": 1197,
      "text": " They might be bouncing between two or more machines. So if the state is not somehow available to all the machines, that becomes a problem because a user might log in into one machine, then send that request to another machine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1197,
      "end": 1202,
      "text": " And basically the second machine doesn't have any clue about that particular session."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1202,
      "end": 1208,
      "text": " So the problem is how do we keep all the instances as stateless as possible?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1208,
      "end": 1214,
      "text": " Which means we need to put the state somewhere else that is shared. And that's why we created the Redis cluster."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1214,
      "end": 1222,
      "text": " And for this particular application, I expect that the main kind of state that we need to keep track of is just user sessions."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1222,
      "end": 1234,
      "text": " So we can kind of simplify it that way. We already say that files will be copied in S3 so that that kind of decouples as well the statefulness of the application into something a little bit more stateless."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1234,
      "end": 1245,
      "text": " But there is another interesting thing to bring in mind that is you cannot, you could probably do it, but you shouldn't do it, that you can SSH into one of the machines to do operational stuff."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1245,
      "end": 1256,
      "text": " And operational stuff could be, I don't know, tail logs because you're trying to troubleshoot something or even just install updates or do code changes because you're trying to fix or update something."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1256,
      "end": 1263,
      "text": " That doesn't make any sense anymore because you, first of all, if you're looking for logs, you have no guarantee that the logs are being produced."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263,
      "end": 1273,
      "text": " The logs you are looking for are being produced in the machine that you just connected to. It might be any other of the machines or maybe that original machines that where you saw a potential bug doesn't even exist anymore."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1273,
      "end": 1282,
      "text": " Because you have to think these machines are dynamically, they could be configured to dynamically appear and created and destroyed to be elastically scalable."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1282,
      "end": 1290,
      "text": " So that that concept of I'm just going to SSH to do operation. I think it's a big no no when you move to this kind of architectures."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1290,
      "end": 1301,
      "text": " So what is the solution? The solution is to use images, machine images like AMIs to provision your instances. So you make sure every instance is literally the same."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1301,
      "end": 1306,
      "text": " Everything is stateless. So we said we move all the state outside the instance."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1306,
      "end": 1312,
      "text": " But also you'll need to start adopting observability tools for things like logs and metrics."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1312,
      "end": 1319,
      "text": " And that makes also all this information in a way stateless, meaning that it's moved outside the instance itself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1319,
      "end": 1324,
      "text": " That sounds good. And I guess people can make their own judgment as to whether they need an auto scaling group."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1324,
      "end": 1329,
      "text": " You might also just decide to bring up a number of instances, like three instances and multiple AZs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1329,
      "end": 1336,
      "text": " And if you know your traffic is never going to exceed the compute amounts of three instances and you're just doing it for high availability."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1336,
      "end": 1341,
      "text": " That's completely OK, too. You can decide to adopt an auto scaling group at a later stage."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1341,
      "end": 1347,
      "text": " Absolutely. So we talked about some of the networking fundamentals, public and private subnets."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1347,
      "end": 1352,
      "text": " You've mentioned the application and we've got auto scaling. We talked about multiple AZs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1352,
      "end": 1358,
      "text": " What are the other, I suppose, front facing networking considerations that we need to take?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1358,
      "end": 1364,
      "text": " So we're starting to wire our application closer to our user. What are the parts that we need to think about there?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1371,
      "end": 1379,
      "text": " Yeah, one thing that we didn't mention is HTTPS, which, of course, it's going to be a critical thing for a system like this, where users are logging in and there is sensitive information being uploaded. So we definitely need to have HTTPS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1379,
      "end": 1385,
      "text": " The good news is that in AWS, there are ways to make that somewhat simple and managed,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1385,
      "end": 1391,
      "text": " because you can use services like ACM to create the certificates and manage the lifecycle of the certificate."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1391,
      "end": 1399,
      "text": " And then a certificate with ACM can just be attached to the load balancer and the load balancer can deal with all the SSL termination."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1399,
      "end": 1409,
      "text": " So it becomes kind of from the user to the load balancer is HTTPS and everything else you don't necessarily have to keep doing HTTPS unless you want to, of course."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1409,
      "end": 1415,
      "text": " So the things that we need to configure is create a certificate with ACM, attach the certificate to the load balancer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1415,
      "end": 1419,
      "text": " And of course, when you create the certificate, there are different ways to validate that certificate."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1419,
      "end": 1425,
      "text": " You need to prove that you have control over the domain and you can do that either by email or with DNS records."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1425,
      "end": 1430,
      "text": " So depending on how you are set up there, you might pick whatever way is most suitable to you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1430,
      "end": 1445,
      "text": " And finally, if you want to do auto scaling, you need to make sure that your application has a kind of an ELT check endpoint that the load balancer can use to verify that when a new instance is brought up, it's actually ready to receive requests."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1445,
      "end": 1453,
      "text": " And also if the instance crashes for whatever reason, the load balancer can recognize and remove it from the pool of EC2 instances."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1453,
      "end": 1457,
      "text": " And with that, you also need to configure the targets and auto scaling groups."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1457,
      "end": 1461,
      "text": " So there is a little bit of extra configuration. Also, what are the scaling rules?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1461,
      "end": 1471,
      "text": " Do you want to scale based on, I don't know, average CPU or number of connections? Things you can decide based on what are your expectations in terms of incoming traffic."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1471,
      "end": 1480,
      "text": " OK, so that sounds like it'll set people up for a seamless switchover as long as they understand exactly what they expect in terms of what domains they're using."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1480,
      "end": 1493,
      "text": " They need to think about are they using the same domain, different domain, but the important thing is to be able to test your old system and your live system, make sure they're both working and then seamlessly switch over with the no deployment steps really just to use DNS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1493,
      "end": 1497,
      "text": " That's always the safest way to do things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1497,
      "end": 1504,
      "text": " So there's at that point, right, we've got our application up and running in the cloud. Users can start using it right away."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1504,
      "end": 1511,
      "text": " Existing users should have noticed no difference, maybe just a dramatic increase in performance and stability."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1511,
      "end": 1522,
      "text": " And we know that we're scaled for future growth as well. So in terms of thinking about the team, people who actually have to do this work and support it, and we don't want them to lose too many sleepless nights."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1522,
      "end": 1528,
      "text": " So what are the things that teams need to learn? What are the fundamentals? We talked about some of them there. Maybe we can summarize."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1528,
      "end": 1546,
      "text": " Yeah, we definitely mentioned infrastructure as code as being one of the most important investments, I suppose, because if you do that right at the beginning, it's going to pay off big time as you deploy the application the first time, but then especially when you want to do changes in the future and update the application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1546,
      "end": 1559,
      "text": " So that's definitely one, and it can be a big one, I suppose. If you've never done it before, it can be a little bit overwhelming. So this is probably the one thing I would recommend to really spend your time and make sure you feel comfortable with it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1559,
      "end": 1575,
      "text": " The other one is AWS networking. You don't have to become an expert, but at least understand the basics, what are the different concepts and need to be comfortable thinking that you are not just running a server in the public internet or on premise and somehow with a public IP."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1575,
      "end": 1586,
      "text": " But you literally have your own virtual network where there are different things running inside, they are connected with each other, and then how do you expose that to public facing internet?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1586,
      "end": 1594,
      "text": " So just make sure you understand all the basics there and how the different AWS concepts allow you to implement that kind of architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1594,
      "end": 1608,
      "text": " And another thing we didn't mention, but it's probably important, is to understand AWS permission. So get yourself comfortable with IAM because, of course, we'll need to have instances that are able to read and write to S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1608,
      "end": 1613,
      "text": " So to the very minimum, you need to be able to define the IAM policies that allow that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1613,
      "end": 1625,
      "text": " But of course, as soon as you learn IAM, that can be beneficial in general in AWS to make sure that every time you are integrating different services, all the policies are configured correctly."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1625,
      "end": 1636,
      "text": " And also that's important for users logging into AWS, what kind of permissions do they get? So something to learn anyway as soon as you need to start managing that AWS account."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1636,
      "end": 1654,
      "text": " And finally, how to create AMIs. There are different ways and different tools, but of course, it's something that you need to do because this is how you change, well, how you create the code in the first place that goes into every machine, but also how do you change it every time you want to do a new release."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1654,
      "end": 1669,
      "text": " So I think that's a good summary of all the skills you need, and there's enough there. And if you could focus on those basics, I think after a success like this and with those skills, you've got a team that's really well set up to grow on AWS really well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1669,
      "end": 1681,
      "text": " So what's next? Once that's in place, what should the team thinking about in terms of, okay, now that we're there in AWS, where do we go from here? What are the improvements we can make? What new opportunities does this open up for us?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1681,
      "end": 1690,
      "text": " Yeah, I think there will be in general some new challenges, but also new opportunities once the new system is running in the cloud."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1690,
      "end": 1704,
      "text": " We mentioned already that there will be challenges in terms of observability because again, you have a lot of things happening in different systems. How do you make sense of if there is an issue, like where the issue will even be? Like where do you start looking?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1704,
      "end": 1716,
      "text": " Where do you find evidence about that issue? Where do you collect more information to be able to troubleshoot and solve the issue? And all of that comes with the topic of observability and learning how to do that in the cloud and all the tooling."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1716,
      "end": 1727,
      "text": " It's another skill that the team will need to start developing. And that probably requires a lot of code changes, making sure that all the information is logged correctly or metrics are being created, alarms are set."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1727,
      "end": 1736,
      "text": " And then you also need to develop operational skills. How do you react to incidents? Who is going to be available? What are they going to do to address problems?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1736,
      "end": 1745,
      "text": " Things that maybe you were doing to some extent with the monolithic system, but now they get to a different degree of complexity just because you have more moving parts."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1745,
      "end": 1756,
      "text": " And then similar topics are testing. How do you do testing now? Because it's not just one system. How do you make sure that all the new different parts of the system work end to end?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1756,
      "end": 1764,
      "text": " And with that, you can also start to think about building and deployment. Can we automate some of that stuff, even just the building part?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1764,
      "end": 1774,
      "text": " But if you can even get to a point where you do full CI-CD, that's kind of even better goal to have. And again, this is a little bit of both of a challenge and an opportunity."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1774,
      "end": 1787,
      "text": " But there are also other opportunities there that are very interesting because the goal that we hopefully achieved at this point is that we have an architecture that can scale and be more resilient to failure."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1787,
      "end": 1800,
      "text": " There is not a single point of failure anymore. And if things fail, you can have systems in place that will automatically spin up new instances and the system can auto-ill up to some extent."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1800,
      "end": 1810,
      "text": " The interesting thing is that at this point, as soon as your product grows, you have more customers, you need to develop new features, you can start to think about two options there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1810,
      "end": 1820,
      "text": " One, you can start to think about microservices so you can start to break down the existing application into individual services and then give different teams different responsibilities."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1820,
      "end": 1832,
      "text": " But also you can approach that way of thinking in a more, I suppose, safe way, which is you don't necessarily have to do full monolith to microservice migration."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1832,
      "end": 1840,
      "text": " You can think, okay, if we need to develop a new feature, how can we build that one feature in a way that is decoupled from the existing monolith?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1840,
      "end": 1858,
      "text": " And that's something that you can do in AWS for instance, you can use ABA gateway and then Lambda as a backend and then tell the load balancer this particular feature, I don't know, slash search maybe, goes into the ABA gateway and then it's managed by Lambdas rather than being managed by the monolith application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1858,
      "end": 1869,
      "text": " So that gives you ways to experiment and get more comfortable with different tools that are available in AWS before you actually dramatically change the entire application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1869,
      "end": 1880,
      "text": " And similarly, you can experiment with SQS for instance, and Lambda to offload some of the usual things like, I don't know, sending emails, notifications, processing data in the background."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1880,
      "end": 1888,
      "text": " So you can also leverage additional tools and do that as soon as you see an opportunity to do it with very small and tactical changes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1888,
      "end": 1892,
      "text": " This is great. Yeah, I think there's a number of opportunities."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1892,
      "end": 1903,
      "text": " It really is a good appetizer for people who are thinking about taking this approach and I think the whole order of things and doing things simply in a managed way and then opening up these opportunities for later is good."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1903,
      "end": 1911,
      "text": " You're not taking on too much too soon. If you want to learn more about the details of this particular strategy, there's a lot of detail in that really great InfoQ article."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1911,
      "end": 1913,
      "text": " The link is in the show notes below."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1913,
      "end": 1925,
      "text": " But if you want to know about all the different ways, Episode 18, How Do You Move to the Cloud, we're going to link to that and we'd really love your thoughts and other alternative ideas on migration strategies because there's a lot of them out there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1925,
      "end": 1928,
      "text": " So let us know what you think and we'll see you next time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1928,
      "end": 1946,
      "text": " Bye."
    }
  ]
}