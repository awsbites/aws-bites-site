{
 "speakers": {
  "spk_0": "spk_0",
  "spk_1": "spk_1"
 },
 "segments": [
  {
   "speakerLabel": "spk_0",
   "start": 0,
   "end": 11.16,
   "text": " Hello and welcome to another episode of AWS Bites, the weekly show where we answer questions"
  },
  {
   "speakerLabel": "spk_0",
   "start": 11.16,
   "end": 14.34,
   "text": " about AWS in just about five minutes."
  },
  {
   "speakerLabel": "spk_0",
   "start": 14.34,
   "end": 18.32,
   "text": " My name is Luciano and together with me, we have Eoin."
  },
  {
   "speakerLabel": "spk_0",
   "start": 18.32,
   "end": 22.66,
   "text": " And today we have a very interesting question that I really, really excited about, which"
  },
  {
   "speakerLabel": "spk_0",
   "start": 22.66,
   "end": 27.5,
   "text": " is what language should you use for AWS Lambda?"
  },
  {
   "speakerLabel": "spk_0",
   "start": 27.5,
   "end": 32.6,
   "text": " So I'm going to let you start Eoin, what language do you use for your Lambdas?"
  },
  {
   "speakerLabel": "spk_0",
   "start": 32.6,
   "end": 36.68,
   "text": " I'm going to resist the temptation to be opinionated."
  },
  {
   "speakerLabel": "spk_1",
   "start": 36.68,
   "end": 40.120000000000005,
   "text": " Really when you're selecting language, I think the first rule is always pick the language"
  },
  {
   "speakerLabel": "spk_1",
   "start": 40.120000000000005,
   "end": 43.36,
   "text": " that you know and you're comfortable with, especially if you're starting with Lambda"
  },
  {
   "speakerLabel": "spk_1",
   "start": 43.36,
   "end": 47.6,
   "text": " for the first time, there's no point trying to learn too much at once."
  },
  {
   "speakerLabel": "spk_1",
   "start": 47.6,
   "end": 52.66,
   "text": " That said, my own personal favorites for Lambda attempt to be the dynamic languages."
  },
  {
   "speakerLabel": "spk_1",
   "start": 52.66,
   "end": 59.44,
   "text": " So most of the Lambda functions I've written have been Node.js runtime, so JavaScript."
  },
  {
   "speakerLabel": "spk_1",
   "start": 59.44,
   "end": 63.08,
   "text": " And my second favorite would be the Python runtime."
  },
  {
   "speakerLabel": "spk_1",
   "start": 63.08,
   "end": 67.16,
   "text": " But you can use up whatever language you want actually these days."
  },
  {
   "speakerLabel": "spk_1",
   "start": 67.16,
   "end": 68.39999999999999,
   "text": " What do you think Luciano?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 68.39999999999999,
   "end": 73.16,
   "text": " Is there a good set of recommendations for people using Lambda for the first time in"
  },
  {
   "speakerLabel": "spk_1",
   "start": 73.16,
   "end": 75,
   "text": " what language to start with?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 75,
   "end": 79.44,
   "text": " Yeah, first of all, I'm not going to resist the temptation to be opinionated."
  },
  {
   "speakerLabel": "spk_0",
   "start": 79.44,
   "end": 85.39999999999999,
   "text": " So I'm going to say use Node.js because in my opinion is the best language, the best"
  },
  {
   "speakerLabel": "spk_0",
   "start": 85.39999999999999,
   "end": 91.78,
   "text": " runtime in general and in particular for Lambda, it's a very good fit for the way Lambda works."
  },
  {
   "speakerLabel": "spk_0",
   "start": 91.78,
   "end": 97.47999999999999,
   "text": " And I've been writing a lot of Lambdas in Node.js and so far it has been working very,"
  },
  {
   "speakerLabel": "spk_0",
   "start": 97.47999999999999,
   "end": 103.2,
   "text": " very well in terms of both performance and ease of writing and deploying and testing"
  },
  {
   "speakerLabel": "spk_0",
   "start": 103.2,
   "end": 104.2,
   "text": " the Lambdas."
  },
  {
   "speakerLabel": "spk_0",
   "start": 104.2,
   "end": 106.56,
   "text": " So that's definitely my favorite."
  },
  {
   "speakerLabel": "spk_1",
   "start": 106.56,
   "end": 107.56,
   "text": " I got to ask then."
  },
  {
   "speakerLabel": "spk_1",
   "start": 107.56,
   "end": 112.14,
   "text": " So what is it about JavaScript compared to the alternatives?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 112.14,
   "end": 117.82000000000001,
   "text": " Because if you're coming from a.NET developer background, enterprise Java background, you've"
  },
  {
   "speakerLabel": "spk_1",
   "start": 117.82000000000001,
   "end": 121.54,
   "text": " got a lot of tools there to help support you."
  },
  {
   "speakerLabel": "spk_1",
   "start": 121.54,
   "end": 126.68,
   "text": " The languages give you type safety and the languages themselves are both very performant"
  },
  {
   "speakerLabel": "spk_1",
   "start": 126.68,
   "end": 130.72,
   "text": " in Java when it comes to runtime code execution."
  },
  {
   "speakerLabel": "spk_1",
   "start": 130.72,
   "end": 135.24,
   "text": " Why would you use a dynamic language instead of choosing one of those?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 135.24,
   "end": 141.96,
   "text": ""
  },
  {
   "speakerLabel": "spk_0",
   "start": 141.96,
   "end": 145.44,
   "text": " Yeah, I think in particular with JavaScript, the main benefit is that the bootstrap time of your Lambda is very well optimized."
  },
  {
   "speakerLabel": "spk_0",
   "start": 145.44,
   "end": 150.28,
   "text": " Like the Node.js runtime starts very, very quickly and this is something you should care"
  },
  {
   "speakerLabel": "spk_0",
   "start": 150.28,
   "end": 154.92000000000002,
   "text": " a lot when writing Lambdas because of course you want to minimize that cold start time"
  },
  {
   "speakerLabel": "spk_0",
   "start": 154.92000000000002,
   "end": 157.84,
   "text": " every time you are spinning up a new Lambda."
  },
  {
   "speakerLabel": "spk_0",
   "start": 157.84,
   "end": 162.68,
   "text": " So with languages like Java, I've seen that generally you tend to have much longer cold"
  },
  {
   "speakerLabel": "spk_0",
   "start": 162.68,
   "end": 166.16,
   "text": " starts and in Java you have..."
  },
  {
   "speakerLabel": "spk_0",
   "start": 166.16,
   "end": 171.12,
   "text": " I suppose that the trick is always the same even outside the scope of Lambda."
  },
  {
   "speakerLabel": "spk_0",
   "start": 171.12,
   "end": 176,
   "text": " With Java it's very good if you're doing like CPU intensive type of operations while Node.js"
  },
  {
   "speakerLabel": "spk_0",
   "start": 176,
   "end": 178.78,
   "text": " tends to be much better if you're doing a lot of IO."
  },
  {
   "speakerLabel": "spk_0",
   "start": 178.78,
   "end": 182.68,
   "text": " And in Lambdas generally I've seen you write a lot of integration code."
  },
  {
   "speakerLabel": "spk_0",
   "start": 182.68,
   "end": 188.04000000000002,
   "text": " So most often you end up doing HTTP calls or connecting to external sources."
  },
  {
   "speakerLabel": "spk_0",
   "start": 188.04000000000002,
   "end": 191.92000000000002,
   "text": " So much more IO than you do CPU intensive tasks."
  },
  {
   "speakerLabel": "spk_0",
   "start": 191.92,
   "end": 197.64,
   "text": " So maybe that's why I've seen Node.js being a much better fit compared to languages like"
  },
  {
   "speakerLabel": "spk_0",
   "start": 197.64,
   "end": 200.04,
   "text": " Java."
  },
  {
   "speakerLabel": "spk_1",
   "start": 200.04,
   "end": 205.35999999999999,
   "text": " Isn't it strange though, the way when Node.js became initially popular a number of years"
  },
  {
   "speakerLabel": "spk_1",
   "start": 205.35999999999999,
   "end": 211.32,
   "text": " ago, it was because of its ability to handle many multiple requests at scale because of"
  },
  {
   "speakerLabel": "spk_1",
   "start": 211.32,
   "end": 219.16,
   "text": " how it worked with asynchronous IO and handling multiple connections on a single server."
  },
  {
   "speakerLabel": "spk_1",
   "start": 219.16,
   "end": 222.04,
   "text": " With Lambda, it's always handling one single event at a time."
  },
  {
   "speakerLabel": "spk_1",
   "start": 222.04,
   "end": 224.96,
   "text": " So how is it that this model translates well?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 224.96,
   "end": 226.88,
   "text": " Is it just because it's JavaScript?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 226.88,
   "end": 227.88,
   "text": " Do you just have to..."
  },
  {
   "speakerLabel": "spk_1",
   "start": 227.88,
   "end": 232.56,
   "text": " Do you just dispense with a lot of the advantages of Node.js and it still doesn't matter?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 232.56,
   "end": 237.72,
   "text": ""
  },
  {
   "speakerLabel": "spk_0",
   "start": 237.72,
   "end": 243.76,
   "text": " Yeah, I think you are touching a very good point and I think this is a common complaint from many people using Lambda, especially for the first times that if you are getting"
  },
  {
   "speakerLabel": "spk_0",
   "start": 243.76,
   "end": 249.6,
   "text": " multiple requests at the same time, you will see multiple Lambdas spinning up, even though"
  },
  {
   "speakerLabel": "spk_0",
   "start": 249.6,
   "end": 255.2,
   "text": " Node.js, if you had one server, would be very capable of handling even thousands of connections"
  },
  {
   "speakerLabel": "spk_0",
   "start": 255.2,
   "end": 256.56,
   "text": " at the same time."
  },
  {
   "speakerLabel": "spk_0",
   "start": 256.56,
   "end": 261.71999999999997,
   "text": " So definitely that's an interesting technical choice and I've heard different reasons from"
  },
  {
   "speakerLabel": "spk_0",
   "start": 261.71999999999997,
   "end": 264.28,
   "text": " AWS why that's implemented that way."
  },
  {
   "speakerLabel": "spk_0",
   "start": 264.28,
   "end": 270.09999999999997,
   "text": " For instance, isolation, if your Lambda crashes, you are not going to affect other users asking,"
  },
  {
   "speakerLabel": "spk_0",
   "start": 270.1,
   "end": 275.54,
   "text": " taking other requests at the same time, which could be an interesting point."
  },
  {
   "speakerLabel": "spk_0",
   "start": 275.54,
   "end": 281.16,
   "text": " To answer your question, whether you are losing the benefits on Node.js, maybe partially so,"
  },
  {
   "speakerLabel": "spk_0",
   "start": 281.16,
   "end": 285.16,
   "text": " but at the same time, you are still keeping the main benefit that if you're doing a lot"
  },
  {
   "speakerLabel": "spk_0",
   "start": 285.16,
   "end": 292.52000000000004,
   "text": " of IO, you can easily use the synchros model of Node.js and JavaScript and avail of that"
  },
  {
   "speakerLabel": "spk_0",
   "start": 292.52000000000004,
   "end": 295.44,
   "text": " concurrency in a very easy way."
  },
  {
   "speakerLabel": "spk_0",
   "start": 295.44,
   "end": 300.08,
   "text": " So if your Lambda needs to connect to multiple places and do multiple things for a given"
  },
  {
   "speakerLabel": "spk_0",
   "start": 300.08,
   "end": 304.28,
   "text": " request, you can still do that in a very efficient way."
  },
  {
   "speakerLabel": "spk_0",
   "start": 304.28,
   "end": 305.62,
   "text": " Okay."
  },
  {
   "speakerLabel": "spk_1",
   "start": 305.62,
   "end": 310.96,
   "text": " So we've talked about JavaScript, Python, I think, you know, they get all the benefits"
  },
  {
   "speakerLabel": "spk_1",
   "start": 310.96,
   "end": 312.48,
   "text": " of being able to rapidly develop."
  },
  {
   "speakerLabel": "spk_1",
   "start": 312.48,
   "end": 314.64,
   "text": " You don't have a compile step."
  },
  {
   "speakerLabel": "spk_1",
   "start": 314.64,
   "end": 315.64,
   "text": " They start quickly."
  },
  {
   "speakerLabel": "spk_1",
   "start": 315.64,
   "end": 321.36,
   "text": " I think Java,.NET are reasonable options these days too, because there are ways to"
  },
  {
   "speakerLabel": "spk_1",
   "start": 321.36,
   "end": 323.4,
   "text": " manage cold start issues."
  },
  {
   "speakerLabel": "spk_1",
   "start": 323.4,
   "end": 328.88,
   "text": " I think.NET itself is quite performant, the.NET core runtime."
  },
  {
   "speakerLabel": "spk_1",
   "start": 328.88,
   "end": 330.12,
   "text": " What about other languages?"
  },
  {
   "speakerLabel": "spk_1",
   "start": 330.12,
   "end": 334.47999999999996,
   "text": " Because last year we had the arrival of Lambda container image support."
  },
  {
   "speakerLabel": "spk_1",
   "start": 334.47999999999996,
   "end": 340.02,
   "text": " So anything that can run in a container can now run Lambda code."
  },
  {
   "speakerLabel": "spk_1",
   "start": 340.02,
   "end": 343.91999999999996,
   "text": " And before that we had custom run times, which was the ability to do the similar kind of"
  },
  {
   "speakerLabel": "spk_1",
   "start": 343.91999999999996,
   "end": 346.56,
   "text": " thing with a zip packaging."
  },
  {
   "speakerLabel": "spk_1",
   "start": 346.56,
   "end": 353.8,
   "text": " So what other less frequently used languages would you be using in AWS Lambda?"
  },
  {
   "speakerLabel": "spk_0",
   "start": 353.8,
   "end": 358.04,
   "text": " Yeah I think there are two that I am particularly excited about."
  },
  {
   "speakerLabel": "spk_0",
   "start": 358.04,
   "end": 361.1,
   "text": " One is Go, which I actually had the chance to use it."
  },
  {
   "speakerLabel": "spk_0",
   "start": 361.1,
   "end": 365.68,
   "text": " And it's actually supported quite well by AWS these days."
  },
  {
   "speakerLabel": "spk_0",
   "start": 365.68,
   "end": 370.16,
   "text": " And the reason why I use it in the past is because I actually had to do a CPU intensive"
  },
  {
   "speakerLabel": "spk_0",
   "start": 370.16,
   "end": 371.16,
   "text": " task."
  },
  {
   "speakerLabel": "spk_0",
   "start": 371.16,
   "end": 376.72,
   "text": " It was a lot of data transformation and I was doing that in Lambda in Node.js."
  },
  {
   "speakerLabel": "spk_0",
   "start": 376.72,
   "end": 381.6,
   "text": " And eventually we realized that in our entire pipeline that was one of the main bottlenecks"
  },
  {
   "speakerLabel": "spk_0",
   "start": 381.6,
   "end": 384.78000000000003,
   "text": " and we could probably try to do something to speed it up."
  },
  {
   "speakerLabel": "spk_0",
   "start": 384.78000000000003,
   "end": 387.90000000000003,
   "text": " We rewrote that in Go and it was like 10 times faster."
  },
  {
   "speakerLabel": "spk_0",
   "start": 387.90000000000003,
   "end": 392.20000000000005,
   "text": " So that was definitely a very interesting experiment and I was very happy to how easy"
  },
  {
   "speakerLabel": "spk_0",
   "start": 392.20000000000005,
   "end": 397.8,
   "text": " it was to write and test and ship a Lambda in Go, which was actually quite unexpected."
  },
  {
   "speakerLabel": "spk_0",
   "start": 397.8,
   "end": 400.32000000000005,
   "text": " I was expecting a lot more friction."
  },
  {
   "speakerLabel": "spk_0",
   "start": 400.32,
   "end": 404.92,
   "text": " Another one that I'm really excited to try, I haven't tried it yet, is Rust, which is"
  },
  {
   "speakerLabel": "spk_0",
   "start": 404.92,
   "end": 410.59999999999997,
   "text": " not officially supported as a runtime yet, but there is a very good package that is provided"
  },
  {
   "speakerLabel": "spk_0",
   "start": 410.59999999999997,
   "end": 416.71999999999997,
   "text": " by AWS itself that you just use it as a Rust crate."
  },
  {
   "speakerLabel": "spk_0",
   "start": 416.71999999999997,
   "end": 422.2,
   "text": " And then when you build your executable file, it's already called Bootstrap."
  },
  {
   "speakerLabel": "spk_0",
   "start": 422.2,
   "end": 426.68,
   "text": " And that's really the only file you need to put in a zip package or Docker container."
  },
  {
   "speakerLabel": "spk_0",
   "start": 426.68,
   "end": 430.48,
   "text": " You just ship it as a Lambda and it should work out of the box."
  },
  {
   "speakerLabel": "spk_0",
   "start": 430.48,
   "end": 434.64,
   "text": " And they give you all the nice, in the library, they give you all the nice things that you"
  },
  {
   "speakerLabel": "spk_0",
   "start": 434.64,
   "end": 438.88,
   "text": " expect to handle, the context, the event, exceptions."
  },
  {
   "speakerLabel": "spk_0",
   "start": 438.88,
   "end": 444.88,
   "text": " So that seems to be a new interesting contender if you really care about performance and quick"
  },
  {
   "speakerLabel": "spk_0",
   "start": 444.88,
   "end": 446.4,
   "text": " Bootstrap times."
  },
  {
   "speakerLabel": "spk_0",
   "start": 446.4,
   "end": 451.8,
   "text": " So really excited to have a chance to try that out."
  },
  {
   "speakerLabel": "spk_1",
   "start": 451.8,
   "end": 457.46000000000004,
   "text": " One of the considerations I think it's worth also thinking about, and I think we always"
  },
  {
   "speakerLabel": "spk_1",
   "start": 457.46000000000004,
   "end": 462.72,
   "text": " fall into the pattern of thinking of how will it perform at production time, but we forget"
  },
  {
   "speakerLabel": "spk_1",
   "start": 462.72,
   "end": 466.68,
   "text": " as developers that performance and developer time and your developer feedback loop and"
  },
  {
   "speakerLabel": "spk_1",
   "start": 466.68,
   "end": 471.58000000000004,
   "text": " how quickly you can deploy, test and iterate is really important."
  },
  {
   "speakerLabel": "spk_1",
   "start": 471.58000000000004,
   "end": 476.52,
   "text": " One of the things I observe is that with the most popular tooling for building and deploying"
  },
  {
   "speakerLabel": "spk_1",
   "start": 476.52,
   "end": 479.90000000000003,
   "text": " Lambdas these days is still the serverless framework."
  },
  {
   "speakerLabel": "spk_1",
   "start": 479.9,
   "end": 487.67999999999995,
   "text": " And it seems in my experience, at least to have a strong bias towards Node.js as the"
  },
  {
   "speakerLabel": "spk_1",
   "start": 487.67999999999995,
   "end": 493.58,
   "text": " best supported runtime for packaging all your node modules and everything else."
  },
  {
   "speakerLabel": "spk_1",
   "start": 493.58,
   "end": 498.67999999999995,
   "text": " Even if you start using Python, then shipping your dependencies has a little bit more friction."
  },
  {
   "speakerLabel": "spk_1",
   "start": 498.67999999999995,
   "end": 500.46,
   "text": " Have you noticed that?"
  },
  {
   "speakerLabel": "spk_0",
   "start": 500.46,
   "end": 501.46,
   "text": " I did."
  },
  {
   "speakerLabel": "spk_0",
   "start": 501.46,
   "end": 502.46,
   "text": " Yeah."
  },
  {
   "speakerLabel": "spk_0",
   "start": 502.46,
   "end": 506.52,
   "text": " And I've been working a lot with Python Lambdas lately."
  },
  {
   "speakerLabel": "spk_0",
   "start": 506.52,
   "end": 511.85999999999996,
   "text": " And yeah, it seems a little bit more complicated than it used to be with Node.js."
  },
  {
   "speakerLabel": "spk_0",
   "start": 511.85999999999996,
   "end": 516.38,
   "text": " I think it's something that is going to get better over time because of course the tooling"
  },
  {
   "speakerLabel": "spk_0",
   "start": 516.38,
   "end": 521.96,
   "text": " and the ecosystem are always evolving and Python is a widely used language."
  },
  {
   "speakerLabel": "spk_0",
   "start": 521.96,
   "end": 527.64,
   "text": " So I expect that the future is going to be greener, but right now I will agree with you"
  },
  {
   "speakerLabel": "spk_0",
   "start": 527.64,
   "end": 531.64,
   "text": " that Node.js is probably the easiest way to get started with Lambda, especially if you"
  },
  {
   "speakerLabel": "spk_0",
   "start": 531.64,
   "end": 533.92,
   "text": " already know JavaScript."
  },
  {
   "speakerLabel": "spk_0",
   "start": 533.92,
   "end": 535.8,
   "text": " Yeah."
  },
  {
   "speakerLabel": "spk_1",
   "start": 535.8,
   "end": 541.8,
   "text": " It looks like AWS Sam has a little bit more, I suppose, of a cross language support, at"
  },
  {
   "speakerLabel": "spk_1",
   "start": 541.8,
   "end": 547.92,
   "text": " least for the common runtimes and Python in particular, but maybe that AWS Sam versus"
  },
  {
   "speakerLabel": "spk_1",
   "start": 547.92,
   "end": 551.4,
   "text": " serverless framework is a question for another day."
  },
  {
   "speakerLabel": "spk_0",
   "start": 551.4,
   "end": 552.4,
   "text": " Yeah."
  },
  {
   "speakerLabel": "spk_0",
   "start": 552.4,
   "end": 553.4,
   "text": " Yeah."
  },
  {
   "speakerLabel": "spk_0",
   "start": 553.4,
   "end": 556.3199999999999,
   "text": " I'm looking forward to try to answer that one."
  },
  {
   "speakerLabel": "spk_0",
   "start": 556.3199999999999,
   "end": 558.28,
   "text": " But for today, that's all."
  },
  {
   "speakerLabel": "spk_0",
   "start": 558.28,
   "end": 559.92,
   "text": " And thank you everyone for listening."
  },
  {
   "speakerLabel": "spk_0",
   "start": 559.92,
   "end": 564.3599999999999,
   "text": " We are really curious to know what's your favorite language for Lambdas."
  },
  {
   "speakerLabel": "spk_0",
   "start": 564.36,
   "end": 569.16,
   "text": " So please leave us a comment or reach out to us on Twitter and make sure to follow and"
  },
  {
   "speakerLabel": "spk_0",
   "start": 569.16,
   "end": 572.52,
   "text": " subscribe so we can see you next time."
  },
  {
   "speakerLabel": "spk_0",
   "start": 572.52,
   "end": 596.72,
   "text": " Bye."
  }
 ]
}