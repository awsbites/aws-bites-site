{
  "speakers": {
    "spk_0": "Luciano",
    "spk_1": "Eoin"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 4.48,
      "text": " Lambda functions are small units of code that achieve a very specific purpose."
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.48,
      "end": 8.24,
      "text": " It's always a good idea to keep your code short, clean and simple,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 8.24,
      "end": 12.64,
      "text": " and yet sometimes you find yourself writing a lot of boilerplate code in every function to do common"
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.64,
      "end": 16.48,
      "text": " things like parsing events, validation, loading parameters and a lot more."
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.44,
      "end": 21.44,
      "text": " The Middy.js framework was designed to help you keep Lambda function code simple,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 21.44,
      "end": 25.68,
      "text": " letting you focus on the business logic and clearing away duplication and boilerplate."
    },
    {
      "speakerLabel": "spk_0",
      "start": 25.68,
      "end": 31.36,
      "text": " By the end of this episode, you will know how Middy.js works with JavaScript and TypeScript,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 31.36,
      "end": 34.64,
      "text": " how to perform validation, event parsing, parameters loading,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 34.64,
      "end": 37.68,
      "text": " how can you even write and use your own middlewares with Middy."
    },
    {
      "speakerLabel": "spk_0",
      "start": 38.32,
      "end": 42.16,
      "text": " And you're going to learn a little bit about the history of Middy, who is using Middy right now,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 42.16,
      "end": 45.28,
      "text": " and how is the community evolving around Middy."
    },
    {
      "speakerLabel": "spk_0",
      "start": 45.28,
      "end": 58.160000000000004,
      "text": " My name is Luciano and today I'm joined by Eoin and this is AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 58.160000000000004,
      "end": 61.28,
      "text": " Luciano, I know that you created Middy."
    },
    {
      "speakerLabel": "spk_1",
      "start": 61.28,
      "end": 65.68,
      "text": " I remember hearing about it all the way back when it launched in 2017, 2018. How did it come about and why did you start it?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 66.56,
      "end": 70.16,
      "text": " Yeah, it's an interesting story. I'm going to try to summarize it for a minute."
    },
    {
      "speakerLabel": "spk_0",
      "start": 70.16,
      "end": 74,
      "text": " But basically I was working with this company, which was a spinoff of USB,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 74,
      "end": 77.04,
      "text": " which in Ireland is one of the main electricity providers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 77.04,
      "end": 80.96,
      "text": " And we were building an innovative project around energy trading."
    },
    {
      "speakerLabel": "spk_0",
      "start": 80.96,
      "end": 85.44,
      "text": " And we decided to build it entirely serverless, which I think it was very brave at the time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 85.44,
      "end": 89.76,
      "text": " This was around, I think 2016 was actually the year."
    },
    {
      "speakerLabel": "spk_0",
      "start": 89.76,
      "end": 94.24000000000001,
      "text": " And so it was the very beginning of serverless. Lambda was still quite new."
    },
    {
      "speakerLabel": "spk_0",
      "start": 94.24000000000001,
      "end": 98.96000000000001,
      "text": " There wasn't really a lot of documentation out there and case studies."
    },
    {
      "speakerLabel": "spk_0",
      "start": 98.96,
      "end": 104.47999999999999,
      "text": " But we were really excited about this idea because the project was like a startup and we wanted to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 104.47999999999999,
      "end": 109.36,
      "text": " keep different components very simple and then build on top of those and evolve it that way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 110.32,
      "end": 117.6,
      "text": " And funny enough, our assumption was that if we use Lambda, then our code is going to be very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 117.6,
      "end": 122.24,
      "text": " simple and we're going to focus strictly on the business logic because everything else is done for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 122.24,
      "end": 126.32,
      "text": " you by Lambda, by the runtime itself. That was kind of our initial assumption."
    },
    {
      "speakerLabel": "spk_0",
      "start": 126.32,
      "end": 131.04,
      "text": " And then we realized very quickly after we wrote the first prototype that in reality,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 131.04,
      "end": 136.56,
      "text": " our Lambdas were far from simple. There was so much boilerplate in every single Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 136.56,
      "end": 140.56,
      "text": " and there was so much inconsistency because we were literally copy pasting this boilerplate"
    },
    {
      "speakerLabel": "spk_0",
      "start": 140.56,
      "end": 146.4,
      "text": " around and then we were not keeping it in sync. And at that point, we realized that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 146.4,
      "end": 150.88,
      "text": " there must have been a better way to manage all our code base and avoid all this duplication"
    },
    {
      "speakerLabel": "spk_0",
      "start": 150.88,
      "end": 159.28,
      "text": " and make sure that our function would be, I suppose, as focused with the business logic as possible."
    },
    {
      "speakerLabel": "spk_0",
      "start": 159.28,
      "end": 165.51999999999998,
      "text": " So basically, we kind of explored some of the ideas that we have seen in frameworks like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 165.51999999999998,
      "end": 169.76,
      "text": " Express.js or other Node.js frameworks. And we thought, OK, in those frameworks,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 169.76,
      "end": 173.84,
      "text": " you literally have the same problems, even though you build more monolithic applications."
    },
    {
      "speakerLabel": "spk_0",
      "start": 173.84,
      "end": 178.96,
      "text": " You still have to do a bunch of things like validation, authentication, and response"
    },
    {
      "speakerLabel": "spk_0",
      "start": 178.96,
      "end": 183.92000000000002,
      "text": " realization, all these kind of concerns that generally go around the actual business logic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 183.92000000000002,
      "end": 189.36,
      "text": " that you want to implement in a particular endpoint. So we kind of took inspiration from"
    },
    {
      "speakerLabel": "spk_0",
      "start": 189.36,
      "end": 194.8,
      "text": " the way that frameworks like Express solved that problem by basically using middlewares and trying"
    },
    {
      "speakerLabel": "spk_0",
      "start": 194.8,
      "end": 200.88,
      "text": " to push all this concern outside your controllers or Lambdas or whatever you want to call your unit"
    },
    {
      "speakerLabel": "spk_0",
      "start": 200.88,
      "end": 206.88,
      "text": " of business logic for an endpoint. And we tried to apply that same principle to our Lambdas."
    },
    {
      "speakerLabel": "spk_0",
      "start": 206.88,
      "end": 211.68,
      "text": " And at that point, we realized, OK, in a Lambda, you don't really have something like Express,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 211.68,
      "end": 215.84,
      "text": " even though at the time there were already ways to put Express in a Lambda, but we didn't feel"
    },
    {
      "speakerLabel": "spk_0",
      "start": 215.84,
      "end": 220.07999999999998,
      "text": " that was the right way of doing it. And we also wanted something a little bit more generic that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 220.07999999999998,
      "end": 226.4,
      "text": " we could use even for non-HTTP related Lambdas. So we basically ended up implementing our own"
    },
    {
      "speakerLabel": "spk_0",
      "start": 226.4,
      "end": 232.4,
      "text": " middleware engine for specifically built for Lambda. And then we used that and then helped"
    },
    {
      "speakerLabel": "spk_0",
      "start": 232.4,
      "end": 238.64000000000001,
      "text": " us a lot to simplify our code and remove all this duplication. All this generic boilerplate code"
    },
    {
      "speakerLabel": "spk_0",
      "start": 238.64000000000001,
      "end": 243.92000000000002,
      "text": " became a unit that we could easily write once, make it testable, reuse it, keep evolving it,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 243.92000000000002,
      "end": 249.36,
      "text": " and then consistently use it everywhere else. And that was it. We basically used it for about one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 249.36,
      "end": 254.72,
      "text": " year and we were very happy with it. And eventually we decided to open source it. And that was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 254.72,
      "end": 262.32,
      "text": " basically how Midi came to be. OK, very good."
    },
    {
      "speakerLabel": "spk_1",
      "start": 262.32,
      "end": 266.56,
      "text": " And I guess so you and your team and this startup were the original contributors. Have you managed to grow much of a community around it? Are there"
    },
    {
      "speakerLabel": "spk_1",
      "start": 266.56,
      "end": 273.28,
      "text": " other maintainers now?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 273.28,
      "end": 279.84,
      "text": " Yeah, that's an interesting story because just shortly after we open sourced this project, then the company I was working with effectively stopped. It was a startup,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 279.84,
      "end": 284.96,
      "text": " a very experimental project, kind of a spin-off board just to experiment a particular idea."
    },
    {
      "speakerLabel": "spk_0",
      "start": 284.96,
      "end": 290.08,
      "text": " But then eventually they decided not to go ahead with that idea. So the whole project ended and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 290.08,
      "end": 296.71999999999997,
      "text": " everyone found a different path working for other companies. So the main core group kind of dissolved"
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.71999999999997,
      "end": 301.2,
      "text": " at that point and everyone was doing something else and people were not really interested in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 301.2,
      "end": 306.32,
      "text": " continuing working on Midi because they didn't really have a use case anymore. So because I'm"
    },
    {
      "speakerLabel": "spk_0",
      "start": 306.32,
      "end": 311.2,
      "text": " very passionate about open source and I felt like there is something there that is worth continuing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 311.2,
      "end": 315.2,
      "text": " and some people were starting to use it and they were very happy. They actually found it was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 315.2,
      "end": 320.32,
      "text": " solving the same problems for them that we saw. So we realized, okay, there is value in the community"
    },
    {
      "speakerLabel": "spk_0",
      "start": 320.32,
      "end": 324.56,
      "text": " for something like this. So what I did, even though I moved to a company where I was not doing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 324.56,
      "end": 329.84,
      "text": " that much serverless anymore, I kept maintaining Midi for about another year. And meanwhile,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 329.84,
      "end": 334.48,
      "text": " there was a little bit of community that organically formed around the open source project,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 334.48,
      "end": 340.24,
      "text": " like people that just were coming randomly asking for help or maybe submitting PRs and contributing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 340.24,
      "end": 346,
      "text": " in all sorts of different ways, writing documentation as well. And among these people,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 346,
      "end": 351.2,
      "text": " specifically, there was Will Farrell, who kind of was one of the main contributors and he was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 351.76,
      "end": 357.04,
      "text": " helping a lot in making sure that Midi was like a serious project, not just something done and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 357.04,
      "end": 362.64,
      "text": " left on GitHub and people might just copy paste things. Yeah. He was literally putting a lot of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 362.64,
      "end": 367.84000000000003,
      "text": " effort in making sure that it was always up to date, documentation was clear, there were examples"
    },
    {
      "speakerLabel": "spk_0",
      "start": 367.84,
      "end": 372.56,
      "text": " and also adding more and more middlewares because Midi is not just the runtime, but there are also"
    },
    {
      "speakerLabel": "spk_0",
      "start": 372.56,
      "end": 379.91999999999996,
      "text": " a bunch of built-in middlewares that you can just use and configure. So eventually I decided I was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 379.91999999999996,
      "end": 386.64,
      "text": " not having enough time and focus to continue being the main maintainer of Midi. So I asked if somebody"
    },
    {
      "speakerLabel": "spk_0",
      "start": 386.64,
      "end": 393.76,
      "text": " wanted to step in and take over and then Will decided to do that. And that was, I think, around"
    },
    {
      "speakerLabel": "spk_0",
      "start": 393.76,
      "end": 402.88,
      "text": " 2019 and 2020, but I think we kind of officialized that in 2020 with the V1 release. Okay."
    },
    {
      "speakerLabel": "spk_1",
      "start": 402.88,
      "end": 409.28,
      "text": " So I remember using the pre-V1 release and you could use Midi, you installed one package, it came,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 409.28,
      "end": 415.36,
      "text": " I think, with a bunch of in-built middlewares and you can also write your own. How has it changed"
    },
    {
      "speakerLabel": "spk_1",
      "start": 415.36,
      "end": 422.96,
      "text": " since then? Because I know that you've had another milestone release recently."
    },
    {
      "speakerLabel": "spk_0",
      "start": 422.96,
      "end": 427.44,
      "text": " Yeah, I think the first big change was that when we started working on Midi, it was still the time where everything"
    },
    {
      "speakerLabel": "spk_0",
      "start": 427.44,
      "end": 434.23999999999995,
      "text": " was callbacks, even like writing a lambda, it was like the signature was your function, then event,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 434.23999999999995,
      "end": 440.56,
      "text": " context and callback. And actually Midi did support already a way to use callbacks,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 440.56,
      "end": 446.88,
      "text": " to not use callbacks, but to use async-await and promises. But at the time, async-await wasn't even"
    },
    {
      "speakerLabel": "spk_0",
      "start": 446.88,
      "end": 452.64,
      "text": " available in different version of Node.js that were mainstream. So basically the way it was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 452.64,
      "end": 457.28,
      "text": " working was kind of using Babel, you needed to transpire your code and then it was just giving"
    },
    {
      "speakerLabel": "spk_0",
      "start": 457.28,
      "end": 461.84,
      "text": " you an interface. But then at the end of the day, your lambda was still being exposed to the lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 461.84,
      "end": 466.24,
      "text": " runtime as a callback-based function. So it was kind of an abstraction layer, it was a little bit"
    },
    {
      "speakerLabel": "spk_0",
      "start": 466.24,
      "end": 472.71999999999997,
      "text": " messy. And I think that's something that we kept doing throughout all the version 0.x. And then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 472.72,
      "end": 477.44000000000005,
      "text": " with version 1, I think that the ecosystem was mature enough to start to use async-await"
    },
    {
      "speakerLabel": "spk_0",
      "start": 477.44000000000005,
      "end": 482.56,
      "text": " consistently. So then it was, we decided to go with version 1 because we kind of cleaned up"
    },
    {
      "speakerLabel": "spk_0",
      "start": 482.56,
      "end": 489.20000000000005,
      "text": " all that mess and make it much more integrated with the ecosystem, like basic, real async,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 489.20000000000005,
      "end": 493.76000000000005,
      "text": " and not just like a simulation of all of that through transpilers. So that was the first big"
    },
    {
      "speakerLabel": "spk_0",
      "start": 493.76000000000005,
      "end": 499.52000000000004,
      "text": " milestone. And also in that milestone, we also, initially Midi was like very monolithic. It's just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 499.52,
      "end": 504.4,
      "text": " like one package and you get everything, the core middleware engine, but also, I don't know,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 504.4,
      "end": 509.76,
      "text": " I think there were something in the order of 10 or 12 different middlewares and all their own"
    },
    {
      "speakerLabel": "spk_0",
      "start": 509.76,
      "end": 514.8,
      "text": " dependencies, different middlewares might have different dependencies. So it was like a very,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 514.8,
      "end": 518.88,
      "text": " it wasn't like really a small package. Like you really needed to have a strong use case to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 520.0799999999999,
      "end": 523.12,
      "text": " make sense for you to import that package and include it in your lambdas."
    },
    {
      "speakerLabel": "spk_0",
      "start": 524.24,
      "end": 528.56,
      "text": " So we decided, okay, if we break this down into smaller units and we do like a monorepo"
    },
    {
      "speakerLabel": "spk_0",
      "start": 528.56,
      "end": 534.9599999999999,
      "text": " where every unit is published independently, then people can just install the core and then only the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 534.9599999999999,
      "end": 539.5999999999999,
      "text": " middlewares that they really need to use. And this way we can offer an API that is much more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 539.5999999999999,
      "end": 544.16,
      "text": " lightweight and it's not going to affect your Lambda runtime because you are importing only"
    },
    {
      "speakerLabel": "spk_0",
      "start": 544.16,
      "end": 549.4399999999999,
      "text": " the code that you actually need. So this was another big change from version 0 to version 1."
    },
    {
      "speakerLabel": "spk_0",
      "start": 549.4399999999999,
      "end": 555.52,
      "text": " Everything became like monorepo. We started to adopt the atmid namespace on npm, and then you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 555.52,
      "end": 559.6,
      "text": " install atmid decor and then you decide to install all the other middlewares independently."
    },
    {
      "speakerLabel": "spk_0",
      "start": 560.56,
      "end": 566.72,
      "text": " So that was, yeah, I suppose the story of experimenting with version 0.x and getting to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 566.72,
      "end": 570.8,
      "text": " a state with version 1 where we felt, okay, this is really something that people can use and have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 570.8,
      "end": 575.92,
      "text": " a good experience. Okay, nice. So you mentioned all these different middlewares then."
    },
    {
      "speakerLabel": "spk_1",
      "start": 575.92,
      "end": 579.52,
      "text": " So what are some of the common things you can do with Middy? Maybe we could talk about some of the canonical"
    },
    {
      "speakerLabel": "spk_1",
      "start": 579.52,
      "end": 587.04,
      "text": " examples with these core middlewares."
    },
    {
      "speakerLabel": "spk_0",
      "start": 587.04,
      "end": 592.88,
      "text": " Yeah, so there is actually a page in the documentation, and we'll drop a link in the show notes, that basically showcases all the official middlewares."
    },
    {
      "speakerLabel": "spk_0",
      "start": 592.88,
      "end": 598.0799999999999,
      "text": " So we have this concept of community-maintained middlewares, but also official middlewares."
    },
    {
      "speakerLabel": "spk_0",
      "start": 598.72,
      "end": 603.36,
      "text": " And the difference is that we recognize that there are a bunch of use cases that are so common that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 603.36,
      "end": 608.88,
      "text": " it's worth to have those use cases solved within Middy. And every time we do a new release, we make"
    },
    {
      "speakerLabel": "spk_0",
      "start": 608.88,
      "end": 614,
      "text": " sure that all these middlewares are maintained and they work well with the new changes that we might"
    },
    {
      "speakerLabel": "spk_0",
      "start": 614,
      "end": 618.72,
      "text": " have introduced in the new version. So that's why we have this list of official middlewares,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 618.72,
      "end": 623.6,
      "text": " and we basically maintain them together with the core engine. But then, of course, there is an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 623.6,
      "end": 627.36,
      "text": " active community and people are creating all sorts of middlewares that are useful to them. So in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 627.36,
      "end": 632.32,
      "text": " website, you can also find a list of community-maintained middlewares, and they are not necessarily"
    },
    {
      "speakerLabel": "spk_0",
      "start": 632.32,
      "end": 637.68,
      "text": " always up to date or tested together with the core, but we kind of got a selection of the ones"
    },
    {
      "speakerLabel": "spk_0",
      "start": 637.68,
      "end": 642.64,
      "text": " that we think are reasonably well written and you might use without too many issues."
    },
    {
      "speakerLabel": "spk_0",
      "start": 643.52,
      "end": 649.4399999999999,
      "text": " So the ones that are in the core, I'm just going to mention a few. We kind of group them in different"
    },
    {
      "speakerLabel": "spk_0",
      "start": 649.4399999999999,
      "end": 657.68,
      "text": " groups. There are ones that are related to basically like handling input, I don't know,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 657.68,
      "end": 664.16,
      "text": " doing validation with the input or certain events in AWS are a little bit flaky. There are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 664.16,
      "end": 668.64,
      "text": " certain gotchas that are not obvious, like I don't know, certain strings are encoded in ways that you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 668.64,
      "end": 674.8,
      "text": " might not expect. And we have also middlewares that will normalize your JSON for you, basically"
    },
    {
      "speakerLabel": "spk_0",
      "start": 674.8,
      "end": 679.68,
      "text": " giving you a cleaner JSON and you don't have to think... For instance, the one use case that I"
    },
    {
      "speakerLabel": "spk_0",
      "start": 679.68,
      "end": 684.0799999999999,
      "text": " think is worth mentioning just to explain this better is S3 events. So when you have a file in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 684.0799999999999,
      "end": 691.76,
      "text": " S3, if that file contains... the path of the file contains certain characters, you will receive"
    },
    {
      "speakerLabel": "spk_0",
      "start": 691.76,
      "end": 698.3199999999999,
      "text": " an object as an event that says the key of this file is a string, but that string encodes the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 698.3199999999999,
      "end": 703.04,
      "text": " special characters in a certain way. And that might be actually, has been for me, source of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 703.04,
      "end": 708.4,
      "text": " bugs in the past because I never realized that that string was encoded until I actually had the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 708.4,
      "end": 712.88,
      "text": " case where it was using special characters. And then my lambda would explode because I"
    },
    {
      "speakerLabel": "spk_0",
      "start": 712.88,
      "end": 717.2,
      "text": " would just take the string as this and use it without realizing that I needed to decode it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 717.2,
      "end": 722.32,
      "text": " first. So we have a normalizer that will take care of, make sure that if there is any special"
    },
    {
      "speakerLabel": "spk_0",
      "start": 722.32,
      "end": 727.0400000000001,
      "text": " character, when you get your event, it's already converted to a proper clean string that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 727.0400000000001,
      "end": 732.1600000000001,
      "text": " just use. I think the example is if you have a space, rather than getting a space, you get a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 732.96,
      "end": 738.32,
      "text": " percentage 20 or something like that, or a plus. I'm not really sure, but it's one of those gotchas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 738.32,
      "end": 744.5600000000001,
      "text": " that, yeah, you don't expect. So this is one class where you can kind of simplify handling inputs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 744.56,
      "end": 748.64,
      "text": " and validation and make sure that the events are clean enough so that you can just use the data"
    },
    {
      "speakerLabel": "spk_0",
      "start": 748.64,
      "end": 755.4399999999999,
      "text": " without having to do additional conversion. Then there is also parsing stuff. For instance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 755.4399999999999,
      "end": 761.5999999999999,
      "text": " if you are building, I don't know, an API that receives data from a form, you might want to use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 761.5999999999999,
      "end": 769.68,
      "text": " the proper algorithm to decode that form encoded input. Or if it's a JSON, you don't want to do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 769.68,
      "end": 775.3599999999999,
      "text": " JSON parse manually. Maybe you just want to have the body already parsed as an object. Or I don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 775.3599999999999,
      "end": 780.4799999999999,
      "text": " know, if it's XML, because you are implementing an API that needs to receive XML, there is a parser"
    },
    {
      "speakerLabel": "spk_0",
      "start": 780.4799999999999,
      "end": 786.3199999999999,
      "text": " for that as well. And then there is also something similar for responses. So if you're building an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 786.3199999999999,
      "end": 792.8,
      "text": " API that needs to send a response in a certain format, like again, JSON or XML or YAML, whatever,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 793.4399999999999,
      "end": 798,
      "text": " you can have your own serializers and do that. And the best part is that there is also a content"
    },
    {
      "speakerLabel": "spk_0",
      "start": 798,
      "end": 802.96,
      "text": " negotiation middleware, where if you want to build an API that can receive different types of inputs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 802.96,
      "end": 809.36,
      "text": " and response in different formats, it follows the HTTP specification to negotiate, OK, I am"
    },
    {
      "speakerLabel": "spk_0",
      "start": 809.36,
      "end": 815.04,
      "text": " receiving an XML and I expect to receive back an XML, your lambda business logic remains completely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 815.04,
      "end": 819.52,
      "text": " abstract from all of that. It just needs to receive an object and produce an object back."
    },
    {
      "speakerLabel": "spk_0",
      "start": 819.52,
      "end": 823.2,
      "text": " And then this middleware takes care of the serializing and re-serializing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 823.2,
      "end": 830.08,
      "text": " requests and response respectively. So basically you have all these middlewares to try to focus"
    },
    {
      "speakerLabel": "spk_0",
      "start": 830.08,
      "end": 834.32,
      "text": " more and more on the business logic and leave all these extra concerns to the middleware layers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 835.5200000000001,
      "end": 840,
      "text": " That sounds really great."
    },
    {
      "speakerLabel": "spk_1",
      "start": 840,
      "end": 844.6400000000001,
      "text": " So let's say if I've got a set of lambda functions and I've been doing serverless for a few months or maybe even years, but I realize that every time I'm doing JSON.parse"
    },
    {
      "speakerLabel": "spk_1",
      "start": 844.6400000000001,
      "end": 849.2800000000001,
      "text": " on the body and I have to construct a response that has the status code and the encoded result,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 849.28,
      "end": 854.24,
      "text": " and I'm thinking, OK, this is causing bugs. There's duplication everywhere. I want to clean"
    },
    {
      "speakerLabel": "spk_1",
      "start": 854.24,
      "end": 857.04,
      "text": " this all up. How do you get started then with Middy? What's the process?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 857.92,
      "end": 863.68,
      "text": " Yes, so I will say that again, I'm going to point on the documentation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 863.68,
      "end": 870.24,
      "text": " There is like a getting started section, which gives you examples and so on. But I think the main thing you should do is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 870.24,
      "end": 876.0799999999999,
      "text": " just do npm install at Middy slash core and that gives you just the middleware engine."
    },
    {
      "speakerLabel": "spk_0",
      "start": 876.08,
      "end": 881.36,
      "text": " Just the middleware engine. And at that point you need to decide, OK, what am I doing? Am I building"
    },
    {
      "speakerLabel": "spk_0",
      "start": 881.36,
      "end": 887.6800000000001,
      "text": " an API? Do I need to parse JSON? If I need to do that, I can install the Middy at Middy slash"
    },
    {
      "speakerLabel": "spk_0",
      "start": 887.6800000000001,
      "end": 894.5600000000001,
      "text": " HTTP JSON body parser. And similarly, you can install a bunch of middlewares that you think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 894.5600000000001,
      "end": 900.48,
      "text": " you're going to need, like validation, error handling and so on. And then the way that Middy"
    },
    {
      "speakerLabel": "spk_0",
      "start": 900.48,
      "end": 905.6800000000001,
      "text": " changes your way of writing lambda is actually very subtle. Like it's not very, it doesn't force"
    },
    {
      "speakerLabel": "spk_0",
      "start": 905.68,
      "end": 911.3599999999999,
      "text": " you to change your coding style too much because you are still writing your handler in the same way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 911.3599999999999,
      "end": 915.92,
      "text": " You are still writing the same signature of a function. The only difference is that for every"
    },
    {
      "speakerLabel": "spk_0",
      "start": 915.92,
      "end": 920.8,
      "text": " handler that you write, you need to, let's say something we call midify the handler,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 920.8,
      "end": 926.8,
      "text": " which basically means take that handler and wrap it with this middleware layer, middleware runtime"
    },
    {
      "speakerLabel": "spk_0",
      "start": 926.8,
      "end": 931.5999999999999,
      "text": " engine. So this is literally a function that you import from core that is called Middy. So you just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 931.6,
      "end": 937.28,
      "text": " need to say, call Middy, pass the handler inside and you are basically getting a new instance of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 937.28,
      "end": 942.72,
      "text": " the same function handler, which has, let's say, additional superpowers. And this superpowers is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 942.72,
      "end": 950.96,
      "text": " that you can use the.use syntax to basically specify which middlewares do you want to attach."
    },
    {
      "speakerLabel": "spk_0",
      "start": 951.52,
      "end": 955.44,
      "text": " So the idea is that you write your handler, you don't worry too much about all these extra"
    },
    {
      "speakerLabel": "spk_0",
      "start": 955.44,
      "end": 960.48,
      "text": " concerns in your handler. So you assume that the data coming into your handler is already clean"
    },
    {
      "speakerLabel": "spk_0",
      "start": 960.48,
      "end": 964.5600000000001,
      "text": " and ready to be used and that you don't need to do anything extra to send back a response,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 964.5600000000001,
      "end": 970.64,
      "text": " just provide an object. You midify this handler and then you attach all the middlewares that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 970.64,
      "end": 975.2,
      "text": " you need to actually do all the pre-processing and post-processing of the request and response."
    },
    {
      "speakerLabel": "spk_0",
      "start": 976.24,
      "end": 982.16,
      "text": " There are slightly variations in syntaxes that you can use today because we try to listen to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 982.16,
      "end": 987.52,
      "text": " feedback and figure out ways that could be simpler in different use cases. So if you look at the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 987.52,
      "end": 993.1999999999999,
      "text": " documentation, you can find that you can use other things, not just.use, you can use.before,.after,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 993.1999999999999,
      "end": 997.68,
      "text": ".error because we have different use cases and if you're writing something very, very simple,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 998.64,
      "end": 1003.28,
      "text": " you don't necessarily need to write or use fully-fledged middlewares, you can find shortcuts."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1003.28,
      "end": 1007.12,
      "text": " So I'm going to let people check the documentation for more details about that, but"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1007.76,
      "end": 1014.16,
      "text": " in broad strokes, write your handler, keep it simple, midify it and then.use all the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1014.16,
      "end": 1018.4,
      "text": " middlewares that you want to use."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1018.4,
      "end": 1022.64,
      "text": " And then you can start deleting all that boilerplate code you had before, which is nice. One of my favorite things in software development, deleting code you don't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1022.64,
      "end": 1028.48,
      "text": " need anymore. So given that you got started, maybe are there any kind of interesting examples of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1028.48,
      "end": 1032.56,
      "text": " people out there using Middy in production or like open source projects that are building on top of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1032.56,
      "end": 1039.28,
      "text": " Middy? Yeah, that's a good question."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1039.28,
      "end": 1044.72,
      "text": " So it's something that we are trying to collect more use cases and hopefully we'll be able to showcase them on the website. We haven't done that in a formal way yet,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1044.72,
      "end": 1051.92,
      "text": " but we have been very happy about mentions that we got in the public from actually pretty big name."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1053.04,
      "end": 1057.92,
      "text": " Like we had a conference, I think it was one of the serverless days a few years ago,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1058.48,
      "end": 1063.52,
      "text": " where Lego mentioned that they were using Middy internally for some of their own APIs built on"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1063.52,
      "end": 1069.68,
      "text": " top of Lambda. Then we also had recently, I think it was in the last re-invent, if I'm not wrong,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1070.4,
      "end": 1075.44,
      "text": " Taco Bells that also mentioned Middy in their own presentation at re-invent as one of the things"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1075.44,
      "end": 1082.8,
      "text": " that they use for serverless. And I think the best one is the fact that the upcoming TypeScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1082.8,
      "end": 1088.24,
      "text": " power tools for Lambda also supports Middy. So of course, it's not the only way you can use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1088.24,
      "end": 1093.04,
      "text": " power tool, but if you are already using Middy, they make it easier for you to add all the extra"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1093.04,
      "end": 1099.2,
      "text": " functionality that they are providing with power tools. So I think that's an interesting validation"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1099.2,
      "end": 1104.08,
      "text": " also from AWS that they think Middy is actually solving a problem for the Lambda ecosystem in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1104.08,
      "end": 1110.48,
      "text": " Node.js. And I recently noticed that there is a repository called AWS Solutions, open source from"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1110.48,
      "end": 1116.72,
      "text": " AWS, where there are also a bunch of examples that also use Middy and this is AWS providing examples"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1116.72,
      "end": 1122,
      "text": " on how to use Lambda and they suggest to use Middy. So that's also another very good validation that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1122,
      "end": 1126,
      "text": " the project makes sense and it's actually solving a real problem for people. That's great."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1126,
      "end": 1131.6,
      "text": " I knew Middy was useful, but I didn't know that it was powering tacos. So that's... Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1131.6,
      "end": 1137.92,
      "text": " That was actually the comment I got from Will when we shared this news that we realized that it was"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1137.92,
      "end": 1141.68,
      "text": " mentioned, it was like, oh, it's amazing to see that this open source project is helping people"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1141.68,
      "end": 1149.36,
      "text": " to have more tacos. Making the world a better place. Okay."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1149.36,
      "end": 1152.8,
      "text": " So let's say you're up and running and using some of these really good official middlewares on some of the third party middlewares"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1152.8,
      "end": 1157.28,
      "text": " out there. What about writing your own middleware? Is that something that people would commonly need"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1157.28,
      "end": 1163.4399999999998,
      "text": " to do? And how would you set about that task? Yeah, that's a very good question."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1163.4399999999998,
      "end": 1168.9599999999998,
      "text": " So again, there is an intersection in the documentation with examples and so on, and we'll be linking that in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1168.9599999999998,
      "end": 1174.9599999999998,
      "text": " the show notes. But I will say that for simple use cases, you generally don't need to do that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1174.96,
      "end": 1181.44,
      "text": " because probably the default middlewares are going to cover most of the needs. But there are cases"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1181.44,
      "end": 1184.56,
      "text": " where, I don't know, maybe you're doing something very custom. For instance, you have your own"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1184.56,
      "end": 1190.4,
      "text": " authentication mechanism, right? So you'll need to validate credentials in a way that is not a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.4,
      "end": 1195.1200000000001,
      "text": " canonical way of doing it. Maybe it's not using JWT, maybe it's not using Cognito. So you have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.1200000000001,
      "end": 1199.2,
      "text": " your own mechanism, you need to use your own libraries to do that. And of course, this is one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1199.2,
      "end": 1204.32,
      "text": " of those concerns that you don't want to copy and paste into every single Lambda, or even you don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1204.32,
      "end": 1209.36,
      "text": " want to call a function, remember to call a function inside your Lambda handler every time and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1209.36,
      "end": 1214.6399999999999,
      "text": " manage the error. And you probably want to just say, use validation somewhere, so use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1214.6399999999999,
      "end": 1220.1599999999999,
      "text": " authentication somewhere, and then keep your Lambda code as clean as possible. So this is one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1220.1599999999999,
      "end": 1223.84,
      "text": " use case where you could decide, okay, I'm just going to use Middy, write my own authentication"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1223.84,
      "end": 1228.08,
      "text": " middleware, and then for every handler, I'm going to attach that particular middleware where I want"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1228.08,
      "end": 1233.52,
      "text": " to use the authentication feature. And there are different ways you can write a middleware. The"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1233.52,
      "end": 1239.36,
      "text": " simplest one is literally just write one function, and this one function needs to have a very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1239.36,
      "end": 1244.56,
      "text": " specific signature that, by the way, is the same signature as a Lambda function, you just receive"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1244.56,
      "end": 1252.72,
      "text": " an event and context. Or you can just call it request, that is kind of an object that we use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1252.72,
      "end": 1258.8,
      "text": " that contains both the event and the context and give you extra functionality. And basically,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1258.8,
      "end": 1263.6,
      "text": " the only thing you need to do is rather than saying.use on the mid-defined handler, you say"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263.6,
      "end": 1273.28,
      "text": ".before and you pass this function inside it. And then that function can basically either return"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1273.28,
      "end": 1278.08,
      "text": " or throw exception to try to handle the different use cases where you want to stop the execution"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1278.08,
      "end": 1283.2,
      "text": " early with a success, or you want to fail because maybe the authentication is not valid, or if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1283.2,
      "end": 1287.2,
      "text": " basically you don't do anything in that function, you assume that everything was fine, the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1287.2,
      "end": 1292.0800000000002,
      "text": " authentication was okay, and at that point when that function completes, it's going to run for you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1292.0800000000002,
      "end": 1298.24,
      "text": " your own handler. And that's one use case. Sometimes you want to have actions that happen"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1298.8,
      "end": 1304.4,
      "text": " before your actual handler runs, after your handler runs, and also in case of error, you want"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1304.4,
      "end": 1309.52,
      "text": " to have specific logic to be executed because maybe you need to clean up something. In those"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1309.52,
      "end": 1315.1200000000001,
      "text": " cases, it's worth to write a fully-fledged middleware where the syntax is very similar,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1315.12,
      "end": 1320.56,
      "text": " but it's just that you have an object that contains a before function, an after function,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1320.56,
      "end": 1324.9599999999998,
      "text": " and an on error function, and you define the behaviors that want to happen in those three"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1324.9599999999998,
      "end": 1328.7199999999998,
      "text": " different phases. That sounds really good."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1328.7199999999998,
      "end": 1333.1999999999998,
      "text": " And just as you were talking about authentication, I was thinking about the case where commonly you have with a multi-tenanted application,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1333.1999999999998,
      "end": 1338.8799999999999,
      "text": " the need in your Lambda function to assume a specific role that is scoped down for a tenant"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1338.88,
      "end": 1345.6000000000001,
      "text": " or for a specific user, for example, that restricts them to specific key prefixes on S3."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1345.6000000000001,
      "end": 1349.6000000000001,
      "text": " We talked about that in the previous episode, for example. And that's the kind of thing that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1349.6000000000001,
      "end": 1352.3200000000002,
      "text": " you would be doing for every function, and you need to make sure that you're doing it for every"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1352.3200000000002,
      "end": 1357.1200000000001,
      "text": " function and that people are using that scoped down policy. So that seems like an ideal application"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1357.1200000000001,
      "end": 1362.5600000000002,
      "text": " for a custom middleware that could be invoked before your handler and ensure that your context"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1362.56,
      "end": 1370.24,
      "text": " is decorated with a session that you can use to make calls out to AWS for DynamoDB in S3."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1370.24,
      "end": 1373.9199999999998,
      "text": " You mentioned that the documentation, and I've seen the documentation, is really good"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1373.9199999999998,
      "end": 1378.08,
      "text": " and improving all the time. Is there anything specifically we need to point, or are there any"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1378.08,
      "end": 1384.32,
      "text": " tutorials out there that people have contributed that will help people to get started?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1385.6799999999998,
      "end": 1390.1599999999999,
      "text": " Yeah, that's a good question. I think we have some links in the documentation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1390.16,
      "end": 1396.72,
      "text": " There was one recently by Serverless Stack, I think, where they show how to use Middy with Serverless Stack."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1396.72,
      "end": 1400.72,
      "text": " And I think a good pointer, and this is something that we want to expand more in our own"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1400.72,
      "end": 1405.8400000000001,
      "text": " official documentation, is that Middy integrates very well with basically all the tools, because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1405.8400000000001,
      "end": 1412.24,
      "text": " it's not an opinionated take on how you deploy your code. It's more helping you to write the code"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1412.24,
      "end": 1417.0400000000002,
      "text": " with a different style that promotes focusing on the business logic and keeping"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1417.04,
      "end": 1423.36,
      "text": " every other concern outside the business logic. Because of that, you can use Middy with Terraform,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1423.36,
      "end": 1429.36,
      "text": " with Serverless Framework, with Serverless Stack, with, I don't know, SDK, CloudFormation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1429.36,
      "end": 1434.3999999999999,
      "text": " everything you are currently using. It just changes the way you use your code in the way"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1434.3999999999999,
      "end": 1439.6,
      "text": " that any other library would affect your code. But it doesn't affect anything else outside the code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1440.24,
      "end": 1446.1599999999999,
      "text": " So we want to have a section called integration in the documentation where we already started that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1446.16,
      "end": 1451.2,
      "text": " But it's still pretty much a to-do. There are different pages, but if you open most of them,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1451.2,
      "end": 1456,
      "text": " it's like, please help us to fill this guide. But we really want to highlight the fact that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1456,
      "end": 1461.0400000000002,
      "text": " Middy plays well with most of the other tools, so it's not really going to force you down a particular part."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1462.16,
      "end": 1466.3200000000002,
      "text": " So maybe that's something for the audience. If people are actually already using Middy"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1466.3200000000002,
      "end": 1471.44,
      "text": " and they want to contribute, it would be nice to get some help in writing some of this documentation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1471.44,
      "end": 1476.72,
      "text": " I want to just give a final shout out to Will, who has been maintaining Middy in an excellent way"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1476.72,
      "end": 1482.8,
      "text": " for, I think, more than two years at this point. Because I felt like I took my distance from the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1482.8,
      "end": 1487.6000000000001,
      "text": " project more and more in the last years, and this project wouldn't be today at this level if Will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1487.6000000000001,
      "end": 1492.56,
      "text": " wasn't there putting a lot of effort every day into maintaining it. So I just want to say again,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1492.56,
      "end": 1497.2,
      "text": " thank you to Will for making effectively the project available to everyone today."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1497.2,
      "end": 1503.2,
      "text": " Good shout. Yeah, that's great. Okay, thanks everyone for listening. We'll see you next time."
    }
  ]
}