WEBVTT

1
00:00:00.000 --> 00:00:04.000
We do love AWS, but we have to admit that it's not always a silver bullet.

2
00:00:04.000 --> 00:00:08.000
There are definitely use cases where it might be worth considering alternatives.

3
00:00:08.000 --> 00:00:12.000
Today we will discuss some of these use cases and we will try to highlight what are the advantages

4
00:00:12.000 --> 00:00:16.000
that other platforms or services can have over AWS in very specific circumstances.

5
00:00:16.000 --> 00:00:20.000
My name is Luciano and today I'm joined by Eoin and this is AWS Bites podcast.

6
00:00:20.000 --> 00:00:36.000
So Eoin, why don't we start by asking ourselves why we would prefer to go all in on AWS for everything?

7
00:00:36.000 --> 00:00:40.000
That seems to be kind of the default, that you try and look for the AWS solution first,

8
00:00:40.000 --> 00:00:45.000
but you don't want to get distracted by that single focus and maybe be a little bit more open-minded.

9
00:00:45.000 --> 00:00:51.000
But the reason you do it is because generally the way the AWS services are delivered, they're well integrated with each other.

10
00:00:51.000 --> 00:00:55.000
You also get like unified billing and in general people have a level of trust in AWS.

11
00:00:55.000 --> 00:01:03.000
If you pick a vendor as important as your primary public cloud vendor, you want to go all in on them and you want to trust them

12
00:01:03.000 --> 00:01:06.000
and you believe that they're going to stick around and they're not going to retire services,

13
00:01:06.000 --> 00:01:10.000
they're not going to be acquired by some bigger company who then retires the services.

14
00:01:10.000 --> 00:01:13.000
So that's a good reason to go all in on AWS.

15
00:01:13.000 --> 00:01:19.000
But like I said, you probably shouldn't always, so why would you want to go for third-party services instead in some cases?

16
00:01:19.000 --> 00:01:24.000
Yeah, that's a good point. I would also add that AWS generally gives you very good levels of scalability.

17
00:01:24.000 --> 00:01:31.000
You have this peace of mind that if your project actually grows a lot, you can find a very good part of scaling up with AWS.

18
00:01:31.000 --> 00:01:35.000
But I mean, realistically, that's not always a realistic expectation, right?

19
00:01:35.000 --> 00:01:42.000
Sometimes you have very modest projects and it's okay to deal with them so you don't have to think about that level of scalability.

20
00:01:42.000 --> 00:01:49.000
So other cases, I guess, is when you have very specific needs and there might be tools,

21
00:01:49.000 --> 00:01:54.000
the companies that are focusing on that one particular need and they're providing very, very good service.

22
00:01:54.000 --> 00:01:57.000
And I think we'll discuss some of these examples later on during this episode.

23
00:01:57.000 --> 00:02:03.000
So basically, in those cases, you might end up having a much better user experience, probably even price and feature set,

24
00:02:03.000 --> 00:02:08.000
than just going with some of the many AWS services.

25
00:02:08.000 --> 00:02:12.000
In other cases, it's more about the billing, I guess.

26
00:02:12.000 --> 00:02:18.000
It's more about how easy it is for me to predict cost in a specific service rather than in AWS.

27
00:02:18.000 --> 00:02:21.000
Some offering, for instance, we'll talk about virtual machines.

28
00:02:21.000 --> 00:02:27.000
If you just need one virtual machine, the cost unit is generally easier if you go with something like Digital Ocean or Linod,

29
00:02:27.000 --> 00:02:33.000
rather than thinking in terms of AWS where you have so many different parameters that is a little bit harder to predict the cost in advance.

30
00:02:33.000 --> 00:02:39.000
And in general, we'll talk about simplicity because, of course, we know we have been talking a lot about this, actually, in previous episodes,

31
00:02:39.000 --> 00:02:42.000
that AWS has a decent barrier to entry.

32
00:02:42.000 --> 00:02:48.000
You need to learn a bunch of concepts before you can start to deploy anything serious on AWS.

33
00:02:48.000 --> 00:02:55.000
So if you are just looking for, again, a simpler way to just deploy things in the cloud and launch products,

34
00:02:55.000 --> 00:03:03.000
other platforms might give you better access to the resources and more simple user experience in general.

35
00:03:03.000 --> 00:03:07.000
So I guess, yeah, let's start by picking some examples.

36
00:03:07.000 --> 00:03:13.000
I suppose my first one, because it's also a topic we have been discussing before, is what about authentication?

37
00:03:13.000 --> 00:03:18.000
Would you go with Cognito or are there alternatives that you would prefer in some cases?

38
00:03:18.000 --> 00:03:24.000
Yeah, I would definitely use either Cognito or likely something like Auth0.

39
00:03:24.000 --> 00:03:28.000
I think these are the two which compete very well with each other.

40
00:03:28.000 --> 00:03:33.000
Cognito, maybe we should do a deep dive on it in a future episode because there is a lot of features there.

41
00:03:33.000 --> 00:03:39.000
Unfortunately, it suffers from a couple of drawbacks, like poor naming of some of the concepts in there,

42
00:03:39.000 --> 00:03:43.000
which make it very confusing, difficult to get to grips with the documentation.

43
00:03:43.000 --> 00:03:45.000
There are some feature gaps as well.

44
00:03:45.000 --> 00:03:49.000
So from a developer experience point of view, it suffers, unfortunately.

45
00:03:49.000 --> 00:03:53.000
Auth0, on the other hand, has a really nice developer experience and a really good onboarding.

46
00:03:53.000 --> 00:03:58.000
So if you want to integrate authentication, authorization, like sign up, log in,

47
00:03:58.000 --> 00:04:05.000
log in with social identity providers, Auth0 will allow you to do that very quickly.

48
00:04:05.000 --> 00:04:10.000
And the whole developer experience in general is going to be much smoother.

49
00:04:10.000 --> 00:04:14.000
The other thing about Auth0 is that it solves those kind of small company startup problems,

50
00:04:14.000 --> 00:04:20.000
like how do I add sign up and log into my application in an easy way?

51
00:04:20.000 --> 00:04:26.000
But it also solves equally well the enterprise integration scenarios like SAML integration

52
00:04:26.000 --> 00:04:29.000
and OpenID Connect for enterprise as well.

53
00:04:29.000 --> 00:04:32.000
So there's a lot of feature supported there.

54
00:04:32.000 --> 00:04:38.000
So the only advantage is, and as with all of these things, you just have to compare the pricing models,

55
00:04:38.000 --> 00:04:41.000
I think, with the user-based pricing model with Auth0.

56
00:04:41.000 --> 00:04:46.000
I believe it's still quite expensive when you get to large numbers of users.

57
00:04:46.000 --> 00:04:54.000
Cognito is pretty inexpensive for large numbers of users by comparison.

58
00:04:54.000 --> 00:04:59.000
I suppose the other thing you need to think about is just do you need deep integration with IAM?

59
00:04:59.000 --> 00:05:05.000
So if you're using Cognito, you get good integration to API Gateway authorizers and AppSync authorizers.

60
00:05:05.000 --> 00:05:11.000
You won't get that out of the box, and you just have to use a custom authorizer with Auth0 or any other third party.

61
00:05:11.000 --> 00:05:15.000
So that's the authentication, authorization scenario.

62
00:05:15.000 --> 00:05:18.000
What else? What else is a topic where people...

63
00:05:18.000 --> 00:05:22.000
I think Auth0 is probably the number one thing that people would reach for outside of AWS.

64
00:05:22.000 --> 00:05:26.000
What else is pretty popular for people who are...

65
00:05:26.000 --> 00:05:30.000
There is an option in AWS, but it's not people's number one choice.

66
00:05:36.000 --> 00:05:39.000
I guess we can talk about search because it's one of those use cases where eventually for any reasonable application, you'll need some search functionality, and that's where you start to ask yourself,

67
00:05:39.000 --> 00:05:45.000
okay, how do I build this in AWS, and then you realize it can be much more involved than you actually wanted it to be,

68
00:05:45.000 --> 00:05:50.000
and then you might want to start thinking about alternatives outside AWS.

69
00:05:50.000 --> 00:05:56.000
But if we just stick to AWS, probably the default is Amazon Open Search, so Amazon version of Elasticsearch.

70
00:05:56.000 --> 00:06:02.000
And while that is good, it's still a little bit annoying that you still need to think in terms of servers.

71
00:06:02.000 --> 00:06:08.000
You need to provision a cluster and find the servers, and there is not really a serverless model,

72
00:06:08.000 --> 00:06:14.000
which is something that I guess is going to go into my own personal wish list for AWS,

73
00:06:14.000 --> 00:06:20.000
because of course most of the time you just want an API or something that allows you to index some data

74
00:06:20.000 --> 00:06:22.000
and then search over the indices.

75
00:06:22.000 --> 00:06:28.000
And with Open Search, of course, you need to do a lot more before you can access to that level of API.

76
00:06:28.000 --> 00:06:34.000
And there is an Elastic Cloud as an alternative, so the cloud from Elasticsearch creators,

77
00:06:34.000 --> 00:06:40.000
but that one is also very similar, meaning that it's based on instances, and you need to provision those instances.

78
00:06:40.000 --> 00:06:44.000
So I guess maybe the user experience can be a little bit better.

79
00:06:44.000 --> 00:06:46.000
I actually don't know because I haven't tried it.

80
00:06:46.000 --> 00:06:52.000
But again, you need to go outside AWS, create a whole account, and manage the billing

81
00:06:52.000 --> 00:06:59.000
for something that eventually is still based on instances, and it doesn't seem to give you a lot of advantages.

82
00:06:59.000 --> 00:07:07.000
So yeah, I guess if you want to zoom in a little bit more on different types of use cases,

83
00:07:07.000 --> 00:07:12.000
maybe we can also talk about other alternative products, because I suppose one use case is about search.

84
00:07:12.000 --> 00:07:17.000
So you really just want to index data and then search over it.

85
00:07:17.000 --> 00:07:24.000
Other very common use case for Elasticsearch is about managing logs, distributed logs, and centralizing them somehow.

86
00:07:24.000 --> 00:07:31.000
And for those use cases, I've used Elasticsearch, and I think it works really, really well, especially when combined with Kibana.

87
00:07:31.000 --> 00:07:37.000
But again, it's a little bit of a messy setup, and it takes a little bit of time before you get it right.

88
00:07:37.000 --> 00:07:45.000
So in those cases, if you want to avoid all of that, you can use third-party services focused at 100% on the logs use cases.

89
00:07:45.000 --> 00:07:50.000
And these are like Loggly, Logs, DotIO, Splunk, Datadog, Onacom, and so on.

90
00:07:50.000 --> 00:07:58.000
Instead, equivalent if you want to think about pure product search, or documentation search, document search in a more general way,

91
00:07:58.000 --> 00:08:07.000
Algolia is probably the go-to service where you just want to give me an account, give me an API, I don't want to think about servers.

92
00:08:07.000 --> 00:08:14.000
And it gives you a very nice developer experience, you can get a very good documentation.

93
00:08:14.000 --> 00:08:20.000
There are also cases where you can get the service for free, like for instance if it's an open-source project, you can easily request Algolia.

94
00:08:20.000 --> 00:08:26.000
There is like a web form, you need to feel like, can you support us by giving us a certain level of access for free?

95
00:08:26.000 --> 00:08:32.000
And at least in my experience, it's been pretty easy to go through the process, and they seem to be very open to support open-source projects.

96
00:08:32.000 --> 00:08:40.000
And the API is generally very nice, and you also get pre-made scripts or widgets that you can just copy in your application,

97
00:08:40.000 --> 00:08:44.000
and everything magically works, at least to a certain degree.

98
00:08:51.000 --> 00:08:56.000
The only thing is that if you use it at scale, because you really have successfully commerce with thousands of products, I think it might get expensive very quickly, based on what I've seen on the pricing.

99
00:08:56.000 --> 00:09:02.000
But that's always kind of the trade-off between go and do all the work of setting up infrastructure,

100
00:09:02.000 --> 00:09:07.000
and then maybe you get a little bit of economy of scale there, rather than just using a software as a service,

101
00:09:07.000 --> 00:09:11.000
which might be very cheap at the beginning, but then the scale curve grows very steeply,

102
00:09:11.000 --> 00:09:17.000
and you might end up paying a lot when you are reaching those levels of growth.

103
00:09:17.000 --> 00:09:21.000
Yeah, so I think that covers search and logs pretty well.

104
00:09:21.000 --> 00:09:28.000
What about something else very common? I'm thinking, hosting files like CDNs or websites.

105
00:09:33.000 --> 00:09:38.000
Yeah, this is actually something we talked about in one of the previous episodes, I think back near the beginning, we talked about how to deploy a static website on AWS, and we talked specifically about CDNs.

106
00:09:38.000 --> 00:09:48.000
I know we mentioned things like GitHub Pages and Vercel and Netlify as ways of getting a static website up and running very quickly on CDN.

107
00:09:48.000 --> 00:09:54.000
Netlify is actually the site that we use for hosting the AWS bytes website, awsbytes.com, funnily enough.

108
00:09:54.000 --> 00:09:59.000
And then you also have, I guess, not just static websites, but sometimes you've got other CDN needs,

109
00:09:59.000 --> 00:10:07.000
like for video or documents or images, so there's lots of different use cases out there that can leverage a CMS.

110
00:10:07.000 --> 00:10:13.000
So CloudFront is pretty good. I think CloudFront is a great option, and I'd use it quite a lot, but it's not suitable for every scenario.

111
00:10:13.000 --> 00:10:17.000
We mentioned before that it might be slow to update. Configuration is complex enough.

112
00:10:17.000 --> 00:10:21.000
So this is an area where there are quite a few alternatives.

113
00:10:21.000 --> 00:10:27.000
Cloudflare comes up quite often, I think, especially in the kind of small to medium business space.

114
00:10:27.000 --> 00:10:33.000
They've got also a lot of other products around it, like for protection and firewall, that kind of stuff.

115
00:10:33.000 --> 00:10:39.000
And then you have things like Fastly, which is known for being particularly fast.

116
00:10:39.000 --> 00:10:46.000
And then you've got the big older enterprise players like Akamai, which have been around forever, it seems.

117
00:10:46.000 --> 00:10:51.000
So there's a lot of alternatives out there in the CDN space, and some of them are pretty fast to get up and running with,

118
00:10:51.000 --> 00:10:58.000
especially the more modern services. And yeah, I think it's one area where it really depends on your use case,

119
00:10:58.000 --> 00:11:01.000
but you've got good options out there.

120
00:11:01.000 --> 00:11:07.000
So if we think back then to data, let's maybe think about databases.

121
00:11:07.000 --> 00:11:17.000
You've got a lot of options in AWS, really, with RDS, right? You've got DynamoDB, which has grown in popularity in a phenomenal way.

122
00:11:17.000 --> 00:11:22.000
Then you have things like Aurora Serverless, which are kind of serverless, not quite there yet,

123
00:11:22.000 --> 00:11:28.000
a little bit debatable in whether you should use them or not. So what else is out there that people should be looking at?

124
00:11:28.000 --> 00:11:35.000
I guess looking outside AWS, the main first contender to DynamoDB is probably MongoDB.

125
00:11:35.000 --> 00:11:43.000
And there is MongoDB Atlas, which is kind of, I suppose, a good alternative to DynamoDB, if you like,

126
00:11:43.000 --> 00:11:47.000
document-based databases like Dynamo or NoSQL databases.

127
00:11:47.000 --> 00:11:52.000
And the good news is that recently there is a serverless option for MongoDB Atlas,

128
00:11:52.000 --> 00:11:59.000
so probably much more lightweight in terms of configuring the whole cluster and scaling it and so on.

129
00:11:59.000 --> 00:12:02.000
I haven't used it yet, but it seems to be an interesting alternative.

130
00:12:02.000 --> 00:12:06.000
If you're looking, if you like to use MongoDB and if you're looking for the kind of model where it's like,

131
00:12:06.000 --> 00:12:11.000
just give me a database and scale it for me and I'm going to pay as I go.

132
00:12:11.000 --> 00:12:18.000
Another interesting one is that I noticed that recently enough, I think it was either this year or at some point last year,

133
00:12:18.000 --> 00:12:22.000
DigitalOcean launched kind of an alternative to RDS.

134
00:12:22.000 --> 00:12:27.000
It looks very similar, even though it covers Postgres and MySQL as kind of relational databases,

135
00:12:27.000 --> 00:12:33.000
but it also covers Redis and MongoDB as other classes of databases that in AWS they will go kind of somewhere else,

136
00:12:33.000 --> 00:12:35.000
in a different category of databases.

137
00:12:35.000 --> 00:12:39.000
And this one is interesting because if you like DigitalOcean and if you use it,

138
00:12:39.000 --> 00:12:43.000
you probably know that they spend a lot of time making sure that the developer experience is good

139
00:12:43.000 --> 00:12:47.000
and it's very easy to see, to understand how to provision anything and get things up and running.

140
00:12:47.000 --> 00:12:50.000
You get lots of documentation, lots of tutorials,

141
00:12:50.000 --> 00:12:55.000
but the UI is generally very driven to kind of a workflow where it's like step one, step two, step three,

142
00:12:55.000 --> 00:12:59.000
and at the end you have everything up and running as you would expect.

143
00:12:59.000 --> 00:13:05.000
And I saw a small demo there showing how to provision a Postgres database and it seems like really simple to get started with.

144
00:13:05.000 --> 00:13:10.000
So if you are already using DigitalOcean for something else and you just want a database that is more managed

145
00:13:10.000 --> 00:13:15.000
than provisioning everything yourself, that's probably a good alternative to use.

146
00:13:15.000 --> 00:13:21.000
And I remember you mentioned to me some time ago, Eoin, about something I think from IBM called Compose,

147
00:13:21.000 --> 00:13:24.000
which is probably in a similar space. Do you want to talk about that?

148
00:13:24.000 --> 00:13:29.000
It actually was since I've used Compose, but when I did use it, I was really pleased with how easy it was to get up and running.

149
00:13:29.000 --> 00:13:34.000
I was using it for MongoDB at the time. So it's also not target for hosting MongoDB.

150
00:13:34.000 --> 00:13:39.000
They also host lots of other databases like Postgres, MySQL.

151
00:13:39.000 --> 00:13:44.000
I think they also have things like Redis and Kafka. I'm not sure about Kafka, but they've got quite a few different options.

152
00:13:44.000 --> 00:13:50.000
So it's one to check out. They were acquired by IBM, like you say, so they're an IBM service now.

153
00:13:50.000 --> 00:13:54.000
And yeah, I just thought it was really seamless to get a MongoDB instance up and running.

154
00:13:54.000 --> 00:13:56.000
So it might be something else to look at.

155
00:13:56.000 --> 00:14:00.000
Maybe another one to mention finally on databases is Cloudflare.

156
00:14:00.000 --> 00:14:05.000
We might talk about Cloudflare seems to come up with new products very frequently these days.

157
00:14:05.000 --> 00:14:11.000
And one of the recent ones was they gave early access to their new relational database called D1.

158
00:14:11.000 --> 00:14:19.000
And I think the idea here is that if you're using a SQL, if you want SQL database and you're using Cloudflare workers,

159
00:14:19.000 --> 00:14:23.000
this is the solution that they are proposing. And it's an interesting one, right?

160
00:14:23.000 --> 00:14:28.000
It's a bit like Cloudflare workers. It was a different approach to serverless functions.

161
00:14:28.000 --> 00:14:35.000
This is a different approach to serverless databases as well, because it's actually built on top of SQLite as a database engine.

162
00:14:35.000 --> 00:14:38.000
So yeah, it would be very interesting to watch that. I haven't used it yet.

163
00:14:38.000 --> 00:14:41.000
I think it's still in early access, so you can sign up to the wait list.

164
00:14:41.000 --> 00:14:47.000
I'll wait to see what other people say first and take my guidance from them.

165
00:14:47.000 --> 00:14:51.000
So maybe slightly related, since we mentioned Kafka and Redis there a little bit,

166
00:14:51.000 --> 00:14:54.000
we covered this when we talked about event services.

167
00:14:54.000 --> 00:14:59.000
But you've also got things like Upstash for serverless Redis, which is really nice,

168
00:14:59.000 --> 00:15:04.000
and Confluent Cloud as well for Kafka and Upstash are doing Kafka as well.

169
00:15:04.000 --> 00:15:11.000
So those are definitely ones to check out if you're interested in Kafka and Redis.

170
00:15:11.000 --> 00:15:18.000
Since we were talking about databases, maybe it's a good idea to talk a little bit about the future direction of this.

171
00:15:18.000 --> 00:15:20.000
And I think this is something we've alluded to once or twice.

172
00:15:20.000 --> 00:15:27.000
We've got databases out there, but you still end up building what seems like the same crud code for every time you build an application.

173
00:15:27.000 --> 00:15:30.000
Everything seems to seem a little bit like a CMS at its heart.

174
00:15:30.000 --> 00:15:42.000
And I think we've mentioned things like Contentful, Firebase for headless CMSs, or even backend as a service.

175
00:15:42.000 --> 00:15:47.000
I always feel like this is the way the industry is going and should be going,

176
00:15:47.000 --> 00:15:51.000
but it's maybe not getting there quite as fast as I expected.

177
00:15:51.000 --> 00:15:59.000
I thought that maybe by 2022 more of us would be building systems on top of vendors that would provide just an API as a service,

178
00:15:59.000 --> 00:16:02.000
that we just give it our data, they give us an API back,

179
00:16:02.000 --> 00:16:11.000
and we don't have to worry too much about all the data access wiring and the query patterns and the optimization and the building indexes and normalization.

180
00:16:11.000 --> 00:16:14.000
But it still seems like we're still there, right?

181
00:16:14.000 --> 00:16:19.000
Especially if you adopt DynamoDB, it seems like people are actually getting deeper into the weeds now,

182
00:16:19.000 --> 00:16:24.000
and you have to gain a high level of proficiency with things like single table design to use it properly.

183
00:16:24.000 --> 00:16:30.000
But I think eventually we have to move away from that and start treating APIs as managed services,

184
00:16:30.000 --> 00:16:36.000
and maybe just build a definer schema and we get a GraphQL API and we don't know how it's stored anymore.

185
00:16:36.000 --> 00:16:39.000
What do you think? What are the alternatives out there? Is there anything that you can use today?

186
00:16:39.000 --> 00:16:45.000
I think you make a very good point.

187
00:16:45.000 --> 00:16:50.000
I agree that there was an explosion at some point a few years ago, I think about three or four years ago, of this kind of headless CMS.

188
00:16:50.000 --> 00:16:57.000
And there was a lot of buzz around the jump stack and building static websites off of data managed by somebody else,

189
00:16:57.000 --> 00:17:03.000
maybe in your team that is focused on content, and they will use this kind of CMS, static headless CMS UI,

190
00:17:03.000 --> 00:17:09.000
while then you have developers using a build process to take all this data and build new versions of the website.

191
00:17:09.000 --> 00:17:15.000
That seems to be the most likely future for building marketing web pages or product pages.

192
00:17:15.000 --> 00:17:23.000
I agree with you that it doesn't feel like it has been adopted as much as we would have expected a few years ago.

193
00:17:23.000 --> 00:17:27.000
That might change because I think there is still a big push for these companies,

194
00:17:27.000 --> 00:17:33.000
and I think the market is starting to realize that there are many advantages in keeping your front end very simple and statically rendered,

195
00:17:33.000 --> 00:17:38.000
while you still want to retain all the capabilities of managing data and changing things very quickly.

196
00:17:38.000 --> 00:17:42.000
So I am still convinced that this is a good solution going forward.

197
00:17:42.000 --> 00:17:48.000
But there is an interesting, I think, maybe it's an edge case, I'm not really sure,

198
00:17:48.000 --> 00:17:56.000
but I think there are many cases where you want to build just a small website for even sometimes even for just a limited amount of time.

199
00:17:56.000 --> 00:18:01.000
I'm thinking like, I don't know, event websites where, I don't know, for instance, like a conference,

200
00:18:01.000 --> 00:18:06.000
where you want to showcase that this event is happening and there will be, let's say, speakers and people attending.

201
00:18:06.000 --> 00:18:16.000
So there is some data to manage that and most likely want to use some sort of database to manage all the data as you keep building the whole event.

202
00:18:16.000 --> 00:18:24.000
But at the same time, the website is going to be very simple so you can take advantage of statically rendering it and also do something like Netlify or Cell and so on.

203
00:18:24.000 --> 00:18:30.000
And yeah, because most likely you're not going to have a very complex dataset,

204
00:18:30.000 --> 00:18:38.000
I have seen cases and actually built something myself very successfully where you can use very simple data alternatives that are not really meant to be databases,

205
00:18:38.000 --> 00:18:40.000
like, I don't know, a Google spreadsheet.

206
00:18:40.000 --> 00:18:44.000
And because they offer APIs, you can just ask everything there in one page.

207
00:18:44.000 --> 00:18:48.000
Most people would be comfortable enough with like inputting data there.

208
00:18:48.000 --> 00:18:58.000
And then you can easily build an API, even just at build time, like if you have a static website, at build time you can just fetch the data through the API and use that as a mini database.

209
00:18:58.000 --> 00:19:04.000
And if you don't like Google spreadsheet, because of course the APIs are not the most straightforward for this particular use case,

210
00:19:04.000 --> 00:19:09.000
I think Airtable does kind of a better job in giving you slightly better APIs.

211
00:19:09.000 --> 00:19:16.000
And also what I really like by Airtable is that when you open the document, you can really watch it in real time when new data comes in.

212
00:19:16.000 --> 00:19:23.000
Like let's say that you also have a read-write pattern from the front end, maybe, I don't know, you're asking people, do you want to attend this event?

213
00:19:23.000 --> 00:19:27.000
They can click a button and say yes and give you, I don't know, an email address or other information.

214
00:19:27.000 --> 00:19:33.000
You can actually see in real time the data appearing in Airtable and there is like a nice highlight effect.

215
00:19:33.000 --> 00:19:38.000
So it actually looks really nice then to use that as a back end to watch things changing.

216
00:19:38.000 --> 00:19:45.000
And recently I had somebody mention that Notion is starting to put out APIs as well and they seem to be fairly good.

217
00:19:45.000 --> 00:19:59.000
And because more and more people are using Notion as their own personal database for everything, I think that might become another alternative for simple cases to just use the data there, use the data through an API to build websites and experiences based on top of that data.

218
00:19:59.000 --> 00:20:08.000
I like that. Yeah. I mean, I think Airtable was kind of designed almost as like an easy to use database with a spreadsheet kind of layer on top, wasn't it?

219
00:20:08.000 --> 00:20:21.000
So I think it's a perfectly viable solution and it's good to see that going. I think maybe a few years ago there were a lot of companies building on top of Parse and Parse, it didn't end well because it ended up getting acquired and retired.

220
00:20:21.000 --> 00:20:28.000
So a lot of people were left kind of hanging there. So maybe that's one of the reasons why this kind of thing didn't take off as it should.

221
00:20:28.000 --> 00:20:33.000
People felt a little bit wounded. But I hope, I definitely hope there's options there in the future.

222
00:20:33.000 --> 00:20:45.000
Maybe if we take it back to basics, at the start you mentioned a couple of things about the idea of getting into AWS and all the things you need to understand if you just want to get an EC2 instance up and running.

223
00:20:45.000 --> 00:20:50.000
You can definitely do it quickly, but there's probably a lot you should be understanding, especially in terms of security and billing.

224
00:20:50.000 --> 00:20:57.000
It's probably worth mentioning, we've covered DigitalOcean already. They've got a user experience that helps you get up and running pretty quickly there.

225
00:20:57.000 --> 00:21:09.000
And there's other alternatives out there like Linode. And the idea with any of those specialists kind of providing simple instances, very well providers, is that you get more predictable cost generally.

226
00:21:09.000 --> 00:21:22.000
And it's very easy to see what you're getting, to understand it, and there's not a lot of complexity with it because it's just, they're essentially just providing those basic elements for you and they're not trying to do 200 other services along with it like AWS.

227
00:21:22.000 --> 00:21:30.000
Yeah, absolutely. I actually used Linode to host the website for my first startup. This was like seven years ago, I think now.

228
00:21:30.000 --> 00:21:37.000
And at the time I didn't really know much about, OK, how do you run your own servers? How do you host products on a server and put them online?

229
00:21:37.000 --> 00:21:42.000
I have to admit, I was quite scared about doing all of that. We were looking for like a sysadmin to help us.

230
00:21:42.000 --> 00:21:50.000
But because we were a startup with a small budget, we couldn't afford that. And eventually we were like, OK, let's just eat the bullet and try to do it ourselves and see where we end up.

231
00:21:50.000 --> 00:21:57.000
And I was actually very pleased. And this was already like seven years ago. So I assume now the experience is like much, much better.

232
00:21:57.000 --> 00:22:03.000
How easy it was to really understand what were the building blocks? How do you start to create an instance? How do you provision software on that instance?

233
00:22:03.000 --> 00:22:10.000
Then you have a very nice dashboard that allows you to see what are the performances that any bottleneck should increase something.

234
00:22:10.000 --> 00:22:16.000
Is disk read and writing doing OK? Is network doing OK? And I really enjoyed that experience.

235
00:22:16.000 --> 00:22:20.000
And I think at the end that the server was actually doing quite well, even in terms of performance.

236
00:22:20.000 --> 00:22:28.000
And it was relatively cheap because we did go with a kind of a medium instance and one instance was good enough for that particular startup.

237
00:22:28.000 --> 00:22:33.000
So it was very nice also for us started with a very small budget to have very predictable costs.

238
00:22:33.000 --> 00:22:42.000
I think we were paying something like fifty dollars a month. So that was giving us a lot of confidence that that solution would be good enough for us in that period of time.

239
00:22:42.000 --> 00:22:47.000
I think it's great to have that level of competition there. It's important that AWS doesn't completely run away with the market.

240
00:22:47.000 --> 00:22:57.000
And maybe on that topic, we do see some services aiming to come in and replace or give a viable alternative to specific AWS services and being API compatible.

241
00:22:57.000 --> 00:23:05.000
So one example of that is, again, Cloudflare, who introduced with a lot of fanfare, which is a replacement for S3.

242
00:23:05.000 --> 00:23:11.000
So it's an API compatible drop in replacement. And one of the standard features of that was its pricing.

243
00:23:11.000 --> 00:23:21.000
So the pricing, especially for data ingestion, sorry, for data extract, was vastly superior to Amazon's.

244
00:23:21.000 --> 00:23:27.000
Amazon actually followed up with a significant change to the free tier for S3.

245
00:23:27.000 --> 00:23:36.000
But they've also got workers. So as an alternative, perhaps, although they're slightly different to Lambda functions, you've got Cloudflare workers and they've got a database storage there as well.

246
00:23:36.000 --> 00:23:42.000
So workers KV, it's called, key value store. So it might be kind of an alternative to DynamoDB global tables.

247
00:23:42.000 --> 00:23:51.000
I think it's great to see that competition, especially if they're pushing AWS on price or features or performance, because it keeps them on their toes and it keeps everybody innovating, I hope.

248
00:23:51.000 --> 00:24:02.000
So what do you think there? Would you be keen to adopt or to instead of S3, do you think, or other services that are just drop in replacements for AWS services?

249
00:24:02.000 --> 00:24:12.000
Yeah, that's a good question. I have to admit that my experience with Cloudflare is kind of a little bit conflicted because there are things that I really like, like how easy it is to set up the CDN.

250
00:24:12.000 --> 00:24:26.000
For instance, when you're building a static website hosted in GitHub pages, you can literally set up the integration with Cloudflare if you want that extra level of CDN and more configuration in terms of DNS and so on in literally minutes.

251
00:24:26.000 --> 00:24:37.000
And it works really well. And most of the time it's going to be free because for most use cases, you don't even need to go and pay for the other, for the kind of the custom enterprise plan.

252
00:24:37.000 --> 00:24:43.000
But when it comes to these other new services, I found the last time I tried to use them was probably six months ago.

253
00:24:43.000 --> 00:24:49.000
So I hope now has improved. But I found that UI was a little bit confusing. It was a little bit complex to understand.

254
00:24:49.000 --> 00:24:58.000
Okay, what if I want to invite people to help me with this project? And then do I need to switch to from a personal plan to an enterprise plan?

255
00:24:58.000 --> 00:25:05.000
And then it seems that if you want to do that, you can. But there is no easy migration of your plan, or at least there wasn't.

256
00:25:05.000 --> 00:25:14.000
So I think they still need to get the whole developer experience in terms of transforming Cloudflare from a CDN company to a more like cloud offering company.

257
00:25:14.000 --> 00:25:21.000
I think there is work to do there, but definitely I love to see all the new products that they are pushing and to see that they are quite different from their territory.

258
00:25:21.000 --> 00:25:24.000
So they're trying to innovate in the market and also that they are competing on price.

259
00:25:24.000 --> 00:25:29.000
So I really love to see what is going to come out from Cloudflare in the near future.

260
00:25:29.000 --> 00:25:33.000
And I think it's going to become a more and more prominent competitor in the cloud space.

261
00:25:40.000 --> 00:25:54.000
If other people out there have seen third party services which they use instead of something we maybe you take for granted in AWS, we'd love to hear about it because we're definitely keen to explore other options, especially if it helps us achieve that kind of serverless vision where you're just offloading more and more effort to a cloud provider and just getting started in a very, very simple way.

262
00:25:54.000 --> 00:25:58.000
That was great to talk through those. We'd love to hear your ideas. Thanks for listening.

263
00:25:58.000 --> 00:26:05.000
Continue to listen to AWS Bites and follow us and subscribe to the YouTube channel and share the podcast with your friends and rate it and everything.

264
00:26:05.000 --> 00:26:10.000
We really appreciate having you here with us and we'll see you in the next episode. Goodbye.
