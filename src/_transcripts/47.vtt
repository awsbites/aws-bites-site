WEBVTT

1
00:00:00.000 --> 00:00:05.280
Hello everyone, today we want to give you a heads up for a new kind of episode that we are working on.

2
00:00:05.280 --> 00:00:09.520
So instead of giving you a pre-recorded episode, we are taking a short break for the summer,

3
00:00:09.520 --> 00:00:15.120
but then we will be back with actually coding live streams. Our plan is to go live on Wednesday,

4
00:00:15.120 --> 00:00:23.600
17th of August, and we're gonna be live on YouTube at 5pm Ireland or UK time, which should be 6pm

5
00:00:23.600 --> 00:00:32.560
standard time, 12 Eastern time, and 9am Pacific time. Hopefully all my time zone maths are correct.

6
00:00:32.560 --> 00:00:37.680
Our point of reference is definitely 5pm Ireland, UK, if you want to double check all these times.

7
00:00:37.680 --> 00:00:42.080
So basically in this live episode, what we want to do is we are going to start to build

8
00:00:42.080 --> 00:00:45.520
an application, and this of course is an application running on AWS,

9
00:00:45.520 --> 00:00:49.760
and over the course of the series we actually want to build a file transfer service,

10
00:00:49.760 --> 00:00:54.480
something that looks a little bit like WeTransfer or DropboxTransfer if you ever use those kind of

11
00:00:54.480 --> 00:00:59.120
services. So I suppose the main question is why are we doing this?

12
00:00:59.120 --> 00:01:03.600
Right, well we get lots of feedback from viewers and listeners and people who just really like the real world use cases.

13
00:01:03.600 --> 00:01:08.960
So the one you mentioned about migrating an application to AWS was really popular. We've

14
00:01:08.960 --> 00:01:14.160
also covered, like we spent 50 episodes covering all the different AWS services and how they work.

15
00:01:14.160 --> 00:01:17.920
It's probably time to start putting these into practice and showing people really how it works

16
00:01:17.920 --> 00:01:23.600
when you've got hands on keyboard. And I suppose it's also good just to build the services you use,

17
00:01:23.600 --> 00:01:28.400
like file transfer services, because you understand exactly what the idea is, and you can learn a lot

18
00:01:28.400 --> 00:01:34.560
like trying to understand how you might build that from scratch. So what would it look like?

19
00:01:39.040 --> 00:01:42.960
Sure, so just to put things into context, we are not going to try to build like a fully fledged Dropbox with file syncing and stuff like that. We're going to keep it a little bit more

20
00:01:42.960 --> 00:01:46.880
minimalistic, but still we want to build something that is going to be useful for people and you can

21
00:01:46.880 --> 00:01:52.880
use it in different contexts. So the idea is that it's kind of a very simple file sharing product.

22
00:01:52.880 --> 00:01:57.840
So you just want to upload one file and then have a URL that you can share with other people for

23
00:01:57.840 --> 00:02:02.640
them to download that particular file. And if you are thinking of different kind of examples or use

24
00:02:02.640 --> 00:02:07.760
cases, for instance, when we record these episodes, we always need to share video file and audio files

25
00:02:07.760 --> 00:02:12.320
between ourselves before we do the final production. So imagine that we will be using a

26
00:02:12.320 --> 00:02:16.960
service like this to just upload this video and audio file somewhere, and then we have an easy link

27
00:02:16.960 --> 00:02:22.000
that we can easily share between ourselves. Similarly, you might be thinking, okay, I need

28
00:02:22.000 --> 00:02:27.600
to send a bunch of receipts to my accountant. I have this big zip file, but it's too big to send

29
00:02:27.600 --> 00:02:31.760
it in an email. What do I do? My accountant probably doesn't have Dropbox, so let's send

30
00:02:31.760 --> 00:02:37.360
them a URL. Similarly, and this is actually a very common use case I had many, many times,

31
00:02:37.360 --> 00:02:41.200
and you probably can relate to that. You have multiple devices and you just want to transfer

32
00:02:41.200 --> 00:02:46.400
a big file between them. Every time it's like, how do I do that? If you have a service like this,

33
00:02:46.400 --> 00:02:50.400
you can easily just upload on one side and download from the URL on the other side.

34
00:02:51.280 --> 00:02:57.280
And at this point, why not to use Dropbox? Well, there might be many reasons. Maybe you just don't

35
00:02:57.280 --> 00:03:03.280
want to pay for Dropbox, or maybe you want to be in control of your own data and prefer to avoid

36
00:03:03.280 --> 00:03:07.360
third-party services and have something where you really understand what's going on, how the data

37
00:03:07.360 --> 00:03:12.400
is actually being processed and used. Or maybe this is actually a realistic use case I've seen

38
00:03:12.400 --> 00:03:18.480
in many offices that the network is actually blocking services like WeTransfer or Dropbox.

39
00:03:18.480 --> 00:03:23.920
In that case, you literally cannot use those services. One final reason that we can find is

40
00:03:23.920 --> 00:03:28.160
maybe you just want to use your own custom URL either for vanity or because you're actually

41
00:03:28.160 --> 00:03:33.760
building a business and it might make sense to have a little bit more trust by giving URLs that

42
00:03:33.760 --> 00:03:39.520
represent your company or your product. So I suppose, yeah, just to finish off,

43
00:03:39.520 --> 00:03:44.720
we are building this product mostly for ourselves to have fun, but in reality, a feature like this,

44
00:03:44.720 --> 00:03:49.040
it's something that could be integrated in every other product. Imagine you are building,

45
00:03:49.040 --> 00:03:52.960
I don't know, a chat application and you need people to be able to exchange files in a chat

46
00:03:52.960 --> 00:03:59.120
session, or you have just a file management system integrated in a CMS or other kinds of products.

47
00:03:59.120 --> 00:04:03.600
So it is actually a very, very common use case to having to deal with uploads and downloads in

48
00:04:03.600 --> 00:04:08.320
all sorts of SaaS products. So I think by doing this exercise, we're going to, well, first of all,

49
00:04:08.320 --> 00:04:13.360
learn ourself how to do this, but hopefully also teach and share with other people this learning

50
00:04:13.360 --> 00:04:16.880
so that you can go off and build the same functionality in other applications.

51
00:04:18.080 --> 00:04:21.040
So do you want to describe, Eoin, what's the plan?

52
00:04:22.320 --> 00:04:27.040


53
00:04:27.040 --> 00:04:33.200
The starting point, I think what we can do as the MVP for our file sharing would be, imagine that you call it an API that we deploy onto AWS and it gives you an upload URL and a

54
00:04:33.200 --> 00:04:37.920
download URL. So you upload the file with your upload URL, and then you share the download URL

55
00:04:37.920 --> 00:04:42.720
with your friend or with your other device. And that's enough, right? For our MVP, that should

56
00:04:42.720 --> 00:04:47.120
work. It might be a little bit rough around the edges in terms of user experience, but

57
00:04:47.120 --> 00:04:52.000
fundamentally it achieves the goal. So for that, we could use things like S3, of course, maybe

58
00:04:52.000 --> 00:04:59.840
signed URLs integrated with API gateway, a bit of Lambda, a sprinkling of IAM and put it all

59
00:04:59.840 --> 00:05:08.240
together with Node.js Lambda functions, serverless framework. And since it's an MVP, you can just use

60
00:05:08.240 --> 00:05:13.360
curl to do the uploading and downloading. But that's the first MVP. And I think that would

61
00:05:13.360 --> 00:05:19.040
be the core of it from that point. Okay, you mentioned vanity URLs. So maybe the next thing

62
00:05:19.040 --> 00:05:26.960
would be to register a domain name, integrate it so that we have much nicer links that are branded

63
00:05:26.960 --> 00:05:33.120
and we could use Route 53 and certificate manager to help us achieve that. Maybe we have to pick a

64
00:05:33.120 --> 00:05:36.480
name for this product. So maybe people can let us know over the next couple of weeks, what

65
00:05:37.040 --> 00:05:42.720
funky name we could use for our WeTransfer clone. We can get the domain registered in time for the

66
00:05:42.720 --> 00:05:49.680
first episode. Beyond that, I guess we could start building a bit of a front end, right? Maybe not a

67
00:05:49.680 --> 00:05:55.280
React front end. How about a command line interface, something like an NPM CLI? What do you think?

68
00:05:55.280 --> 00:06:01.440


69
00:06:02.160 --> 00:06:07.440
Yeah, I suppose that the simplest CLI I can think of is literally you just call the command name, let's call it file upload for now until we have an actual name. And you just say file upload

70
00:06:07.440 --> 00:06:12.400
this part. And then you just see the progress bar and eventually you see, okay, this is the URL for

71
00:06:12.400 --> 00:06:18.720
your file. This is probably the simplest thing I could think of in terms of CLI. And of course,

72
00:06:18.720 --> 00:06:22.960
we can make it nicer. We can have, I don't know, spinning progress bar and all that kind of stuff.

73
00:06:22.960 --> 00:06:27.920
But the very minimum is that you just easily are able to upload a file by just giving a path to

74
00:06:27.920 --> 00:06:35.200
the CLI. And we'll probably gonna do all of that with Node.js again, because it's the easiest for

75
00:06:35.200 --> 00:06:39.920
us. So yeah, it's probably gonna be like a package that you can just NPM install global and then you

76
00:06:39.920 --> 00:06:47.840
can use it from any bash terminal. After that, I think that there is a lot of room for different

77
00:06:47.840 --> 00:06:53.920
kinds of improvements. We can probably also listen to feedback and try to understand what are things

78
00:06:53.920 --> 00:06:58.400
that people are mostly interested in. But the ideas that we came up with are, for instance,

79
00:06:58.400 --> 00:07:03.440
showing how we could build a deployment pipeline. We also talk a lot about using GitHub Actions and

80
00:07:03.440 --> 00:07:08.960
OIDC providers. So that can be another excuse to showcase how we could actually deploy this product

81
00:07:08.960 --> 00:07:15.120
from a GitHub Action using the OIDC integration that we have been talking about. We could also

82
00:07:15.120 --> 00:07:19.920
think about securing this entire API, because up to this point, we haven't mentioned any level of

83
00:07:19.920 --> 00:07:25.760
security. As long as you know the host, you can just upload and download. But we might want to

84
00:07:25.760 --> 00:07:30.800
limit that. Maybe we can... The easiest thing we could do is just use API keys in API Gateway,

85
00:07:30.800 --> 00:07:36.000
but we might end up exploring other options as well. Maybe Cognito or something a little bit more

86
00:07:36.000 --> 00:07:41.120
sophisticated. And then another topic that we were thinking about is probably you don't want these

87
00:07:41.120 --> 00:07:45.520
files to live in a mystery packet forever. Most likely, if you are using this kind of service,

88
00:07:45.520 --> 00:07:51.360
you are transferring big files, you probably don't load them only once and then not using them again.

89
00:07:51.360 --> 00:07:56.400
So it probably makes sense to make this file somehow disposable. Maybe make sure they get

90
00:07:56.400 --> 00:08:02.480
deleted automatically after a week, a day, or whatever is the deadline that makes sense for

91
00:08:02.480 --> 00:08:07.360
the kind of application. We might discuss a little bit about quota, limits, pricing,

92
00:08:07.360 --> 00:08:12.080
and things like that. So definitely let us know if you already have specific topics in mind that

93
00:08:12.080 --> 00:08:16.640
you would like us to actually explore in a kind of live coding fashion, because that is going to

94
00:08:16.640 --> 00:08:24.320
drive us in selecting what can we do next after this. Yep. That's it. That sounds good.

95
00:08:24.320 --> 00:08:28.160
Maybe people want to see a bit more front end. It might be nice if you share the link that it gives people

96
00:08:28.160 --> 00:08:32.640
your download page and they have an option with what to do with the content. You can even preview

97
00:08:32.640 --> 00:08:38.400
the content in some way. There's a lot of different directions we could take this. And I'm

98
00:08:38.400 --> 00:08:44.080
really interested to hear what people want to see. So yeah, maybe in terms of feedback, since we're

99
00:08:44.080 --> 00:08:49.360
looking for it, one thing is for podcast listeners, we've got a question for you, because we know we

100
00:08:49.360 --> 00:08:55.040
have a lot of people who listen to AWS Bites in podcast audio only format. And this presents a

101
00:08:55.040 --> 00:09:00.400
bit of a challenge when you're doing a live coding demo, live build. And so I sometimes listen to

102
00:09:00.400 --> 00:09:06.640
YouTube videos of that kind of thing when I'm in the bus or driving. But does it make sense for

103
00:09:06.640 --> 00:09:12.080
you? Do you want us to publish these streams as audio only podcasts? Let us know. We're happy to

104
00:09:12.080 --> 00:09:16.480
do so if people want to hear it. If people think it's annoying and pointless, we're happy to skip

105
00:09:16.480 --> 00:09:21.680
them as well. We're probably going to do a summary episode at the end anyway, where we talk about all

106
00:09:21.680 --> 00:09:27.200
the things we learned. So just let us know what you think. We're happy to be guided by you.

107
00:09:27.200 --> 00:09:32.000
So we're really looking forward to pairing with you all live on this build. Make sure you're

108
00:09:32.000 --> 00:09:36.000
subscribed to the YouTube channel so you're going to be notified when we go live on Wednesday,

109
00:09:36.000 --> 00:09:57.600
the 17th of August. Until then, goodbye.
