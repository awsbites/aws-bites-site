WEBVTT

1
00:00:00.000 --> 00:00:14.160
Hello everyone and welcome to another episode of AWS Bites, the show where we discuss interesting

2
00:00:14.160 --> 00:00:20.220
AWS questions in about five minutes. My name is Luciano Mamineo and today I am with Eoin

3
00:00:20.220 --> 00:00:26.340
Shanaghi and the question of the day, it's a very interesting one, is what are your favorite

4
00:00:26.340 --> 00:00:34.120
AWS services? So Eoin, if you should pick like your top three favorite services, what would

5
00:00:34.120 --> 00:00:35.120
you pick?

6
00:00:35.120 --> 00:00:42.600
Okay, so it's not an easy decision, but I've given this one some thought.

7
00:00:42.600 --> 00:00:50.280
For number three, I'm going to go with EventBridge and EventBridge is reasonably new. It came, it kind of spawned

8
00:00:50.280 --> 00:00:55.840
out of a rebranded version of CloudWatch Events, but you got a lot of options for messaging

9
00:00:55.840 --> 00:01:03.260
on AWS, SQS, SNS, they're all really good services, Kinesis also for streaming. I could

10
00:01:03.260 --> 00:01:07.240
have gone with either of those really, but EventBridge for me is really good because

11
00:01:07.240 --> 00:01:12.320
it's like the most serverless of services almost. There's so little to configure, you

12
00:01:12.320 --> 00:01:16.600
can start publishing messages to it without provisioning anything and then you just create

13
00:01:16.600 --> 00:01:21.800
rules with nice pattern matching if you want to consume these events. So that's why I've

14
00:01:21.800 --> 00:01:26.320
gone for EventBridge and I think it's a really popular service and gaining more and more

15
00:01:26.320 --> 00:01:27.840
traction.

16
00:01:27.840 --> 00:01:31.720
Number two, I'm going to go for Lambda. A lot of people might've expected I'd go for

17
00:01:31.720 --> 00:01:38.520
it as number one, but I think we're going to see a lot more improvements to Lambda in

18
00:01:38.520 --> 00:01:44.120
the coming years. It's already quite different than when it first launched. It really threw

19
00:01:44.120 --> 00:01:50.400
out the rule book for how you do compute in the cloud and it's so scalable. It has so

20
00:01:50.400 --> 00:01:54.280
many integrations into other services and because of how it runs, it's really easy to

21
00:01:54.280 --> 00:02:00.440
monitor secure things and individual function level and scale things at a really fine grain

22
00:02:00.440 --> 00:02:06.360
level. It's got an amazing number of features these days and I think it will really take

23
00:02:06.360 --> 00:02:13.920
over compute into the future, especially if the pricing model changes to support longer

24
00:02:13.920 --> 00:02:18.960
kind of more long running computational workloads. So that's number two.

25
00:02:18.960 --> 00:02:25.400
And then for my number one, probably not the most popular choice, but I think it's fundamental

26
00:02:25.400 --> 00:02:33.240
if you're doing AWS in any really serious way and that's cloud formation. Continuous

27
00:02:33.240 --> 00:02:38.080
deployment in the cloud is a must have and how you manage your deployments and your cloud

28
00:02:38.080 --> 00:02:44.200
resources is really critical to how that works. So that means the features that cloud formation

29
00:02:44.200 --> 00:02:49.400
gives you that other options don't give you like the ability to manage a stack as kind

30
00:02:49.400 --> 00:02:54.880
of almost an atomic unit. You've got a collection of resources that AWS is going to deploy for

31
00:02:54.880 --> 00:03:00.480
you based on added character template. Then you've got stack sets so you can see the different

32
00:03:00.480 --> 00:03:05.400
change sets so you can see you can break things down into logical structures. You can see

33
00:03:05.400 --> 00:03:12.000
how things will change before you deploy. It's very easy to underestimate the value

34
00:03:12.000 --> 00:03:16.160
that cloud formation can bring to the table and it really gives you a lot of confidence

35
00:03:16.160 --> 00:03:22.600
in your deployments. So those are my top three. What about you, Luciano? Are you going to

36
00:03:22.600 --> 00:03:27.060
go for three completely different ones?

37
00:03:27.060 --> 00:03:32.200
Yeah, I'll try to differentiate, but I'm glad that you mentioned cloud formation because it's an interesting one for me. I used to,

38
00:03:32.200 --> 00:03:38.280
I don't want to say hate, but I'm going to say dislike cloud formation and I rather prefer

39
00:03:38.280 --> 00:03:43.880
to use Terraform every chance I got. And I think it's just because of the syntax. Like

40
00:03:43.880 --> 00:03:50.280
I found Terraform to be much more user-friendly and simple to understand and write. So in

41
00:03:50.280 --> 00:03:55.160
the past I did use a lot of Terraform. Although I can see the value in cloud formation because

42
00:03:55.160 --> 00:04:00.720
once you try to deploy with cloud formation, everything is done by AWS. Like you don't

43
00:04:00.720 --> 00:04:04.920
need to manage your own secrets, your own state, which is something you have to take

44
00:04:04.920 --> 00:04:09.780
care if you use Terraform. So I'm going to pick CDK, even though it's

45
00:04:09.780 --> 00:04:15.720
not really a service, it's more of a tool that you get from AWS to use cloud formation.

46
00:04:15.720 --> 00:04:21.360
I'm cheating a little bit, but please allow me that because CDK, I found it to be like

47
00:04:21.360 --> 00:04:26.920
the nice middle ground. Like you still get a very good experience in writing your infrastructure

48
00:04:26.920 --> 00:04:33.120
as code, probably even better than Terraform, but again, take it as an opinion. But at the

49
00:04:33.120 --> 00:04:38.180
same time, you get all the advantages of cloud formation because CDK will generate cloud

50
00:04:38.180 --> 00:04:43.800
formation code for you. So at the end of the day, you also get all the benefits of that.

51
00:04:43.800 --> 00:04:50.880
So CDK, probably one of my three favorite services that I want to mention. The other

52
00:04:50.880 --> 00:04:56.060
one is S3, which probably a little bit obvious, but the reason why I wanted to mention it

53
00:04:56.060 --> 00:05:02.240
is because I have seen that it's kind of the entry point for many, many companies to AWS

54
00:05:02.240 --> 00:05:09.360
and the cloud in general. It might seem surprising today that so many companies start to think

55
00:05:09.360 --> 00:05:13.720
about the cloud when they think, okay, what are we going to do with all these files? Like

56
00:05:13.720 --> 00:05:19.060
we don't trust our disks and our backups anymore. What do we do? How do we make them highly

57
00:05:19.060 --> 00:05:25.040
available and resilient? And S3 then becomes kind of the gateway to the cloud for them.

58
00:05:25.040 --> 00:05:29.660
So definitely want to give it a shout out, even though it's, I think one of the oldest

59
00:05:29.660 --> 00:05:36.480
services together with EC2 and has been there for a while. So maybe not unused, but still

60
00:05:36.480 --> 00:05:43.080
very, very well-worked service to mention. And the last one I want to mention is ECS

61
00:05:43.080 --> 00:05:48.720
and Fargate, which I will depict Lambda if you didn't do that already, but I've seen

62
00:05:48.720 --> 00:05:55.520
that ECS and Fargate are very good replacement for Lambda, especially in cases where you

63
00:05:55.520 --> 00:06:00.480
have an application that has been built for a number of years, maybe even before the cloud,

64
00:06:00.480 --> 00:06:04.600
and you are trying to figure out, okay, what is the fastest and easiest way for me to bring

65
00:06:04.600 --> 00:06:09.360
that application to the cloud? And if you know a little bit of Docker and you can write

66
00:06:09.360 --> 00:06:15.760
a container for that application, ECS and Fargate will allow you to rather quickly deploy

67
00:06:15.760 --> 00:06:21.640
all of that in the cloud. So another thing that kind of goes in tandem with my first

68
00:06:21.640 --> 00:06:27.680
choice CDK is that I didn't like as much ECS and Fargate before CDK, because there is,

69
00:06:27.680 --> 00:06:33.600
again, a lot of configuration you need to write, but with CDK, you get this library

70
00:06:33.600 --> 00:06:39.760
of higher level constructs, which are called ECS patterns, and those will make your life

71
00:06:39.760 --> 00:06:45.480
much, much simpler. Like you really need to write a very minimal amount of configuration.

72
00:06:45.480 --> 00:06:49.520
Of course, there are a lot of assumptions that are baked in in these patterns, but for

73
00:06:49.520 --> 00:06:56.920
most use cases, you'll be able to ship things to production very quickly. So those are my

74
00:06:56.920 --> 00:07:02.760
three picks. Is there anything you think is also worth a mention? Maybe let's do some

75
00:07:02.760 --> 00:07:04.400
honorable mentions.

76
00:07:04.400 --> 00:07:13.180
Yeah, what didn't quite make the list? Yeah, I'm with you on S3 for sure is just outstanding

77
00:07:13.180 --> 00:07:18.720
in what it can deliver. Yeah, I think one of the honorable mentions I'd have to mention

78
00:07:18.720 --> 00:07:23.120
is CloudWatch, and this is another one that kind of flies under the radar quite a lot

79
00:07:23.120 --> 00:07:29.080
because it's been there for a long time, but there's actually a constantly growing number

80
00:07:29.080 --> 00:07:33.960
of components to CloudWatch. And over the last couple of years, I've found myself using

81
00:07:33.960 --> 00:07:41.660
CloudWatch logs insights, like to do powerful distributed log querying really frequently

82
00:07:41.660 --> 00:07:47.160
without having to go to third parties for decentralized logging solutions. But we also

83
00:07:47.160 --> 00:07:53.000
use metrics and alarms. I think CloudWatch can be really powerful for creating your own

84
00:07:53.000 --> 00:07:59.240
customer application metrics and alarms as well. And with the right setup, you can go

85
00:07:59.240 --> 00:08:04.400
really far with it. And we should probably also mention the open source project we've

86
00:08:04.400 --> 00:08:09.340
been working on called SlickWatch, which allows you to create a lot of those resources automatically

87
00:08:09.340 --> 00:08:15.400
for your applications. So I'd give CloudWatch as my honorable mention. What about you, Luciano?

88
00:08:15.400 --> 00:08:18.640
Do you have another one? Yeah, that's a good one.

89
00:08:18.640 --> 00:08:24.800
I'm going to just mention really quickly IAM because it's one of those unescapable services that you need

90
00:08:24.800 --> 00:08:31.400
to learn. Again, not the easiest. Initially, I had a little bit of love and hate relationship

91
00:08:31.400 --> 00:08:36.400
with it, but once you understand the building blocks and how well integrated it is with

92
00:08:36.400 --> 00:08:41.920
every single service, then yeah, you really get the value out of it and it's something

93
00:08:41.920 --> 00:08:47.080
you really need to use, you cannot avoid. So definitely a good service. If you haven't

94
00:08:47.080 --> 00:08:52.200
paid too much attention to it, I would encourage you to have a second look and try to understand

95
00:08:52.200 --> 00:08:58.400
better all the different concepts around it. And with that, I think we are at time for

96
00:08:58.400 --> 00:09:03.680
today. So thank you very much for following us. I'm really curious to know what are your

97
00:09:03.680 --> 00:09:08.880
favorite services. So if you want to leave us a comment or connect with us on Twitter,

98
00:09:08.880 --> 00:09:15.240
please send us your top three and we'll probably make some statistics with that. That will

99
00:09:15.240 --> 00:09:20.440
be an interesting experiment. So thank you very much. Make sure to follow us and give

100
00:09:20.440 --> 00:09:26.560
us a like, thumbs up, follow us in your favorite podcast software and we'll see you at the

101
00:09:26.560 --> 00:09:42.520
next episode. Bye.
