WEBVTT

1
00:00:00.000 --> 00:00:03.000
AWS Step Functions are all the rage right now.

2
00:00:03.000 --> 00:00:05.000
The visual editor is getting better and better,

3
00:00:05.000 --> 00:00:07.000
and there are always new capabilities,

4
00:00:07.000 --> 00:00:09.000
like the recently introduced intrinsic functions.

5
00:00:09.000 --> 00:00:11.000
Step Functions are becoming more and more powerful,

6
00:00:11.000 --> 00:00:14.000
and the amount of code we need to write to define them

7
00:00:14.000 --> 00:00:16.000
is decreasing more and more.

8
00:00:16.000 --> 00:00:20.000
So does this make AWS Step Functions a low-code solution?

9
00:00:20.000 --> 00:00:21.000
Let's find out.

10
00:00:21.000 --> 00:00:23.000
My name is Luciano, and today I'm joined by Eoin,

11
00:00:23.000 --> 00:00:33.000
and this is a new episode of AWS Bites podcast.

12
00:00:33.000 --> 00:00:38.000
So let's maybe start by trying to define what is a Step Function.

13
00:00:38.000 --> 00:00:40.000


14
00:00:40.000 --> 00:00:43.000
AWS used to define Step Functions as like a serverless workflow orchestration tool.

15
00:00:43.000 --> 00:00:45.000
Now their more generic description

16
00:00:45.000 --> 00:00:48.000
is a visual workflow for distributed applications.

17
00:00:48.000 --> 00:00:50.000
So Step Functions are basically a service

18
00:00:50.000 --> 00:00:52.000
that allows you to build state machines.

19
00:00:52.000 --> 00:00:55.000
So you define states and transitions between those states,

20
00:00:55.000 --> 00:00:59.000
and you execute them in a managed serverless environment.

21
00:00:59.000 --> 00:01:00.000
So there's two types.

22
00:01:00.000 --> 00:01:02.000
You've got the standard workflows

23
00:01:02.000 --> 00:01:04.000
that can run for up to one year,

24
00:01:04.000 --> 00:01:05.000
and then you've got the express ones,

25
00:01:05.000 --> 00:01:07.000
which run up to five minutes.

26
00:01:07.000 --> 00:01:11.000
And now you have this visual editor called Workflow Studio,

27
00:01:11.000 --> 00:01:13.000
and that allows you to do all that stuff

28
00:01:13.000 --> 00:01:16.000
using a drag-and-drop visual interface.

29
00:01:16.000 --> 00:01:20.000
We did have an intro to Step Functions back in episode 7.

30
00:01:20.000 --> 00:01:21.000
The link will be in the show notes,

31
00:01:21.000 --> 00:01:23.000
and we've got various examples there

32
00:01:23.000 --> 00:01:26.000
and cover the limitations, pricing model,

33
00:01:26.000 --> 00:01:29.000
the differences between standard and express workflows, et cetera.

34
00:01:29.000 --> 00:01:31.000
Now you mentioned low-code.

35
00:01:31.000 --> 00:01:33.000
So what is a low-code tool?

36
00:01:33.000 --> 00:01:36.000


37
00:01:36.000 --> 00:01:38.000
Yeah, so I'm going to try to describe it the best way I can, but I think it's still a terminology

38
00:01:38.000 --> 00:01:40.000
that gets used in different ways.

39
00:01:40.000 --> 00:01:44.000
So I don't know if my description actually matches

40
00:01:44.000 --> 00:01:46.000
other descriptions you can find online.

41
00:01:46.000 --> 00:01:48.000
But to me, a low-code solution is basically a tool

42
00:01:48.000 --> 00:01:51.000
that should allow people to build

43
00:01:51.000 --> 00:01:54.000
relatively complicated business workflows

44
00:01:54.000 --> 00:01:56.000
with as little code as possible.

45
00:01:56.000 --> 00:01:58.000
And that generally means that you need to have

46
00:01:58.000 --> 00:01:59.000
a visual designer of some sort,

47
00:01:59.000 --> 00:02:04.000
so something that allows you to drag-and-drop blocks and connectors.

48
00:02:04.000 --> 00:02:06.000
You probably want to have predefined integrations

49
00:02:06.000 --> 00:02:09.000
with, I don't know, external services

50
00:02:09.000 --> 00:02:12.000
and other kind of processing, building blocks, for instance.

51
00:02:12.000 --> 00:02:15.000
I don't know, blocks that allow you to do control flow,

52
00:02:15.000 --> 00:02:19.000
like repeat certain operations or have branches,

53
00:02:19.000 --> 00:02:22.000
like if something, do this, otherwise do that,

54
00:02:22.000 --> 00:02:24.000
or maybe run things in parallel.

55
00:02:24.000 --> 00:02:26.000
So basically, you want to build business logic

56
00:02:26.000 --> 00:02:30.000
with different ramifications by using a very visual tool

57
00:02:30.000 --> 00:02:33.000
that doesn't require you to write any code

58
00:02:33.000 --> 00:02:36.000
or at least as less code as possible.

59
00:02:36.000 --> 00:02:39.000
And when you actually need to do something very custom

60
00:02:39.000 --> 00:02:42.000
that is not built-in in the tool that you are using,

61
00:02:42.000 --> 00:02:44.000
generally, there needs to be some kind of extension,

62
00:02:44.000 --> 00:02:46.000
open block, where you can just write code

63
00:02:46.000 --> 00:02:49.000
and implement that part of business logic yourself.

64
00:02:49.000 --> 00:02:53.000
So maybe it's worth discussing some use cases.

65
00:02:53.000 --> 00:02:56.000
I don't know if you have anything in mind, Eoin.

66
00:02:57.000 --> 00:03:01.000


67
00:03:01.000 --> 00:03:04.000
Yeah, one example, let's say you have HR-type applications, so you're trying to use workflow automation

68
00:03:04.000 --> 00:03:05.000
to manage your hiring process.

69
00:03:05.000 --> 00:03:08.000
So the process there would be you collect the results

70
00:03:08.000 --> 00:03:10.000
of different candidate applications

71
00:03:10.000 --> 00:03:12.000
and maybe an initial screening process.

72
00:03:12.000 --> 00:03:14.000
You store those applicants somewhere

73
00:03:14.000 --> 00:03:15.000
and then you might have screeners.

74
00:03:15.000 --> 00:03:17.000
If they all liked the candidate,

75
00:03:17.000 --> 00:03:19.000
you would notify the hiring manager,

76
00:03:19.000 --> 00:03:21.000
send the candidate a letter.

77
00:03:21.000 --> 00:03:23.000
If you don't want to proceed,

78
00:03:23.000 --> 00:03:25.000
you might send the candidate a thank you message

79
00:03:25.000 --> 00:03:29.000
and a reason, and you can make this more complex.

80
00:03:29.000 --> 00:03:33.000
So you could also say, integrate with the calendars

81
00:03:33.000 --> 00:03:37.000
of the hiring manager to suggest times to have a conversation.

82
00:03:37.000 --> 00:03:39.000
You could integrate with LinkedIn and other platforms

83
00:03:39.000 --> 00:03:41.000
to fetch information about the candidate

84
00:03:41.000 --> 00:03:43.000
and prepare a report for interviewers.

85
00:03:43.000 --> 00:03:45.000
You could even integrate with some AI service

86
00:03:45.000 --> 00:03:47.000
to summarize the candidate CV.

87
00:03:47.000 --> 00:03:50.000
Maybe you might proceed with caution on that part.

88
00:03:50.000 --> 00:03:53.000
But in general, you get the idea, right?

89
00:03:53.000 --> 00:03:56.000
It's for this type of workflow involving manual steps,

90
00:03:56.000 --> 00:03:58.000
some of which might have a significant delay.

91
00:03:58.000 --> 00:04:02.000
And we mentioned step functions can run for up to a year.

92
00:04:02.000 --> 00:04:05.000
And then obviously at the end, like if the candidate is hired,

93
00:04:05.000 --> 00:04:08.000
that could be a manual intervention, of course.

94
00:04:08.000 --> 00:04:11.000
You would send the candidate a welcome back.

95
00:04:11.000 --> 00:04:13.000
So that's one example.

96
00:04:13.000 --> 00:04:16.000
It would have multiple phases, branches, conditions,

97
00:04:16.000 --> 00:04:18.000
all of that good stuff.

98
00:04:18.000 --> 00:04:20.000
What else can you think of?

99
00:04:20.000 --> 00:04:24.000
Is there anything that you'd maybe point to from work you've done

100
00:04:24.000 --> 00:04:26.000
or applications where you have applied step functions?

101
00:04:26.000 --> 00:04:29.000


102
00:04:29.000 --> 00:04:31.000
Yeah, so there is actually a small side project that I've been running for a few years at this point

103
00:04:31.000 --> 00:04:34.000
called Full Stack Bulletin, which is basically a newsletter

104
00:04:34.000 --> 00:04:36.000
that I send every week, and it covers topics

105
00:04:36.000 --> 00:04:38.000
related to the full stack world.

106
00:04:38.000 --> 00:04:41.000
And right now it's implemented like as a mega Lambda.

107
00:04:41.000 --> 00:04:43.000
Like there is one Lambda that does everything.

108
00:04:43.000 --> 00:04:47.000
But this is because I wrote this, I don't know, like four years ago.

109
00:04:47.000 --> 00:04:49.000
But right now, looking at this particular example,

110
00:04:49.000 --> 00:04:51.000
I'm thinking that redoing it as a step function

111
00:04:51.000 --> 00:04:55.000
will basically allow me to reduce the amount of code

112
00:04:55.000 --> 00:04:58.000
and probably make the entire process much nicer to visualize

113
00:04:58.000 --> 00:05:00.000
and understand when something goes wrong.

114
00:05:00.000 --> 00:05:02.000
And basically just to describe the process is basically

115
00:05:02.000 --> 00:05:05.000
this newsletter is a weekly one, and it comes out every Monday.

116
00:05:05.000 --> 00:05:09.000
But I want to have a preview that is built every Friday,

117
00:05:09.000 --> 00:05:11.000
so there is a little bit of time to manually adjust

118
00:05:11.000 --> 00:05:14.000
whatever might not be perfectly correct

119
00:05:14.000 --> 00:05:16.000
or maybe to add a little bit of personal touch.

120
00:05:16.000 --> 00:05:19.000
The idea is that it is as much automated as possible,

121
00:05:19.000 --> 00:05:22.000
so every week, every Friday, the workflow starts.

122
00:05:22.000 --> 00:05:24.000
And what it does, it looks into Twitter

123
00:05:24.000 --> 00:05:27.000
for the links that have been tweeted for the last week

124
00:05:27.000 --> 00:05:29.000
in the Full Stack Bulletin account.

125
00:05:29.000 --> 00:05:33.000
And it basically uses an external API to try to rank all of them,

126
00:05:33.000 --> 00:05:36.000
all the external links, so all articles that are related

127
00:05:36.000 --> 00:05:38.000
to the world of full stack web development,

128
00:05:38.000 --> 00:05:40.000
and it selects the top seven.

129
00:05:40.000 --> 00:05:43.000
Then in parallel, this is like the next phase of the workflow,

130
00:05:43.000 --> 00:05:46.000
it just goes off and crawls all the seven links,

131
00:05:46.000 --> 00:05:48.000
and it tries to extract information about every link,

132
00:05:48.000 --> 00:05:51.000
so the title, a summary, a preview picture.

133
00:05:51.000 --> 00:05:55.000
And also in parallel, other elements that will be part of the email

134
00:05:55.000 --> 00:05:59.000
will be a quote, like a tech quote, like an inspirational quote,

135
00:05:59.000 --> 00:06:01.000
and it uses an API for that as well,

136
00:06:01.000 --> 00:06:04.000
and the book of the week, which is also a book related to

137
00:06:04.000 --> 00:06:05.000
full stack web development.

138
00:06:05.000 --> 00:06:08.000
So these are also other two things that will happen in parallel.

139
00:06:08.000 --> 00:06:11.000
So there is all this data fetching that can be parallelized.

140
00:06:11.000 --> 00:06:13.000
At some point, all the data is available,

141
00:06:13.000 --> 00:06:16.000
so you have to join all these different parallel steps,

142
00:06:16.000 --> 00:06:18.000
and you can render a preview of the email,

143
00:06:18.000 --> 00:06:20.000
which is basically HTML and plain text,

144
00:06:20.000 --> 00:06:23.000
and all the result of that will be uploaded to MailChimp.

145
00:06:23.000 --> 00:06:26.000
So again, another integration with an external service,

146
00:06:26.000 --> 00:06:30.000
which is the system that we use to actually send a newsletter.

147
00:06:30.000 --> 00:06:32.000
And at that point, it's just a draft campaign,

148
00:06:32.000 --> 00:06:37.000
so I can go into MailChimp and log in and manually edit the newsletter,

149
00:06:37.000 --> 00:06:41.000
and at that point, I just save it, and it will go out in the next Monday.

150
00:06:41.000 --> 00:06:44.000
Now I could have had another step in the step function,

151
00:06:44.000 --> 00:06:47.000
like a manual click to say, okay, now the newsletter is ready

152
00:06:47.000 --> 00:06:50.000
and do other things with it, but right now, it's very simple.

153
00:06:50.000 --> 00:06:52.000
I don't need to do something extra.

154
00:06:52.000 --> 00:06:54.000
The workflow will actually finish in MailChimp.

155
00:06:54.000 --> 00:06:58.000
But I guess you get the idea that it integrates a bunch of different APIs,

156
00:06:58.000 --> 00:07:00.000
gets data from a bunch of different places,

157
00:07:00.000 --> 00:07:02.000
eventually creates data somewhere else.

158
00:07:02.000 --> 00:07:07.000
So I had to write all the code myself in a Lambda to do all these things

159
00:07:07.000 --> 00:07:11.000
while step functions can probably reduce all that custom code

160
00:07:11.000 --> 00:07:15.000
into very minimal amount of code, maybe just the integration with MailChimp

161
00:07:15.000 --> 00:07:18.000
and some other services, what I would need to rewrite

162
00:07:18.000 --> 00:07:20.000
if I end up using step functions.

163
00:07:20.000 --> 00:07:24.000
Okay, it makes sense to look at a step function for this for sure.

164
00:07:24.000 --> 00:07:27.000
I know that if you look at the AWS Well-Architected Framework,

165
00:07:27.000 --> 00:07:31.000
serverless lens, it was specifically called at this kind of thing.

166
00:07:31.000 --> 00:07:34.000
And if you're doing lots of heavy orchestration using Lambda,

167
00:07:34.000 --> 00:07:36.000
they'll say this should be a step function.

168
00:07:36.000 --> 00:07:38.000
So it makes perfect sense to do that.

169
00:07:38.000 --> 00:07:42.000
I've in the past also done a similar kind of step function

170
00:07:42.000 --> 00:07:46.000
where I was crawling conference websites

171
00:07:46.000 --> 00:07:51.000
and actually scraping the page for the conference

172
00:07:51.000 --> 00:07:54.000
and then sending that off to Amazon Comprehend,

173
00:07:54.000 --> 00:07:58.000
which is the machine learning service for doing named entity recognition.

174
00:07:58.000 --> 00:08:01.000
So it would extract things like locations and dates and people

175
00:08:01.000 --> 00:08:05.000
out of the conference site and then store that in a DynamoDB table.

176
00:08:05.000 --> 00:08:07.000
So it seems a little bit similar.

177
00:08:07.000 --> 00:08:09.000
But there is other kind of machine learning jobs

178
00:08:09.000 --> 00:08:11.000
where step functions work really well.

179
00:08:11.000 --> 00:08:14.000
And you'll see lots of examples of using SageMaker

180
00:08:14.000 --> 00:08:17.000
or other services like Rekognition, Translate, Polly,

181
00:08:17.000 --> 00:08:19.000
all with step functions.

182
00:08:19.000 --> 00:08:22.000
So one example could be you want to do some video processing.

183
00:08:22.000 --> 00:08:26.000
So the first step might be to take the video, split it into frames.

184
00:08:26.000 --> 00:08:29.000
You might do that in Lambda or Fargate task.

185
00:08:29.000 --> 00:08:33.000
Then maybe take each frame and perform some image detection algorithm

186
00:08:33.000 --> 00:08:35.000
on each frame with SageMaker or with Rekognition.

187
00:08:35.000 --> 00:08:38.000
Then you process the results, collate them, send them to S3,

188
00:08:38.000 --> 00:08:41.000
and then finally maybe send a message on EventBridge.

189
00:08:41.000 --> 00:08:46.000
So another workflow that suits step functions well.

190
00:08:46.000 --> 00:08:48.000
And one of the things you have to do,

191
00:08:48.000 --> 00:08:51.000
all this kind of stuff can get very difficult if you're doing it in code

192
00:08:51.000 --> 00:08:53.000
when you have to consider the failure modes.

193
00:08:53.000 --> 00:08:56.000
The happy path is usually fine because it's just sequential lines of code.

194
00:08:56.000 --> 00:08:59.000
But when you have failure modes, then you have to think about,

195
00:08:59.000 --> 00:09:01.000
okay, do I need to rewind?

196
00:09:01.000 --> 00:09:03.000
Do I need to undo?

197
00:09:03.000 --> 00:09:07.000
Am I leaving something in a partially complete state?

198
00:09:07.000 --> 00:09:10.000
And one thing to call out there is that there's a common pattern

199
00:09:10.000 --> 00:09:14.000
in distributed orchestration called the saga pattern.

200
00:09:14.000 --> 00:09:16.000
And the saga pattern is when you have multiple steps

201
00:09:16.000 --> 00:09:19.000
that essentially form some sort of transaction.

202
00:09:19.000 --> 00:09:23.000
So it could be, you know, you place an order for something

203
00:09:23.000 --> 00:09:25.000
and you want to reserve that item.

204
00:09:25.000 --> 00:09:27.000
You want to send a notification to warehouse maybe.

205
00:09:27.000 --> 00:09:29.000
But you also have to process payment.

206
00:09:29.000 --> 00:09:31.000
And maybe if the payment processing fails,

207
00:09:31.000 --> 00:09:33.000
you want to unreserve that order.

208
00:09:33.000 --> 00:09:35.000
So you kind of have to roll back.

209
00:09:35.000 --> 00:09:39.000
And there's a way to do that with step functions with the saga pattern.

210
00:09:39.000 --> 00:09:42.000
And there's an actually quite old article now by Yan Cui

211
00:09:42.000 --> 00:09:45.000
on theburningmonk.com, which we can link to.

212
00:09:45.000 --> 00:09:48.000
It's from 2017, but it talks about using the saga pattern

213
00:09:48.000 --> 00:09:51.000
with lambda and step functions.

214
00:09:51.000 --> 00:09:55.000
So you mentioned at the start, right, these characteristics of a low code tool.

215
00:09:55.000 --> 00:09:57.000
And we hear a lot about low code.

216
00:09:57.000 --> 00:10:00.000
And I think we're all keen to reduce the number of lambdas we have

217
00:10:00.000 --> 00:10:03.000
for just like data processing and kind of mundane stuff.

218
00:10:03.000 --> 00:10:06.000
Does step functions tick all of the criteria

219
00:10:06.000 --> 00:10:09.000
when it comes to classifying it as a low code tool?

220
00:10:09.000 --> 00:10:12.000


221
00:10:12.000 --> 00:10:16.000
Yeah, based on our definition, let's try to break it down what step function gives us today and let's try to decide,

222
00:10:16.000 --> 00:10:17.000
is it a low code tool or not?

223
00:10:17.000 --> 00:10:21.000
So the first criteria we put there in the description of a low code tool

224
00:10:21.000 --> 00:10:23.000
is does it have a visual designer?

225
00:10:23.000 --> 00:10:25.000
And yes, step function have a visual designer,

226
00:10:25.000 --> 00:10:28.000
which is the function workflow studio that we mentioned.

227
00:10:28.000 --> 00:10:31.000
And actually, I want to spend a little bit of time trying to describe how it works

228
00:10:31.000 --> 00:10:33.000
because it's really interesting.

229
00:10:33.000 --> 00:10:35.000
And I think it's important to understand the features there

230
00:10:35.000 --> 00:10:39.000
to actually be able to assess, do we consider a low code or not?

231
00:10:39.000 --> 00:10:41.000
So the first thing is that initially,

232
00:10:41.000 --> 00:10:45.000
step function didn't really have a kind of workflow designer.

233
00:10:45.000 --> 00:10:49.000
So the actual implementation underlying is well known

234
00:10:49.000 --> 00:10:51.000
and you can even just skip the workflow studio

235
00:10:51.000 --> 00:10:54.000
and use that like more barebone definition.

236
00:10:54.000 --> 00:10:57.000
And it's basically like a JSON description of the state machine,

237
00:10:57.000 --> 00:11:00.000
which is called ASL, Amazon States Language,

238
00:11:00.000 --> 00:11:03.000
that effectively what it does, it's very verbose,

239
00:11:03.000 --> 00:11:06.000
but it defines every single step, how they are connected

240
00:11:06.000 --> 00:11:09.000
and the configuration of every single step.

241
00:11:09.000 --> 00:11:12.000
So it's basically you can imagine everything that you could do

242
00:11:12.000 --> 00:11:14.000
with the workflow studio behind the scene

243
00:11:14.000 --> 00:11:17.000
is actually compiling this JSON for you.

244
00:11:17.000 --> 00:11:19.000
So the JSON in itself,

245
00:11:19.000 --> 00:11:22.000
I mean, it's something that people used to use in the past,

246
00:11:22.000 --> 00:11:25.000
but it's very verbose and very hard to write and understand.

247
00:11:25.000 --> 00:11:28.000
So I think it works well for very small state machines.

248
00:11:28.000 --> 00:11:30.000
But if you're really building something a little bit more complex,

249
00:11:30.000 --> 00:11:33.000
it will be very painful to write.

250
00:11:33.000 --> 00:11:37.000
It's very easy to do mistakes or forget to connect certain steps.

251
00:11:37.000 --> 00:11:40.000
So yeah, definitely the workflow tool there

252
00:11:40.000 --> 00:11:43.000
is going to help a lot for more complex use cases.

253
00:11:43.000 --> 00:11:46.000
Now, when you start to use the workflow studio,

254
00:11:46.000 --> 00:11:50.000
you basically have, by default, you create a new state machine

255
00:11:50.000 --> 00:11:52.000
and by default, you see that you have only two steps,

256
00:11:52.000 --> 00:11:54.000
start and end.

257
00:11:54.000 --> 00:11:56.000
So the next thing that you want to do, you open the side panel

258
00:11:56.000 --> 00:11:58.000
where you have all the different building blocks

259
00:11:58.000 --> 00:12:02.000
and you can start to drag and drop them to build your actual workflow.

260
00:12:02.000 --> 00:12:05.000
And there is also a nice undo, redo feature

261
00:12:05.000 --> 00:12:07.000
that allows you to fix mistakes.

262
00:12:07.000 --> 00:12:12.000
And also you can do that with both the standard and express workflow

263
00:12:12.000 --> 00:12:14.000
so that that's not really a blocker.

264
00:12:14.000 --> 00:12:16.000
You can pick whatever you prefer

265
00:12:16.000 --> 00:12:19.000
and it's not going to affect your experience.

266
00:12:19.000 --> 00:12:22.000
Now, the next criteria is, does it have predefined building blocks?

267
00:12:22.000 --> 00:12:25.000
We said yes, but what are these building blocks?

268
00:12:25.000 --> 00:12:29.000
And in the workflow studio, you get two different sections.

269
00:12:29.000 --> 00:12:32.000
One is called flow and one is called actions.

270
00:12:32.000 --> 00:12:34.000
And flow is kind of control flow steps.

271
00:12:34.000 --> 00:12:37.000
So for instance, you have a choice that allows you to do branching statements,

272
00:12:37.000 --> 00:12:40.000
like an if statement or a switch statement

273
00:12:40.000 --> 00:12:42.000
because you also have a default.

274
00:12:42.000 --> 00:12:46.000
So it's like if a certain condition happens, go left, otherwise go right.

275
00:12:46.000 --> 00:12:48.000
Or you can also have a default step as well

276
00:12:48.000 --> 00:12:51.000
if it doesn't match probably the other two.

277
00:12:51.000 --> 00:12:53.000
Then you can also do things like parallel

278
00:12:53.000 --> 00:12:58.000
or mapping data from an array into other results.

279
00:12:58.000 --> 00:13:00.000
And you can do all of that in parallel as well.

280
00:13:00.000 --> 00:13:02.000
You can have like wait steps.

281
00:13:02.000 --> 00:13:03.000
So for instance, if you want to add a delay

282
00:13:03.000 --> 00:13:06.000
because you know you need to wait, I don't know, 10 seconds

283
00:13:06.000 --> 00:13:08.000
before you can do the next action,

284
00:13:08.000 --> 00:13:10.000
you can codify that with a step.

285
00:13:10.000 --> 00:13:12.000
And you can also have success or fail, for instance,

286
00:13:12.000 --> 00:13:14.000
when you want to, if a certain condition happens,

287
00:13:14.000 --> 00:13:17.000
maybe you want to fail early or maybe you want to succeed early,

288
00:13:17.000 --> 00:13:20.000
like a shortcut kind of steps.

289
00:13:20.000 --> 00:13:24.000
Then speaking about actions, this is where it gets interesting

290
00:13:24.000 --> 00:13:26.000
and probably a bit complicated

291
00:13:26.000 --> 00:13:29.000
because actions are literally everything you can do with the SDK.

292
00:13:29.000 --> 00:13:31.000
You will probably find actions there.

293
00:13:31.000 --> 00:13:35.000
So you can integrate with pretty much any other service

294
00:13:35.000 --> 00:13:37.000
like DynamoDB, SNS, EventBridge.

295
00:13:37.000 --> 00:13:41.000
And basically you drag and drop every block,

296
00:13:41.000 --> 00:13:44.000
but every block represents a specific action in a service.

297
00:13:44.000 --> 00:13:47.000
For instance, DynamoDB, you would have a put item action.

298
00:13:47.000 --> 00:13:49.000
And when you drag and drop that action,

299
00:13:49.000 --> 00:13:52.000
you basically see that there is a context panel

300
00:13:52.000 --> 00:13:54.000
that allows you to define all the,

301
00:13:54.000 --> 00:13:56.000
it's like you are configuring an API key,

302
00:13:56.000 --> 00:13:58.000
an API call at that point.

303
00:13:58.000 --> 00:14:01.000
So it kind of allows you to say for DynamoDB, for instance,

304
00:14:01.000 --> 00:14:03.000
what is going to be the ID of this record?

305
00:14:03.000 --> 00:14:06.000
Do you want to add additional fields?

306
00:14:06.000 --> 00:14:09.000
And basically you can combine the incoming state

307
00:14:09.000 --> 00:14:11.000
in the step function, but also additional state

308
00:14:11.000 --> 00:14:14.000
that is part of that particular step.

309
00:14:14.000 --> 00:14:16.000


310
00:14:16.000 --> 00:14:18.000
And one last thing that I think is very interesting, and this is one of the new additions

311
00:14:18.000 --> 00:14:21.000
that we mentioned in the intro, is intrinsic functions.

312
00:14:21.000 --> 00:14:23.000
So these are basically functions that you can use

313
00:14:23.000 --> 00:14:26.000
when you define the mapping between the state

314
00:14:26.000 --> 00:14:29.000
and the action of that particular step.

315
00:14:29.000 --> 00:14:32.000
You can add this kind of lightweight processing function

316
00:14:32.000 --> 00:14:34.000
that can allow you to do things

317
00:14:34.000 --> 00:14:36.000
that generally you will do with your own lambdas.

318
00:14:36.000 --> 00:14:38.000
Now they are kind of built in.

319
00:14:38.000 --> 00:14:40.000
For instance, if you have to do certain types

320
00:14:40.000 --> 00:14:42.000
of array manipulation, if you have to do data encoding,

321
00:14:42.000 --> 00:14:44.000
like for instance, base64,

322
00:14:44.000 --> 00:14:47.000
or if you need to calculate ashes, MD5, or SHA,

323
00:14:47.000 --> 00:14:49.000
or if you need to do random stuff

324
00:14:49.000 --> 00:14:52.000
or mathematical operations, if you need to generate UUID,

325
00:14:52.000 --> 00:14:54.000
or if you need to do, I don't know, string interpolation.

326
00:14:54.000 --> 00:14:56.000
So all things that are very common

327
00:14:56.000 --> 00:14:58.000
when you create this kind of integrations,

328
00:14:58.000 --> 00:15:00.000
but before you needed to do them

329
00:15:00.000 --> 00:15:02.000
with your own custom code in Lambda,

330
00:15:02.000 --> 00:15:04.000
now you can just use these functions in the JSON

331
00:15:04.000 --> 00:15:07.000
and AWS will take care of doing all of the stuff for you.

332
00:15:07.000 --> 00:15:09.000
And of course, if you need to extend

333
00:15:09.000 --> 00:15:11.000
and do something entirely custom

334
00:15:11.000 --> 00:15:15.000
that is not built in in the actions or the flow blocks,

335
00:15:15.000 --> 00:15:17.000
you can do it by just creating a Lambda,

336
00:15:17.000 --> 00:15:19.000
and a Lambda, you write the custom code inside the Lambda,

337
00:15:19.000 --> 00:15:22.000
and the Lambda will become one step in your workflow.

338
00:15:22.000 --> 00:15:25.000
Now I'm gonna let you draw the conclusions.

339
00:15:25.000 --> 00:15:30.000
Do you think this is a low-code solution at this point or not?

340
00:15:30.000 --> 00:15:35.000


341
00:15:35.000 --> 00:15:37.000
So when we talk about low-code and no-code, you might think of things like Zapier

342
00:15:37.000 --> 00:15:39.000
and if this, then that.

343
00:15:39.000 --> 00:15:41.000
So those are really kind of no-code tools.

344
00:15:41.000 --> 00:15:44.000
They're designed to be free

345
00:15:44.000 --> 00:15:46.000
of any imperative programming language.

346
00:15:46.000 --> 00:15:48.000
I think anyone who's used to developing step functions

347
00:15:48.000 --> 00:15:50.000
over the last few years is very well used

348
00:15:50.000 --> 00:15:52.000
to writing lots of Lambda functions

349
00:15:52.000 --> 00:15:54.000
to do basic data manipulation and arithmetic.

350
00:15:54.000 --> 00:15:56.000
So those are intrinsic functions,

351
00:15:56.000 --> 00:15:57.000
the new ones that you mentioned,

352
00:15:57.000 --> 00:15:59.000
really help to make this lower code than before.

353
00:15:59.000 --> 00:16:02.000
So now you can merge JSON objects,

354
00:16:02.000 --> 00:16:05.000
you can partition arrays, you can do arithmetic,

355
00:16:05.000 --> 00:16:08.000
you can convert JSON to string and vice versa.

356
00:16:08.000 --> 00:16:10.000
So it's definitely lower code,

357
00:16:10.000 --> 00:16:12.000
and I think it's definitely getting there.

358
00:16:12.000 --> 00:16:15.000
Now, does that mean it's a tool that's not for developers?

359
00:16:15.000 --> 00:16:17.000
I don't think so.

360
00:16:17.000 --> 00:16:19.000
It's still a tool for developers,

361
00:16:19.000 --> 00:16:21.000
but we're all trying to,

362
00:16:21.000 --> 00:16:22.000
well, maybe we're not all trying to,

363
00:16:22.000 --> 00:16:24.000
but a lot of people are trying to reduce

364
00:16:24.000 --> 00:16:26.000
the amount of boilerplate code.

365
00:16:26.000 --> 00:16:28.000
They have code that isn't necessarily business logic,

366
00:16:28.000 --> 00:16:32.000
but it's just transforming data from one format to another

367
00:16:32.000 --> 00:16:34.000
or doing simple arithmetic.

368
00:16:34.000 --> 00:16:36.000
So you can definitely do a lot more of that

369
00:16:36.000 --> 00:16:37.000
in step functions now.

370
00:16:37.000 --> 00:16:39.000
Now, you're still doing code.

371
00:16:39.000 --> 00:16:42.000
It's just the code happens to be this Amazon states language,

372
00:16:42.000 --> 00:16:48.000
which is difficult enough to grasp syntax based on JSON.

373
00:16:48.000 --> 00:16:52.000
The workflow designer helps to make it a lot easier,

374
00:16:52.000 --> 00:16:55.000
but I would say it's very good

375
00:16:55.000 --> 00:16:57.000
for designing your step function initially

376
00:16:57.000 --> 00:16:58.000
once you've deployed it

377
00:16:58.000 --> 00:17:00.000
and you've got infrastructure as code for it,

378
00:17:00.000 --> 00:17:02.000
you can use it to make edits,

379
00:17:02.000 --> 00:17:05.000
but only really to kind of explore what your edits would be.

380
00:17:05.000 --> 00:17:07.000
So I would say deploy,

381
00:17:07.000 --> 00:17:09.000
design the step function using the studio,

382
00:17:09.000 --> 00:17:12.000
then take that code that it generates,

383
00:17:12.000 --> 00:17:14.000
put all the variables into it,

384
00:17:14.000 --> 00:17:16.000
put it into your code base,

385
00:17:16.000 --> 00:17:18.000
and then if you need to make changes down the line,

386
00:17:18.000 --> 00:17:21.000
you can just see how the structure of your ASL has changed,

387
00:17:21.000 --> 00:17:23.000
that JSON, what are the changes in it,

388
00:17:23.000 --> 00:17:25.000
and then you kind of manually copy and paste that

389
00:17:25.000 --> 00:17:26.000
into your code base.

390
00:17:26.000 --> 00:17:30.000
So it still requires a bit of developer know-how.

391
00:17:30.000 --> 00:17:31.000
So of course, you still need to understand

392
00:17:31.000 --> 00:17:33.000
the AWS service as well and how that works.

393
00:17:33.000 --> 00:17:36.000
Of course, you need to understand your IAM policies.

394
00:17:36.000 --> 00:17:38.000
When it comes to ASL, one of the more difficult things

395
00:17:38.000 --> 00:17:41.000
is understanding the flow of data through the state machine,

396
00:17:41.000 --> 00:17:43.000
and so you have to understand the JSON path,

397
00:17:43.000 --> 00:17:46.000
elements, the input path, the result path.

398
00:17:46.000 --> 00:17:48.000
If you need custom logic,

399
00:17:48.000 --> 00:17:50.000
you're still going to use something like Lambda,

400
00:17:50.000 --> 00:17:53.000
Fargate, ECS, AWS batch.

401
00:17:53.000 --> 00:17:56.000
So it's not a no-code tool, definitely.

402
00:17:56.000 --> 00:17:58.000
It doesn't support external integrations

403
00:17:58.000 --> 00:18:00.000
with third-party services.

404
00:18:00.000 --> 00:18:03.000
So it's a tool for developers,

405
00:18:03.000 --> 00:18:04.000
but it's a tool to enable developers

406
00:18:04.000 --> 00:18:08.000
to implement complex workflows with much less code

407
00:18:08.000 --> 00:18:10.000
than they would have if they were doing it

408
00:18:10.000 --> 00:18:12.000
in an imperative language.

409
00:18:12.000 --> 00:18:15.000
Yeah, I think I agree 100% with your assessment,

410
00:18:15.000 --> 00:18:18.000
and I want to make a comparison with SageMaker Studio,

411
00:18:18.000 --> 00:18:21.000
where actually I think they lower the barrier

412
00:18:21.000 --> 00:18:22.000
to entry a lot more.

413
00:18:22.000 --> 00:18:24.000
Of course, I'm not saying that SageMaker Studio

414
00:18:24.000 --> 00:18:25.000
is a low-code tool,

415
00:18:25.000 --> 00:18:28.000
but they kind of remove all the boundaries in terms

416
00:18:28.000 --> 00:18:31.000
you really need to know AWS to use this service,

417
00:18:31.000 --> 00:18:35.000
while in AWS Step Functions, you still need to know AWS.

418
00:18:35.000 --> 00:18:36.000
You still need to log in into the console.

419
00:18:36.000 --> 00:18:38.000
You still need to understand permissions

420
00:18:38.000 --> 00:18:39.000
and all that kind of stuff.

421
00:18:39.000 --> 00:18:40.000
So I think that's another barrier

422
00:18:40.000 --> 00:18:42.000
that makes it harder to use on people

423
00:18:42.000 --> 00:18:43.000
that are more on the business side

424
00:18:43.000 --> 00:18:45.000
rather than the engineering side,

425
00:18:45.000 --> 00:18:48.000
which I think is one of the goals of low-code solution

426
00:18:48.000 --> 00:18:49.000
to be more friendly to people

427
00:18:49.000 --> 00:18:51.000
that don't really have a lot of engineering skills.

428
00:18:51.000 --> 00:18:54.000
But they still want to build this kind of workflows.

429
00:18:54.000 --> 00:18:57.000
So I definitely agree with your assessment.

430
00:18:57.000 --> 00:19:00.000
So I don't know if you also agree with our assessment.

431
00:19:00.000 --> 00:19:03.000
Definitely let us know what you think in the comments.

432
00:19:03.000 --> 00:19:04.000
Also, we are curious to know

433
00:19:04.000 --> 00:19:06.000
if you have used Step Functions recently

434
00:19:06.000 --> 00:19:09.000
and if you use the new Studio

435
00:19:09.000 --> 00:19:11.000
and what do you think about it.

436
00:19:11.000 --> 00:19:13.000
And yeah, and also if you have built

437
00:19:13.000 --> 00:19:14.000
very interesting use cases,

438
00:19:14.000 --> 00:19:16.000
very specific workflows that you think

439
00:19:16.000 --> 00:19:17.000
are kind of innovative,

440
00:19:17.000 --> 00:19:18.000
we are really curious to know

441
00:19:18.000 --> 00:19:20.000
because we are always looking for interesting uses

442
00:19:20.000 --> 00:19:22.000
and we are always looking for interesting use cases.

443
00:19:22.000 --> 00:19:23.000
So with that being said,

444
00:19:23.000 --> 00:19:25.000
thank you very much for being with us

445
00:19:25.000 --> 00:19:50.000
and we'll see you in the next episode.
