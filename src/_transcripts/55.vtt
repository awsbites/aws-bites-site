WEBVTT

1
00:00:00.000 --> 00:00:03.840
If you're building a new workload on AWS or migrating an old one,

2
00:00:03.840 --> 00:00:08.000
it's always a good idea to start with a Minimal Viable Product or an MVP.

3
00:00:08.000 --> 00:00:13.440
But what is an MVP and how does it differ from a proof of concept or prototype?

4
00:00:13.440 --> 00:00:15.440
What is the minimum you should do?

5
00:00:15.440 --> 00:00:20.720
And how do you ensure that everyone has clear expectations around what the outcome should be?

6
00:00:20.720 --> 00:00:31.040
My name is Eoin. I'm here with Luciano and this is AWS Bites.

7
00:00:31.040 --> 00:00:36.560
Okay. I guess we can start this podcast by asking, why are we asking this question in the first

8
00:00:36.560 --> 00:00:42.560
place? Why do we feel that there is a disconnect with how do we perceive what is an MVP and what

9
00:00:42.560 --> 00:00:46.560
people actually say when they talk about MVPs? Yeah.

10
00:00:46.560 --> 00:00:51.360
I see this quite a lot and maybe it's a bit of a bugbear of mine, but we see teams embarking on a new project and the term MVP

11
00:00:51.360 --> 00:00:56.720
gets used a lot. So often this term means a lot of different things to different people.

12
00:00:56.720 --> 00:01:01.200
And the lines are kind of blurred between what's an MVP and what's a proof of concept and what's

13
00:01:01.200 --> 00:01:07.600
a prototype. I think it's a good idea to break these terms down and just figure out what the

14
00:01:07.600 --> 00:01:11.280
different differences are between them before we talk about how to build an MVP and make sure you

15
00:01:11.280 --> 00:01:17.840
set it up for success. So a prototype is not a product. It's like a rough idea used to demonstrate

16
00:01:17.840 --> 00:01:22.400
some capability and it's something really useful, but it's ultimately a communication tool that you

17
00:01:22.400 --> 00:01:27.920
can use to show others what a product might be like, or just to get buy-in or even to get funding.

18
00:01:27.920 --> 00:01:33.440
So it's like a decision-making tool. Then on the other hand, you have a proof of concept or a POC,

19
00:01:33.440 --> 00:01:38.480
and that's typically designed to validate some assumptions, to test a hypothesis,

20
00:01:38.480 --> 00:01:42.080
or to just evaluate whether a technology is going to work for what you want to do.

21
00:01:43.040 --> 00:01:46.480
So for a POC, you should have a clear question you're trying to answer,

22
00:01:46.480 --> 00:01:51.120
or like a risk you're trying to remove, and you should know at the end of it whether you

23
00:01:51.120 --> 00:01:57.600
can proceed or not. So neither of those two things, prototype or POC, neither of them are

24
00:01:57.600 --> 00:02:01.440
really a product and they don't even have to become the nucleus of a product or grow into

25
00:02:01.440 --> 00:02:05.360
a product. They're just part of the assessment and discovery phase of a project that you might

26
00:02:05.360 --> 00:02:09.280
do at the start. So you could even throw away the code when you're finished, right? That's kind of

27
00:02:09.280 --> 00:02:14.080
what you should expect with those things. So they might be minimal, but they're not a product and

28
00:02:14.080 --> 00:02:19.280
they're not viable either.

29
00:02:19.280 --> 00:02:24.320
Yeah, I like when you say you should also be able to throw away the code, because I feel that a lot of companies and people in general gets very attached to their

30
00:02:24.320 --> 00:02:30.240
code. It's like the value is the code itself. While that might be true in most cases, the reality

31
00:02:30.240 --> 00:02:34.720
is that the value is in the discovery that you made, that the value is in the proof that you

32
00:02:34.720 --> 00:02:39.520
have created, that your idea might be successful or the technology might work for use case.

33
00:02:39.520 --> 00:02:42.720
So you can actually rewrite the code and probably the second time you're going to rewrite it,

34
00:02:42.720 --> 00:02:47.200
it's going to be even better. So I definitely like what you said there with throw away the

35
00:02:47.200 --> 00:02:52.080
code if it needs to be, that's not the value, that's not the product, the value somewhere else.

36
00:02:52.080 --> 00:02:56.160
But I guess the next question is given that we define what a prototype is, what a proof of

37
00:02:56.160 --> 00:03:03.760
concept is, what is an MVP then if it's not these two things?

38
00:03:03.760 --> 00:03:09.360
Okay, so literally the first thing, it's minimal. So that's like going back to like Eric Ries and the Lean Startup and then the Lean

39
00:03:09.360 --> 00:03:13.920
Enterprise, all these books are really good at telling you how to focus on what is really minimal

40
00:03:14.640 --> 00:03:18.480
and you want to deliver the smallest amount of functionality you can get away with.

41
00:03:18.480 --> 00:03:24.960
Just kickstart that product feedback life cycle. So that's the minimal part. But then probably the

42
00:03:24.960 --> 00:03:29.920
difficult one is the viable bit. So when we're talking about viable, we're saying can your team

43
00:03:29.920 --> 00:03:36.160
sustainably evolve and support the ongoing development and operations starting with this MVP.

44
00:03:37.120 --> 00:03:43.520
So a prototype just kind of held together with sticky tape is probably not viable. So it's

45
00:03:43.520 --> 00:03:47.760
important to think about what viable is. And then when we say product, that means that you're aiming

46
00:03:47.760 --> 00:03:51.600
this at real users with real needs and they're trying to get something important done with it.

47
00:03:51.600 --> 00:03:59.280
It should be ready to sell. And it should support meaningful scenarios that users are using. So

48
00:03:59.280 --> 00:04:03.920
sometimes you hear things, people say, oh, we're building an MVP and we've got our MVP ready to go.

49
00:04:03.920 --> 00:04:09.120
But you might see or hear them say sometimes we're still deploying manually or we're already

50
00:04:09.120 --> 00:04:14.720
planning a complete rewrite of this. This is just the early version and it's running on a single

51
00:04:14.720 --> 00:04:20.560
EC2 instance in a public subnet. So maybe what you have in those cases is more of a prototype

52
00:04:20.560 --> 00:04:25.680
than an MVP, but it's not just about the technology. And it doesn't mean that when you're

53
00:04:25.680 --> 00:04:29.600
building an MVP that you have to boil the ocean and all of a sudden you have to achieve perfection.

54
00:04:29.600 --> 00:04:35.680
It's just about like you can still have an MVP that doesn't have any code at all.

55
00:04:35.680 --> 00:04:40.960
It's a completely manual approach based on Excel sheets and human interaction and a documented

56
00:04:40.960 --> 00:04:46.640
process that can tick all the boxes for an MVP as long as it's sustainable. So it's not about

57
00:04:46.640 --> 00:04:50.080
whether you have tech or not. It's important thing is that you've got really good performance

58
00:04:50.080 --> 00:04:54.000
that you've got rigor that can actually support the users no matter what happens.

59
00:04:54.640 --> 00:04:57.120
And it's something you can build on and evolve over time.

60
00:04:58.560 --> 00:05:04.640
Yeah, I really like this definition and I suppose it makes sense to... Yeah, I agree that basically

61
00:05:04.640 --> 00:05:11.280
the viable part is the one that most often is the one that gets the least amount of attention. And

62
00:05:11.280 --> 00:05:16.240
it's something we should be focusing a little bit more at least for when it comes to the technical

63
00:05:16.240 --> 00:05:20.400
side of things. We always disregard it and say, oh, we're going to do that later. It doesn't

64
00:05:20.400 --> 00:05:25.040
matter right now. We can do this manually or we don't need testing right now. And then eventually

65
00:05:26.000 --> 00:05:30.560
if the business goes well, it's very hard to keep up and it's not sustainable anymore because you

66
00:05:30.560 --> 00:05:37.360
miss all these foundational blocks. So I suppose what's your perspective on this? What do you think

67
00:05:37.360 --> 00:05:42.400
you should be putting in place as the bare minimum? I suppose mostly from a technical

68
00:05:42.400 --> 00:05:48.240
perspective to consider that the product is viable and therefore it's sustainable.

69
00:05:49.680 --> 00:05:54.240
Okay. Well, if we take the M and the P first, let's say you... Let's assume that you've got

70
00:05:54.240 --> 00:05:57.920
the right minimal set of features from the beginning and then you've got at the product side

71
00:05:57.920 --> 00:06:03.280
a system to gather feedback and iterate on the product. Then in the middle, I'd say if you're

72
00:06:03.280 --> 00:06:07.840
building a technical solution on AWS, you should try and put in the minimal fundamentals to make

73
00:06:07.840 --> 00:06:13.200
it viable. And those would be things that you and I have talked about on the show a lot over the

74
00:06:13.200 --> 00:06:18.000
past 50 or so episodes. So we're talking about infrastructure as code, unit tests,

75
00:06:18.000 --> 00:06:24.080
end-to-end tests, automated deployment, some level of observability with like centralized logs,

76
00:06:24.080 --> 00:06:28.640
metrics, alerting, traces, some security fundamentals, of course, because otherwise

77
00:06:28.640 --> 00:06:32.960
you've got a business risk that might really compromise your viability. Having the right

78
00:06:32.960 --> 00:06:38.560
skills within your team is also something that makes your thing viable. So maybe, especially

79
00:06:38.560 --> 00:06:42.640
in a startup scenario or even in a migration scenario while you're adopting the cloud,

80
00:06:43.360 --> 00:06:47.520
there might be a huge risk to supporting these workloads if you just kind of completely wing it

81
00:06:47.520 --> 00:06:52.800
and don't have the skills in place or at least a plan to address skills gaps. So even think about

82
00:06:52.800 --> 00:06:57.600
stuff like that as part of your MVP early on. And then of course, like documentation for onboarding

83
00:06:57.600 --> 00:07:02.960
and troubleshooting from the start, right? So you can bring people in, new people as the team grows,

84
00:07:02.960 --> 00:07:08.960
et cetera, and you don't have to kind of, I suppose, train everybody up manually or rely

85
00:07:08.960 --> 00:07:14.000
on them to kind of somehow assimilate all of the ideas that are in the code base. It's a good idea

86
00:07:14.000 --> 00:07:21.040
to have some documented principles and training in place for people too.

87
00:07:21.040 --> 00:07:25.600
Yeah, I like what you said there. And I think that was one of our previous episodes where we mentioned that we were

88
00:07:25.600 --> 00:07:30.960
building a particular solution and we opted for just plain EC2 instances where we could have

89
00:07:30.960 --> 00:07:35.920
gone with serverless and Docker, but we made that conscious choice because we knew that the team

90
00:07:35.920 --> 00:07:40.720
that was working on this solution and eventually would need to support this solution didn't have a

91
00:07:40.720 --> 00:07:45.520
lot of expertise with either serverless or Docker. So we will still want to achieve all the benefits

92
00:07:45.520 --> 00:07:49.920
of the cloud while allowing the team to be able to support the solution long-term. So there was

93
00:07:49.920 --> 00:07:53.680
kind of an interesting trade off where from an architectural perspective, maybe we would have

94
00:07:53.680 --> 00:07:57.600
wanted to use something else, something more innovative, more kind of less management,

95
00:07:57.600 --> 00:08:01.200
but at the other side, we didn't want to overload the team with new knowledge that they didn't have

96
00:08:01.200 --> 00:08:07.040
the time to create on the team and make it sustainable that way. But at the same time,

97
00:08:07.040 --> 00:08:11.840
it's interesting because you might wonder, isn't this too much work for an MVP, right?

98
00:08:12.640 --> 00:08:18.000
My opinion is that yes and no, it might look like a lot of work, but at the same time,

99
00:08:18.000 --> 00:08:22.800
if you do it in advance at the very beginning of your project, it's work that you can actually do

100
00:08:22.800 --> 00:08:27.120
in an environment that helps you to do it. And it doesn't go against you because you are not focused

101
00:08:27.120 --> 00:08:30.800
on serving the customer, but you're actually focused on building this foundation that later

102
00:08:30.800 --> 00:08:34.800
will allow you to serve the customer. So definitely cheaper to do it sooner rather than

103
00:08:34.800 --> 00:08:40.240
later in a project. And again, there are different degrees. You don't have to do it perfectly. You

104
00:08:40.240 --> 00:08:47.280
don't have to do to have perfect infrastructure as called 100% coverage unit test or observability

105
00:08:47.280 --> 00:08:53.040
with hundreds of metrics and alarms. You can build all these things and improve them over time.

106
00:08:53.040 --> 00:08:58.880
I think what's important is to have a basic, to have an understanding and to have something that

107
00:08:58.880 --> 00:09:03.360
gives you enough indication of what's happening right now. And then over time, as you build new

108
00:09:03.360 --> 00:09:10.400
features, you can tweak and improve also these aspects. So yeah, I guess that's also important

109
00:09:10.400 --> 00:09:15.680
to understand that when we talk about all these items, they don't have to be something like fully

110
00:09:15.680 --> 00:09:20.240
fledged 100%. You can build the bare minimum there, make sure that it works and it's going

111
00:09:20.240 --> 00:09:24.720
to support you and over time make it better as you're going to be making better the entire product

112
00:09:24.720 --> 00:09:31.040
itself. Agreed. Yeah. Keep it, go for the simplest possible implementation of each of those things.

113
00:09:31.040 --> 00:09:35.120
And then you've got a good foundation. You can always iterate on it later, but you've got

114
00:09:35.120 --> 00:09:41.200
something.

115
00:09:41.200 --> 00:09:46.000
So what do you think in terms of, you mentioned one of the cases before you say that sometimes there are businesses that they don't even have tech at all. They just run, maybe they

116
00:09:46.000 --> 00:09:50.640
have Excel. That's the best that they do from a technical perspective, but everything else is

117
00:09:50.640 --> 00:09:55.120
pretty much manual and it's still, it's a pretty successful and viable business. What do you think

118
00:09:55.120 --> 00:10:00.160
is the risk there when they start to do digital transformation and actually implement a lot more

119
00:10:00.160 --> 00:10:05.920
tech in their workflow? How do they have to think about an MVP and starting to bootstrap all that

120
00:10:05.920 --> 00:10:13.600
process?

121
00:10:13.600 --> 00:10:17.840
So I guess the main point there is that you can have a really well oiled machine that isn't a machine that's completely human based and people who know exactly what they're doing,

122
00:10:17.840 --> 00:10:21.520
they know what the process is, they know where all the data is, they know how to use their Excel

123
00:10:21.520 --> 00:10:26.560
sheets and they're really good at interfacing with the customer. And then when you take that

124
00:10:26.560 --> 00:10:31.200
and you're trying to do a digital transformation on it, you've actually got pretty serious

125
00:10:31.200 --> 00:10:34.800
obligation because you're trying to replicate the success of what that human

126
00:10:34.800 --> 00:10:38.960
team has been able to do, but you've maybe you're trying to do it in a more scalable, automated way.

127
00:10:39.600 --> 00:10:45.200
So when you think about your minimal viable product, you've got a pretty high bar already

128
00:10:45.200 --> 00:10:51.600
to meet because you have to make it really as viable as what came before. And so you're trying

129
00:10:51.600 --> 00:10:57.920
to implement scalability without sacrificing the excellent capabilities of that team of

130
00:10:57.920 --> 00:11:03.520
people, which is very difficult thing to do. So I just think the main thing to say there is that

131
00:11:03.520 --> 00:11:07.040
okay, yeah, you should tick all those boxes that we mentioned already in terms of having

132
00:11:07.040 --> 00:11:13.200
infrastructures code and unit tests, but you should be aware that you actually have a risk

133
00:11:13.200 --> 00:11:17.680
by building a technical MVP if you don't have the same rigor and foundations in place that your

134
00:11:17.680 --> 00:11:22.560
manual process has. Yeah, I totally agree with that.

135
00:11:22.560 --> 00:11:26.320
I actually now want to make a little bit of an experiment because if you have been following this podcast, you probably have

136
00:11:26.320 --> 00:11:31.200
noticed that we have done a series of live streams where we built, let's call it a product, I don't

137
00:11:31.200 --> 00:11:36.320
want to say an MVP or not. The experiment is actually to try to assess if that was an MVP or

138
00:11:36.320 --> 00:11:41.200
not. And the product is something we call WeShare, which is like a, I don't know, a clone of WeTransfer

139
00:11:41.200 --> 00:11:46.960
or Dropbox Transfer. So upload a file, get a URL, somebody else can download the file with that URL.

140
00:11:47.600 --> 00:11:52.400
So what we did is basically we put in place some of the things that we say that are needed for an

141
00:11:52.400 --> 00:11:57.680
MVP, but maybe not all of them. So I'm going to try to do a mental exercise to try to list all of them

142
00:11:57.680 --> 00:12:02.640
and say yes or no, whether we did a good job or not. So we did do infrastructure as code. We used

143
00:12:02.640 --> 00:12:07.280
the serverless framework and everything was pretty much infrastructure as code, multiple stacks.

144
00:12:07.280 --> 00:12:12.640
So I feel pretty confident saying that we did a good job there. Unit test and end-to-end test,

145
00:12:13.200 --> 00:12:19.680
probably more than a no, than a yes. We have a few unit tests, mostly as an example of how you will

146
00:12:19.680 --> 00:12:26.880
test specific APIs, but I wouldn't be comfortable saying that this unit test, that the ones we have

147
00:12:26.880 --> 00:12:32.240
right now will serve customers well, assuming that there will be customers using this application.

148
00:12:32.240 --> 00:12:36.960
So probably more of a no than a yes. We should be doing more work there. Automated deployment,

149
00:12:36.960 --> 00:12:41.360
absolutely not. We were deploying manually. You might've seen the pain of SLS deploy,

150
00:12:41.360 --> 00:12:46.880
waiting three minutes and then trying again. And yeah, not committed code was deployed and all

151
00:12:46.880 --> 00:12:53.760
this kind of stuff. So definitely a big no there. Observability, maybe a 50-50. We did show some

152
00:12:53.760 --> 00:12:58.880
stuff. We did show how to do custom metrics. We did have structured logs in place, but we didn't

153
00:12:58.880 --> 00:13:03.200
do anything useful in terms of actually operating on this data. We didn't have alerts. We didn't

154
00:13:03.200 --> 00:13:08.080
have dashboards. We did try to set up tracing, but we kind of failed at the first attempt. And then

155
00:13:08.080 --> 00:13:12.960
we said, okay, we're going to revisit this later and never got back to it. So again, observability

156
00:13:12.960 --> 00:13:19.840
is probably 20%, but definitely not a yes. It's more of a no than a yes. Security fundamentals,

157
00:13:19.840 --> 00:13:26.400
probably we did a good job. I guess we covered the basics. We tried to write very restrictive

158
00:13:26.400 --> 00:13:33.920
policies. So we have an authentication mechanism. We did try to do at least the minimum kind of

159
00:13:33.920 --> 00:13:40.080
work there. So I'm confident on that one. Skills, I believe that if we consider ourselves the

160
00:13:40.080 --> 00:13:46.160
operators of this product, we did rely on skills that I think we have. So probably yes.

161
00:13:46.160 --> 00:13:50.880
Documentation was probably a little bit more of a no than a yes, but recently we put a little bit

162
00:13:50.880 --> 00:13:55.440
of effort in actually documenting the entire setup process and how does it work, what it does,

163
00:13:55.440 --> 00:13:59.600
what kind of infrastructure it creates. And people should be able to actually take all we have and

164
00:13:59.600 --> 00:14:04.560
deploy in their own accounts. So probably more of a yes, but used to be a no a few days ago.

165
00:14:05.600 --> 00:14:06.160
Thank you for that.

166
00:14:07.680 --> 00:14:13.280
So one interesting thing before we try to assess whether this is an MVP or not is that I think

167
00:14:13.280 --> 00:14:18.400
our goals are not entirely clear with this particular product. On one side, it was meant

168
00:14:18.400 --> 00:14:24.400
to be more of an educational product. So the product itself is not the WISCHER thing, like

169
00:14:24.400 --> 00:14:28.640
the actual product that allows you upload and download files, but more the whole experience,

170
00:14:28.640 --> 00:14:33.440
the showing people how to use serverless, how to use AWS and how do you build something from

171
00:14:33.440 --> 00:14:39.120
scratch. Like what is the whole experience there? So that's maybe one aspect of the product. Then

172
00:14:39.120 --> 00:14:44.880
if you want to consider the actual tech product as uploading and downloading files, that's an

173
00:14:44.880 --> 00:14:49.840
entire other story and it would require to have users, which we don't have right now. So I'm not

174
00:14:49.840 --> 00:14:54.480
really sure how we should consider that one. Do we consider a potential future product? Do we want to

175
00:14:54.480 --> 00:14:59.840
consider product because we use it ourselves? That's probably to be assessed. What do you think?

176
00:14:59.840 --> 00:15:04.640
Do you consider this a successful MVP or not? Or maybe it's more of a product.

177
00:15:04.640 --> 00:15:10.800
No, not as a product. As an educational product, I think, yes, it is viable as an education thing

178
00:15:10.800 --> 00:15:15.360
and as a how to build stuff on AWS, for sure. I think there's plenty of lessons there for people.

179
00:15:15.360 --> 00:15:21.040
I'm satisfied with that part. But as a product within that, no, because you have to be serious

180
00:15:21.040 --> 00:15:25.200
ultimately about supporting users if you're going to do a product and that's not what this is. But

181
00:15:25.840 --> 00:15:30.640
maybe somebody out there will take it as inspiration and build our super successful startup

182
00:15:30.640 --> 00:15:34.800
ahead of it and become a unicorn and we can say we were there at the start.

183
00:15:34.800 --> 00:15:37.200
Remember about us at that point.

184
00:15:37.200 --> 00:15:37.840
Yes.

185
00:15:37.840 --> 00:15:39.200
Send us a gift or something.

186
00:15:39.200 --> 00:15:46.640
Exactly. Buy us a coffee. So I think maybe let's just wrap it up with a couple of thoughts.

187
00:15:46.640 --> 00:15:51.280
So we said that an MVP needs clearly defined minimal scope. You have to have a product part, real users

188
00:15:51.280 --> 00:15:56.720
with a real need and you need on the tech part, rigorous foundation with deployments, operations,

189
00:15:56.720 --> 00:16:01.920
security, et cetera. So you might agree or disagree with the checklist of what it takes to have a real

190
00:16:01.920 --> 00:16:07.120
MVP. The most important thing really is that when it comes to what it takes to have a real MVP,

191
00:16:07.120 --> 00:16:12.080
that should be defined within with you and your team so that everybody agrees what that is and

192
00:16:12.080 --> 00:16:15.920
that you're not talking about different things and having completely different expectations

193
00:16:15.920 --> 00:16:21.520
about the level of quality and the level of sustainability in that product. Because often

194
00:16:21.520 --> 00:16:25.600
problems arise when people assume that, OK, it's an MVP, we can take shortcuts on loads of the

195
00:16:25.600 --> 00:16:29.680
fundamentals here. And other people are thinking, OK, no, this is a really complete solid product,

196
00:16:29.680 --> 00:16:34.320
it's just a minimal set of features. So agree those expectations early on and you can avoid a

197
00:16:34.320 --> 00:16:42.880
lot of confusion and conflict later on. Do you think we can refer people back Luciano to some of

198
00:16:42.880 --> 00:16:48.080
the previous episodes? Maybe when it comes to the actual how-to of building an MVP, there's a couple

199
00:16:48.080 --> 00:16:49.760
of links in there. What do you think?

200
00:16:49.760 --> 00:16:54.640
Absolutely.

201
00:16:54.640 --> 00:17:00.480
I don't know if they are well-structured, but definitely if you listen to them, you will extract some information that is definitely relevant for the topic today. It's

202
00:17:00.480 --> 00:17:04.320
definitely going to give you elements on how to build your own MVP and what kind of technical

203
00:17:04.320 --> 00:17:10.080
aspects you need to focus on and how to do those things in the context of AWS. So we have episode

204
00:17:10.080 --> 00:17:16.000
nine, which is how do you get started with AWS, which tries to cover all sorts of different things

205
00:17:16.000 --> 00:17:21.520
that maybe not obvious if you are approaching AWS as a newcomer. Like what are the main things you

206
00:17:21.520 --> 00:17:25.520
should do straight away? What are the main topics you should get yourself comfortable with?

207
00:17:26.480 --> 00:17:31.840
Actually, I think AWS has a pretty high barrier to entry. It's not just get a server deployed.

208
00:17:31.840 --> 00:17:36.400
There is just a lot more context that you need to get before you are in a position that you can

209
00:17:36.400 --> 00:17:40.240
actually put something into production. So I would recommend that episode to cover all of that.

210
00:17:40.880 --> 00:17:45.360
Then we also have episode 15, which is is serverless good for startups? This is more of

211
00:17:45.360 --> 00:17:49.680
an opinion take and it's something that if you have been watching our live streams, you can

212
00:17:49.680 --> 00:17:54.800
kind of correlate more of an opinion. Would you use the same approach for your startup? Yes or no?

213
00:17:54.800 --> 00:18:00.320
Why? In which circumstances? Probably you're going to find an answer there. We have a few episodes on

214
00:18:00.320 --> 00:18:07.680
observability. We have 33, which talks about CloudWatch metrics, 34, CloudWatch alarms, and 35,

215
00:18:07.680 --> 00:18:13.440
which is more about how do you query logs with CloudWatch. We have another one about

216
00:18:14.560 --> 00:18:19.360
infrastructure as code, which is episode 31, where we try to compare CloudFormation or Terraform.

217
00:18:19.360 --> 00:18:23.760
This is probably one of our most successful episodes, probably because it's a little bit

218
00:18:23.760 --> 00:18:28.960
of a flame war where I think I vouch a little bit more for Terraform and Eoin vouches a little bit

219
00:18:28.960 --> 00:18:34.880
more for CloudFormation. Again, you might have opinions. The important part is to do something

220
00:18:34.880 --> 00:18:38.640
about it. Maybe you can use CDK. Maybe you can use Pulumi. Just do infrastructure as code in

221
00:18:38.640 --> 00:18:44.000
whatever way. It's more convenient to you, but just do it. Then finally we have episode 37,

222
00:18:44.000 --> 00:18:50.960
which is how do you migrate a monolith to AWS without the drama. If you want to watch our live

223
00:18:52.000 --> 00:18:56.560
series of live coding sessions, we have a playlist on YouTube. We are also going to have the link to

224
00:18:56.560 --> 00:19:01.840
that playlist in the show notes.

225
00:19:01.840 --> 00:19:06.320
Luciano will try and make all that very accessible to people on YouTube and in the show notes as well. Thanks very much for listening, everybody,

226
00:19:06.320 --> 00:19:15.360
and catching up on our latest AWS Bites. We'll see you in the next episode.
