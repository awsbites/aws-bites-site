{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 6,
      "text": " Cognito is a frequently used and core AWS service for managing users, authentication and authorization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 6,
      "end": 10.6,
      "text": " But getting started with Cognito and knowing what features to apply to different use cases can be really challenging."
    },
    {
      "speakerLabel": "spk_0",
      "start": 10.6,
      "end": 15.48,
      "text": " By the end of this episode, you will know the differences between Cognito user pools and identity pools,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.48,
      "end": 18.080000000000002,
      "text": " also known as Cognito federated identities."
    },
    {
      "speakerLabel": "spk_0",
      "start": 18.08,
      "end": 30.08,
      "text": " My name is Eoin, I'm here with Luciano and this is AWS Bites."
    },
    {
      "speakerLabel": "spk_0",
      "start": 30.08,
      "end": 32.32,
      "text": " Before we start, we have a favor to ask."
    },
    {
      "speakerLabel": "spk_0",
      "start": 32.32,
      "end": 39.84,
      "text": " If you have been enjoying this podcast, please consider giving us a review on Apple Podcasts or wherever else you get your podcasts."
    },
    {
      "speakerLabel": "spk_0",
      "start": 39.84,
      "end": 44.480000000000004,
      "text": " If you follow us on YouTube, consider subscribing and liking our videos and giving us plenty of comments."
    },
    {
      "speakerLabel": "spk_0",
      "start": 44.48,
      "end": 49.44,
      "text": " This will really help us to keep the podcast relevant and discoverable for other AWS enthusiasts."
    },
    {
      "speakerLabel": "spk_0",
      "start": 49.44,
      "end": 51.04,
      "text": " Thank you so much."
    },
    {
      "speakerLabel": "spk_0",
      "start": 51.04,
      "end": 58.28,
      "text": " So let's get to it. Luciano, what are some of the use cases where you might actually need to use Amazon Cognito in the first place?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 58.28,
      "end": 64.8,
      "text": " Yeah, the most common use case is when you need to do sign up and sign in for any mobile or web application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 64.8,
      "end": 67.75999999999999,
      "text": " Like that's the service you go to in AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 67.75999999999999,
      "end": 71.75999999999999,
      "text": " And outside of AWS, a compatible service is generally Auth0."
    },
    {
      "speakerLabel": "spk_1",
      "start": 71.76,
      "end": 79.48,
      "text": " So if you have been using Auth 0, you can always imagine as the AWS counterpart to out zero."
    },
    {
      "speakerLabel": "spk_1",
      "start": 79.48,
      "end": 85.4,
      "text": " But of course, you can do more. You can also, for instance, use Cognito to limit access to APIs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.4,
      "end": 93.52000000000001,
      "text": " For instance, you build your own Lambda and you use that Lambda as a back end for an API gateway."
    },
    {
      "speakerLabel": "spk_1",
      "start": 93.52000000000001,
      "end": 100.52000000000001,
      "text": " You could be using a custom authorizer backed by Cognito to make sure that only people who actually have some level of access,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 100.52,
      "end": 106.52,
      "text": " some level of login or authentication into that particular application can actually call that API."
    },
    {
      "speakerLabel": "spk_1",
      "start": 106.52,
      "end": 115.28,
      "text": " And similarly, that's not limited to HTTP. Of course, you can do that also if you're using GraphQL, for instance, by combining that with AppSync."
    },
    {
      "speakerLabel": "spk_1",
      "start": 115.28,
      "end": 120.92,
      "text": " So basically, this is the use case where you have users that can perform specific actions only if they are logged in."
    },
    {
      "speakerLabel": "spk_1",
      "start": 120.92,
      "end": 125,
      "text": " So you can build in all that security layer into your applications."
    },
    {
      "speakerLabel": "spk_1",
      "start": 125,
      "end": 128.84,
      "text": " And very similarly, you can do that for other kinds of resources."
    },
    {
      "speakerLabel": "spk_1",
      "start": 128.84,
      "end": 136.44,
      "text": " For instance, you can allow users to access S3, DynamoDB by using features that are built in in Cognito."
    },
    {
      "speakerLabel": "spk_1",
      "start": 136.44,
      "end": 146.44,
      "text": " So once the user is out and together, recognized, you can somehow give them access to these kind of services and resources in your AWS account."
    },
    {
      "speakerLabel": "spk_1",
      "start": 146.44,
      "end": 157.44,
      "text": " Yeah, so I think one of the things that I was confused about the most when starting to use Cognito is these two concepts of identity pools"
    },
    {
      "speakerLabel": "spk_1",
      "start": 157.44,
      "end": 164.56,
      "text": " and user pools, identity pools also now is being called federated identities, which I think just creates more confusion."
    },
    {
      "speakerLabel": "spk_1",
      "start": 164.56,
      "end": 169.04,
      "text": " So what are these two things and what are the fundamental differences?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 169.04,
      "end": 176.4,
      "text": " When I started building serverless applications about six years ago, Cognito was the one service that really confused me the most."
    },
    {
      "speakerLabel": "spk_0",
      "start": 176.4,
      "end": 180.2,
      "text": " It's really great coming from places where you used to have to build this kind of thing yourself,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 180.2,
      "end": 184.76,
      "text": " that you got a service that takes care of all of the security needs and the standards you need to comply with."
    },
    {
      "speakerLabel": "spk_0",
      "start": 184.76,
      "end": 187.6,
      "text": " But it's really just not simple to understand at first."
    },
    {
      "speakerLabel": "spk_0",
      "start": 187.6,
      "end": 193.51999999999998,
      "text": " User pools and identity pools being kind of similar and having similar names, it kind of adds that confusion."
    },
    {
      "speakerLabel": "spk_0",
      "start": 193.51999999999998,
      "end": 197.32,
      "text": " So let's try and do our best to clarify what they are."
    },
    {
      "speakerLabel": "spk_0",
      "start": 197.32,
      "end": 203.64,
      "text": " User pools allow you to create your own identity provider, so they're used for implementing authentication."
    },
    {
      "speakerLabel": "spk_0",
      "start": 203.64,
      "end": 208.32,
      "text": " So think about sign up, log in, and they allow you to build those sign up and log in flows."
    },
    {
      "speakerLabel": "spk_0",
      "start": 208.32,
      "end": 213.23999999999998,
      "text": " And as well as that, you also get a place to store user data."
    },
    {
      "speakerLabel": "spk_0",
      "start": 213.24,
      "end": 218.4,
      "text": " On the other hand, identity pools or federated identities, they're more for authorization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 218.4,
      "end": 221.36,
      "text": " So they don't give you a place to store any user data."
    },
    {
      "speakerLabel": "spk_0",
      "start": 221.36,
      "end": 226.60000000000002,
      "text": " And I prefer to think about identity pools as an identity broker because there isn't really a pool of anything."
    },
    {
      "speakerLabel": "spk_0",
      "start": 226.60000000000002,
      "end": 232,
      "text": " It's just a place that allows you to exchange one set of credentials for another set of credentials."
    },
    {
      "speakerLabel": "spk_0",
      "start": 232,
      "end": 237.04000000000002,
      "text": " And what you get back from identity pools are short lived IAM credentials."
    },
    {
      "speakerLabel": "spk_0",
      "start": 237.04000000000002,
      "end": 242.72,
      "text": " So you're essentially swapping your already verified identity from an identity provider or IDP."
    },
    {
      "speakerLabel": "spk_0",
      "start": 242.72,
      "end": 247.28,
      "text": " It's also known as an IDP and you're getting back short lived IAM credentials."
    },
    {
      "speakerLabel": "spk_0",
      "start": 247.28,
      "end": 249.28,
      "text": " Now, identity pools don't have a lot of features."
    },
    {
      "speakerLabel": "spk_0",
      "start": 249.28,
      "end": 253.88,
      "text": " So let's just first talk about some of the features of user pool because there's quite a lot there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 253.88,
      "end": 259.28,
      "text": " So you get a place to store your users in groups. You get hosted, sign up and sign in and reset password pages,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 259.28,
      "end": 264.32,
      "text": " as well as the ability for you to implement all of that stuff yourself and customize the UI."
    },
    {
      "speakerLabel": "spk_0",
      "start": 264.32,
      "end": 268.16,
      "text": " You have lots of ways to authenticate so you can authenticate with username and password."
    },
    {
      "speakerLabel": "spk_0",
      "start": 268.16,
      "end": 271.88,
      "text": " And it now supports multi-factor authentication with an app as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 271.88,
      "end": 277.71999999999997,
      "text": " You can do server to server authentication. You can do lots of OAuth 2.0 flows."
    },
    {
      "speakerLabel": "spk_0",
      "start": 277.71999999999997,
      "end": 284.08,
      "text": " And then you can also do social sign in into your user pool with Google, Amazon, Facebook and Apple."
    },
    {
      "speakerLabel": "spk_0",
      "start": 284.08,
      "end": 291.88,
      "text": " As if you don't if you're not using any of those, you can also use SAML and OIDC federated sign in for anything that supports those standards."
    },
    {
      "speakerLabel": "spk_0",
      "start": 291.88,
      "end": 298.56,
      "text": " If you want to customize any part of the login flow, then you also have Lambda triggers so you can put hooks in place at various points of the sign up and login flow."
    },
    {
      "speakerLabel": "spk_0",
      "start": 298.56,
      "end": 306.96,
      "text": " And as well, if you're coming from somewhere else, user pools have mechanisms that allow you to migrate your existing users and their usernames into user pools."
    },
    {
      "speakerLabel": "spk_0",
      "start": 306.96,
      "end": 309.36,
      "text": " So that's pretty good."
    },
    {
      "speakerLabel": "spk_0",
      "start": 309.36,
      "end": 317.88,
      "text": " So when a user logs in with Cognito, they will get an access token. That access token is particularly usually like a JWT, a JSON Web token."
    },
    {
      "speakerLabel": "spk_0",
      "start": 317.88,
      "end": 324.04,
      "text": " So it's a it's a JSON object. It's signed and it's got a lot of properties in it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 324.04,
      "end": 332.28000000000003,
      "text": " And that access token can be used to secure access to some AWS services."
    },
    {
      "speakerLabel": "spk_0",
      "start": 332.28000000000003,
      "end": 341,
      "text": " So you get your access token. You always get a refresh token as well. And if you're using the OIDC scope, you can get an ID token too."
    },
    {
      "speakerLabel": "spk_0",
      "start": 341,
      "end": 348.92,
      "text": " On the other hand, when you're using identity pools, you're swapping a token like that you've already got from your ID identity provider for an IAM session."
    },
    {
      "speakerLabel": "spk_0",
      "start": 348.92,
      "end": 353.48,
      "text": " And then once you've got IAM credentials, it's just like having an IAM user."
    },
    {
      "speakerLabel": "spk_0",
      "start": 353.48,
      "end": 361.32,
      "text": " You can use that to make any AWS API call allowed by the policy associated with the role and the session."
    },
    {
      "speakerLabel": "spk_0",
      "start": 361.32,
      "end": 369.32,
      "text": " So at this point, you might realize, since a user pool is an identity provider that issues tokens and an identity pool is a broker that swaps tokens for IAM credentials,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 369.32,
      "end": 377.88,
      "text": " you can actually combine the two things to get IAM credentials for the users that are stored in your Cognito user pool."
    },
    {
      "speakerLabel": "spk_0",
      "start": 377.88,
      "end": 382,
      "text": " Of course, this is always confusing because you can use any other IDP instead of user pools as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 382,
      "end": 389.36,
      "text": " So you've got a lot of options here. So it is worthwhile exploring when to use one over the other and when to use both."
    },
    {
      "speakerLabel": "spk_0",
      "start": 389.36,
      "end": 395.04,
      "text": " Yeah, absolutely. And I think it's good to to rediscuss that and maybe make an example."
    },
    {
      "speakerLabel": "spk_1",
      "start": 395.04,
      "end": 410.56,
      "text": " And yeah, basically, just to summarize what I am understanding from what you just said is basically you want to if you want to have a place where you can sign up users and store attributes about these users and you don't necessarily have an existing identity provider,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 410.56,
      "end": 424.24,
      "text": " you should use user pools. Then if you want the state to allow users to access AWS resources, we mentioned S3, could be something else."
    },
    {
      "speakerLabel": "spk_1",
      "start": 424.24,
      "end": 432.24,
      "text": " Then you need basically to use identity pools because the idea is that identity pools will be the broker, as you say,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 432.24,
      "end": 443.28000000000003,
      "text": " that will convert whatever authentication mechanism you have from user pools or something else into actual credentials that AWS recognizes to give you access to services."
    },
    {
      "speakerLabel": "spk_1",
      "start": 443.28000000000003,
      "end": 453.36,
      "text": " So if you need both, you can definitely use both. And again, I want to clarify that with a practical example, because otherwise it's going to be a little bit more abstract, a little bit too much abstract."
    },
    {
      "speakerLabel": "spk_1",
      "start": 453.36,
      "end": 465.36,
      "text": " So let's make our classic favorite example, an e-commerce website. In particular, what do we want to do here is as many other e-commerce users will be navigating, seeing different products."
    },
    {
      "speakerLabel": "spk_1",
      "start": 465.36,
      "end": 478.36,
      "text": " And we want to be able to collect all of that information. We want to understand the user journey, the user preferences, so that we can be able to suggest the user products that might be interesting for them in as much real time as possible, of course."
    },
    {
      "speakerLabel": "spk_1",
      "start": 478.36,
      "end": 487.36,
      "text": " So while they navigate, they should see suggestions that are calculated more or less in real time. So the user will be logging in with username and password."
    },
    {
      "speakerLabel": "spk_1",
      "start": 487.36,
      "end": 497.36,
      "text": " So there is definitely a user pool there that will allow the users to log in, but also store all the necessary information and attributes about every single user."
    },
    {
      "speakerLabel": "spk_1",
      "start": 497.36,
      "end": 510.36,
      "text": " Then while the user is navigating, we want to have IAM credentials to be able to send user activity, for instance, clicks or the different pages that the user is visualizing into a Kinesis stream."
    },
    {
      "speakerLabel": "spk_1",
      "start": 510.36,
      "end": 520.36,
      "text": " And in order to do that from the client, we need to use something like Identity Pool so that we can get IAM credentials that are authorized to send messages to this Kinesis stream."
    },
    {
      "speakerLabel": "spk_1",
      "start": 520.36,
      "end": 529.36,
      "text": " So in this case, we are basically using both. We are using the user pools for login and storing user attributes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 529.36,
      "end": 537.36,
      "text": " But then we also use Identity Pools to basically get the AWS credentials that are needed to connect to Kinesis."
    },
    {
      "speakerLabel": "spk_1",
      "start": 537.36,
      "end": 551.36,
      "text": " Another interesting detail that took me a while to realize is that when we want to create a setup like this, what we are basically doing is using our user pool as an IDP for our Identity Pool."
    },
    {
      "speakerLabel": "spk_1",
      "start": 551.36,
      "end": 556.36,
      "text": " So this is how we are connecting the dots between user pools and identity pools and using them together."
    },
    {
      "speakerLabel": "spk_1",
      "start": 556.36,
      "end": 564.36,
      "text": " So we are basically creating that trust relationship saying to our broker for credentials, which is the identity pool, to trust our user pool."
    },
    {
      "speakerLabel": "spk_1",
      "start": 564.36,
      "end": 576.36,
      "text": " So when a user is logged in into that user pool, then the identity pool is giving us credentials or actually is giving the user credentials to be able to connect the services that we want to authorize for that user in AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 576.36,
      "end": 581.36,
      "text": " There are ways to access AWS resources, but a limited subset just using user pools."
    },
    {
      "speakerLabel": "spk_0",
      "start": 581.36,
      "end": 589.36,
      "text": " And there you're just talking about using your token to protect an API and implementing authorization in that API."
    },
    {
      "speakerLabel": "spk_0",
      "start": 589.36,
      "end": 591.36,
      "text": " So how does that work? Let's give a few examples."
    },
    {
      "speakerLabel": "spk_0",
      "start": 591.36,
      "end": 605.36,
      "text": " So if you've got an API gateway or an application load balancer that you can put in a Cognito Authorizer and that can restrict access to APIs to authenticated users from a user pool, you don't need an identity pool in that particular case."
    },
    {
      "speakerLabel": "spk_0",
      "start": 605.36,
      "end": 612.36,
      "text": " So the access token is just going to be validated by the authorizer that you've configured in the load balancer or in API gateway."
    },
    {
      "speakerLabel": "spk_0",
      "start": 612.36,
      "end": 617.36,
      "text": " So that doesn't really give you any role-based or attribute-based access control."
    },
    {
      "speakerLabel": "spk_0",
      "start": 617.36,
      "end": 621.36,
      "text": " It's kind of all or nothing access for each authorizer you configure."
    },
    {
      "speakerLabel": "spk_0",
      "start": 621.36,
      "end": 628.36,
      "text": " If your API is backed by Lambda, you do get information about the principal or the identity making the request."
    },
    {
      "speakerLabel": "spk_0",
      "start": 628.36,
      "end": 632.36,
      "text": " So you can find out what groups, because Cognito also has the concept of groups of users."
    },
    {
      "speakerLabel": "spk_0",
      "start": 632.36,
      "end": 644.36,
      "text": " So you can kind of use that to implement your own level of access control by checking what groups are a member of and implementing check your own checks further down the chain behind the API."
    },
    {
      "speakerLabel": "spk_0",
      "start": 644.36,
      "end": 659.36,
      "text": " If you're using AppSync, it's actually a little bit better because AppSync's authorizer also gives you the ability to protect some of your AppSync queries or mutators using annotations that specify,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 659.36,
      "end": 665.36,
      "text": " okay, this is the user pool, but the user also needs to be a member of a specific group."
    },
    {
      "speakerLabel": "spk_0",
      "start": 665.36,
      "end": 667.36,
      "text": " So it's a little bit more powerful."
    },
    {
      "speakerLabel": "spk_0",
      "start": 667.36,
      "end": 676.36,
      "text": " An alternative then is that you can say, okay, let's not use user pools to protect this API. Let's instead use IAM authorization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 676.36,
      "end": 688.36,
      "text": " So API gateway has IAM authorization, and then you're just using standard IAM policies and the request to your API has to be signed using an AWS version 4 signature, just like a request to an AWS API."
    },
    {
      "speakerLabel": "spk_0",
      "start": 688.36,
      "end": 696.36,
      "text": " And in that case, you're back to using identity pools because that's where you get your IAM credentials from if you've got an IDP, as you've clearly explained."
    },
    {
      "speakerLabel": "spk_0",
      "start": 696.36,
      "end": 703.36,
      "text": " So that means that you don't get any user identity information further down."
    },
    {
      "speakerLabel": "spk_0",
      "start": 703.36,
      "end": 717.36,
      "text": " So once the user has access through their IAM policy as issued by the identity pool, it allows them to invoke the API, but the backing code behind that API, it doesn't have any visibility onto who that user is."
    },
    {
      "speakerLabel": "spk_0",
      "start": 717.36,
      "end": 729.36,
      "text": " So in general, you kind of find that most people use user pools and access token for restricting API access for web and mobile applications and identity pool credentials are more often used for accessing other services directly."
    },
    {
      "speakerLabel": "spk_0",
      "start": 729.36,
      "end": 737.36,
      "text": " S3 being a common example, but you also mentioned the case with Kinesis, or it could be Kinesis Firehose or Amazon Pinpoint is another one."
    },
    {
      "speakerLabel": "spk_0",
      "start": 737.36,
      "end": 751.36,
      "text": " If you want to collect data directly from a client with low latency and overhead and let Amazon manage all the scalability and you don't want to put an API and a Lambda function in between the client and that AWS service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 751.36,
      "end": 756.36,
      "text": " Are there any other interesting features we should talk about?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 756.36,
      "end": 765.36,
      "text": " Yeah, let's mention a few other interesting things that might not be too obvious and maybe worth checking out later after you listen to this episode."
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.36,
      "end": 771.36,
      "text": " One interesting thing is that identity pools basically, we said they are just giving you IAM credentials."
    },
    {
      "speakerLabel": "spk_1",
      "start": 771.36,
      "end": 777.36,
      "text": " So you could use that idea to do ABAC or RBAC type of auto-excession."
    },
    {
      "speakerLabel": "spk_1",
      "start": 777.36,
      "end": 787.36,
      "text": " So basically the idea is that because users will have certain attributes, and then you can use those attributes in your IAM policies to create conditions basically."
    },
    {
      "speakerLabel": "spk_1",
      "start": 787.36,
      "end": 797.36,
      "text": " So you could, for instance, say, I don't know, if a user has this particular group, then that's a condition that allows your policy to organize it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 797.36,
      "end": 808.36,
      "text": " For instance, I don't know, more practical use cases like you have an admin flag or a group and you can use that to restrict that specific actions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 808.36,
      "end": 816.36,
      "text": " For instance, only if you have that admin flag, you can do that particular action. I don't know, maybe delete a user or something like that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 816.36,
      "end": 828.36,
      "text": " Similarly, you can use the same idea to do, for instance, multi-tenant systems where you could have an attribute that tells you exactly which organization that user belongs to."
    },
    {
      "speakerLabel": "spk_1",
      "start": 828.36,
      "end": 834.36,
      "text": " And therefore you can allow specific actions only on the resources that are part of that organization."
    },
    {
      "speakerLabel": "spk_1",
      "start": 834.36,
      "end": 836.36,
      "text": " So that could be another thing you could do."
    },
    {
      "speakerLabel": "spk_1",
      "start": 836.36,
      "end": 838.36,
      "text": " Another thing is that you can do social sign-in."
    },
    {
      "speakerLabel": "spk_1",
      "start": 838.36,
      "end": 848.36,
      "text": " So for instance, I don't know, you want to allow login not just by username and password, but also through Google, Facebook or some other social login system."
    },
    {
      "speakerLabel": "spk_1",
      "start": 848.36,
      "end": 854.36,
      "text": " You can use the OAuth provider as part of the user pool configuration."
    },
    {
      "speakerLabel": "spk_1",
      "start": 854.36,
      "end": 859.36,
      "text": " And then you can still use identity pools to still exchange tokens for IAM credentials."
    },
    {
      "speakerLabel": "spk_1",
      "start": 859.36,
      "end": 861.36,
      "text": " So again, this is another way that you can combine the two."
    },
    {
      "speakerLabel": "spk_1",
      "start": 861.36,
      "end": 864.36,
      "text": " It's not just limited to access with username and password."
    },
    {
      "speakerLabel": "spk_1",
      "start": 864.36,
      "end": 872.36,
      "text": " You can still do the social login and then if you still need to get IAM credentials, you can also use identity pools."
    },
    {
      "speakerLabel": "spk_1",
      "start": 872.36,
      "end": 878.36,
      "text": " Another thing that is interesting if you ever use Amplify, Amplify is kind of a nice abstraction over all these things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 878.36,
      "end": 884.36,
      "text": " It gives you very easy to use APIs, but just behind the scene is doing all the things that we just described."
    },
    {
      "speakerLabel": "spk_1",
      "start": 884.36,
      "end": 891.36,
      "text": " So it's just an easier way to get those IAM credentials and use them in your own web or mobile application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 891.36,
      "end": 892.36,
      "text": " Great."
    },
    {
      "speakerLabel": "spk_0",
      "start": 892.36,
      "end": 895.36,
      "text": " So I think that's all we have for today, but we're curious to know if you've been using Cognito."
    },
    {
      "speakerLabel": "spk_0",
      "start": 895.36,
      "end": 899.36,
      "text": " Do you have any further questions about Cognito and other things we should cover in the future?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 899.36,
      "end": 902.36,
      "text": " Do you have any interesting tips or use cases that you've managed to implement with it?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 902.36,
      "end": 903.36,
      "text": " Please share with us."
    },
    {
      "speakerLabel": "spk_0",
      "start": 903.36,
      "end": 906.36,
      "text": " You can drop us a comment on YouTube or reach out on Twitter."
    },
    {
      "speakerLabel": "spk_0",
      "start": 906.36,
      "end": 908.36,
      "text": " All our contact details are in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 908.36,
      "end": 912.36,
      "text": " So thank you very much for listening and for liking and leaving us a review."
    },
    {
      "speakerLabel": "spk_0",
      "start": 912.36,
      "end": 913.36,
      "text": " We really appreciate that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 913.36,
      "end": 932.36,
      "text": " And we'll see you in the next episode."
    }
  ]
}
