WEBVTT

1
00:00:00.000 --> 00:00:04.000
The definition of serverless has already changed in a few years since it first emerged.

2
00:00:04.000 --> 00:00:08.000
There have been many success stories using serverless in startups and in the enterprise.

3
00:00:08.000 --> 00:00:15.000
But what comes next? By the end of this episode, you'll have heard our thoughts and predictions on what serverless 2.0 will look like.

4
00:00:15.000 --> 00:00:22.000
We'll also reveal who we think will be the main challenger to AWS for domination of serverless as it goes mainstream.

5
00:00:22.000 --> 00:00:33.000
I'm Eoin, I'm here with Luciano and this is AWS Bites.

6
00:00:33.000 --> 00:00:38.000
There are a couple of ways to look at serverless today and the term itself is a bit problematic.

7
00:00:38.000 --> 00:00:44.000
But you have to say that the trend towards serverless is very real. Luciano, what are some of the ways that you can define serverless?

8
00:00:44.000 --> 00:00:46.000
Yeah, you're absolutely right.

9
00:00:46.000 --> 00:00:52.000
One of the problems with serverless is that there isn't really a clear definition. There are many definitions.

10
00:00:52.000 --> 00:01:00.000
So I'm going to try to summarize all the definitions I know and maybe come up with a somewhat useful definition of serverless.

11
00:01:00.000 --> 00:01:05.000
But yeah, the first one that at least historically has been around is the concept of function as a service.

12
00:01:05.000 --> 00:01:13.000
So that whole idea that you can just write a function, it's event based, somebody is triggering your function, you run some code, you get stuff done that way.

13
00:01:13.000 --> 00:01:18.000
For a long time at the very beginning of the serverless trend, that was serverless in itself.

14
00:01:18.000 --> 00:01:24.000
That's what people associated when they were talking about serverless, they were immediately thinking about function as a service.

15
00:01:24.000 --> 00:01:29.000
But in reality, I believe that there is a lot more to it. Like it's not just function as a service.

16
00:01:29.000 --> 00:01:35.000
Even though function as a service is probably one of the biggest part of the serverless revolution.

17
00:01:35.000 --> 00:01:47.000
So I suppose in a more generical sense, you want to focus on trying to reduce the amount of code and the amount of operations and maintenance that you are doing when building something.

18
00:01:47.000 --> 00:01:50.000
And you can do that by using more managed services.

19
00:01:50.000 --> 00:02:02.000
So basically you want to try to stay as close as possible to the business needs and delegate all these concerns that are more on the infrastructure, on the scalability side, on the security side.

20
00:02:02.000 --> 00:02:08.000
And that's not just from a development perspective, but also from a cost perspective.

21
00:02:08.000 --> 00:02:16.000
Because you want to pay for what you use, you don't want to pre-allocate a bunch of money somewhere in a pool and just say,

22
00:02:16.000 --> 00:02:18.000
okay, this is going to be there for my cloud spending.

23
00:02:18.000 --> 00:02:23.000
Or you actually want to organically grow your spending as your business gets more and more successful.

24
00:02:23.000 --> 00:02:26.000
So that's another very important idea for serverless.

25
00:02:26.000 --> 00:02:33.000
Giving you that elasticity in pricing, you start very, very low, possibly zero when you are experimenting with a new business idea.

26
00:02:33.000 --> 00:02:43.000
And then as you grow and as you are more successful in the market, there should be there the opportunity to grow your cost organically with your success.

27
00:02:43.000 --> 00:02:50.000
Other than that, in general, when we talk about managed services, we can distinguish that in different areas.

28
00:02:50.000 --> 00:02:56.000
We can talk about compute, databases, file storage, event API, scheduling and orchestration.

29
00:02:56.000 --> 00:03:00.000
All these things are at the end of the day tools that you need to build your applications.

30
00:03:00.000 --> 00:03:05.000
And cloud providers should kind of lower down the barrier to entry in this concept of serverless.

31
00:03:05.000 --> 00:03:14.000
Because again, the definition is that you focus on building things that the business needs, not necessarily on the how and supporting that.

32
00:03:14.000 --> 00:03:18.000
But more on let's serve the business, let's make it grow.

33
00:03:18.000 --> 00:03:21.000
Everything else is something that we just buy when we need it.

34
00:03:21.000 --> 00:03:29.000
So that would be my definition of serverless. It doesn't really mean that there are no servers, but it's what we don't think as much about servers.

35
00:03:29.000 --> 00:03:34.000
We think more about business capabilities and how them support the business.

36
00:03:34.000 --> 00:03:39.000
So what do you think are the challenges that serverless is facing today?

37
00:03:39.000 --> 00:03:42.000
I completely agree with your definitions there.

38
00:03:42.000 --> 00:03:48.000
I think some of the challenges we see today are not everything is available in proper full serverless mode.

39
00:03:48.000 --> 00:03:54.000
So if you look at AWS, we can still see that with serverless search, we don't really have a good solution.

40
00:03:54.000 --> 00:03:58.000
Databases are getting there, but sometimes it's more of a miss than a hit.

41
00:03:58.000 --> 00:04:02.000
Aurora serverless isn't quite there yet fully.

42
00:04:02.000 --> 00:04:07.000
Neptune, the recent announcements, kind of frustrated people because it doesn't seem very serverless.

43
00:04:07.000 --> 00:04:10.000
Things don't seem to scale to zero in terms of cost.

44
00:04:10.000 --> 00:04:16.000
We could really do with an elastic cache serverless version or some sort of cache that's fast and serverless.

45
00:04:16.000 --> 00:04:21.000
And Kinesis, although we have Kinesis serverless, it's still not quite there yet in terms of scaling to zero.

46
00:04:21.000 --> 00:04:25.000
So you kind of have to look to third parties for things like that.

47
00:04:25.000 --> 00:04:29.000
And it's kind of early days, but there's a lot of third parties trying to fill the gap there.

48
00:04:29.000 --> 00:04:31.000
So that's one of the challenges. Now, complexity.

49
00:04:31.000 --> 00:04:36.000
People talk a lot about complexity with serverless, especially when you start out thinking it's simple.

50
00:04:36.000 --> 00:04:42.000
You dive straight into it and all of a sudden you realize there are wires all over the place and you don't really understand how things are connected together.

51
00:04:42.000 --> 00:04:50.000
So you have to realize that with serverless, you're building a decoupled, scalable, on demand system made up of these small cloud components.

52
00:04:50.000 --> 00:04:58.000
So you ended up with a highly distributed system that's inherently more complex to manage than a less scalable, but more cohesive monolith.

53
00:04:58.000 --> 00:05:05.000
So you have to then understand all the nuances, the restrictions and the controls from the cloud vendor, like identity and access management, infrastructure as code.

54
00:05:05.000 --> 00:05:07.000
Deployment.

55
00:05:07.000 --> 00:05:20.000
So if we look at the cloud serverless serverless, right, like Lambda, DynamoDB, AppSync, Step Functions, API Gateway, they all require a pretty good amount of knowledge and technical expertise if you really want to run them in production.

56
00:05:20.000 --> 00:05:26.000
DynamoDB is a prime example here. It doesn't take a lot of skill to put an entry in a DynamoDB table and take it out again.

57
00:05:26.000 --> 00:05:37.000
But if you want to actually scale that in production over time, then you really have to understand the cost, performance, scalability, how to design indexes, partitions, and if you're really going to make it work well.

58
00:05:37.000 --> 00:05:43.000
So it's almost deceptively simple, but you have to understand what the long term impact is going to be like.

59
00:05:43.000 --> 00:05:46.000
Another one of the challenges, local development and testing.

60
00:05:46.000 --> 00:05:51.000
So I think that's when I look at the surveys around challenges and servers, I think this is one that comes out top.

61
00:05:51.000 --> 00:06:02.000
You rely on full cloud environment to really replicate your production environment. There is no like for like local replica mechanism.

62
00:06:02.000 --> 00:06:15.000
So running locally really requires you to under structure your code and set up tests in a way that you can run some parts of your code locally, but that if you really want to test it, integrated or end to end, you have to deploy to the cloud.

63
00:06:15.000 --> 00:06:24.000
So it all places this obligation on you to put in place more effective testing and testing asynchronous event driven distributed systems is hard. There's no escaping that.

64
00:06:24.000 --> 00:06:34.000
So the tooling has to improve there. Another one is that I suppose there's a lack of standards. So every cloud does it differently. Every vendor, Azure, AWS, Google Cloud, all the others.

65
00:06:34.000 --> 00:06:40.000
They do things like serverless services differently. They do their functions differently. So there's a learning curve.

66
00:06:40.000 --> 00:06:51.000
You might also be concerned about the stability of interfaces. So the way we develop serverless applications today is at the same as with the way you're going to do it in three years. Will your code still last or will it gather dust?

67
00:06:51.000 --> 00:06:59.000
So all of this is possible to overcome, but you know, you need good training, best practices, expertise, standards and high levels of automation.

68
00:06:59.000 --> 00:07:09.000
And this is probably one of the reasons why serverless adoption, somewhat surprisingly, is less than expected in startups and more than expected in enterprise in large companies.

69
00:07:09.000 --> 00:07:18.000
Now usually the startups were the early adopters. That was the case for to a certain extent with serverless, but generally startups are trying to get time to market so they stick with the tools they know.

70
00:07:18.000 --> 00:07:25.000
That's the way it should happen generally, but enterprises can afford the time and investment to invest in the tooling for this next generation of technology.

71
00:07:25.000 --> 00:07:32.000
So you do see some of the more innovative big companies moving forward with serverless and investing in the training and the tooling.

72
00:07:32.000 --> 00:07:39.000
So I guess with all that said, what do we think we need from the next generation of serverless or serverless 2.0?

73
00:07:39.000 --> 00:07:46.000
Yeah, I think I'm going to repeat some of your points because you definitely highlighted some of the major weaknesses of serverless today.

74
00:07:46.000 --> 00:07:53.000
So on the other hand, serverless v2 is going to try to resolve all these issues or at least some of them.

75
00:07:53.000 --> 00:08:14.000
So the main one that we mentioned is that there are lots of different services for different types of tasks, but at the end of the day, not all of them are truly serverless in that essence that you don't have to focus on managing the service itself, scaling it, and also in terms of pricing that it doesn't scale to zero.

76
00:08:14.000 --> 00:08:30.000
I don't know, it forces you to think about like instance sizes rather than how much am I using this particular service. So definitely we need more of these serverless, first I'm going to call them, services for everything like caching, orchestration, high performance computing,

77
00:08:30.000 --> 00:08:38.000
so that coming to a new project, you don't really have to think this part is serverless, all these other parts is not serverless because there isn't a solution yet.

78
00:08:38.000 --> 00:08:43.000
It's like you should be able to embrace serverless 100% in your architecture.

79
00:08:43.000 --> 00:09:00.000
Similarly, you mentioned for instance DynamoDB and how misleading can that be. So, and I want to definitely echo that feeling. I am the first one that says that DynamoDB is really, really good when you know exactly how it works and when you figure out all the access patterns to your data.

80
00:09:00.000 --> 00:09:17.000
But the truth is that if you're working in a new project, most of the time you don't know in advance of the access patterns for the future years, so it becomes very easy at the beginning to adopt but then later on, it might trick you in different ways and it's very hard to change the data as you go and implement new access patterns.

81
00:09:17.000 --> 00:09:31.000
So definitely, and this is just not to mention all the amount of configuration that you have to put into it anyway because even if you don't have to think about databases, you just think about tables, you still need to put a decent amount of configuration in every table you create.

82
00:09:31.000 --> 00:09:43.000
And that might not be obvious at all to understand how that configuration will convert into scalability capabilities, or the ability to change the data as you go or the ability to perform different kinds of queries.

83
00:09:43.000 --> 00:09:56.000
That requires a lot of expertise and again, it kind of conflicts a little bit with that idea of servers that you want to think more about business logic rather than all these details that are more operational details.

84
00:09:56.000 --> 00:10:16.000
So I suppose that one idea there for Serverless V2 would be, can I just have a default table where I can store data and it's going to automatically scale and deal with in a way that allow me to support different kinds of query capabilities without having to think, now I need to create a new index or now I need to replicate this data in a different shape somewhere else.

85
00:10:16.000 --> 00:10:26.000
Hopefully all this stuff can be somewhat automated and give the users just the ability to think more about the data rather than how to make it work at scale.

86
00:10:26.000 --> 00:10:28.000
Nice.

87
00:10:28.000 --> 00:10:41.000
Other than that, another topic is probably observability. It's something we covered in the past in other episodes and we also invested in some ways that allow people to automate all the observability concerns.

88
00:10:41.000 --> 00:10:48.000
By the way, if you're curious, check out SLIC Watch on GitHub. We'll give you a link on the show notes.

89
00:10:48.000 --> 00:10:57.000
But the idea is that if you want to do good observability today, it's definitely possible. There are lots of tools in AWS and all these tools are actually quite good.

90
00:10:57.000 --> 00:11:05.000
It just takes a lot of time to configure all of them correctly and connect all of them together and instrument all your code to really take advantage of these tools.

91
00:11:05.000 --> 00:11:13.000
There is very little automation and with the experiments that we have done, with the research we have done, we realized that there is a lot of room for automation.

92
00:11:13.000 --> 00:11:21.000
It's just AWS is not investing enough in this area yet. So this is the reason that we hope to see more in serverless v2.

93
00:11:21.000 --> 00:11:32.000
And similarly, this is also another topic we discussed about in the past. As a developer, there is this kind of developer experience where on one side you are feeling, okay, I'm just writing functions.

94
00:11:32.000 --> 00:11:43.000
And I feel a lot more able to focus on the business logic when I'm writing this one function that really encodes a specific workflow and I don't have to think about everything else.

95
00:11:43.000 --> 00:11:55.000
But then in reality, when you go and deploy that function, it never really works the first time because one time you forgot a permission. Another time, maybe you didn't configure the networking correctly.

96
00:11:55.000 --> 00:12:02.000
There are so many things that can go wrong from how that particular function is wired into the rest of the cloud environment.

97
00:12:02.000 --> 00:12:17.000
So one solution to this problem could be that you have a better tooling that can somehow look at your code and also look at the rest of your architecture and your environments and make sense of maybe you are forgetting to create a policy and can tell you in advance,

98
00:12:17.000 --> 00:12:28.000
maybe before you deploy, you are using this SDK call that is going to require you S3 access. I don't see any policy attached to this function that gives you S3 access. Are you sure this is really what you want to do?

99
00:12:28.000 --> 00:12:42.000
Something like that would be already very useful. And I saw that some time ago on GitHub, somebody was trying to build something like that, but it feels like the need is clear, but still not.

100
00:12:42.000 --> 00:12:50.000
We are not seeing a lot of investment in that direction. And hopefully, again, wishes are that serverless v2 will address also this problem as well.

101
00:12:50.000 --> 00:13:01.000
Then I have other one. I'm going to go quickly through them. Faster deployments. We know that deploying a significantly big serverless application might take, I don't know, even 15 minutes or more.

102
00:13:01.000 --> 00:13:19.000
And you don't want to be spending 15 minutes every time you are doing a deployment. Imagine you are fixing a very bad issue in production. You want to deploy it as quick as possible. You don't want to be waiting for a pipeline to trigger and then spending the next 15 minutes looking at it, hoping it will go faster.

103
00:13:19.000 --> 00:13:34.000
And similarly, infrastructure as code, it's an area that we have seen a lot of innovation, actually, if we think about serverless framework, some, but all this innovation seems to have focus around the function as a service aspect of serverless.

104
00:13:34.000 --> 00:13:45.000
It's making it easier to configure everything related to functions. But for everything else, you are still writing like barebone infrastructure as code where you need to specify every single detail.

105
00:13:45.000 --> 00:14:04.000
So hopefully the same trend that we saw around functions to making them simple, how to generate some policies, how to generate some of the wiring around networking and security, maybe we can see the same also for other parts of the infrastructure of different kinds of serverless architectures.

106
00:14:04.000 --> 00:14:18.000
So given what we just said, what do we think is going to happen there? Is this something that, I don't know, today we are seeing somebody in this space already addressing some of these concerns?

107
00:14:18.000 --> 00:14:30.000
Yeah, I think there are examples, right? If we look to some of the third parties, we can see innovation that is already maybe a generation ahead of the cloud vendors in terms of the serverless offerings.

108
00:14:30.000 --> 00:14:42.000
And maybe this has already been the case. Like we can see from the history, we had Heroku and Parse and all these other players building platforms as a service that try to make it easier for developers to adopt new technologies.

109
00:14:42.000 --> 00:14:51.000
And we're seeing examples of that in the serverless space now. So they might provide us with some kind of clues as to where the next version of serverless is coming from.

110
00:14:51.000 --> 00:15:01.000
Okay, so let's look at a few examples. Vercel is one that immediately jumps to mind. So it's mainly for front end and agile functions, sorry, agile functions, edge functions.

111
00:15:01.000 --> 00:15:16.000
But they've really had success in terms of adoption because they made it easy for developers to connect a repo, get automatic deployments, monitoring environments, branch previews, and just make that experience really simple.

112
00:15:16.000 --> 00:15:25.000
So whoever is looking at product management in these cloud vendors, I'm sure they're looking at these as ways they can simplify the whole process.

113
00:15:25.000 --> 00:15:32.000
And you mentioned serverless framework. And I think this year, maybe late last year, they launched their serverless cloud.

114
00:15:32.000 --> 00:15:40.000
And that's also trying to address all of these same challenges, right? With faster deployment, seamless local front end with a cloud backend.

115
00:15:40.000 --> 00:15:47.000
So you can do front end development and integrate it into your cloud, but it's all updated locally.

116
00:15:47.000 --> 00:15:55.000
Getting rid of the YAML configuration altogether, simplifying data storage and access like we talked about, simplifying events as well.

117
00:15:55.000 --> 00:16:04.000
And their approach is basically they'll do that for you and run it in their cloud infrastructure, which is going to run on top of a public cloud anyway, but it's all abstracted away from you.

118
00:16:04.000 --> 00:16:08.000
So you don't see what the raw resources are under the hood.

119
00:16:08.000 --> 00:16:12.000
On the other hand, you have examples like SST from the serverless stack.

120
00:16:12.000 --> 00:16:21.000
And when I started learning serverless and experimenting with serverless years and years ago, I was using the serverless stack tutorials, which are really, really excellent documentation on getting up to speed with serverless.

121
00:16:21.000 --> 00:16:27.000
I'm really happy to see them continually innovating. And the SST tool is really taking off.

122
00:16:27.000 --> 00:16:30.000
It's really one to watch right now. Right. So this is open source tooling.

123
00:16:30.000 --> 00:16:35.000
It provides a simpler level of abstraction for building applications than we're used to.

124
00:16:35.000 --> 00:16:40.000
But it's still your account and your resources. So it's still creating Lambda functions and everything under the hood.

125
00:16:40.000 --> 00:16:43.000
It builds on top of the CDK, adds a nice UI.

126
00:16:43.000 --> 00:16:50.000
They've got loads of starter examples and all in all tries to make the experience a little simpler, like with Vercel or with serverless cloud.

127
00:16:50.000 --> 00:16:56.000
But you still have your own infrastructure and you can still see what the raw pieces are under the hood.

128
00:16:56.000 --> 00:17:02.000
Another one that you might take inspiration from, just because I suppose it's so futuristic in some ways, is Darklang.

129
00:17:02.000 --> 00:17:07.000
And Darklang is, I almost see it like a concept car, whereas it's not a car you're ever going to buy.

130
00:17:07.000 --> 00:17:14.000
But it might give you some kind of indication as to where the future is headed, because the interface is very different.

131
00:17:14.000 --> 00:17:18.000
They're trying to provide a UI and a back end and everything all in one application.

132
00:17:18.000 --> 00:17:22.000
So you don't use your normal editor or your source provider. It's all in Darklang.

133
00:17:22.000 --> 00:17:26.000
And you code up to data sources in this kind of visual editor.

134
00:17:26.000 --> 00:17:34.000
The whole point that they're trying to push towards is zero deployment time. So sub 20 millisecond deployment time.

135
00:17:34.000 --> 00:17:39.000
So as soon as you edit your code, it's already deployed and you just turn it on with a feature flag.

136
00:17:39.000 --> 00:17:46.000
The appeal of that is massive for me, because I think because local development in serverless isn't really possible,

137
00:17:46.000 --> 00:17:49.000
you spend your time trying to optimize your deployment of the cloud.

138
00:17:49.000 --> 00:17:55.000
Getting it down from 30 seconds or 45 seconds down to zero seconds would be a big win.

139
00:17:55.000 --> 00:18:00.000
And the last thing I suppose we could mention, just in terms of looking at where the innovators are coming from,

140
00:18:00.000 --> 00:18:04.000
there's a load of serverless databases coming out all the time now.

141
00:18:04.000 --> 00:18:09.000
And I think they're really pushing the simplification of data storage and data access and data scalability.

142
00:18:09.000 --> 00:18:14.000
So some dimension are FaunaDB, which is really big in the serverless space.

143
00:18:14.000 --> 00:18:18.000
Firestore from Firebase is, has been around quite a long time, actually,

144
00:18:18.000 --> 00:18:22.000
but it's a good example of making that developer experience simpler.

145
00:18:22.000 --> 00:18:27.000
CockroachDB is another one. And then you have lots of kind of domain specific databases, if you like,

146
00:18:27.000 --> 00:18:35.000
like content backends, headless CMSs like Sanity. I think we covered some of those on previous podcasts.

147
00:18:35.000 --> 00:18:43.000
Yeah, I really like that you kind of somehow underlined that there are these two different approaches where on one side,

148
00:18:43.000 --> 00:18:47.000
you are trying to simplify the space and make it more managed.

149
00:18:47.000 --> 00:18:52.000
But at the same time, you are abstracting a lot like it's not clear what's actually running under the hood.

150
00:18:52.000 --> 00:18:56.000
While there are other approaches that are just giving you extra layers that are simpler.

151
00:18:56.000 --> 00:19:01.000
But then at the end of the day, it's very clear how these layers translate to actual infrastructure.

152
00:19:01.000 --> 00:19:08.000
You are still in control of that infrastructure. So it feels like more tooling than actual new solutions.

153
00:19:08.000 --> 00:19:11.000
And I really like that. I'm not sure if I have a preference for one or another.

154
00:19:11.000 --> 00:19:16.000
But I think at the end of the day, they both try to improve the developer experience in different ways.

155
00:19:16.000 --> 00:19:21.000
Given also what you said, looking at all of this innovation,

156
00:19:21.000 --> 00:19:30.000
we mentioned that there will be players competing outside the main cloud vendors,

157
00:19:30.000 --> 00:19:34.000
but also the cloud vendors could be doing something in this space to improve themselves.

158
00:19:34.000 --> 00:19:37.000
So what do you think will happen in the future?

159
00:19:37.000 --> 00:19:42.000
You're going to see a mix because different people require different modes, depending on the context.

160
00:19:42.000 --> 00:19:48.000
If you're a startup and you're just focused on speed, time to market, then simple tooling that abstracts everything for you.

161
00:19:48.000 --> 00:19:52.000
And you don't have to look at all of the complexity under the hood might make a lot of sense.

162
00:19:52.000 --> 00:19:57.000
Or even for enterprises building line of business apps where it's just low code.

163
00:19:57.000 --> 00:20:01.000
They're just looking for low code, simple applications.

164
00:20:01.000 --> 00:20:07.000
I would still say like cloud vendors are going to grow the serverless offerings and hopefully simplify both the services and the tooling.

165
00:20:07.000 --> 00:20:10.000
We mentioned that AWS SAM is kind of going in the right direction.

166
00:20:10.000 --> 00:20:14.000
That should make serverless more compelling for startups and enterprises.

167
00:20:14.000 --> 00:20:20.000
But we can also see services are getting simpler, especially the newer services like EventBridge, Step Functions.

168
00:20:20.000 --> 00:20:23.000
These are really changing how we think about serverless, right?

169
00:20:23.000 --> 00:20:26.000
Because they're completely different offerings.

170
00:20:26.000 --> 00:20:33.000
They have loads and loads of features, but they're not as complex to manage as some of the services that have come before.

171
00:20:33.000 --> 00:20:37.000
So I think we can expect a lot more of both types of innovation from the cloud vendors.

172
00:20:37.000 --> 00:20:42.000
And as well then with the startups and the innovators, third parties.

173
00:20:42.000 --> 00:20:49.000
The issue there, I guess, is that not a lot of large companies are going to build critical infrastructure on top of platforms from startups.

174
00:20:49.000 --> 00:20:52.000
Because of the perceived risk there.

175
00:20:52.000 --> 00:20:58.000
Unless those startups then go and get acquired by the major cloud vendors and get strengthened and grown from there.

176
00:20:58.000 --> 00:21:03.000
So that's going to be a challenge for some of the players like serverless cloud and also some of the serverless database vendors.

177
00:21:03.000 --> 00:21:09.000
They have to mature and validate their offering and reach a certain critical mass before lots of people will flock to them.

178
00:21:09.000 --> 00:21:14.000
We've been here before with Parse, where it was acquired by Facebook and later shut down.

179
00:21:14.000 --> 00:21:19.000
And people have built on top of that mobile backend and lost out as a result.

180
00:21:19.000 --> 00:21:22.000
It does lead us to that initial tease, right?

181
00:21:22.000 --> 00:21:27.000
Who is the best placed challenger for AWS when it comes to the next wave of serverless?

182
00:21:27.000 --> 00:21:31.000
And I throw it out there that the most likely challenger is Microsoft.

183
00:21:31.000 --> 00:21:35.000
And it's not because of Azure, although that is certainly a strong challenger.

184
00:21:35.000 --> 00:21:42.000
But since Microsoft released VS Code and acquired GitHub and then NPM became part of that ecosystem as well,

185
00:21:42.000 --> 00:21:47.000
they've invested a lot in developer tooling and in owning the places where developers live.

186
00:21:47.000 --> 00:21:53.000
So now you can develop code with cloud-based editor or with VS Code on your desktop.

187
00:21:53.000 --> 00:21:57.000
You can build and deploy with GitHub actions to a GitHub repository.

188
00:21:57.000 --> 00:22:02.000
You can have copilot write half the code for you, albeit with some dubious results.

189
00:22:02.000 --> 00:22:11.000
But it's not a big leap for Microsoft or GitHub to add lower code compute and database and keep building out that developer-centric ecosystem.

190
00:22:11.000 --> 00:22:15.000
And it makes perfect sense for that to be very serverless in nature.

191
00:22:15.000 --> 00:22:20.000
So it might be through Azure or it might be done with different branding or a different take.

192
00:22:20.000 --> 00:22:23.000
But I think Microsoft have positioned themselves very well here.

193
00:22:23.000 --> 00:22:31.000
And while AWS is obviously a strong market leader, I think there's a good challenge there.

194
00:22:31.000 --> 00:22:35.000
Microsoft have been smart in how they've aligned themselves well with the developer community.

195
00:22:35.000 --> 00:22:38.000
What do you think? Do you have any other challengers to AWS?

196
00:22:38.000 --> 00:22:46.000
I like your idea that Microsoft maybe, if you look at Azure, I don't know if I would agree, like the state of Azure right now.

197
00:22:46.000 --> 00:22:51.000
But given how Microsoft is positioned more globally, I absolutely agree with your assessment.

198
00:22:51.000 --> 00:22:55.000
They are in a unique position to build something new.

199
00:22:55.000 --> 00:23:01.000
And if they connect all the dots that they already have there and make them even better, I think they are up to something really, really interesting.

200
00:23:01.000 --> 00:23:07.000
So I think it's a good bet. But I have maybe a little bit more controversial one.

201
00:23:07.000 --> 00:23:11.000
And I've been really looking at DigitalOcean in the last few years.

202
00:23:11.000 --> 00:23:17.000
And I think it's an interesting one, even though you wouldn't really associate them with serverless today.

203
00:23:17.000 --> 00:23:22.000
But I really like their approach. They started by just giving you visual machines. It was very simple to get one.

204
00:23:22.000 --> 00:23:25.000
The documentation and the all-over user experience was really, really good.

205
00:23:25.000 --> 00:23:28.000
They put a lot of effort into designing all of that experience.

206
00:23:28.000 --> 00:23:33.000
They put a lot of effort into creating guides, tutorials, case studies.

207
00:23:33.000 --> 00:23:36.000
Also, the pricing model is extremely simplified.

208
00:23:36.000 --> 00:23:41.000
They never really wanted to give you anything that could scale to massive levels.

209
00:23:41.000 --> 00:23:47.000
But for starting, building a small startup, you always got a good offering.

210
00:23:47.000 --> 00:23:53.000
And over the years, they have kept the identity where everything is simple, everything is accessible, the pricing is clear.

211
00:23:53.000 --> 00:23:56.000
Lots of tutorials and good development experience.

212
00:23:56.000 --> 00:23:59.000
But interestingly enough, they also started to expand their own offering.

213
00:23:59.000 --> 00:24:03.000
They started to give databases, Kubernetes, functions as a service.

214
00:24:03.000 --> 00:24:08.000
So it's really interesting to see if they start to invest more into this serverless space.

215
00:24:08.000 --> 00:24:13.000
What's going to happen in the future? Because I really like the way that they're focusing on the developer experience.

216
00:24:13.000 --> 00:24:17.000
So probably they are in a position to address some of the challenges that we just described.

217
00:24:17.000 --> 00:24:22.000
Which at the end of the day, they are mostly all around the developer experience.

218
00:24:22.000 --> 00:24:26.000
And now developers are empowered to actually build cool stuff.

219
00:24:26.000 --> 00:24:29.000
So that's my bet.

220
00:24:29.000 --> 00:24:35.000
I might have other ones. For instance, I really like the direction of things like Code Sandbox or similar tools.

221
00:24:35.000 --> 00:24:40.000
But you might argue that what GitHub is already doing with Codespaces is pretty much in line with that.

222
00:24:40.000 --> 00:24:44.000
So that might be just a component that maybe somebody else is going to acquire.

223
00:24:44.000 --> 00:24:49.000
It's going to require one of the successful comps to be more competitive in that particular direction.

224
00:24:49.000 --> 00:24:52.000
I really like that. It's a really interesting alternative option.

225
00:24:52.000 --> 00:24:56.000
I think all this competition in space hopefully makes it better for everybody.

226
00:24:56.000 --> 00:24:58.000
And that's something that we really need.

227
00:24:58.000 --> 00:25:01.000
So I guess the question as we finish up here is where would you place your bet?

228
00:25:01.000 --> 00:25:04.000
On AWS, DigitalOcean or something else completely?

229
00:25:04.000 --> 00:25:06.000
And what do you think is the future for serverless?

230
00:25:06.000 --> 00:25:10.000
Thanks very much for joining us today. Let us know all your comments on Twitter.

231
00:25:10.000 --> 00:25:14.000
Let us know what you think of all those questions. And thanks for joining us again.

232
00:25:14.000 --> 00:25:35.000
That's all for today. We'll see you next week.
