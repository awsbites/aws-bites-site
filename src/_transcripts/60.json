{
  "speakers": {
    "spk_0": "Luciano",
    "spk_1": "Eoin"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3.6,
      "text": " AWS Lambda is one of the most famous AWS services this day."
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.0600000000000005,
      "end": 5.6000000000000005,
      "text": " If you're just starting your cloud journey,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 5.72,
      "end": 8.8,
      "text": " you might be a little bit confused about what Lambda actually is,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 8.92,
      "end": 11.6,
      "text": " what are the limitations, when you should be using it or not."
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.1,
      "end": 15.1,
      "text": " Today, we want to provide a beginner-friendly introduction to Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.22,
      "end": 17.52,
      "text": " and summarize everything that there is to know about it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.96,
      "end": 19.86,
      "text": " By the end of this episode, we will also chime in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 20,
      "end": 22.36,
      "text": " with some of our opinions and share whether we believe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 22.5,
      "end": 25.1,
      "text": " that Lambda is the future of cloud computing or not."
    },
    {
      "speakerLabel": "spk_0",
      "start": 25.5,
      "end": 27.16,
      "text": " My name is Luciano and I'm joined by Eoin,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 27.16,
      "end": 30.16,
      "text": " and this is AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 36.86,
      "end": 39.46,
      "text": " AWS Bites podcast is sponsored by fourTheorem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 39.76,
      "end": 42.980000000000004,
      "text": " fourTheorem is an AWS consulting partner offering training,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 43.120000000000005,
      "end": 45.519999999999996,
      "text": " cloud migration and modern application architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 45.82,
      "end": 48.019999999999996,
      "text": " Find out more at fourtheorem.com"
    },
    {
      "speakerLabel": "spk_0",
      "start": 48.56,
      "end": 50.58,
      "text": " and you'll find the link in the show notes as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 51.46,
      "end": 53.32,
      "text": " So again, as we said in the introduction,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 53.46,
      "end": 56.32,
      "text": " this episode is mainly focused to provide an introduction"
    },
    {
      "speakerLabel": "spk_0",
      "start": 56.32,
      "end": 59.52,
      "text": " for people who haven't really explored serverless and Lambda yet."
    },
    {
      "speakerLabel": "spk_0",
      "start": 59.92,
      "end": 61.42,
      "text": " So if you already know Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 62.14,
      "end": 64.82,
      "text": " I don't know if this episode is really that interesting for you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 64.94,
      "end": 66.48,
      "text": " Maybe you can just skip to the end,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 66.62,
      "end": 69.18,
      "text": " where we talk more about opinions and the future of the Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.32,
      "end": 72.52,
      "text": " And in any case, let us know what do you think about all of that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 72.84,
      "end": 75.92,
      "text": " So without any further ado, what do you say, Eoin?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 76.03999999999999,
      "end": 78.14,
      "text": " Should we start by defining what Lambda is?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 79.02,
      "end": 82.88,
      "text": " Yeah, and I went back to the 2014 announcement from AWS"
    },
    {
      "speakerLabel": "spk_1",
      "start": 83.02,
      "end": 84.78,
      "text": " where they announced Lambda for the very first time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 84.78,
      "end": 86.5,
      "text": " and there's a really nice description in there"
    },
    {
      "speakerLabel": "spk_1",
      "start": 86.64,
      "end": 88.04,
      "text": " where they say that it's a compute service"
    },
    {
      "speakerLabel": "spk_1",
      "start": 88.18,
      "end": 90.24,
      "text": " that runs your code in response to events"
    },
    {
      "speakerLabel": "spk_1",
      "start": 90.38,
      "end": 93.18,
      "text": " and automatically manages the compute resources for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 93.58,
      "end": 95.08,
      "text": " And that's it in a nutshell. I really like that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 95.2,
      "end": 96.48,
      "text": " It's a beautiful description."
    },
    {
      "speakerLabel": "spk_1",
      "start": 96.6,
      "end": 99.88,
      "text": " And there's a lot of features and additions they've made since then,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 100.48,
      "end": 104.88,
      "text": " but we probably forget that that's the simple beauty of Lambda at its core."
    },
    {
      "speakerLabel": "spk_1",
      "start": 105.58,
      "end": 107.88,
      "text": " So they also say that it makes it easy to build applications"
    },
    {
      "speakerLabel": "spk_1",
      "start": 108,
      "end": 110.2,
      "text": " that respond quickly to new information or new data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 110.44,
      "end": 113.54,
      "text": " So that really covers it, right? It's code that responds to events."
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.54,
      "end": 115,
      "text": " So it's really event driven,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 115.5,
      "end": 117.44000000000001,
      "text": " and it manages the compute resources for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 117.56,
      "end": 119.36000000000001,
      "text": " And that's really the most important part."
    },
    {
      "speakerLabel": "spk_1",
      "start": 119.66000000000001,
      "end": 121.26,
      "text": " So it's like an alternative way to do compute, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 121.4,
      "end": 125.14,
      "text": " We've gone from having to make servers, then virtual machines,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 125.26,
      "end": 126.4,
      "text": " then we went to containers,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 126.54,
      "end": 128.54000000000002,
      "text": " we got cloud computing to manage all of this for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 128.66,
      "end": 132.3,
      "text": " So all the time, we have these new generations of compute services"
    },
    {
      "speakerLabel": "spk_1",
      "start": 132.44,
      "end": 133.94,
      "text": " that are taking away the complexity"
    },
    {
      "speakerLabel": "spk_1",
      "start": 134.06,
      "end": 136.14000000000001,
      "text": " and managing a lot more for you on the cloud side"
    },
    {
      "speakerLabel": "spk_1",
      "start": 136.26,
      "end": 138.34,
      "text": " so that you have to do less and less."
    },
    {
      "speakerLabel": "spk_1",
      "start": 138.96,
      "end": 140.86,
      "text": " Now, sometimes that results in more complexity."
    },
    {
      "speakerLabel": "spk_1",
      "start": 141,
      "end": 143.10000000000002,
      "text": " It kind of shifts the complexity to other places."
    },
    {
      "speakerLabel": "spk_1",
      "start": 143.1,
      "end": 147.5,
      "text": " But with Lambda, what we're talking about is a stateless, event-driven."
    },
    {
      "speakerLabel": "spk_1",
      "start": 147.64,
      "end": 149.68,
      "text": " You hear this quite often. So what does stateless mean?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 149.79999999999998,
      "end": 151.79999999999998,
      "text": " Well, it means, I guess that in some applications,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 151.94,
      "end": 153.4,
      "text": " you might have a server that keeps running"
    },
    {
      "speakerLabel": "spk_1",
      "start": 153.54,
      "end": 155.28,
      "text": " and it's able to store state in memory,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 155.74,
      "end": 157.57999999999998,
      "text": " or you might have like user sessions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 158,
      "end": 160.6,
      "text": " Lambda is very ephemeral, right? It's very short-lived."
    },
    {
      "speakerLabel": "spk_1",
      "start": 160.98,
      "end": 162.5,
      "text": " They only run for up to 15 minutes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 162.64,
      "end": 164.57999999999998,
      "text": " So you don't have the luxury of storing state."
    },
    {
      "speakerLabel": "spk_1",
      "start": 164.88,
      "end": 166.54,
      "text": " And that also brings benefits because you don't end up"
    },
    {
      "speakerLabel": "spk_1",
      "start": 166.68,
      "end": 168.64,
      "text": " with accumulating what we call a cruft,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 168.78,
      "end": 172.38,
      "text": " you know, lots of state that accidentally accumulates."
    },
    {
      "speakerLabel": "spk_1",
      "start": 172.38,
      "end": 174.26,
      "text": " Accumulates in long-lived compute."
    },
    {
      "speakerLabel": "spk_1",
      "start": 174.98,
      "end": 176.85999999999999,
      "text": " So these things only run for a short amount of time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 177.92,
      "end": 179.51999999999998,
      "text": " If you have to store any state,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 179.66,
      "end": 182.88,
      "text": " then you have to put it explicitly into a state store like DynamoDB"
    },
    {
      "speakerLabel": "spk_1",
      "start": 183.01999999999998,
      "end": 184.78,
      "text": " or ElastiCache Redis or S3."
    },
    {
      "speakerLabel": "spk_1",
      "start": 186.16,
      "end": 187.26,
      "text": " Because it's event-based as well,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 187.38,
      "end": 190.28,
      "text": " it's a very different model to like a web server."
    },
    {
      "speakerLabel": "spk_1",
      "start": 190.42,
      "end": 192.88,
      "text": " If you've got a web server with a web framework,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 193.01999999999998,
      "end": 195.62,
      "text": " you typically are able to handle multiple concurrent requests"
    },
    {
      "speakerLabel": "spk_1",
      "start": 195.76,
      "end": 198.18,
      "text": " within your unit of compute."
    },
    {
      "speakerLabel": "spk_1",
      "start": 198.32,
      "end": 200.92,
      "text": " So within a container or virtual machine with Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 200.92,
      "end": 204.82,
      "text": " It's weird in the sense that you can only run one event at a time"
    },
    {
      "speakerLabel": "spk_1",
      "start": 204.94,
      "end": 207.92,
      "text": " in a container, an invocation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 208.44,
      "end": 210.11999999999998,
      "text": " And this is counterintuitive to people,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 210.23999999999998,
      "end": 213.38,
      "text": " but it also makes it very easy to reason about some cases"
    },
    {
      "speakerLabel": "spk_1",
      "start": 213.51999999999998,
      "end": 216.07999999999998,
      "text": " because you know that at any given time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 216.22,
      "end": 218.77999999999997,
      "text": " one sandbox, they call it, a container,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 218.92,
      "end": 220.82,
      "text": " is only processing one request at a time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 221.83999999999997,
      "end": 223.42,
      "text": " They're very quick to scale up and down."
    },
    {
      "speakerLabel": "spk_1",
      "start": 223.54,
      "end": 225.38,
      "text": " Now, sometimes you have the issue of cold starts,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 225.51999999999998,
      "end": 227.64,
      "text": " which are often overstated, I would say,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 227.77999999999997,
      "end": 230.04,
      "text": " but something to be aware of, definitely for sure."
    },
    {
      "speakerLabel": "spk_1",
      "start": 230.04,
      "end": 232.28,
      "text": " It supports multiple language runtimes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 232.4,
      "end": 234.17999999999998,
      "text": " and you could create your own runtimes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 235.07999999999998,
      "end": 237.6,
      "text": " And because it's managed, the instance is managed,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 237.73999999999998,
      "end": 239.54,
      "text": " you don't have to worry about what machine it's running on."
    },
    {
      "speakerLabel": "spk_1",
      "start": 239.68,
      "end": 241.94,
      "text": " The container orchestration service is managed."
    },
    {
      "speakerLabel": "spk_1",
      "start": 242.07999999999998,
      "end": 243.98,
      "text": " The wiring of the events and the results"
    },
    {
      "speakerLabel": "spk_1",
      "start": 244.1,
      "end": 246.7,
      "text": " into the Lambda is managed for you and the runtime itself,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 246.84,
      "end": 249.64,
      "text": " whether it's Node.js or Python or whatever else, is managed for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 249.78,
      "end": 250.88,
      "text": " And this is why it's called serverless,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 251,
      "end": 253.2,
      "text": " it's because you don't have to manage servers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 253.34,
      "end": 256.64,
      "text": " So that's as much as I could say about the definition of Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 256.78,
      "end": 257.8,
      "text": " What are some of the use cases, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 257.94,
      "end": 259.03999999999996,
      "text": " If people haven't used it before,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 259.04,
      "end": 260.86,
      "text": " if they've only played with it a little bit,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 261,
      "end": 263.90000000000003,
      "text": " where can I start applying Lambda day to day in development jobs?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 269.24,
      "end": 272,
      "text": " Yeah, so the most common use case that I've seen with Lambda is probably into the realms of APIs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 272.14000000000004,
      "end": 275.44,
      "text": " So creating REST APIs, GraphQL APIs,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 275.56,
      "end": 277.74,
      "text": " Lambda is a very, very good backend"
    },
    {
      "speakerLabel": "spk_0",
      "start": 277.86,
      "end": 279.76,
      "text": " for implementing that compute layer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 279.90000000000003,
      "end": 282.5,
      "text": " What is the business logic that specific API quest"
    },
    {
      "speakerLabel": "spk_0",
      "start": 282.64000000000004,
      "end": 284.5,
      "text": " needs to actually execute?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 284.64000000000004,
      "end": 286.44,
      "text": " And it works really well in combination"
    },
    {
      "speakerLabel": "spk_0",
      "start": 286.56,
      "end": 288.5,
      "text": " with other services like API Gateway."
    },
    {
      "speakerLabel": "spk_0",
      "start": 288.5,
      "end": 291.5,
      "text": " So generally, we'll define your API through API Gateway"
    },
    {
      "speakerLabel": "spk_0",
      "start": 291.62,
      "end": 296.02,
      "text": " and then have Lambda as a backend for the actual business logic."
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.62,
      "end": 299.3,
      "text": " Another good use case for Lambda is Webbooks."
    },
    {
      "speakerLabel": "spk_0",
      "start": 299.42,
      "end": 301.36,
      "text": " Webbooks is basically when you have a system"
    },
    {
      "speakerLabel": "spk_0",
      "start": 301.5,
      "end": 303.06,
      "text": " which generates some kind of event"
    },
    {
      "speakerLabel": "spk_0",
      "start": 303.2,
      "end": 306.12,
      "text": " and it can notify another system about that particular event."
    },
    {
      "speakerLabel": "spk_0",
      "start": 306.26,
      "end": 308.32,
      "text": " And that generally works just through a simple URL."
    },
    {
      "speakerLabel": "spk_0",
      "start": 308.46,
      "end": 311.22,
      "text": " So the system generating the event needs to know a specific URL"
    },
    {
      "speakerLabel": "spk_0",
      "start": 311.36,
      "end": 313.86,
      "text": " where to actually forward that particular event."
    },
    {
      "speakerLabel": "spk_0",
      "start": 314.32,
      "end": 317.26,
      "text": " And one example could be you are using a newsletter system,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 317.26,
      "end": 318.92,
      "text": " like, for instance, MailChimp."
    },
    {
      "speakerLabel": "spk_0",
      "start": 319.06,
      "end": 320.32,
      "text": " MailChimp gives you the opportunity"
    },
    {
      "speakerLabel": "spk_0",
      "start": 320.46,
      "end": 322.26,
      "text": " that every time you have a new subscriber,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 322.38,
      "end": 324.71999999999997,
      "text": " you can notify a Webbook endpoint"
    },
    {
      "speakerLabel": "spk_0",
      "start": 324.86,
      "end": 326.96,
      "text": " and receive the information about the new subscriber."
    },
    {
      "speakerLabel": "spk_0",
      "start": 327.08,
      "end": 330.12,
      "text": " And that way you can implement your own custom integration."
    },
    {
      "speakerLabel": "spk_0",
      "start": 330.26,
      "end": 333.06,
      "text": " I actually use something like that and I use Lambda as a backend."
    },
    {
      "speakerLabel": "spk_0",
      "start": 333.18,
      "end": 336.08,
      "text": " You can simply create an API using API Gateway."
    },
    {
      "speakerLabel": "spk_0",
      "start": 336.21999999999997,
      "end": 339.42,
      "text": " That way you get a URL or you can also use Function URLs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 339.56,
      "end": 342.12,
      "text": " and that can be used to trigger a specific Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 342.26,
      "end": 344.76,
      "text": " where you implement your own custom business logic."
    },
    {
      "speakerLabel": "spk_0",
      "start": 344.76,
      "end": 347.42,
      "text": " Another use case could be system integration."
    },
    {
      "speakerLabel": "spk_0",
      "start": 347.56,
      "end": 351.08,
      "text": " So again, a webhook is kind of a system integration already,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 351.21999999999997,
      "end": 354.08,
      "text": " but you can have more advanced types of system integration"
    },
    {
      "speakerLabel": "spk_0",
      "start": 354.21999999999997,
      "end": 355.56,
      "text": " using different protocols."
    },
    {
      "speakerLabel": "spk_0",
      "start": 355.68,
      "end": 358.38,
      "text": " And Lambda can be the place where you write your glue logic,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 358.52,
      "end": 361.28,
      "text": " for instance, even if you need to convert data from one format"
    },
    {
      "speakerLabel": "spk_0",
      "start": 361.42,
      "end": 364.38,
      "text": " to another to make it possible for different systems"
    },
    {
      "speakerLabel": "spk_0",
      "start": 364.52,
      "end": 366.02,
      "text": " to communicate with each other."
    },
    {
      "speakerLabel": "spk_0",
      "start": 366.86,
      "end": 368.86,
      "text": " Other use cases are background processing,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 368.98,
      "end": 370.62,
      "text": " very, very common for Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 370.76,
      "end": 373.08,
      "text": " One of the most common tutorials you'll find out there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 373.08,
      "end": 376.62,
      "text": " is how to create image thumbnails using Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 376.74,
      "end": 379.03999999999996,
      "text": " So that's definitely a use case"
    },
    {
      "speakerLabel": "spk_0",
      "start": 379.18,
      "end": 381.84,
      "text": " that in the space of background processing,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 381.97999999999996,
      "end": 384.24,
      "text": " you get pictures somewhere, you can load these pictures,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 384.38,
      "end": 387.14,
      "text": " create multiple variations of this picture all in the background"
    },
    {
      "speakerLabel": "spk_0",
      "start": 387.28,
      "end": 389.68,
      "text": " while your application is still running somewhere else."
    },
    {
      "speakerLabel": "spk_0",
      "start": 390.68,
      "end": 391.94,
      "text": " Another interesting use case,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 392.08,
      "end": 394.71999999999997,
      "text": " this is a little bit more of a new use case, I feel."
    },
    {
      "speakerLabel": "spk_0",
      "start": 394.84,
      "end": 396.82,
      "text": " It's something we've been talking about before."
    },
    {
      "speakerLabel": "spk_0",
      "start": 396.94,
      "end": 400.64,
      "text": " And we also did a joint blog post with Amazon itself"
    },
    {
      "speakerLabel": "spk_0",
      "start": 400.64,
      "end": 403.4,
      "text": " and it's in the space of high-performance computing."
    },
    {
      "speakerLabel": "spk_0",
      "start": 403.53999999999996,
      "end": 405.9,
      "text": " It is an up-and-coming use case for Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.03999999999996,
      "end": 409.03999999999996,
      "text": " but you can definitely use Lambda also in this particular space."
    },
    {
      "speakerLabel": "spk_0",
      "start": 409.18,
      "end": 411.5,
      "text": " And we will post a link in the show notes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 411.64,
      "end": 413.24,
      "text": " with the blog post I just mentioned,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 413.38,
      "end": 415.7,
      "text": " where you can find all the details about this particular use case"
    },
    {
      "speakerLabel": "spk_0",
      "start": 415.84,
      "end": 419.2,
      "text": " and how we actually use Lambda to be able to fulfill the requirements."
    },
    {
      "speakerLabel": "spk_0",
      "start": 420.44,
      "end": 422.68,
      "text": " Very similarly is the space of ETL."
    },
    {
      "speakerLabel": "spk_0",
      "start": 422.8,
      "end": 425.24,
      "text": " We already mentioned that Lambda can be a very good layer"
    },
    {
      "speakerLabel": "spk_0",
      "start": 425.38,
      "end": 428.08,
      "text": " to load data, transform it, and start it somewhere else."
    },
    {
      "speakerLabel": "spk_0",
      "start": 428.08,
      "end": 432.88,
      "text": " So you can also use it that way just to perform ETL kind of workloads."
    },
    {
      "speakerLabel": "spk_0",
      "start": 433.02,
      "end": 435.38,
      "text": " And there are some more esoteric use cases, I feel,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 435.52,
      "end": 437.38,
      "text": " because I mean, I've seen that in the documentation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.52,
      "end": 440.18,
      "text": " but I haven't seen them being actually used in practice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 440.32,
      "end": 443.62,
      "text": " But for instance, if you use RDS, which is the database service,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 443.76,
      "end": 446.15999999999997,
      "text": " SQL database service that AWS gives you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 446.28,
      "end": 450.08,
      "text": " you can actually create custom functions in the database"
    },
    {
      "speakerLabel": "spk_0",
      "start": 450.21999999999997,
      "end": 453.96,
      "text": " and then use Lambda as the compute layer for this custom function."
    },
    {
      "speakerLabel": "spk_0",
      "start": 454.08,
      "end": 457.08,
      "text": " So that basically means that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 457.08,
      "end": 459.91999999999996,
      "text": " invent your own Postgres function,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 460.03999999999996,
      "end": 461.78,
      "text": " and the business logic lives in Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 461.91999999999996,
      "end": 464.84,
      "text": " And AWS will take care when you're using that custom function"
    },
    {
      "speakerLabel": "spk_0",
      "start": 464.97999999999996,
      "end": 467.53999999999996,
      "text": " in your SQL statements to actually invoke your Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 467.68,
      "end": 469.78,
      "text": " to perform specific custom operations."
    },
    {
      "speakerLabel": "spk_0",
      "start": 470.68,
      "end": 474.08,
      "text": " So with that being said, we have a bunch of use cases in mind."
    },
    {
      "speakerLabel": "spk_0",
      "start": 474.21999999999997,
      "end": 476.97999999999996,
      "text": " But I suppose that there are also a lot of cases"
    },
    {
      "speakerLabel": "spk_0",
      "start": 477.12,
      "end": 479.82,
      "text": " where you wouldn't really want to use Lambda, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 479.94,
      "end": 482.38,
      "text": " It's not a silver bullet for every use case."
    },
    {
      "speakerLabel": "spk_0",
      "start": 482.52,
      "end": 483.52,
      "text": " What do you think, Eoin?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 483.64,
      "end": 484.64,
      "text": " For sure, yeah."
    },
    {
      "speakerLabel": "spk_1",
      "start": 484.64,
      "end": 487.5,
      "text": " For like if you have a long running job that you just can't split,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 487.64,
      "end": 489.3,
      "text": " or it doesn't make sense to split it into something"
    },
    {
      "speakerLabel": "spk_1",
      "start": 489.44,
      "end": 492.34,
      "text": " that runs in a few minutes, why bother with Lambda?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 492.47999999999996,
      "end": 494.44,
      "text": " You would just try and use a simple container service"
    },
    {
      "speakerLabel": "spk_1",
      "start": 494.58,
      "end": 498.4,
      "text": " that could just stay up for the duration of the job indefinitely."
    },
    {
      "speakerLabel": "spk_1",
      "start": 499.24,
      "end": 501.18,
      "text": " If you've got something that's stateful,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 501.3,
      "end": 503.58,
      "text": " and that would be often legacy applications,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 503.7,
      "end": 506.9,
      "text": " legacy web servers that are using sessions"
    },
    {
      "speakerLabel": "spk_1",
      "start": 507.03999999999996,
      "end": 509.94,
      "text": " that require in-memory storage and a server that stays up,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 510.08,
      "end": 511.14,
      "text": " they're just not a good fit."
    },
    {
      "speakerLabel": "spk_1",
      "start": 511.28,
      "end": 513.84,
      "text": " So if you find yourself with a legacy stack,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 513.84,
      "end": 515.5600000000001,
      "text": " and you're trying to shoehorn it into Lambda,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 515.7,
      "end": 518.5600000000001,
      "text": " maybe you should think it's probably not worth the effort."
    },
    {
      "speakerLabel": "spk_1",
      "start": 519.24,
      "end": 521.0400000000001,
      "text": " Another thing is really important to notice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 521.1600000000001,
      "end": 523,
      "text": " We talked about this being event-driven, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 523.14,
      "end": 525.64,
      "text": " Every event comes into Lambda over HTTP,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 526.46,
      "end": 528.94,
      "text": " and it comes into the service, then gets processed by your function."
    },
    {
      "speakerLabel": "spk_1",
      "start": 529.0600000000001,
      "end": 532.34,
      "text": " There's no kind of open TCP connection support."
    },
    {
      "speakerLabel": "spk_1",
      "start": 532.46,
      "end": 533.94,
      "text": " There's no streaming support."
    },
    {
      "speakerLabel": "spk_1",
      "start": 534.0600000000001,
      "end": 536.7,
      "text": " So you can do things like Web Sockets,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 536.84,
      "end": 538.1,
      "text": " but you're not really using Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 538.24,
      "end": 540.96,
      "text": " You're using API Gateway to achieve that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 540.96,
      "end": 544.14,
      "text": " So you don't have anything where you need a socket or an open connection,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 544.26,
      "end": 546.1,
      "text": " or you're kind of real-time streaming"
    },
    {
      "speakerLabel": "spk_1",
      "start": 546.24,
      "end": 548.3000000000001,
      "text": " where part of the data gets processed."
    },
    {
      "speakerLabel": "spk_1",
      "start": 548.44,
      "end": 551.0600000000001,
      "text": " As the socket stays open, that's not a fit for Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 551.2,
      "end": 554.86,
      "text": " So if you can imagine a real-time game server, it's not a good fit."
    },
    {
      "speakerLabel": "spk_1",
      "start": 556.3000000000001,
      "end": 558.5600000000001,
      "text": " But speaking of payload, when your payload,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 558.7,
      "end": 561.26,
      "text": " either the request or the response, is bigger than six megabytes,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 561.4000000000001,
      "end": 563.76,
      "text": " that's also not a fit for Lambda because that's the limit."
    },
    {
      "speakerLabel": "spk_1",
      "start": 564.46,
      "end": 568.86,
      "text": " And if you've got high constant predictable load,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 568.86,
      "end": 572.8000000000001,
      "text": " so from a pricing perspective, right, let's think about your traffic."
    },
    {
      "speakerLabel": "spk_1",
      "start": 572.92,
      "end": 577.4,
      "text": " If your traffic is constant and doesn't ever drop,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 577.52,
      "end": 579.92,
      "text": " doesn't ever peak beyond a certain level,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 580.0600000000001,
      "end": 583.82,
      "text": " then you're probably not really taking much of an advantage by going to Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 583.96,
      "end": 585.72,
      "text": " You might as well keep stick with something,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 585.86,
      "end": 587.32,
      "text": " especially for pricing perspective,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 587.46,
      "end": 588.86,
      "text": " but it's worth doing the cost calculation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 589,
      "end": 590.52,
      "text": " because maybe it's cheap in both cases,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 590.66,
      "end": 593.22,
      "text": " and it's a trade-off between complexity"
    },
    {
      "speakerLabel": "spk_1",
      "start": 593.36,
      "end": 595.32,
      "text": " and all the other features of Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 595.32,
      "end": 597.1800000000001,
      "text": " Now, when we started and we defined Lambda,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 597.32,
      "end": 601.1800000000001,
      "text": " we talked about Lambda as the original simple definition of Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 601.32,
      "end": 604.5200000000001,
      "text": " And I think it's worthwhile calling out that in recent years,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 604.6600000000001,
      "end": 606.88,
      "text": " as Lambda has added more and more features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 607.0200000000001,
      "end": 608.98,
      "text": " you could say that it's become more complex,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 609.12,
      "end": 611.08,
      "text": " just because there's more knobs to twiddle,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 611.22,
      "end": 614.1800000000001,
      "text": " more configuration options, and more things you can do with it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 614.7800000000001,
      "end": 617.82,
      "text": " So if you look at some of the recent features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 617.96,
      "end": 620.08,
      "text": " you have provision concurrency now,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 620.22,
      "end": 597.32,
      "text": " and you have support for destinations and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 597.32,
      "end": 601.38,
      "text": " different architectures including, you know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 601.5200000000001,
      "end": 603.1400000000001,
      "text": " a lot of other features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 603.2800000000001,
      "end": 606.5200000000001,
      "text": " and you have a lot of other features that you can do with it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 606.6400000000001,
      "end": 608.32,
      "text": " So you can take advantage of that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 608.44,
      "end": 610.4200000000001,
      "text": " And you can also do that with Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 610.5400000000001,
      "end": 612.34,
      "text": " And I think it's worth calling out that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 612.48,
      "end": 615.5400000000001,
      "text": " in recent years, as Lambda has added more and more features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 615.6800000000001,
      "end": 617.5200000000001,
      "text": " you could say that it's become more complex,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 617.6400000000001,
      "end": 619.4200000000001,
      "text": " just because there's more knobs to twiddle,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 619.5400000000001,
      "end": 622.74,
      "text": " more configuration options and more things you can do with it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 622.8800000000001,
      "end": 626.1400000000001,
      "text": " So if you look at some of the recent features,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 626.14,
      "end": 628.4,
      "text": " you have different architectures, including ARM,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 628.54,
      "end": 631,
      "text": " and different options in event source mappings,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 631.14,
      "end": 634.18,
      "text": " and EFS support and your VPC options."
    },
    {
      "speakerLabel": "spk_1",
      "start": 634.3,
      "end": 636.1,
      "text": " And this is only going to grow and grow and grow"
    },
    {
      "speakerLabel": "spk_1",
      "start": 636.24,
      "end": 637.8,
      "text": " as Lambda grows and evolves."
    },
    {
      "speakerLabel": "spk_1",
      "start": 637.9399999999999,
      "end": 640.4,
      "text": " So it's worth kind of reassessing Lambda and thinking,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 640.54,
      "end": 642.4,
      "text": " well, is this now too complex for my needs?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 642.54,
      "end": 644.8,
      "text": " I thought this was something simple that I could just fire up,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 644.9399999999999,
      "end": 647.9399999999999,
      "text": " and I didn't have to worry about, oh, which container or instance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 648.08,
      "end": 649.38,
      "text": " should I run my code on?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 649.5,
      "end": 651.54,
      "text": " I could just have a nice ephemeral piece of compute"
    },
    {
      "speakerLabel": "spk_1",
      "start": 651.68,
      "end": 653.2,
      "text": " that runs in response to an event."
    },
    {
      "speakerLabel": "spk_1",
      "start": 653.34,
      "end": 654.84,
      "text": " So now has it become complex?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 654.84,
      "end": 658.14,
      "text": " I can reconsider my options and go for containers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 658.26,
      "end": 659.84,
      "text": " I think this is worth thinking about."
    },
    {
      "speakerLabel": "spk_1",
      "start": 659.96,
      "end": 662.5,
      "text": " It's a topic of conversation these days."
    },
    {
      "speakerLabel": "spk_1",
      "start": 662.64,
      "end": 664.8000000000001,
      "text": " And if we talk about containers,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 664.94,
      "end": 667.0400000000001,
      "text": " you could compare it to deploying with ECS"
    },
    {
      "speakerLabel": "spk_1",
      "start": 667.1600000000001,
      "end": 670.14,
      "text": " or to Kubernetes with EKS or another option."
    },
    {
      "speakerLabel": "spk_1",
      "start": 670.26,
      "end": 673.1600000000001,
      "text": " And I wouldn't say that it's inherently more simple"
    },
    {
      "speakerLabel": "spk_1",
      "start": 673.3000000000001,
      "end": 677.64,
      "text": " to do that with, to deploy services with container-based solutions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 677.76,
      "end": 680.8000000000001,
      "text": " I guess the difference is with Lambda is that you're more constrained"
    },
    {
      "speakerLabel": "spk_1",
      "start": 680.94,
      "end": 681.94,
      "text": " in how you do events."
    },
    {
      "speakerLabel": "spk_1",
      "start": 682.0600000000001,
      "end": 684.6,
      "text": " There's very specific ways in how you do your events come in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 684.6,
      "end": 686.8000000000001,
      "text": " and how you do logging and how you do tracing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 686.9200000000001,
      "end": 689.3000000000001,
      "text": " And container environments are less constrained"
    },
    {
      "speakerLabel": "spk_1",
      "start": 689.4200000000001,
      "end": 690.62,
      "text": " because they let you do whatever you want"
    },
    {
      "speakerLabel": "spk_1",
      "start": 690.76,
      "end": 694.0600000000001,
      "text": " and integrate with whatever you want and run whatever framework you want."
    },
    {
      "speakerLabel": "spk_1",
      "start": 694.2,
      "end": 697.3000000000001,
      "text": " So in some ways, they seem like an easy path to get started with"
    },
    {
      "speakerLabel": "spk_1",
      "start": 697.4200000000001,
      "end": 701.12,
      "text": " if you have a comfortable set of frameworks you want to work with."
    },
    {
      "speakerLabel": "spk_1",
      "start": 701.26,
      "end": 703.6,
      "text": " But sometimes that complexity won't reveal itself"
    },
    {
      "speakerLabel": "spk_1",
      "start": 703.72,
      "end": 706.76,
      "text": " until you realize you have to manage your container environment at scale"
    },
    {
      "speakerLabel": "spk_1",
      "start": 706.9,
      "end": 708.4200000000001,
      "text": " and you realize you have to actually understand"
    },
    {
      "speakerLabel": "spk_1",
      "start": 708.5600000000001,
      "end": 709.82,
      "text": " how that framework works under the hood"
    },
    {
      "speakerLabel": "spk_1",
      "start": 709.96,
      "end": 711.76,
      "text": " and how it works when you've got edge cases"
    },
    {
      "speakerLabel": "spk_1",
      "start": 711.9,
      "end": 714.22,
      "text": " and performance of security problems."
    },
    {
      "speakerLabel": "spk_1",
      "start": 714.22,
      "end": 716.6800000000001,
      "text": " So I think it's always a set of trade-offs"
    },
    {
      "speakerLabel": "spk_1",
      "start": 716.82,
      "end": 718.38,
      "text": " and you have to really kind of look deeply"
    },
    {
      "speakerLabel": "spk_1",
      "start": 718.52,
      "end": 721.98,
      "text": " and kind of see what your case requires."
    },
    {
      "speakerLabel": "spk_1",
      "start": 722.12,
      "end": 724.32,
      "text": " But I'm interested in your opinion, Luciano, what do you think?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 724.46,
      "end": 726.38,
      "text": " Has Lambda gone more complex?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 726.52,
      "end": 728.82,
      "text": " Is it more complicated than containers?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 728.96,
      "end": 732.62,
      "text": " Yeah, I have been exposed a little bit to Kubernetes and Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 732.76,
      "end": 735.12,
      "text": " Maybe a little bit more to Lambda than to Kubernetes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 735.26,
      "end": 738.32,
      "text": " So what I'm about to say might be a little bit unfair to Kubernetes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 738.46,
      "end": 743.22,
      "text": " but my feeling is that Kubernetes is a great tool and it's very generic."
    },
    {
      "speakerLabel": "spk_0",
      "start": 743.22,
      "end": 746.22,
      "text": " It's kind of agnostic for the most part"
    },
    {
      "speakerLabel": "spk_0",
      "start": 746.34,
      "end": 748.52,
      "text": " to the cloud provider you're going to be using."
    },
    {
      "speakerLabel": "spk_0",
      "start": 748.64,
      "end": 749.82,
      "text": " So that's amazing."
    },
    {
      "speakerLabel": "spk_0",
      "start": 749.94,
      "end": 752.9200000000001,
      "text": " But at the same time, I feel that it requires a little bit more knowledge"
    },
    {
      "speakerLabel": "spk_0",
      "start": 753.0400000000001,
      "end": 755.52,
      "text": " and understanding before you can be proficient with it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 755.64,
      "end": 758.52,
      "text": " So definitely the barrier to entry is higher with Kubernetes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 758.64,
      "end": 760.28,
      "text": " than it is with Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 760.4200000000001,
      "end": 763.12,
      "text": " And it's also an unfair comparison because, of course, as we said,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 763.24,
      "end": 766.44,
      "text": " Kubernetes is a more general purpose kind of runtime,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 766.58,
      "end": 768.1800000000001,
      "text": " while Lambda, it's very specific."
    },
    {
      "speakerLabel": "spk_0",
      "start": 768.32,
      "end": 770.9200000000001,
      "text": " I try to solve one problem in a very opinionated way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 770.92,
      "end": 774.86,
      "text": " So, of course, it's kind of easier that Lambda has a smaller surface"
    },
    {
      "speakerLabel": "spk_0",
      "start": 775,
      "end": 776.8,
      "text": " and it's easier to get started with."
    },
    {
      "speakerLabel": "spk_0",
      "start": 776.92,
      "end": 780,
      "text": " But at the same time, that surface can get very, very big"
    },
    {
      "speakerLabel": "spk_0",
      "start": 780.12,
      "end": 781.92,
      "text": " as you get more into the weeds"
    },
    {
      "speakerLabel": "spk_0",
      "start": 782.06,
      "end": 785.1999999999999,
      "text": " and you start to build more and more complex serverless applications."
    },
    {
      "speakerLabel": "spk_0",
      "start": 785.3199999999999,
      "end": 786.9,
      "text": " At that point, you will need to start understanding"
    },
    {
      "speakerLabel": "spk_0",
      "start": 787.02,
      "end": 789.5,
      "text": " about networking and security and IAM"
    },
    {
      "speakerLabel": "spk_0",
      "start": 789.62,
      "end": 791.6999999999999,
      "text": " and a bunch of other AWS-related topics"
    },
    {
      "speakerLabel": "spk_0",
      "start": 791.8199999999999,
      "end": 794.3199999999999,
      "text": " that might not be something that you have done before."
    },
    {
      "speakerLabel": "spk_0",
      "start": 794.4599999999999,
      "end": 798.1999999999999,
      "text": " So that surface might just bleed into a bunch of other AWS concepts"
    },
    {
      "speakerLabel": "spk_0",
      "start": 798.2,
      "end": 801.7800000000001,
      "text": " that you just need to master to be able to actually use serverless well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 801.9000000000001,
      "end": 805.2800000000001,
      "text": " So I suppose that at the end of the day,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 805.4000000000001,
      "end": 807.2,
      "text": " what I'm trying to say is that, yes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 807.34,
      "end": 810.9000000000001,
      "text": " easier to start with serverless and AWS using Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 811.0400000000001,
      "end": 814.2,
      "text": " but then as you start to build more and more complicated applications,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 814.34,
      "end": 816.4000000000001,
      "text": " there is always a certain degree of complexity"
    },
    {
      "speakerLabel": "spk_0",
      "start": 816.5400000000001,
      "end": 817.8000000000001,
      "text": " that you will need to deal with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 817.94,
      "end": 820.48,
      "text": " and you need to start to build a more realistic understanding"
    },
    {
      "speakerLabel": "spk_0",
      "start": 820.6,
      "end": 823.1,
      "text": " of the stack that you are working with."
    },
    {
      "speakerLabel": "spk_0",
      "start": 823.1,
      "end": 828.16,
      "text": " So this is probably equally true in both Kubernetes and AWS Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 828.3000000000001,
      "end": 829.96,
      "text": " So just keep that in mind."
    },
    {
      "speakerLabel": "spk_0",
      "start": 830.1,
      "end": 833.26,
      "text": " Don't just say one is easier than the other in absolute terms."
    },
    {
      "speakerLabel": "spk_0",
      "start": 834.4,
      "end": 838.3000000000001,
      "text": " And one of the interesting points that I heard many times people complain about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 838.44,
      "end": 842.24,
      "text": " when it comes to the complexity of Lambda specifically is pricing,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 842.36,
      "end": 846,
      "text": " because it's very easy to just say it's cheap and convenient,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 846.14,
      "end": 847.84,
      "text": " but that's not always the truth."
    },
    {
      "speakerLabel": "spk_0",
      "start": 847.96,
      "end": 850.64,
      "text": " You need to make an exercise and understand, first of all,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 850.64,
      "end": 853.38,
      "text": " what's the model and then given your specific use case,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 853.52,
      "end": 857.02,
      "text": " how do you actually apply that model and figure out, okay,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 857.14,
      "end": 859.24,
      "text": " this is more or less how much it's going to cost me."
    },
    {
      "speakerLabel": "spk_0",
      "start": 860.18,
      "end": 864.14,
      "text": " So let's have a quick look at what is the pricing model with AWS Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 865.22,
      "end": 867.4399999999999,
      "text": " The first thing to understand that we didn't mention so far"
    },
    {
      "speakerLabel": "spk_0",
      "start": 867.58,
      "end": 869.54,
      "text": " is that when you provision a Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 869.68,
      "end": 871.84,
      "text": " it's really important that you specify"
    },
    {
      "speakerLabel": "spk_0",
      "start": 871.98,
      "end": 874.98,
      "text": " what is the amount of memory that you want that Lambda to have."
    },
    {
      "speakerLabel": "spk_0",
      "start": 875.12,
      "end": 877.88,
      "text": " And one non-obvious thing is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 878.02,
      "end": 880.3199999999999,
      "text": " when you provision a certain amount of memory,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 880.32,
      "end": 883.7,
      "text": " that will come with very specific CPU configuration."
    },
    {
      "speakerLabel": "spk_0",
      "start": 883.82,
      "end": 886.6,
      "text": " And the more memory you configure, the better the CPU."
    },
    {
      "speakerLabel": "spk_0",
      "start": 886.72,
      "end": 890.1,
      "text": " So basically, you don't control the CPU, you just control the memory,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 890.22,
      "end": 892.32,
      "text": " but the more memory you allocate, the better the CPU."
    },
    {
      "speakerLabel": "spk_0",
      "start": 892.46,
      "end": 894.8000000000001,
      "text": " So sometimes if you just want a better CPU,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 894.9200000000001,
      "end": 896.3000000000001,
      "text": " you'll need to allocate more memory,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 896.4200000000001,
      "end": 899.2600000000001,
      "text": " even if you don't really need that much amount of memory."
    },
    {
      "speakerLabel": "spk_0",
      "start": 899.4000000000001,
      "end": 901.5200000000001,
      "text": " This is just the model that Lambda gives you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 901.6600000000001,
      "end": 904.4200000000001,
      "text": " and I suppose it's tightly related to the pricing model"
    },
    {
      "speakerLabel": "spk_0",
      "start": 904.5600000000001,
      "end": 907.4000000000001,
      "text": " and to the allocation model that AWS needs to figure out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 907.5200000000001,
      "end": 909.8000000000001,
      "text": " when they really need to provision your Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 909.8,
      "end": 911.88,
      "text": " somewhere in a cluster."
    },
    {
      "speakerLabel": "spk_0",
      "start": 912.5999999999999,
      "end": 915.0999999999999,
      "text": " So once you provision your own Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 915.24,
      "end": 917.3,
      "text": " and you select a certain amount of memory,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 917.4399999999999,
      "end": 921.18,
      "text": " then the cost, there are actually two different pieces"
    },
    {
      "speakerLabel": "spk_0",
      "start": 921.3,
      "end": 922.9799999999999,
      "text": " that contribute to the final cost."
    },
    {
      "speakerLabel": "spk_0",
      "start": 923.0999999999999,
      "end": 926.28,
      "text": " One is the execution time and one is the invocation cost."
    },
    {
      "speakerLabel": "spk_0",
      "start": 926.4,
      "end": 928.74,
      "text": " Execution time is literally given one Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 928.88,
      "end": 931.5799999999999,
      "text": " how long does it run? You are going to pay for that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 931.6999999999999,
      "end": 936,
      "text": " And invocation cost is how many millions of invocations are you doing?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 936.14,
      "end": 937.6999999999999,
      "text": " And there is a price on that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 937.7,
      "end": 941.6400000000001,
      "text": " For the execution cost is literally a function of the time"
    },
    {
      "speakerLabel": "spk_0",
      "start": 941.76,
      "end": 944.0400000000001,
      "text": " in millisecond and memory."
    },
    {
      "speakerLabel": "spk_0",
      "start": 944.1600000000001,
      "end": 945.7,
      "text": " And just to give you an example,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 945.84,
      "end": 947.96,
      "text": " even though maybe it's not really meaningful,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 948.1,
      "end": 952.76,
      "text": " if you go for the lowest, which is 128 megabytes of memory,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 952.9000000000001,
      "end": 960.0400000000001,
      "text": " for every millisecond, you pay 0.00000000,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 960.1600000000001,
      "end": 964.26,
      "text": " that's nine zeros, $21."
    },
    {
      "speakerLabel": "spk_0",
      "start": 964.26,
      "end": 967.72,
      "text": " So it looks like it's infinitesimally small."
    },
    {
      "speakerLabel": "spk_0",
      "start": 967.86,
      "end": 970.52,
      "text": " But if you are running your Lambda function for long"
    },
    {
      "speakerLabel": "spk_0",
      "start": 970.66,
      "end": 972.16,
      "text": " and the limit is 15 minutes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 972.3,
      "end": 974.12,
      "text": " you will start to actually see that cost."
    },
    {
      "speakerLabel": "spk_0",
      "start": 974.26,
      "end": 977.3,
      "text": " So again, this is one of those false things"
    },
    {
      "speakerLabel": "spk_0",
      "start": 977.42,
      "end": 978.5,
      "text": " that might be very misleading."
    },
    {
      "speakerLabel": "spk_0",
      "start": 978.62,
      "end": 981.1,
      "text": " It looks like an infinitesimally small number,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 981.22,
      "end": 983.9,
      "text": " but it multiplies up if you actually use this feature a lot."
    },
    {
      "speakerLabel": "spk_0",
      "start": 984.02,
      "end": 986.3,
      "text": " So make sure to do the maths to really understand"
    },
    {
      "speakerLabel": "spk_0",
      "start": 986.42,
      "end": 988.4,
      "text": " what's going to be the cost for you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 990.3,
      "end": 993.92,
      "text": " And when it comes to the invocation cost, you have 20 cents of dollars per million of invocations"
    },
    {
      "speakerLabel": "spk_0",
      "start": 993.92,
      "end": 995.38,
      "text": " this is in Ireland."
    },
    {
      "speakerLabel": "spk_0",
      "start": 995.52,
      "end": 996.68,
      "text": " I think it might be slightly different"
    },
    {
      "speakerLabel": "spk_0",
      "start": 996.8199999999999,
      "end": 998.68,
      "text": " if you go in different regions."
    },
    {
      "speakerLabel": "spk_0",
      "start": 998.8199999999999,
      "end": 1000.8199999999999,
      "text": " But again, seems like a very low cost,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1000.9599999999999,
      "end": 1002.8199999999999,
      "text": " but if you actually use Lambda a lot,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1002.9599999999999,
      "end": 1005.28,
      "text": " it's not unlikely that you will be doing multiple millions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1005.42,
      "end": 1008.28,
      "text": " of invocations during your billing period."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1008.42,
      "end": 1012.66,
      "text": " So that cost might add up as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1012.78,
      "end": 1016.92,
      "text": " I suppose one kind of observation that we can make"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1017.06,
      "end": 1020.4599999999999,
      "text": " is that Lambda can be very, very convenient"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1020.5799999999999,
      "end": 1022.78,
      "text": " for when you have very spiky use cases"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1022.78,
      "end": 1024.44,
      "text": " or when it's very, very hard to predict"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1024.58,
      "end": 1027.44,
      "text": " what's going to be the actual consumption of the service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1027.58,
      "end": 1029.52,
      "text": " Classic example, you are building a startup,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1029.6399999999999,
      "end": 1031.32,
      "text": " you're trying to validate an idea."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1031.44,
      "end": 1033.6399999999999,
      "text": " Probably two people are going to be using it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1033.78,
      "end": 1034.78,
      "text": " the very first few months"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1034.92,
      "end": 1036.24,
      "text": " while you try to validate the idea."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1036.3799999999999,
      "end": 1037.92,
      "text": " But if you end up being very, very successful,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1038.04,
      "end": 1040.52,
      "text": " you might end up very easily with like thousands of users"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1040.6399999999999,
      "end": 1042.02,
      "text": " in a very short amount of time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1042.1399999999999,
      "end": 1043.72,
      "text": " If you are very lucky and successful,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1043.84,
      "end": 1045.04,
      "text": " maybe even millions of users,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1045.18,
      "end": 1048.32,
      "text": " so that might just skyrocket the usage of your platform."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1048.44,
      "end": 1050.6399999999999,
      "text": " And in that case, you didn't really have to make"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1050.64,
      "end": 1052.7,
      "text": " an upfront investment to support the traffic."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1052.8400000000001,
      "end": 1055.5800000000002,
      "text": " So this is probably where the convenience of Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1055.7,
      "end": 1058.98,
      "text": " and its pricing model is kind of at its best."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1059.1000000000001,
      "end": 1062.6000000000001,
      "text": " And the opposite case is actually interesting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1062.74,
      "end": 1065.9,
      "text": " where you really can predict in advance the cost"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1066.0400000000002,
      "end": 1067.9,
      "text": " and the use and the load."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1068.0400000000002,
      "end": 1070.5800000000002,
      "text": " So in that case, actually Lambda comes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1070.7,
      "end": 1073.88,
      "text": " a little bit more expensive by how much we are actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1074,
      "end": 1077.14,
      "text": " going to link to an article that Eoin, you wrote some time ago,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1077.2800000000002,
      "end": 1079.68,
      "text": " which has some good numbers in it and compares Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1079.68,
      "end": 1081.5600000000002,
      "text": " I guess, Fargate, I guess, EC2."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1081.68,
      "end": 1084.66,
      "text": " But the bottom line of that is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1084.78,
      "end": 1086.5800000000002,
      "text": " when you can predict the actual usage"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1086.72,
      "end": 1088.8600000000001,
      "text": " and that usage is pretty much constant,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1088.98,
      "end": 1091.48,
      "text": " you probably can make an effort into using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1091.6200000000001,
      "end": 1093.76,
      "text": " something more traditional like EC2."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1093.88,
      "end": 1097.0600000000002,
      "text": " Of course, assuming that you don't have a lot of TCO"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1097.18,
      "end": 1098.5600000000002,
      "text": " into provision in those EC2s,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1098.68,
      "end": 1100.48,
      "text": " if you just look at the compute cost,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1100.6200000000001,
      "end": 1103.18,
      "text": " that compute cost will be much lower"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1103.3200000000002,
      "end": 1105.42,
      "text": " than the equivalent compute cost of Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1105.5600000000002,
      "end": 1107.16,
      "text": " And if you think about that, that makes sense"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1107.16,
      "end": 1111.3600000000001,
      "text": " because AWS is making you pay the actual compute with a premium"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1111.5,
      "end": 1113.74,
      "text": " because they take care of all these kind of infrastructures"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1113.8600000000001,
      "end": 1115.8600000000001,
      "text": " spinning things up and down for you,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1116,
      "end": 1118.3000000000002,
      "text": " while in EC2, all that cost is on you."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1118.44,
      "end": 1122.26,
      "text": " So it kind of makes sense that if you just compare compute per compute,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1123.2,
      "end": 1125.94,
      "text": " Lambda is more expensive than something like EC2."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1126.4,
      "end": 1128.5,
      "text": " It's true. It's interesting also to just note"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1128.64,
      "end": 1130.5,
      "text": " that since that article was written,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1130.64,
      "end": 1132.9,
      "text": " they have introduced tiered pricing for Lambda as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1133.0400000000002,
      "end": 1135.94,
      "text": " So if you are using a huge number of invocations"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1135.94,
      "end": 1137.48,
      "text": " for batch processing,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1137.6200000000001,
      "end": 1139.72,
      "text": " like you mentioned one of the use cases earlier,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1139.8400000000001,
      "end": 1142.8200000000002,
      "text": " and you're starting to get into really big volumes,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1142.94,
      "end": 1143.94,
      "text": " there is no tiered pricing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1144.0800000000002,
      "end": 1146.04,
      "text": " So the pricing actually goes down in tiers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1146.18,
      "end": 1149.44,
      "text": " And so I think it's kind of moving in hopefully a better direction."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1149.5800000000002,
      "end": 1153.92,
      "text": " It would be nice to see it kind of be more comparable to EC2 eventually,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1154.04,
      "end": 1156.3400000000001,
      "text": " so that we don't have to think, okay, it's too expensive."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1156.48,
      "end": 1158.24,
      "text": " Let's completely change our architecture"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1158.38,
      "end": 1161.14,
      "text": " because the pricing is too expensive because you hate to have to do that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1161.94,
      "end": 1165.24,
      "text": " Absolutely, especially because it's not going to be a small change."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1165.24,
      "end": 1167.2,
      "text": " to just move from Lambda to something else."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1167.34,
      "end": 1169.7,
      "text": " So yeah, definitely worth keeping in mind"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1169.84,
      "end": 1172.14,
      "text": " that if you grow really a lot,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1172.28,
      "end": 1174.2,
      "text": " there will be this kind of pricing discounts"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1174.34,
      "end": 1176.7,
      "text": " that you basically will have in your billing."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1177.9,
      "end": 1180.7,
      "text": " Another interesting topic that you briefly mentioned,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1180.84,
      "end": 1182.54,
      "text": " but I want to give a little bit more details"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1182.68,
      "end": 1186.54,
      "text": " is what are the limitations that you have with Lambda?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1186.68,
      "end": 1190.24,
      "text": " Because some use cases, you just cannot solve that with Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.38,
      "end": 1193.38,
      "text": " just because there are limitations in the architecture model of Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1193.38,
      "end": 1194.96,
      "text": " And you already mentioned the payload,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.0800000000002,
      "end": 1197.7800000000002,
      "text": " which is six megabytes request-response,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1197.92,
      "end": 1200.3600000000001,
      "text": " but this is true only for synchronous invocation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1200.48,
      "end": 1202.7600000000002,
      "text": " We'll talk a little bit more about that in a second."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1202.88,
      "end": 1205.98,
      "text": " For asynchronous invocation, that limit is actually much lower."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1206.1200000000001,
      "end": 1207.68,
      "text": " It's 250 kilobytes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1207.8200000000002,
      "end": 1209.18,
      "text": " So you need to be careful, for instance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1209.3200000000002,
      "end": 1213.2800000000002,
      "text": " if you are triggering a Lambda from EventBridge,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1213.42,
      "end": 1217.16,
      "text": " that payload cannot be in the order of megabytes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1217.2800000000002,
      "end": 1219.5800000000002,
      "text": " It can be up to 250 kilobytes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1220.2800000000002,
      "end": 1223.0600000000002,
      "text": " Another interesting thing is the amount of time"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1223.06,
      "end": 1226.6399999999999,
      "text": " and amount of source code that you can ship into a Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1226.76,
      "end": 1230.26,
      "text": " And this is a little bit tricky because you can ship"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1230.3999999999999,
      "end": 1232.3999999999999,
      "text": " actually Lambda code in two different ways."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1232.54,
      "end": 1235.94,
      "text": " One is through a zip file and one is through a container image."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1236.06,
      "end": 1239.46,
      "text": " If you go for the zip file, the uncompressed sites inside"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1239.6,
      "end": 1242.76,
      "text": " that zip file cannot be bigger than 250 megabytes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1243.3999999999999,
      "end": 1246.44,
      "text": " If you go for a container, it's actually much higher than that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1246.56,
      "end": 1249.6599999999999,
      "text": " because you can ship as much as 10 gigabytes of source code."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1249.8,
      "end": 1250.94,
      "text": " Now, why is this important?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1250.94,
      "end": 1253.42,
      "text": " Because sometimes, especially when you're using languages"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1253.54,
      "end": 1255.8200000000002,
      "text": " that will have big native libraries, for instance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1255.94,
      "end": 1260.94,
      "text": " to connect to databases or to perform other kinds of operations,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1261.0800000000002,
      "end": 1263.54,
      "text": " you might have very big binaries there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263.68,
      "end": 1267.38,
      "text": " So sometimes you just try to stuff a bunch of different libraries into it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1267.52,
      "end": 1269.64,
      "text": " Maybe some of them will end up with big binaries."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1269.78,
      "end": 1274.38,
      "text": " It's very easy to just go slightly over this 250 megabytes limit."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1274.52,
      "end": 1275.74,
      "text": " And in that case, you need to start to think,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1275.88,
      "end": 1278.8200000000002,
      "text": " okay, how do I split my Lambda maybe into multiple Lambdas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1278.82,
      "end": 1281.76,
      "text": " so that you kind of reduce the size of the source code?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1281.8999999999999,
      "end": 1284.2,
      "text": " Otherwise, you need to think about using containers,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1284.32,
      "end": 1286.4199999999998,
      "text": " which is slightly more complicated in my opinion,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1286.56,
      "end": 1289.76,
      "text": " but gives you a lot more freedom in terms of source code size."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1291.06,
      "end": 1294.8,
      "text": " And finally, there is another interesting thing,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1294.9199999999998,
      "end": 1297.1,
      "text": " speaking about running Lambda at scale."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1297.22,
      "end": 1301.26,
      "text": " We say that one event at a time gets processed in one Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1301.3999999999999,
      "end": 1303.3,
      "text": " let's call it container or instance."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1303.8999999999999,
      "end": 1306.3,
      "text": " So what happens if you get, for instance, in an API,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1306.4199999999998,
      "end": 1308.1,
      "text": " two requests simultaneously?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1308.1,
      "end": 1311.4399999999998,
      "text": " Most likely, the Lambda runtime is actually going to spin up two Lambdas,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1311.58,
      "end": 1315.08,
      "text": " and each Lambda is going to take care of one of the concurrent requests."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1315.1999999999998,
      "end": 1318.3999999999999,
      "text": " So what happens if you get thousands of requests simultaneously?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1318.54,
      "end": 1322.5,
      "text": " Probably thousands of Lambdas will be spawned up in a short amount of time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1322.6399999999999,
      "end": 1324.1999999999998,
      "text": " But of course, there is a limit at some point."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1324.34,
      "end": 1328.8,
      "text": " And that limit is by default 1000 of concurrent Lambda executions."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1328.9399999999998,
      "end": 1332.1,
      "text": " And this is not just for one specific type of Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1332.24,
      "end": 1337.08,
      "text": " This is, if I remember correctly, across an account and a specific region,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1337.08,
      "end": 1338.76,
      "text": " that's kind of a cumulative limit."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1338.8799999999999,
      "end": 1342.46,
      "text": " So if you have lots of different APIs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1342.58,
      "end": 1344.8799999999999,
      "text": " and different users are hitting different APIs,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1345.02,
      "end": 1348.4199999999998,
      "text": " it's actually very likely that eventually you will bump into this limit."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1348.56,
      "end": 1349.96,
      "text": " Now, this limit can be increased."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1350.08,
      "end": 1351.56,
      "text": " You just open a ticket with AWS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1351.6799999999998,
      "end": 1355.76,
      "text": " you provide reasonable modips for having more concurrency,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1355.8799999999999,
      "end": 1357.4199999999998,
      "text": " and most likely you're going to get that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1357.56,
      "end": 1358.78,
      "text": " But there's something to keep in mind,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1358.9199999999998,
      "end": 1363.1799999999998,
      "text": " that it doesn't really scale indefinitely to massive concurrency."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1363.96,
      "end": 1366.76,
      "text": " That's a good one. Yeah."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1366.76,
      "end": 1370.76,
      "text": " And while we're on that topic, I recently caught up with an episode of the Fubar Serverless podcast,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1370.9,
      "end": 1371.9,
      "text": " which is really excellent."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1372.04,
      "end": 1374.3,
      "text": " And I'm going to link it to the show notes here, actually,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1374.44,
      "end": 1378.34,
      "text": " because we're not going to go deep into Lambda concurrency scaling and throughput."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1378.46,
      "end": 1380.84,
      "text": " But there was an episode of Fubar Serverless with Julian Wood,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1380.96,
      "end": 1384.2,
      "text": " which talks about all the fine details and Lambda scaling and throughput."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1384.34,
      "end": 1386.36,
      "text": " And if that's something that interests you,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1386.5,
      "end": 1388.34,
      "text": " or if you're thinking about really getting into Lambda,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1388.46,
      "end": 1389.84,
      "text": " it's a really good primer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1391.54,
      "end": 1393.44,
      "text": " Yeah, that's a good one to call out."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1393.44,
      "end": 1397.52,
      "text": " And one last point that I have is talking about integrations."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1397.64,
      "end": 1400.52,
      "text": " One actually of the very positive things about Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1400.64,
      "end": 1403.64,
      "text": " is that if you buy into the AWS ecosystem,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1403.78,
      "end": 1407.24,
      "text": " Lambda integrates pretty much with like almost any other service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1407.38,
      "end": 1409.44,
      "text": " So mastering Lambda gives you the ability"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1409.5800000000002,
      "end": 1411.98,
      "text": " to actually connect all the different services together."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1412.1200000000001,
      "end": 1414.64,
      "text": " So it's truly the more abstract compute layer"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1414.78,
      "end": 1417.72,
      "text": " that you can have to create workflows in AWS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1417.8400000000001,
      "end": 1421.22,
      "text": " where you need to connect different components, different services."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1421.22,
      "end": 1424.8,
      "text": " So definitely one more reason to learn Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1424.92,
      "end": 1427.6000000000001,
      "text": " even though you're maybe not trying to buy into the,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1427.72,
      "end": 1429.22,
      "text": " let's build everything serverless,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1429.3600000000001,
      "end": 1432.42,
      "text": " you're still going to come across Lambda for very specific use cases."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1434.3600000000001,
      "end": 1439.2,
      "text": " And again, talking about that sync versus async execution model,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1439.32,
      "end": 1441.8600000000001,
      "text": " this is something that becomes important in this context,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1442,
      "end": 1445.06,
      "text": " because you really need to understand what does it mean for a Lambda to run,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1445.2,
      "end": 1446.9,
      "text": " to being invoked synchronously,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1447.02,
      "end": 1449.4,
      "text": " and what does it mean to be invoked asynchronously."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1449.4,
      "end": 1453.14,
      "text": " My mental model is it is synchronous when you invoke the Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1453.26,
      "end": 1455.74,
      "text": " and you wait for the Lambda to give you a response,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1455.8600000000001,
      "end": 1457.8400000000001,
      "text": " while when you don't really care about a response,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1457.96,
      "end": 1459.74,
      "text": " you just want to fire off something in the background,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1459.8600000000001,
      "end": 1462.94,
      "text": " probably you want to go for an asynchronous invocation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1463.0600000000002,
      "end": 1465.46,
      "text": " So it's a little bit more like fire and forget."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1465.6000000000001,
      "end": 1467.24,
      "text": " And the reason why these details are important"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1467.3600000000001,
      "end": 1469.44,
      "text": " because you also get different behaviors."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1469.5600000000002,
      "end": 1471.2,
      "text": " For instance, when there are failures,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1471.3400000000001,
      "end": 1474.5400000000002,
      "text": " you might get an automatic retry when actually multiple retries"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1474.66,
      "end": 1476.16,
      "text": " when there is the asynchronous model,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1476.3000000000002,
      "end": 1477.74,
      "text": " while you don't really get retries,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1477.74,
      "end": 1480.22,
      "text": " it's up to you to re-invoke the Lambda function"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1480.34,
      "end": 1482.78,
      "text": " when you are invoking it synchronously and there is a failure."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1482.92,
      "end": 1487.02,
      "text": " So just something to call out if you are thinking about different workflows"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1487.14,
      "end": 1488.74,
      "text": " and different kinds of integrations,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1488.88,
      "end": 1490.78,
      "text": " look into these two models and try to understand"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1490.92,
      "end": 1493.68,
      "text": " which one is more suitable for your use case."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1494.98,
      "end": 1497.54,
      "text": " Now, I think we are getting close to the end of this episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1497.68,
      "end": 1501.14,
      "text": " So let's try to get into the more kind of visionary part."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1501.28,
      "end": 1503.24,
      "text": " And let's try to discuss what do we believe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1503.38,
      "end": 1504.68,
      "text": " is the future of cloud computing?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1504.68,
      "end": 1508.2,
      "text": " Is it going to be more AWS Lambda-like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1508.3400000000001,
      "end": 1510.1000000000001,
      "text": " or is it going to be something else?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1516,
      "end": 1518.18,
      "text": " I think that Lambda has already been a game changer and it's kind of changed how people think about cloud computing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1518.3,
      "end": 1519.6000000000001,
      "text": " and the evolution of cloud computing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1519.74,
      "end": 1522.2,
      "text": " And there's no going back from that,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1522.3400000000001,
      "end": 1523.74,
      "text": " but it's not an all or nothing thing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1523.88,
      "end": 1529.6000000000001,
      "text": " And it's not Lambda or containers or Lambda or anything else argument."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1529.74,
      "end": 1532.5800000000002,
      "text": " It's just the fact that Lambda has shown people"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1532.58,
      "end": 1535.46,
      "text": " how you can build really powerful architectures,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1535.58,
      "end": 1539.26,
      "text": " really advanced systems without having to provision servers."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1539.3799999999999,
      "end": 1541.6799999999998,
      "text": " Therefore, people are getting used to the idea"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1541.82,
      "end": 1544.96,
      "text": " that they don't have to maintain and patch all this infrastructure themselves"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1545.08,
      "end": 1546.58,
      "text": " and there are easier ways of doing things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1546.72,
      "end": 1548.8799999999999,
      "text": " So even if it's going to be using containers in the future,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1549.02,
      "end": 1552.1799999999998,
      "text": " the systems that are running them are going to get a lot simpler."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1552.32,
      "end": 1555.28,
      "text": " And we have this convergence of functions as a service"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1555.4199999999998,
      "end": 1558.08,
      "text": " and the container model and blurred lines between"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1558.22,
      "end": 1561.12,
      "text": " what the capabilities are between these two compute models."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1561.12,
      "end": 1564.62,
      "text": " We see that with Fargate becoming a little bit more serverless, perhaps,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1564.7399999999998,
      "end": 1567.9199999999998,
      "text": " and Lambda adopting container image support."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1568.04,
      "end": 1570.84,
      "text": " They still have very different execution models,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1570.9799999999998,
      "end": 1572.6399999999999,
      "text": " but the feature sets are expanding"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1572.78,
      "end": 1575.58,
      "text": " so that they're kind of impinging on each other's territory."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1575.7199999999998,
      "end": 1578.4199999999998,
      "text": " So I don't really worry too much about"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1578.54,
      "end": 1580.54,
      "text": " whether it's all going to be Lambda in the future or not."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1580.6799999999998,
      "end": 1581.9199999999998,
      "text": " It's more about the direction of travel"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1582.04,
      "end": 1584.6399999999999,
      "text": " and how everything's hopefully just going to get much simpler."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1584.78,
      "end": 1587.32,
      "text": " But I'm definitely interested. We're just a pre-invent time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1587.4399999999998,
      "end": 1589.4399999999998,
      "text": " I'm definitely interested to see where Lambda goes next"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1589.44,
      "end": 1591.94,
      "text": " or reinvent in the next few weeks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1592.0800000000002,
      "end": 1593.7,
      "text": " So what's in your crystal ball?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1593.8400000000001,
      "end": 1597.5800000000002,
      "text": " Is Lambda the future of cloud computing and that's it?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1601.3400000000001,
      "end": 1603.7,
      "text": " I actually think that Lambda will be the future of cloud computing, but maybe only for the next three, five years,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1603.8400000000001,
      "end": 1607.7,
      "text": " because I expect that something entirely new might come along"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1607.8400000000001,
      "end": 1609.74,
      "text": " and there might be innovation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1609.88,
      "end": 1613.88,
      "text": " And this is mostly motivated because I see two big trends"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1614,
      "end": 1617.5,
      "text": " that are somewhat against, not necessarily against Lambda itself,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1617.5,
      "end": 1619.56,
      "text": " but more against the idea that you need to use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1619.7,
      "end": 1623.36,
      "text": " one massive cloud provider and rely entirely on it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1623.5,
      "end": 1627.16,
      "text": " And of course, you might argue that some of these ideas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1627.3,
      "end": 1630.26,
      "text": " are kind of politically driven or socially driven,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1630.4,
      "end": 1632.76,
      "text": " but there is also a cost element to it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1632.9,
      "end": 1635.66,
      "text": " And I'm hearing about some interesting solutions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1635.8,
      "end": 1639.84,
      "text": " where the idea is more that rather than relying on a cloud provider,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1639.96,
      "end": 1643.26,
      "text": " you should rely more on the computer that is available on the edge."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1643.4,
      "end": 1646.06,
      "text": " But by edge, we don't mean edge services by cloud provider,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1646.06,
      "end": 1650.12,
      "text": " but actually the devices that people use to access the services themselves."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1650.26,
      "end": 1652,
      "text": " Mobile devices, laptops, and so on."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1652.12,
      "end": 1654.06,
      "text": " There is massive compute available out there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1654.2,
      "end": 1657.32,
      "text": " And it is possible with technology that we already have available today"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1657.46,
      "end": 1661.32,
      "text": " to offload some of the computation, networking, data sharing,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1661.46,
      "end": 1664.9199999999998,
      "text": " into the devices of people actually using the service itself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1665.06,
      "end": 1667.52,
      "text": " And there are actually two very interesting companies"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1667.6599999999999,
      "end": 1670.82,
      "text": " that are operating in this space and providing a lot of innovation."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1670.96,
      "end": 1675.3999999999999,
      "text": " One is Whole Punch, who just launched a service called Kit.io."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1675.4,
      "end": 1679.3400000000001,
      "text": " Which is more of an example of something that you can build with this model."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1679.48,
      "end": 1682.44,
      "text": " And they have a bunch of open source libraries that you can use today"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1682.5800000000002,
      "end": 1685.6000000000001,
      "text": " to actually build something like Kit.io yourself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1685.74,
      "end": 1690.6000000000001,
      "text": " And that's going to be using totally peer-to-peer based compute and resources"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1690.74,
      "end": 1693.44,
      "text": " rather than relying as much on cloud providers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1693.5800000000002,
      "end": 1696.2,
      "text": " Another company that is traveling on a very similar direction"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1696.3400000000001,
      "end": 1700.5,
      "text": " and is providing more of a runtime to build these kind of prototypes or projects"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1700.64,
      "end": 1702.3400000000001,
      "text": " is socket-supply.co."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1702.34,
      "end": 1705.6999999999998,
      "text": " So definitely look into the websites of this company just to understand"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1705.84,
      "end": 1708,
      "text": " what kind of new ideas they're trying to propose"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1708.1399999999999,
      "end": 1710.86,
      "text": " and what would be possible in the future if we actually,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1711,
      "end": 1714.34,
      "text": " more and more people will start to buy into this model."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1714.4599999999998,
      "end": 1717.6999999999998,
      "text": " Another complaint that I hear a lot about serverless in general"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1717.84,
      "end": 1719.9599999999998,
      "text": " is that if you look at different cloud providers,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1720.1,
      "end": 1722.54,
      "text": " they are kind of offering something similar"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1722.6599999999999,
      "end": 1724.24,
      "text": " but at the end of the day is not standard."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1724.36,
      "end": 1727.1999999999998,
      "text": " So it's not really something you can easily abstract,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1727.34,
      "end": 1729.1999999999998,
      "text": " like build ones and ship everywhere."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1729.2,
      "end": 1733.76,
      "text": " And I feel that there needs to be a little bit more standardization,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1733.9,
      "end": 1736.7,
      "text": " like something similar to what happened with containers,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1736.82,
      "end": 1740.3,
      "text": " to try to standardize more and more the kind of serverless offering"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1740.42,
      "end": 1744.82,
      "text": " in terms of events, in terms of what the compute interface is going to look like."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1744.96,
      "end": 1747.82,
      "text": " And maybe that's something that will create more innovation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1747.96,
      "end": 1749.2,
      "text": " that might create new products,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1749.32,
      "end": 1753.16,
      "text": " that might create even new contenders in this space."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1753.3,
      "end": 1756,
      "text": " And I expect that maybe a technology like Wasm"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1756.1200000000001,
      "end": 1758.4,
      "text": " can have a big impact in this space."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1758.4,
      "end": 1761.98,
      "text": " But again, I'm only hearing kind of very early conversation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1762.1000000000001,
      "end": 1765.0800000000002,
      "text": " so it's very hard to predict what can happen there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1766.2,
      "end": 1769.3400000000001,
      "text": " So I suppose that's everything we have."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1769.48,
      "end": 1774.38,
      "text": " And I'm really curious to know what do you think about,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1774.5,
      "end": 1776.98,
      "text": " well, first of all, if you're starting to look into Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1777.1000000000001,
      "end": 1777.98,
      "text": " what is your feeling?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1778.1000000000001,
      "end": 1779.7,
      "text": " Is it something you are going to be using?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1779.8400000000001,
      "end": 1781.4,
      "text": " What kind of projects do you have in mind?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1781.5400000000002,
      "end": 1783.2800000000002,
      "text": " And looking more and more into Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1783.4,
      "end": 1787.4,
      "text": " do you see that kind of technology fulfilling your needs?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1787.4,
      "end": 1788.6000000000001,
      "text": " Or not, and why?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1788.74,
      "end": 1790.5,
      "text": " And if you have been using Lambda for a while,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1790.64,
      "end": 1794.44,
      "text": " what do you think about our kind of visionary predictions?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1794.5600000000002,
      "end": 1796.0600000000002,
      "text": " Do you think that they're going to be correct?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1796.2,
      "end": 1797.96,
      "text": " Do you have a totally different perspective?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1798.1000000000001,
      "end": 1801.6000000000001,
      "text": " Is Lambda going to be more and more prevalent in our future?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1801.74,
      "end": 1804.74,
      "text": " Or we are going to be seeing something entirely different?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1804.8600000000001,
      "end": 1807.74,
      "text": " Let us know in the comments, reach out to us on Twitter,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1807.8600000000001,
      "end": 1810.3600000000001,
      "text": " and we will be loving to have a chat with you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1810.5,
      "end": 1812.3600000000001,
      "text": " and explore more these topics."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1812.36,
      "end": 1817.36,
      "text": " Until then, see you in the next episode."
    }
  ]
}
