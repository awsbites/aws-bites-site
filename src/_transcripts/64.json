{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 4.24,
      "text": " Unless you have been living under a rock, you probably notice that Rust is gaining more and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.24,
      "end": 9.36,
      "text": " more traction by the day. So today we want to talk about writing Lambda functions in Rust."
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.36,
      "end": 13.44,
      "text": " We will be discussing why you might want to do something like this, analyzing pros and cons,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 13.44,
      "end": 18.56,
      "text": " then we will look at the steps needed to author and publish your very first Lambda in Rust."
    },
    {
      "speakerLabel": "spk_0",
      "start": 18.56,
      "end": 22.64,
      "text": " Finally, we will give our opinion on what's going to be the future of Rust in Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 22.64,
      "end": 24.48,
      "text": " and why we are so excited about it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 24.48,
      "end": 29.84,
      "text": " My name is Usano and today I'm joined by Owen and this is AWS Bytes podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 38.08,
      "end": 43.92,
      "text": " AWS Bytes is sponsored by Fortiorum. Fortiorum is an AWS consulting partner offering training,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 43.92,
      "end": 46.480000000000004,
      "text": " cloud migration, and modern application architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 46.480000000000004,
      "end": 50.72,
      "text": " Find out more at fortiorum.com. You will find the link in the show notes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 55.839999999999996,
      "end": 59.84,
      "text": " Usano, I know you've been learning Rust and sharing as you learn on your channel, which we can put the link for in the show notes. Could you start with a quick description?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 59.84,
      "end": 62.56,
      "text": " What is Rust and why is it gaining so much traction?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 63.2,
      "end": 69.44,
      "text": " Yeah, I'm gonna try to give my own view."
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.44,
      "end": 75.75999999999999,
      "text": " I think Rust is a relatively new programming language, and by that I mean that the first release, the 1.0, was in 2015. So it's not that new."
    },
    {
      "speakerLabel": "spk_0",
      "start": 75.76,
      "end": 80.72,
      "text": " There is a good bit of background there and also existed for a while even before version 1."
    },
    {
      "speakerLabel": "spk_0",
      "start": 81.28,
      "end": 87.04,
      "text": " So it is, I think, still relatively new, meaning that it's getting traction more and more these"
    },
    {
      "speakerLabel": "spk_0",
      "start": 87.04,
      "end": 91.84,
      "text": " days, but has been around already for a while. So it's not an immature language."
    },
    {
      "speakerLabel": "spk_0",
      "start": 91.84,
      "end": 93.2,
      "text": " There is some good background there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 93.84,
      "end": 98.48,
      "text": " It was initially adopted in the context of Mozilla to rewrite some parts of Firefox,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 98.48,
      "end": 103.12,
      "text": " or at least that was the probably the first serious project where Rust was being adopted."
    },
    {
      "speakerLabel": "spk_0",
      "start": 103.12,
      "end": 109.28,
      "text": " Before that it was more of a research language. It is a strongly typed compiled language that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 109.28,
      "end": 113.44,
      "text": " doesn't have a garbage collector, so that's a very interesting, for instance, in comparison with Go,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 113.44,
      "end": 116.4,
      "text": " that is also strongly typed, but as a garbage collector."
    },
    {
      "speakerLabel": "spk_0",
      "start": 118,
      "end": 122.72,
      "text": " It was initially born as a system programming language because it was particularly focused"
    },
    {
      "speakerLabel": "spk_0",
      "start": 122.72,
      "end": 128.64000000000001,
      "text": " on memory safety and performance, so trying to give people a safer experience when compared"
    },
    {
      "speakerLabel": "spk_0",
      "start": 128.64,
      "end": 133.27999999999997,
      "text": " to things like C and C++ with also more modern toolchain."
    },
    {
      "speakerLabel": "spk_0",
      "start": 133.92,
      "end": 138.32,
      "text": " But the interesting thing is that these days it doesn't get promoted anymore as a system"
    },
    {
      "speakerLabel": "spk_0",
      "start": 138.32,
      "end": 142.88,
      "text": " programming language, but it gets promoted more as a general programming language."
    },
    {
      "speakerLabel": "spk_0",
      "start": 142.88,
      "end": 148.23999999999998,
      "text": " And the website says a language empowering everyone to build reliable and efficient software."
    },
    {
      "speakerLabel": "spk_0",
      "start": 148.23999999999998,
      "end": 152.95999999999998,
      "text": " And this is specifically true because in Rust these days you can build pretty much anything"
    },
    {
      "speakerLabel": "spk_0",
      "start": 152.95999999999998,
      "end": 157.6,
      "text": " from operative systems up to front-end application using WebAssembly."
    },
    {
      "speakerLabel": "spk_0",
      "start": 157.6,
      "end": 161.44,
      "text": " So that I think that the language is becoming very very general purpose these days,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 162.4,
      "end": 167.68,
      "text": " without losing those major characteristics like being very strongly typed and being very efficient"
    },
    {
      "speakerLabel": "spk_0",
      "start": 167.68,
      "end": 174.24,
      "text": " and having an interesting memory model. It is used also by AWS heavily, and one of the more famous"
    },
    {
      "speakerLabel": "spk_0",
      "start": 174.24,
      "end": 181.04,
      "text": " examples is Firecracker, which is the engine that powers Lambda and Fargate, and it's open source,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 181.04,
      "end": 187.68,
      "text": " so you can check it out if you want to see what a moderately complicated Rust project looks like."
    },
    {
      "speakerLabel": "spk_1",
      "start": 187.68,
      "end": 190.48,
      "text": " Okay that's pretty interesting. So even if you're already using Lambda,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 190.48,
      "end": 192.88,
      "text": " Firecracker is already in the picture there because it's running"
    },
    {
      "speakerLabel": "spk_1",
      "start": 193.92,
      "end": 198.64,
      "text": " the Lambda infrastructure, that container micro VM infrastructure is already written in Rust."
    },
    {
      "speakerLabel": "spk_1",
      "start": 199.2,
      "end": 204.88,
      "text": " Okay so that's pretty interesting, but I guess the idea of writing Lambda functions themselves in Rust"
    },
    {
      "speakerLabel": "spk_1",
      "start": 204.88,
      "end": 208.72,
      "text": " is something that's still pretty new. So what has been your experience with that so far?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 208.72,
      "end": 215.76,
      "text": " Have you given it a try? Yeah so I want to phrase that I'm not an expert in Rust by any means."
    },
    {
      "speakerLabel": "spk_0",
      "start": 215.76,
      "end": 220.32,
      "text": " It's a language that I've been playing with so to speak for the last three years or three years and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 220.32,
      "end": 226.72,
      "text": " a half, mostly doing coding challenges, some simple games, building small libraries. I also"
    },
    {
      "speakerLabel": "spk_0",
      "start": 226.72,
      "end": 231.76,
      "text": " did a lot of advent of code and I've also been streaming that on Twitch with some friends. We're"
    },
    {
      "speakerLabel": "spk_0",
      "start": 231.76,
      "end": 235.12,
      "text": " going to have the link in the show notes if you're curious to see these kind of exercises."
    },
    {
      "speakerLabel": "spk_0",
      "start": 235.12,
      "end": 241.52,
      "text": " So I didn't really do anything production ready. So my perception right now is just from the point"
    },
    {
      "speakerLabel": "spk_0",
      "start": 241.52,
      "end": 247.6,
      "text": " of view of somebody that has just been having fun with Rust. We might do this episode again after we"
    },
    {
      "speakerLabel": "spk_0",
      "start": 247.6,
      "end": 251.84,
      "text": " build our first production ready Lambda in Rust and maybe reconsider some of the observations today."
    },
    {
      "speakerLabel": "spk_0",
      "start": 252.72,
      "end": 258.72,
      "text": " But I have actually built one Lambda in Rust for my own personal use case. I have basically a simple"
    },
    {
      "speakerLabel": "spk_0",
      "start": 258.72,
      "end": 266.56,
      "text": " automation workflow on Twitter where if somebody follows me there is a hook that starts and it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 266.56,
      "end": 270.40000000000003,
      "text": " basically is going to send a welcome message to this person saying hey thank you for following me"
    },
    {
      "speakerLabel": "spk_0",
      "start": 270.40000000000003,
      "end": 274.40000000000003,
      "text": " can I help you with anything and it's just a nice way to get in touch with my followers, start a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 274.40000000000003,
      "end": 279.28000000000003,
      "text": " conversation and get to know them a little bit better. And I built this in Rust just because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 279.28000000000003,
      "end": 284.08000000000004,
      "text": " that was the perfect excuse to try to see what building a Lambda in Rust would look like in a very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 284.08,
      "end": 290.15999999999997,
      "text": " simple use case. Even though it's not really that simple because it still needs to do a lot of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 290.15999999999997,
      "end": 294.08,
      "text": " sophisticated integration because it needs to connect with the Twitter APIs which are HTTP"
    },
    {
      "speakerLabel": "spk_0",
      "start": 294.08,
      "end": 300.32,
      "text": " requests there needs to be some state stored in DynamoDB so there is also the SDK that gets used"
    },
    {
      "speakerLabel": "spk_0",
      "start": 300.88,
      "end": 307.12,
      "text": " plus I try to do some testing automated deployment and so on so even if it's a very simple Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 307.12,
      "end": 311.12,
      "text": " there is still enough complexity to try to understand what writing Lambdas in Rust would look"
    },
    {
      "speakerLabel": "spk_0",
      "start": 311.12,
      "end": 315.2,
      "text": " like."
    },
    {
      "speakerLabel": "spk_1",
      "start": 315.2,
      "end": 320.8,
      "text": " All right that's pretty interesting so I guess people can check out your Twitch channel to have a look at what you've been doing. When I'm hearing about writing Lambda functions in Rust"
    },
    {
      "speakerLabel": "spk_1",
      "start": 320.8,
      "end": 325.84000000000003,
      "text": " I kind of think back to the limited experience I have at writing Lambda functions in languages"
    },
    {
      "speakerLabel": "spk_1",
      "start": 325.84000000000003,
      "end": 332.32,
      "text": " like C-sharp,.NET and Java. I've used Java quite a lot in the past but I wouldn't jump to it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 332.32,
      "end": 338.72,
      "text": " immediately for Lambda. One of the reasons is that I guess historically it has been slow right"
    },
    {
      "speakerLabel": "spk_1",
      "start": 338.72,
      "end": 343.36,
      "text": " there's a lot of steps taken now recently to overcome that with things like GraalVM and then"
    },
    {
      "speakerLabel": "spk_1",
      "start": 343.36,
      "end": 349.36,
      "text": " SnapStart very recently at re-invent but generally when it comes to compiled languages I wouldn't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 349.36,
      "end": 353.36,
      "text": " rush them because I feel that dynamic languages are just a lot simpler when it comes to writing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 353.36,
      "end": 357.52000000000004,
      "text": " Lambda functions especially when dealing with JSON payloads etc so I feel like there's more steps to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 357.52000000000004,
      "end": 363.52000000000004,
      "text": " perform when you're using compiled languages. What is Rust like in that context and what is the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 363.52,
      "end": 368.71999999999997,
      "text": " appeal of using it for Lambda? And then I suppose the other question is what's the build and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 368.71999999999997,
      "end": 373.12,
      "text": " deployment experience like? Are there a lot more steps or do they manage to simplify it somehow?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 378.71999999999997,
      "end": 384,
      "text": " Yeah so there is definitely an extra step for Rust as well because it's a compiled language and you need to make sure that you compile your code before you are able to execute it and in this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 384,
      "end": 388.4,
      "text": " particular case you need to compile your code for the specific target architecture which is the one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 388.4,
      "end": 392.47999999999996,
      "text": " where the Lambda effectively runs. It's not the one that you have in your own development"
    },
    {
      "speakerLabel": "spk_0",
      "start": 392.48,
      "end": 397.76,
      "text": " environment so there might be a little bit of complexity there if you need to cross compile"
    },
    {
      "speakerLabel": "spk_0",
      "start": 397.76,
      "end": 403.04,
      "text": " from for instance an architecture to another. There are tools that can help and we will probably"
    },
    {
      "speakerLabel": "spk_0",
      "start": 403.04,
      "end": 408.40000000000003,
      "text": " mention some of them later but yeah there is definitely an extra step there just because of the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 408.40000000000003,
      "end": 413.20000000000005,
      "text": " the characteristics of the language. On the other hand it's a very fast and memory efficient language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 413.20000000000005,
      "end": 419.20000000000005,
      "text": " which affects very positively cold starts. I've seen incredibly small cold starts sometimes even"
    },
    {
      "speakerLabel": "spk_0",
      "start": 419.2,
      "end": 425.84,
      "text": " a single digit millisecond cold start but generally doesn't go above 20 milliseconds for relatively"
    },
    {
      "speakerLabel": "spk_0",
      "start": 425.84,
      "end": 432.96,
      "text": " simple Lambdas written in Rust. Also one thing that I really like is that the programming model"
    },
    {
      "speakerLabel": "spk_0",
      "start": 432.96,
      "end": 438.8,
      "text": " helps to write safe and correct code and this is actually one of the reasons why I'm enjoying"
    },
    {
      "speakerLabel": "spk_0",
      "start": 438.8,
      "end": 443.44,
      "text": " learning and writing Rust just because the language in itself is very mature. I think it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 443.44,
      "end": 448.15999999999997,
      "text": " brings in a lot of the nice things that came out of many different other languages. For instance"
    },
    {
      "speakerLabel": "spk_0",
      "start": 448.16,
      "end": 453.20000000000005,
      "text": " there are no null types. You need to use optional and you need to be very explicit when some data"
    },
    {
      "speakerLabel": "spk_0",
      "start": 453.20000000000005,
      "end": 458.32000000000005,
      "text": " type is going to be there 100% or there may be a case where it's not going to be there and every"
    },
    {
      "speakerLabel": "spk_0",
      "start": 458.32000000000005,
      "end": 462.8,
      "text": " time you have this kind of situation you need to explicitly end on what's going to happen when the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 462.8,
      "end": 467.36,
      "text": " value is not there and this is something that I found helps a lot to prevent a certain classes of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 467.36,
      "end": 474.72,
      "text": " bugs so by just learning the idiomatic way of writing Rust and the constructs that the language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 474.72,
      "end": 479.12,
      "text": " gives you I think it's much easier to end up writing code that is actually more correct and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 479.12,
      "end": 483.52000000000004,
      "text": " there are less bugs which is definitely another advantage to keep in mind when choosing a language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 484.72,
      "end": 489.68,
      "text": " and it's also very modern in terms of toolchain and ecosystem on libraries. For instance there is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 489.68,
      "end": 496.32000000000005,
      "text": " a tool called Cargo which is somewhat similar to npm if you come from Node.js but it's very rich and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 496.32000000000005,
      "end": 500.72,
      "text": " allows you not just to install dependencies but also to build your code. It can easily be extended"
    },
    {
      "speakerLabel": "spk_0",
      "start": 500.72,
      "end": 506.24,
      "text": " also for testing and for a bunch of other things so there is this one tool that does almost everything"
    },
    {
      "speakerLabel": "spk_0",
      "start": 506.24,
      "end": 511.04,
      "text": " you can possibly need and if you compare that for instance with Python where you have like 12 or"
    },
    {
      "speakerLabel": "spk_0",
      "start": 511.04,
      "end": 516.08,
      "text": " more tools if you have to do installing dependencies, packaging, building native dependencies and so on"
    },
    {
      "speakerLabel": "spk_0",
      "start": 516.08,
      "end": 521.76,
      "text": " it's a very different experience there. Another thing is that it supports async so you can write"
    },
    {
      "speakerLabel": "spk_0",
      "start": 521.76,
      "end": 529.0400000000001,
      "text": " very efficient servers or code that relies heavily on higho without having to necessarily spin up"
    },
    {
      "speakerLabel": "spk_0",
      "start": 529.04,
      "end": 533.76,
      "text": " multiple threads so that's another interesting thing for a compiled language and I think actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 533.76,
      "end": 538.56,
      "text": " Rust spend a lot of time, the community of Rust spend a lot of time trying to come up with a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 538.56,
      "end": 543.1999999999999,
      "text": " definition of async that doesn't affect performance and it's actually considered one of the most"
    },
    {
      "speakerLabel": "spk_0",
      "start": 543.1999999999999,
      "end": 550.0799999999999,
      "text": " efficient implementation of async so also very interesting that aspect. The thing that is not"
    },
    {
      "speakerLabel": "spk_0",
      "start": 550.0799999999999,
      "end": 554.7199999999999,
      "text": " as nice or at least initially might look a little bit weird is that there isn't that official"
    },
    {
      "speakerLabel": "spk_0",
      "start": 554.72,
      "end": 560.1600000000001,
      "text": " runtime for Rust in AWS so if you look at the list of the supported runtimes Rust is not there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 560.1600000000001,
      "end": 564.88,
      "text": " so how it is even possible that you can write lambdas in Rust? Well effectively you can do that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 564.88,
      "end": 570.64,
      "text": " by creating your own custom runtime and AWS makes that a little bit easier than it seems if you have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 570.64,
      "end": 575.12,
      "text": " to do it from scratch because they literally give you a library that is an official library written"
    },
    {
      "speakerLabel": "spk_0",
      "start": 575.12,
      "end": 580.08,
      "text": " by AWS and we will have the link in the show notes and that library is basically something that you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 580.08,
      "end": 584.1600000000001,
      "text": " use in your own code in your own handler and basically at the end of the day you are packaging"
    },
    {
      "speakerLabel": "spk_0",
      "start": 584.16,
      "end": 589.28,
      "text": " one single binary which is a custom runtime that contains the runtime itself from the library and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 589.28,
      "end": 593.4399999999999,
      "text": " then your handler which is basically your own custom code so you can imagine you wrap your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 593.4399999999999,
      "end": 599.12,
      "text": " handler with a custom runtime but that runtime is given to you by AWS in the form of a Rust library."
    },
    {
      "speakerLabel": "spk_0",
      "start": 601.52,
      "end": 606.16,
      "text": " Another interesting thing why I think that this is a very interesting and modern approach is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 606.16,
      "end": 612.64,
      "text": " this custom runtime is fully async and in Rust there are different runtimes for async. One of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 612.64,
      "end": 620.4,
      "text": " the most famous is called Tokyo. T-O-K-I-O and Tokyo is very interesting because it's kind of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 620.4,
      "end": 625.12,
      "text": " an ecosystem of libraries it's not just the runtime but there is a lot more that it gives you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 625.12,
      "end": 631.36,
      "text": " and one of the things that gives you is something called tower which is a way to define services so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 631.36,
      "end": 636.08,
      "text": " in the most generic sense and you can imagine that a lambda is a service on its own and a service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 636.08,
      "end": 639.6,
      "text": " it's something that automatically is like a middleware engine when you use this library"
    },
    {
      "speakerLabel": "spk_0",
      "start": 639.6,
      "end": 647.2,
      "text": " called tower so basically you don't need something like midi if you're writing a lambda rust because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 647.2,
      "end": 651.36,
      "text": " it's already built in you can just write your middleware straight away and connect them to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 651.36,
      "end": 657.84,
      "text": " your handlers and if you want some examples of what you can do with that there is in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 657.84,
      "end": 664.1600000000001,
      "text": " tower repository itself actually no in the lambda runtime repository itself in the ws rust runtime"
    },
    {
      "speakerLabel": "spk_0",
      "start": 664.16,
      "end": 669.8399999999999,
      "text": " there is an example on how to use the tower library in combination with the runtime to enable"
    },
    {
      "speakerLabel": "spk_0",
      "start": 669.8399999999999,
      "end": 675.52,
      "text": " tracing and you just enable it as a middleware around your handler code and of course you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 687.28,
      "end": 692.72,
      "text": " build your own custom middlewares for validation logging deserialization error handling and so on is this a little bit like midi for Rust then it's just built into that runtime library they provide in a way i would say yes because it's you already have that engine so when we say mid is probably"
    },
    {
      "speakerLabel": "spk_0",
      "start": 692.72,
      "end": 698.5600000000001,
      "text": " just mid the core just the engine then there isn't yet like a very mature ecosystem of middlewares"
    },
    {
      "speakerLabel": "spk_0",
      "start": 698.5600000000001,
      "end": 702.96,
      "text": " that are specialized for lambda that can be an interesting other open source project if you want"
    },
    {
      "speakerLabel": "spk_1",
      "start": 710.72,
      "end": 714.32,
      "text": " to you or somebody else wants to explore building something like the middleware ecosystem for Rust yeah okay that's a that's an interesting approach because i guess every language has a slightly"
    },
    {
      "speakerLabel": "spk_1",
      "start": 714.32,
      "end": 718.5600000000001,
      "text": " different take on that so i think based on what you said i'm kind of convinced that there's enough"
    },
    {
      "speakerLabel": "spk_1",
      "start": 718.56,
      "end": 724.64,
      "text": " of a benefit there for me to try it but i've got literally zero experience with Rust i've just seen"
    },
    {
      "speakerLabel": "spk_1",
      "start": 724.64,
      "end": 730.16,
      "text": " the hype emerge so where do i start how would you start with would i start with Rust first or how"
    },
    {
      "speakerLabel": "spk_1",
      "start": 730.16,
      "end": 734.2399999999999,
      "text": " would i would i just jump in and try and write my first lambda function in Rust what's the best place"
    },
    {
      "speakerLabel": "spk_0",
      "start": 738.9599999999999,
      "end": 744.7199999999999,
      "text": " to begin yeah i'm gonna assume for now that you know a little bit of Rust even if maybe that's not the case we can discuss later some tips on how to get started and let's just focus for now on if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 744.72,
      "end": 749.6,
      "text": " you know a little bit of Rust how do you write your first lambda in Rust and of course you need"
    },
    {
      "speakerLabel": "spk_0",
      "start": 749.6,
      "end": 757.0400000000001,
      "text": " to have Rust installed there is actually a very good tool called Rust-up which is basically a tool"
    },
    {
      "speakerLabel": "spk_0",
      "start": 757.0400000000001,
      "end": 760.88,
      "text": " that allows you to install Rust in your system but also to keep it up to date every time there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 760.88,
      "end": 766.48,
      "text": " are new releases so definitely the most recommended way to install Rust in any machine and that way"
    },
    {
      "speakerLabel": "spk_0",
      "start": 766.48,
      "end": 773.6,
      "text": " you can easily keep it up to date this week actually i came across an interesting article"
    },
    {
      "speakerLabel": "spk_0",
      "start": 773.6,
      "end": 779.9200000000001,
      "text": " that showcases exactly like what is the experience of building a lambda in Rust from scratch and it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 779.9200000000001,
      "end": 784.4,
      "text": " actually not an L word lambda it's actually an interesting lambda because it's doing some query"
    },
    {
      "speakerLabel": "spk_0",
      "start": 784.4,
      "end": 788.5600000000001,
      "text": " over a JSON file that is compressed so there is actually quite a bit of logic it can be an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 788.5600000000001,
      "end": 795.76,
      "text": " interesting use case and this is coming from a company called Scanner which does logs and tracing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 795.76,
      "end": 799.52,
      "text": " so they are actually showing some of their code at the end of the day probably it's a simplification"
    },
    {
      "speakerLabel": "spk_0",
      "start": 799.52,
      "end": 805.1999999999999,
      "text": " but it's an actual business case and they actually use Rust as a lambda in their own environment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 806.3199999999999,
      "end": 810.64,
      "text": " and one thing that i learned through this article is that there is a new tool relatively new tool"
    },
    {
      "speakerLabel": "spk_0",
      "start": 810.64,
      "end": 816.3199999999999,
      "text": " from somebody in AWS that is called Cargo Lambda which is an extension of Cargo the tool we"
    },
    {
      "speakerLabel": "spk_0",
      "start": 816.3199999999999,
      "end": 821.28,
      "text": " mentioned before that does package management testing building and so on you can install this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 821.28,
      "end": 825.4399999999999,
      "text": " extension and this extension basically gives you a bunch of helpers directly that gets directly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 825.44,
      "end": 833.36,
      "text": " built in into cargo to start a new lambda in Rust so create the scaffolding for for just like the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 833.36,
      "end": 838.1600000000001,
      "text": " structure of the code and how do you organize the libraries that you need and also gives you the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 838.1600000000001,
      "end": 843.84,
      "text": " ability of testing your code locally and also compile it and deploy it to AWS so it's kind of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 843.84,
      "end": 849.6800000000001,
      "text": " one shop kind of tool that you just install it extends your own main tool which is cargo and then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 849.68,
      "end": 855.52,
      "text": " you just run cargo something to to do all the different things that you might want to do for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 855.52,
      "end": 863.76,
      "text": " running writing and running and deploying lambdas written in Rust so the experience is that generally"
    },
    {
      "speakerLabel": "spk_0",
      "start": 863.76,
      "end": 869.68,
      "text": " you if you use something like Cargo Lambda you will do i think it's Cargo Lambda new or something"
    },
    {
      "speakerLabel": "spk_0",
      "start": 869.68,
      "end": 877.12,
      "text": " like that to create the structure and that gives you already a Rust project with runtime already"
    },
    {
      "speakerLabel": "spk_0",
      "start": 877.12,
      "end": 883.2,
      "text": " installed and it's a little bit like Python or Node where you have a file where you define all"
    },
    {
      "speakerLabel": "spk_0",
      "start": 883.2,
      "end": 888.32,
      "text": " your external dependencies so all this structure is created for you you will have this cargo.toml"
    },
    {
      "speakerLabel": "spk_0",
      "start": 888.32,
      "end": 893.12,
      "text": " which is the basically the the package.json of Rust if you want and in that package.json you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 893.12,
      "end": 899.2,
      "text": " already will have a reference to the latest version of the Rust runtime and then it also"
    },
    {
      "speakerLabel": "spk_0",
      "start": 899.2,
      "end": 904.8,
      "text": " creates a main file and the main file is basically your entry point when you compile your Rust code"
    },
    {
      "speakerLabel": "spk_0",
      "start": 904.8,
      "end": 909.12,
      "text": " it's going to start from that file it's going to look for a main function and that's what gets"
    },
    {
      "speakerLabel": "spk_0",
      "start": 909.12,
      "end": 916.7199999999999,
      "text": " executed first and that main function is already hooked into the Rust runtime as a library so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 916.7199999999999,
      "end": 922.24,
      "text": " literally what you have to left to right is your handler so using this tool the experience of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 922.24,
      "end": 926.8,
      "text": " writing Lambda code is not very different from the experience you would have when writing something"
    },
    {
      "speakerLabel": "spk_0",
      "start": 926.8,
      "end": 933.4399999999999,
      "text": " in Python or in Node.js and another interesting thing that it's a common gotcha at the beginning"
    },
    {
      "speakerLabel": "spk_0",
      "start": 933.44,
      "end": 940.08,
      "text": " is that if you're used to writing Lambdas in Python or JavaScript it's very easy to to receive"
    },
    {
      "speakerLabel": "spk_0",
      "start": 940.08,
      "end": 945.2,
      "text": " generic pieces of JSON in your event process them read some data and do something with it and then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 945.2,
      "end": 951.44,
      "text": " return another very generic JSON string as a as an answer of course when you use compile languages"
    },
    {
      "speakerLabel": "spk_0",
      "start": 951.44,
      "end": 957.0400000000001,
      "text": " strongly typed languages it gets a little bit more complicated because you cannot just say whatever"
    },
    {
      "speakerLabel": "spk_0",
      "start": 957.0400000000001,
      "end": 960.72,
      "text": " data type you need to be very specific with the data you are receiving and the data that you are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 960.72,
      "end": 966.96,
      "text": " returning so there is a library that can help a lot when you want to still keep that very generic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 966.96,
      "end": 972.08,
      "text": " ability to handle JSON input you don't want to create like very strict serializer and the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 972.08,
      "end": 978.88,
      "text": " serializer maybe you want to accept very generic JSON and this library is called SERDE S E R D E"
    },
    {
      "speakerLabel": "spk_0",
      "start": 978.88,
      "end": 983.76,
      "text": " and it's the most common library for serialization the serialization Rust and it also supports JSON"
    },
    {
      "speakerLabel": "spk_0",
      "start": 983.76,
      "end": 988.32,
      "text": " and with this library you can write an handler that can receive any arbitrary JSON and then you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 988.32,
      "end": 992,
      "text": " have different way to extrapolate data from the arbitrary JSON effectively gives you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 992.96,
      "end": 997.6800000000001,
      "text": " an object that's like a tree and you have to traverse this tree and verify okay am I getting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 997.6800000000001,
      "end": 1002.8000000000001,
      "text": " an object here is this probably something that exists is it a string is it an integer it takes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1002.8000000000001,
      "end": 1006.48,
      "text": " a little bit more code to actually deserialize well to extrapolate your information but you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1006.48,
      "end": 1013.2,
      "text": " don't have to deserialize into a very specific type if you want to do that actually I think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1013.2,
      "end": 1018.88,
      "text": " the runtime comes with for instance http types and the most common types already built in so if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1018.88,
      "end": 1024.64,
      "text": " are building andlets that are already targeting very specific types of default events in AWS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1024.64,
      "end": 1029.6000000000001,
      "text": " there are different types already built in that you can just use and you will have access to all"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1029.6000000000001,
      "end": 1035.2,
      "text": " the different properties that are expected for those events then the next step is how do you do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1035.2,
      "end": 1041.76,
      "text": " local testing so with cargo lambda you can just run cargo lambda watch I think is the command"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1041.76,
      "end": 1047.6,
      "text": " which allows you to spin up like a local version of your lambda and then local version restarts"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1047.6,
      "end": 1052.4,
      "text": " if you do changes in your code so it's kind of a live autoloading server at that point and then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1052.4,
      "end": 1058.8,
      "text": " you can use cargo lambda invoke I believe is the other command to send an event to this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1058.8,
      "end": 1063.52,
      "text": " locally running server and see exactly what happens if your code receives that event so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1063.52,
      "end": 1067.92,
      "text": " you can keep doing that until you are happy with with the result of your code and then at that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1067.92,
      "end": 1073.28,
      "text": " point you can run cargo lambda build and that will effectively compile your code and you can even"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1073.28,
      "end": 1079.04,
      "text": " pass a flag to build for graviton which is something I haven't tested yet but I'm very excited to try"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1079.04,
      "end": 1083.2,
      "text": " that because I'm hearing that that makes the performance in certain cases even more interesting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1084,
      "end": 1088.4,
      "text": " and there is also a template that you can easily when you bootstrap your project you also get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1089.28,
      "end": 1095.44,
      "text": " github ci template that you can use if you want to automate the testing and building process in your"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1102.16,
      "end": 1108.16,
      "text": " ci if you use github actions I like the idea that carzius cargo lambda tool gives you this kind of one-stop shop for everything you need to do to create and build rust lambda projects but I'm"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1108.16,
      "end": 1112.16,
      "text": " kind of wondering how does it fit in with the rest of the ecosystem that we know already like sam and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1112.16,
      "end": 1117.04,
      "text": " serverless framework which allow you to create multiple functions and also deploy other resources"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1117.04,
      "end": 1122.64,
      "text": " along with that as well is is it is like is is the rust movement with lambda moving towards its own"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1122.64,
      "end": 1127.5200000000002,
      "text": " kind of closed ecosystem that it doesn't link through to the other tools or would you can you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1133.2,
      "end": 1137.5200000000002,
      "text": " use some of those other tools with rust as well yeah I don't think we have a critical mass of lambda rust projects today to say that the ecosystem is going one direction or another"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1137.5200000000002,
      "end": 1144.0800000000002,
      "text": " I think it's still very very new in any way we saw actually when we were creating the the show"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1144.0800000000002,
      "end": 1148.0800000000002,
      "text": " notes for these episodes that there is a serverless plugin so if you're using the serverless framework"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1148.08,
      "end": 1152.6399999999999,
      "text": " there is a rust plugin that should help you to to build things correctly and structure things"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1152.6399999999999,
      "end": 1157.84,
      "text": " correctly if you're using rust we haven't tested it yet so your mileage might vary but there seems"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1157.84,
      "end": 1164.48,
      "text": " to be different kind of tools it's not just cargo lambda you can also use container images so you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1164.48,
      "end": 1170.48,
      "text": " could package rather than building this zip file with a binary inside you can package everything"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1170.48,
      "end": 1174.6399999999999,
      "text": " as a container and we can reference an article that oh and you wrote some time ago if you want"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1174.64,
      "end": 1180.16,
      "text": " some generic guidance you will need to adjust that for rust and maybe you can find some other"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1180.16,
      "end": 1185.68,
      "text": " material that gives you more guidance on how to do that specifically for rust I did try myself to do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1185.68,
      "end": 1190.64,
      "text": " things manually because when I wrote my first lambda I didn't know about this cargo lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.64,
      "end": 1195.6000000000001,
      "text": " maybe wasn't even there it takes a little bit of work because you need to figure out exactly what"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.6000000000001,
      "end": 1201.92,
      "text": " are the right flags to compile your code for the right architecture and then how to zip your file"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1201.92,
      "end": 1208.16,
      "text": " correctly so that the runtime is actually bootstrapped correctly so it's not that obvious"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1208.16,
      "end": 1212.3200000000002,
      "text": " and when I did it the first time there wasn't a lot of guides out there so I had to spend a little"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1212.3200000000002,
      "end": 1217.1200000000001,
      "text": " bit of time doing trial and error until I figured out exactly how configure I should have worked"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1217.1200000000001,
      "end": 1221.52,
      "text": " so I'm looking forward to to spend more time playing with cargo lambda because it seems like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1222.16,
      "end": 1225.68,
      "text": " it's the kind of tool that I would have wanted when I was doing this particular exercise and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1225.68,
      "end": 1229.2,
      "text": " I ended up doing a lot of stuff manually trying to figure out things by trial and error"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1229.2,
      "end": 1234.64,
      "text": " then another interesting thing is that in that particular example that I mentioned before that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1234.64,
      "end": 1240.8,
      "text": " twitter integration I needed to connect to something like DynamoDB so you might wonder"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1240.8,
      "end": 1247.68,
      "text": " okay what's the SDK experience like it is good actually because now and by now I mean probably"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1247.68,
      "end": 1252.88,
      "text": " this was reinvent of two years ago if I'm not wrong there is an official rust SDK officially"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1252.88,
      "end": 1260.16,
      "text": " supported by AWS before then there used to be somebody writing it as a library so it maybe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1260.16,
      "end": 1264.24,
      "text": " wasn't the most up-to-date experience it wasn't that official experience anyway now there is an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1264.24,
      "end": 1269.5200000000002,
      "text": " official SDK so you might expect that it is as good as the other ones if it's maintained by AWS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1270.48,
      "end": 1274.72,
      "text": " it is still a little bit too verbose because I think it's just the nature of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1276.24,
      "end": 1281.0400000000002,
      "text": " strictly typed languages that you need to when you use this kind of SDKs you are constructing a lot"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1281.04,
      "end": 1286.6399999999999,
      "text": " of objects and combining them and then calling specific methods and it tends to be a lot more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1286.6399999999999,
      "end": 1293.36,
      "text": " verbose when done with a strictly typed language compared to something like JavaScript or Python"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1293.92,
      "end": 1300.8,
      "text": " although one thing that I like is that there are a lot of builder pattern utility so they can give"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1300.8,
      "end": 1306.48,
      "text": " you shortcuts to build objects where you can basically use all the defaults and just specifies"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1306.48,
      "end": 1313.2,
      "text": " the thing that you want to customize it still takes a little bit of work to get used to it coming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1313.2,
      "end": 1318.96,
      "text": " from the JavaScript SDK or the Python SDK but I think eventually you can easily get used to it and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1318.96,
      "end": 1323.92,
      "text": " the typing system it can actually be a good guidance to see exactly which options are supported"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1323.92,
      "end": 1330.32,
      "text": " which ones are not required and so on so yeah could be a bit verbose but also could be a little"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1330.32,
      "end": 1337.2,
      "text": " bit more guidance than you get when using JavaScript or Python maybe I can say why I am"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1337.2,
      "end": 1344.96,
      "text": " particularly excited about Rust and Lambda together the first thing and we already mentioned that is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1344.96,
      "end": 1352.24,
      "text": " because for all these cases where memory and speed are directly related to cost and this is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1352.24,
      "end": 1358.3999999999999,
      "text": " particularly the case for serverless using Rust can really give you the most optimized experience"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1358.4,
      "end": 1363.2800000000002,
      "text": " you can possibly create so you can eventually save a lot of money so basically what I'm trying"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1363.2800000000002,
      "end": 1369.1200000000001,
      "text": " to say is that if you're writing something in Rust for Lambda you should be able to get fairly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1369.1200000000001,
      "end": 1374.72,
      "text": " optimized memory consumption and performance so you are reducing to the minimum the two dimensions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1374.72,
      "end": 1380,
      "text": " that eventually affect the cost of running your own Lambda so I think in all these cases where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1380,
      "end": 1384.64,
      "text": " you might be concerned about performance and cost probably investing in Rust might be a good"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1384.64,
      "end": 1389.92,
      "text": " investment also again we already said that that the language itself pushes you to write code that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1389.92,
      "end": 1394.8000000000002,
      "text": " is generally more correct so it's potentially harder to create specific kind of bugs so that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1394.8000000000002,
      "end": 1399.92,
      "text": " can be another advantage if you have very business sensitive areas where you want to make sure that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1399.92,
      "end": 1407.2800000000002,
      "text": " you are not writing bugs or at least reduce the risk of writing bugs so I expect Rust to become"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1407.2800000000002,
      "end": 1412.64,
      "text": " more and more prominent in general so we will see a larger ecosystem more libraries more tutorials"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1412.64,
      "end": 1417.92,
      "text": " more examples more people willing to help or even to be hired in your company with that expertise"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1417.92,
      "end": 1423.92,
      "text": " already so that I think contributes in the future of Rust and Lambda so we will probably see more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1423.92,
      "end": 1429.3600000000001,
      "text": " use cases of Rust and Lambda just because the ecosystem is growing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1429.3600000000001,
      "end": 1434.0800000000002,
      "text": " Yeah it sounds like there's a lot of benefits like I can from what you said I can think of like you got a modern ecosystem"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1434.0800000000002,
      "end": 1439.0400000000002,
      "text": " great tooling right for Rust itself and also for Rust with Lambda now you've got the performance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1439.04,
      "end": 1442.96,
      "text": " benefit which was definitely going to be of interest to people who are like really trying"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1442.96,
      "end": 1448,
      "text": " to optimize and then also that relates to cost you know so if you've got a really hot Lambda and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1448,
      "end": 1454,
      "text": " you can benefit with an order of magnitude improvement in performance potentially with Rust"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1454,
      "end": 1459.28,
      "text": " that has a huge appeal so there's lots of positives there in the interest of balance is there"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1460.1599999999999,
      "end": 1465.04,
      "text": " any drawbacks we should be aware of and maybe what's your advice in summary should people try"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1465.04,
      "end": 1472.3999999999999,
      "text": " and adopt it now or hold off trying Rust with Lambda?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1472.3999999999999,
      "end": 1477.36,
      "text": " Yeah so I think the main decision point on whether you should be using Rust or not is probably the learning curve so there is still a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1477.36,
      "end": 1481.2,
      "text": " little bit of learning curve it's not a language that most people know and it's a language that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1481.2,
      "end": 1485.76,
      "text": " comes with a very specific background that is closer to system programming than it is to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1485.76,
      "end": 1490.24,
      "text": " web programming so if you are coming from web programming there might be a little bit more to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1490.24,
      "end": 1495.28,
      "text": " learn there before you can fully appreciate the language and then you need to learn all the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1495.28,
      "end": 1499.92,
      "text": " distinctive characteristics of the language the syntax the memory model and so on so there is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1499.92,
      "end": 1504.64,
      "text": " definitely a little bit of learning curve there so it's not something to underestimate that learning"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1504.64,
      "end": 1509.44,
      "text": " curve because if you are building Lambdas you're probably trying to optimize for speed of delivery"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1510,
      "end": 1513.44,
      "text": " so when you think that you need to learn a new language and you combine with that probably there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1513.44,
      "end": 1519.04,
      "text": " is some sacrifices to be made there in the short term to give your team time to learn the language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1519.04,
      "end": 1523.52,
      "text": " master it enough that they can be proficient with it and then you are going to get all the benefits"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1523.52,
      "end": 1528.56,
      "text": " the Rust gives you so that's something that only you can evaluate in the context of your company"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1528.56,
      "end": 1533.76,
      "text": " if it makes sense but if you are doing maybe some side project or some very small experimental Lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1533.76,
      "end": 1537.6,
      "text": " it might be something worth trying just to get a feeling for what it looks like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1539.76,
      "end": 1544.1599999999999,
      "text": " I would say though that before you try it if you don't know Rust itself maybe it is worth"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1544.16,
      "end": 1549.8400000000001,
      "text": " learning a little bit of Rust first so just to get used to the characteristics of the language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1549.8400000000001,
      "end": 1555.28,
      "text": " you can do some coding challenges I really like Exercism.org we will have a link in the show"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1555.28,
      "end": 1560.4,
      "text": " notes because it has it's a totally free platform first of all it looks like lit code like one of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1560.4,
      "end": 1566.16,
      "text": " those platforms where you can do coding challenges but they have a specially good Rust track that is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1566.16,
      "end": 1571.3600000000001,
      "text": " basically a sequence of I think 50 exercises that guides you through all the basics that you need to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1571.36,
      "end": 1576.3999999999999,
      "text": " learn to master the main concepts that you need to know in Rust so that could be a very good way to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1576.3999999999999,
      "end": 1581.6,
      "text": " just get started it's actually quite fun and the website is really well polished so maybe that's a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1581.6,
      "end": 1586.24,
      "text": " low way low effort way to to get started with Rust and then when you complete that track maybe you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1586.24,
      "end": 1590.3999999999999,
      "text": " can start to try now how does it look like to actually try to write a Lambda with it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1592.1599999999999,
      "end": 1596.7199999999998,
      "text": " so I think that's that's probably everything for today we probably cover way more than we wanted to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1596.72,
      "end": 1603.1200000000001,
      "text": " cover originally I really encourage everyone to to try this and give us your feedback if you found"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1603.1200000000001,
      "end": 1607.76,
      "text": " the experience interesting useful or maybe was just too difficult and you couldn't really progress"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1607.76,
      "end": 1612.8,
      "text": " and you had to go back to JavaScript or Python or something else and if you build something with it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1612.8,
      "end": 1617.2,
      "text": " always let us know what do you build because you know we are always curious to get use cases and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1617.2,
      "end": 1622.32,
      "text": " understand how people use Lambda serverless AWS and definitely we can have some nice conversations"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1622.32,
      "end": 1626.8799999999999,
      "text": " after that and we can also revisit our own assumptions and our own understanding of Rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1626.8799999999999,
      "end": 1631.6,
      "text": " and Lambda together and maybe come up later on with a new episode with a refreshed perspective"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1631.6,
      "end": 1636.32,
      "text": " on this particular topic so thank you very much for being with us today and we look forward to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1636.32,
      "end": 1655.36,
      "text": " seeing you in the next episode"
    }
  ]
}