{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 4.24,
      "text": " Unless you have been living under a rock, you probably notice that Rust is gaining more and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.24,
      "end": 9.36,
      "text": " more traction by the day. So today we want to talk about writing Lambda functions in Rust."
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.36,
      "end": 13.44,
      "text": " We will be discussing why you might want to do something like this, analyzing pros and cons,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 13.44,
      "end": 18.56,
      "text": " then we will look at the steps needed to author and publish your very first Lambda in Rust."
    },
    {
      "speakerLabel": "spk_0",
      "start": 18.56,
      "end": 22.64,
      "text": " Finally, we will give our opinion on what's going to be the future of Rust in Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 22.64,
      "end": 24.48,
      "text": " and why we are so excited about it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 24.48,
      "end": 29.84,
      "text": " My name is Usano and today I'm joined by Owen and this is AWS Bytes podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 38.08,
      "end": 43.92,
      "text": " AWS Bytes is sponsored by Fortiorum. Fortiorum is an AWS consulting partner offering training,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 43.92,
      "end": 46.480000000000004,
      "text": " cloud migration, and modern application architecture."
    },
    {
      "speakerLabel": "spk_0",
      "start": 46.480000000000004,
      "end": 50.72,
      "text": " Find out more at fortiorum.com. You will find the link in the show notes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 55.839999999999996,
      "end": 59.84,
      "text": " Usano, I know you've been learning Rust and sharing as you learn on your channel, which we can put the link for in the show notes. Could you start with a quick description?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 59.84,
      "end": 62.56,
      "text": " What is Rust and why is it gaining so much traction?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 63.2,
      "end": 69.44,
      "text": " Yeah, I'm gonna try to give my own view."
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.44,
      "end": 75.75999999999999,
      "text": " I think Rust is a relatively new programming language, and by that I mean that the first release, the 1.0, was in 2015. So it's not that new,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 75.76,
      "end": 80.72,
      "text": " there is a good bit of background there, and also existed for a while even before version 1."
    },
    {
      "speakerLabel": "spk_0",
      "start": 81.28,
      "end": 86.80000000000001,
      "text": " So it is, I think, still relatively new, meaning that it's getting traction more and more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 86.80000000000001,
      "end": 91.84,
      "text": " these days, but has been around already for a while. So it's not an immature language,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 91.84,
      "end": 96.72,
      "text": " there is some good background there. It was initially adopted in the context of Mozilla"
    },
    {
      "speakerLabel": "spk_0",
      "start": 96.72,
      "end": 101.36000000000001,
      "text": " to rewrite some parts of Firefox, or at least that was the probably the first serious project"
    },
    {
      "speakerLabel": "spk_0",
      "start": 101.36,
      "end": 107.28,
      "text": " where Rust was being adopted. Before that it was more of a research language. It is a strongly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 107.28,
      "end": 111.68,
      "text": " typed compiled language that doesn't have a garbage collector, so that's a very interesting,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 111.68,
      "end": 116.32,
      "text": " for instance, in comparison with Go that is also strongly typed, but as a garbage collector."
    },
    {
      "speakerLabel": "spk_0",
      "start": 117.92,
      "end": 122.72,
      "text": " It was initially born as a system programming language because it was particularly focused"
    },
    {
      "speakerLabel": "spk_0",
      "start": 122.72,
      "end": 128.64,
      "text": " on memory safety and performance, so trying to give people a safer experience when compared"
    },
    {
      "speakerLabel": "spk_0",
      "start": 128.64,
      "end": 135.44,
      "text": " to things like C and C++, with also more modern toolchain. But the interesting thing is that these"
    },
    {
      "speakerLabel": "spk_0",
      "start": 135.44,
      "end": 140.64,
      "text": " days it doesn't get promoted anymore as a system programming language, but gets promoted more as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 140.64,
      "end": 146.32,
      "text": " a general programming language, and the website says a language empowering everyone to build"
    },
    {
      "speakerLabel": "spk_0",
      "start": 146.32,
      "end": 151.2,
      "text": " reliable and efficient software. And this is specifically true because in Rust these days"
    },
    {
      "speakerLabel": "spk_0",
      "start": 151.2,
      "end": 156.72,
      "text": " you can build pretty much anything from operative systems up to front-end application using Web"
    },
    {
      "speakerLabel": "spk_0",
      "start": 156.72,
      "end": 161.44,
      "text": " Assembly, so that I think that the language is becoming very very general purpose these days,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 162.4,
      "end": 167.68,
      "text": " without losing those major characteristics like being very strongly typed and being very efficient"
    },
    {
      "speakerLabel": "spk_0",
      "start": 167.68,
      "end": 174.24,
      "text": " and having an interesting memory model. It is used also by AWS heavily, and one of the more famous"
    },
    {
      "speakerLabel": "spk_0",
      "start": 174.24,
      "end": 181.04,
      "text": " examples is Firecracker, which is the engine that powers Lambda and Fargate, and it's open source,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 181.04,
      "end": 186.79999999999998,
      "text": " so you can check it out if you want to see what a moderately complicated Rust project looks like."
    },
    {
      "speakerLabel": "spk_0",
      "start": 187.6,
      "end": 191.44,
      "text": " Okay, that's pretty interesting."
    },
    {
      "speakerLabel": "spk_1",
      "start": 191.44,
      "end": 196.88,
      "text": " So even if you're already using Lambda, Firecracker is already in the picture there because it's running the Lambda infrastructure, that container micro VM"
    },
    {
      "speakerLabel": "spk_1",
      "start": 196.88,
      "end": 202.48,
      "text": " infrastructure is already written in Rust. Okay, so that's pretty interesting, but I guess the idea"
    },
    {
      "speakerLabel": "spk_1",
      "start": 202.48,
      "end": 207.44,
      "text": " of writing Lambda functions themselves in Rust is something that's still pretty new, so what has been"
    },
    {
      "speakerLabel": "spk_1",
      "start": 207.44,
      "end": 213.6,
      "text": " your experience with that so far? Have you given it a try?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 213.6,
      "end": 218.64,
      "text": " Yeah, so I want to phrase that I'm not an expert in Rust by any means. It's a language that I've been playing with, so to speak, for the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 218.64,
      "end": 224.07999999999998,
      "text": " last three years or three years and a half, mostly doing coding challenges, some simple games,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 224.07999999999998,
      "end": 229.92,
      "text": " building small libraries. I also did a lot of advent of code and I've also been streaming that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 229.92,
      "end": 234,
      "text": " on Twitch with some friends. We're gonna have the link in the show notes if you're curious to see"
    },
    {
      "speakerLabel": "spk_0",
      "start": 234,
      "end": 240.32,
      "text": " this kind of exercises. So I didn't really do anything production ready, so my perception right"
    },
    {
      "speakerLabel": "spk_0",
      "start": 240.32,
      "end": 246.72,
      "text": " now is just from the point of view of somebody that has just been having fun with Rust. We might"
    },
    {
      "speakerLabel": "spk_0",
      "start": 246.72,
      "end": 251.12,
      "text": " do this episode again after we build our first production ready Lambda in Rust and maybe reconsider"
    },
    {
      "speakerLabel": "spk_0",
      "start": 251.12,
      "end": 257.44,
      "text": " some of the observations today, but I have actually built one Lambda in Rust for my own personal use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 257.44,
      "end": 263.36,
      "text": " case. I have basically a simple automation workflow on Twitter where basically if somebody"
    },
    {
      "speakerLabel": "spk_0",
      "start": 263.36,
      "end": 268.96000000000004,
      "text": " follows me, there is a hook that starts and it basically is going to send like a welcome message"
    },
    {
      "speakerLabel": "spk_0",
      "start": 268.96000000000004,
      "end": 272.96000000000004,
      "text": " to this person saying, hey thank you for following me, can I help you with anything? And it's just a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 272.96000000000004,
      "end": 276.8,
      "text": " nice way to get in touch with my followers, start a conversation and get to know them a little bit"
    },
    {
      "speakerLabel": "spk_0",
      "start": 276.8,
      "end": 282.08000000000004,
      "text": " better. And I basically built this in Rust just because that was the perfect excuse to try to see"
    },
    {
      "speakerLabel": "spk_0",
      "start": 282.08000000000004,
      "end": 288,
      "text": " what building a Lambda in Rust would look like in a very simple use case. Even though it's not"
    },
    {
      "speakerLabel": "spk_0",
      "start": 288,
      "end": 292.24,
      "text": " really that simple because it still needs to do a lot of sophisticated integration because it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 292.24,
      "end": 297.12,
      "text": " needs to connect with the Twitter APIs which are HTTP requests, there needs to be some state stored"
    },
    {
      "speakerLabel": "spk_0",
      "start": 297.12,
      "end": 303.84000000000003,
      "text": " in DynamoDB so there is also the SDK that gets used, plus I try to do some testing, automated"
    },
    {
      "speakerLabel": "spk_0",
      "start": 303.84000000000003,
      "end": 308.96000000000004,
      "text": " deployment and so on. So even if it's a very simple Lambda there is still enough complexity"
    },
    {
      "speakerLabel": "spk_0",
      "start": 308.96000000000004,
      "end": 312.72,
      "text": " to try to understand what writing Lambdas in Rust would look like."
    },
    {
      "speakerLabel": "spk_1",
      "start": 312.72,
      "end": 316.96000000000004,
      "text": " All right that's pretty interesting. So I guess people can check out your Twitch channel to have a look at what you've been"
    },
    {
      "speakerLabel": "spk_1",
      "start": 316.96,
      "end": 322.88,
      "text": " doing. When I'm hearing about writing Lambda functions in Rust I kind of think back to the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 322.88,
      "end": 328,
      "text": " limited experience I have at writing Lambda functions in languages like C Sharp,.NET and Java."
    },
    {
      "speakerLabel": "spk_1",
      "start": 330,
      "end": 334,
      "text": " I've used Java quite a lot in the past but I wouldn't jump to it immediately for Lambda."
    },
    {
      "speakerLabel": "spk_1",
      "start": 334,
      "end": 341.12,
      "text": " One of the reasons is that I guess historically it has been slow, right? There's a lot of steps"
    },
    {
      "speakerLabel": "spk_1",
      "start": 341.12,
      "end": 345.91999999999996,
      "text": " taken now recently to overcome that with things like GraalVM and then Snap Start very recently"
    },
    {
      "speakerLabel": "spk_1",
      "start": 345.92,
      "end": 351.28000000000003,
      "text": " at Reinvent. But generally when it comes to compiled languages I wouldn't rush them because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 351.28000000000003,
      "end": 355.2,
      "text": " I feel that dynamic languages are just a lot simpler when it comes to writing Lambda functions"
    },
    {
      "speakerLabel": "spk_1",
      "start": 355.2,
      "end": 359.20000000000005,
      "text": " especially when dealing with JSON payloads etc. So I feel like there's more steps to perform when"
    },
    {
      "speakerLabel": "spk_1",
      "start": 359.20000000000005,
      "end": 365.6,
      "text": " you're using compiled languages. What is Rust like in that context and what is the appeal"
    },
    {
      "speakerLabel": "spk_1",
      "start": 365.6,
      "end": 369.6,
      "text": " of using it for Lambda? And then I suppose the other question is what's the build and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 369.6,
      "end": 374.32,
      "text": " deployment experience like? Are there a lot more steps or do they manage to simplify it somehow?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 378.8,
      "end": 384.24,
      "text": " Yeah, so there is definitely an extra step for Rust as well because it's a compiled language and you need to make sure that you compile your code before you are able to execute it. And in this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 384.24,
      "end": 388.64,
      "text": " particular case you need to compile your code for the specific target architecture which is the one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 388.64,
      "end": 393.6,
      "text": " where the Lambda effectively runs. It's not the one that you have in your own development environment."
    },
    {
      "speakerLabel": "spk_0",
      "start": 393.6,
      "end": 397.6,
      "text": " So there might be a little bit of complexity there if you need to cross compile from"
    },
    {
      "speakerLabel": "spk_0",
      "start": 397.6,
      "end": 402.56,
      "text": " for instance an architecture to another. There are tools that can help and we will probably mention"
    },
    {
      "speakerLabel": "spk_0",
      "start": 402.56,
      "end": 407.68,
      "text": " some of them later. But yeah, there is definitely an extra step there just because of the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 407.68,
      "end": 412.4,
      "text": " characteristics of the language. On the other end it's a very fast and memory efficient language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 412.4,
      "end": 418.48,
      "text": " which affects very positively cold starts. I've seen incredibly small cold starts, sometimes even"
    },
    {
      "speakerLabel": "spk_0",
      "start": 418.48,
      "end": 424.64,
      "text": " a single digit millisecond cold start, but generally doesn't go above 20 milliseconds for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 424.64,
      "end": 431.44,
      "text": " relatively simple Lambdas written in Rust. Also one thing that I really like is that the programming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 431.44,
      "end": 437.44,
      "text": " model helps to write safe and correct code and this is actually one of the reasons why I'm"
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.44,
      "end": 442.64,
      "text": " enjoying learning and writing Rust just because the language in itself is very mature. I think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 442.64,
      "end": 447.04,
      "text": " it brings in a lot of the nice things that came out of many different other languages."
    },
    {
      "speakerLabel": "spk_0",
      "start": 447.04,
      "end": 452,
      "text": " For instance there are no null types. You need to use optional and you need to be very explicit when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 452,
      "end": 457.36,
      "text": " some data type is going to be there 100% or there may be a case where it's not going to be there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 457.36,
      "end": 462.32,
      "text": " Every time you have this kind of situation you need to explicitly end on what's going to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 462.32,
      "end": 466.48,
      "text": " happen when the value is not there. This is something that I found helps a lot to prevent"
    },
    {
      "speakerLabel": "spk_0",
      "start": 466.48,
      "end": 474.08000000000004,
      "text": " certain classes of bugs. So by just learning the idiomatic way of writing Rust and the constructs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 474.08000000000004,
      "end": 478.40000000000003,
      "text": " that the language gives you, I think it's much easier to end up writing code that is actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 478.40000000000003,
      "end": 482.72,
      "text": " more correct and there are less bugs which is definitely another advantage to keep in mind when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 482.72,
      "end": 488.96000000000004,
      "text": " choosing a language. It's also very modern in terms of toolchain and ecosystem on libraries."
    },
    {
      "speakerLabel": "spk_0",
      "start": 488.96000000000004,
      "end": 493.92,
      "text": " For instance there is a tool called Cargo which is somewhat similar to npm if you come from Node.js"
    },
    {
      "speakerLabel": "spk_0",
      "start": 494.88000000000005,
      "end": 499.20000000000005,
      "text": " but it's very rich and allows you not just to install dependencies but also to build your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 499.20000000000005,
      "end": 504.32000000000005,
      "text": " code. It can easily be extended also for testing and for a bunch of other things. So there is this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 504.32000000000005,
      "end": 508.8,
      "text": " one tool that does almost everything you can possibly need and if you compare that for instance"
    },
    {
      "speakerLabel": "spk_0",
      "start": 508.8,
      "end": 513.36,
      "text": " with Python where you have like 12 or more tools if you have to do installing dependencies,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 513.36,
      "end": 517.76,
      "text": " packaging, building native dependencies and so on, it's a very different experience there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 518.64,
      "end": 526.24,
      "text": " Another thing is that it supports async so you can write very efficient servers or code that relies"
    },
    {
      "speakerLabel": "spk_0",
      "start": 526.24,
      "end": 531.28,
      "text": " heavily on higho without having to necessarily spin up multiple threads. So that's another"
    },
    {
      "speakerLabel": "spk_0",
      "start": 531.28,
      "end": 535.12,
      "text": " interesting thing for a compiled language and I think actually Rust spent a lot of time,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 535.12,
      "end": 540.24,
      "text": " the community of Rust spent a lot of time trying to come up with a definition of async that doesn't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 540.24,
      "end": 544.88,
      "text": " affect performance and it's actually considered one of the most efficient implementations of async."
    },
    {
      "speakerLabel": "spk_0",
      "start": 545.52,
      "end": 551.76,
      "text": " So also very interesting that aspect. The thing that is not as nice or at least initially might"
    },
    {
      "speakerLabel": "spk_0",
      "start": 551.76,
      "end": 557.6,
      "text": " look a little bit weird is that there isn't that official runtime for Rust in AWS. So if you look"
    },
    {
      "speakerLabel": "spk_0",
      "start": 557.6,
      "end": 562.08,
      "text": " at the list of the supported runtimes Rust is not there. So how it is even possible that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 562.08,
      "end": 567.12,
      "text": " write lambdas in Rust? Well effectively you can do that by creating your own custom runtime"
    },
    {
      "speakerLabel": "spk_0",
      "start": 567.12,
      "end": 571.76,
      "text": " and AWS makes that a little bit easier than it seems if you have to do it from scratch because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 571.76,
      "end": 576.5600000000001,
      "text": " they literally give you a library that is an official library written by AWS and we will have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 576.5600000000001,
      "end": 581.0400000000001,
      "text": " the link in the show notes and that library is basically something that you use in your own code,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 581.0400000000001,
      "end": 585.44,
      "text": " in your own handler and basically at the end of the day you are packaging one single binary which"
    },
    {
      "speakerLabel": "spk_0",
      "start": 585.44,
      "end": 590.1600000000001,
      "text": " is a custom runtime that contains the runtime itself from the library and then your handler"
    },
    {
      "speakerLabel": "spk_0",
      "start": 590.16,
      "end": 594.7199999999999,
      "text": " which is basically your own custom code. So you can imagine you wrap your handler with a custom"
    },
    {
      "speakerLabel": "spk_0",
      "start": 594.7199999999999,
      "end": 599.12,
      "text": " runtime but that runtime is given to you by AWS in the form of a Rust library."
    },
    {
      "speakerLabel": "spk_0",
      "start": 601.4399999999999,
      "end": 605.4399999999999,
      "text": " Another interesting thing why I think that this is a very interesting and modern approach"
    },
    {
      "speakerLabel": "spk_0",
      "start": 605.4399999999999,
      "end": 612.3199999999999,
      "text": " is that this custom runtime is fully async and in Rust there are different runtimes for async."
    },
    {
      "speakerLabel": "spk_0",
      "start": 612.32,
      "end": 620.5600000000001,
      "text": " One of the most famous is called Tokyo. Tokyo is very interesting because it's kind of an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 620.5600000000001,
      "end": 625.44,
      "text": " ecosystem of libraries. It's not just the runtime but there is a lot more that it gives you and one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 625.44,
      "end": 631.6,
      "text": " of the things that gives you is something called tower which is a way to define services so in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 631.6,
      "end": 636.08,
      "text": " most generic sense and you can imagine that a lambda is a service on its own and a service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 636.08,
      "end": 639.6,
      "text": " it's something that automatically is like a middleware engine when you use this library"
    },
    {
      "speakerLabel": "spk_0",
      "start": 639.6,
      "end": 646.64,
      "text": " called tower. So basically you don't need something like midi if you're writing a lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 646.64,
      "end": 650.96,
      "text": " Rust because it's already built in you can just write your middleware straight away and connect"
    },
    {
      "speakerLabel": "spk_0",
      "start": 650.96,
      "end": 657.2,
      "text": " them to your handlers. And if you want some examples of what you can do with that there is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 657.2,
      "end": 663.36,
      "text": " in the tower repository itself actually no in the lambda runtime repository itself in the ws-rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 663.36,
      "end": 669.84,
      "text": " runtime there is an example on how to use the tower library in combination with the runtime to enable"
    },
    {
      "speakerLabel": "spk_0",
      "start": 669.84,
      "end": 675.52,
      "text": " tracing and you just enable it as a middleware around your handler code and of course you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 675.52,
      "end": 680.08,
      "text": " build your own custom middlewares for validation logging deserialization error handling and so on."
    },
    {
      "speakerLabel": "spk_1",
      "start": 680.64,
      "end": 683.92,
      "text": " Is this a little bit like midi for Rust then it's just built into that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 684.5600000000001,
      "end": 691.44,
      "text": " runtime library they provide?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 691.44,
      "end": 696.96,
      "text": " In a way I would say yes because it's you already have that engine so when we say mid is probably just mid decor just the engine then there isn't yet like a very mature"
    },
    {
      "speakerLabel": "spk_0",
      "start": 696.96,
      "end": 702.24,
      "text": " ecosystem of middlewares that are specialized for lambda that can be an interesting other open source"
    },
    {
      "speakerLabel": "spk_0",
      "start": 702.24,
      "end": 707.44,
      "text": " project if you want to you or somebody else wants to explore building something like the middleware"
    },
    {
      "speakerLabel": "spk_0",
      "start": 707.44,
      "end": 714,
      "text": " ecosystem for Rust."
    },
    {
      "speakerLabel": "spk_1",
      "start": 714,
      "end": 718.32,
      "text": " Yeah okay that's an interesting approach because I guess every language has slightly different take on that. So I think based on what you said I'm kind of convinced that there's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 718.32,
      "end": 724.08,
      "text": " enough of a benefit there for me to try it but I've got literally zero experience with Rust."
    },
    {
      "speakerLabel": "spk_1",
      "start": 724.08,
      "end": 729.44,
      "text": " I've just seen the hype emerge so where do I start how would you start with? Would I start with Rust"
    },
    {
      "speakerLabel": "spk_1",
      "start": 729.44,
      "end": 733.84,
      "text": " first or how would I just jump in and try and write my first lambda function in Rust? What's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 733.84,
      "end": 738.48,
      "text": " the best place to begin?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 738.48,
      "end": 743.0400000000001,
      "text": " Yeah I'm gonna assume for now that you know a little bit of Rust even if maybe that's not the case we can discuss later some tips on how to get started and let's just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 743.04,
      "end": 749.12,
      "text": " focus for now on if you know a little bit of Rust how do you write your first lambda in Rust and of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 749.12,
      "end": 756.48,
      "text": " course you need to have Rust installed there is actually a very good tool called Rust-up which is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 756.48,
      "end": 760.3199999999999,
      "text": " basically a tool that allows you to install Rust in your system but also to keep it up to date"
    },
    {
      "speakerLabel": "spk_0",
      "start": 760.3199999999999,
      "end": 765.28,
      "text": " every time there are new releases so definitely the most recommended way to install Rust in any"
    },
    {
      "speakerLabel": "spk_0",
      "start": 765.28,
      "end": 772,
      "text": " machine and that way you can easily keep it up to date. This week actually I came across an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 772,
      "end": 778.48,
      "text": " interesting article that showcases exactly like what is the experience of building a lambda in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 778.48,
      "end": 782.88,
      "text": " Rust from scratch and it's actually not an L word lambda it's actually an interesting lambda because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 782.88,
      "end": 787.52,
      "text": " it's doing some query over a JSON file that is compressed so there is actually quite a bit of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 787.52,
      "end": 793.12,
      "text": " logic it can be an interesting use case and this is coming from a company called Scanner which does"
    },
    {
      "speakerLabel": "spk_0",
      "start": 794.24,
      "end": 798.8,
      "text": " logs and tracing so they are actually showing some of their code at the end of the day probably it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 798.8,
      "end": 804.16,
      "text": " a simplification but it's an actual business case and they actually use Rust as a lambda in their"
    },
    {
      "speakerLabel": "spk_0",
      "start": 804.16,
      "end": 809.3599999999999,
      "text": " own environment and one thing that I learned through this article is that there is a new tool"
    },
    {
      "speakerLabel": "spk_0",
      "start": 809.3599999999999,
      "end": 815.3599999999999,
      "text": " relatively new tool from somebody in AWS that is called Cargo Lambda which is an extension of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 815.3599999999999,
      "end": 820.4,
      "text": " cargo the tool we mentioned before that does package management testing building and so on"
    },
    {
      "speakerLabel": "spk_0",
      "start": 820.4,
      "end": 824.64,
      "text": " you can install this extension and this extension basically gives you a bunch of helpers directly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 824.64,
      "end": 832,
      "text": " that gets directly built into cargo to start a new lambda in Rust so create the scaffolding for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 832.72,
      "end": 836.4,
      "text": " just like the structure of the code and how do you organize the libraries that you need"
    },
    {
      "speakerLabel": "spk_0",
      "start": 837.04,
      "end": 842.16,
      "text": " and also gives you the ability of testing your code locally and also compile it and deploy it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 842.16,
      "end": 848.24,
      "text": " to AWS so it's kind of one shop kind of tool that you just install it extends your own main tool"
    },
    {
      "speakerLabel": "spk_0",
      "start": 848.24,
      "end": 853.36,
      "text": " which is cargo and then you just run cargo something to do all the different things that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 853.36,
      "end": 860.5600000000001,
      "text": " you might want to do for running writing and running and deploying lambdas written in Rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 861.76,
      "end": 868.08,
      "text": " so the experience is that generally you if you use something like cargo lambda you will do I think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 868.08,
      "end": 873.44,
      "text": " it's cargo lambda new or something like that to create the structure and that gives you already"
    },
    {
      "speakerLabel": "spk_0",
      "start": 873.44,
      "end": 881.44,
      "text": " a Rust project with runtime already installed and it's a little bit like Python or Node where you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 881.44,
      "end": 886.32,
      "text": " have a file where you define all your external dependencies so all this structure is created"
    },
    {
      "speakerLabel": "spk_0",
      "start": 886.32,
      "end": 892,
      "text": " for you you will have this cargo toml which is the basically the the package json of Rust if you want"
    },
    {
      "speakerLabel": "spk_0",
      "start": 892,
      "end": 896.1600000000001,
      "text": " and in that package json you already will have a reference to the latest version of the Rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 897.6,
      "end": 902.96,
      "text": " runtime and then it also creates a main file and the main file is basically your entry point when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 902.96,
      "end": 907.9200000000001,
      "text": " you compile your Rust code is going to start from that file it's going to look for a main function"
    },
    {
      "speakerLabel": "spk_0",
      "start": 907.92,
      "end": 913.52,
      "text": " and that's what gets executed first and that main function is already hooked into the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 914.64,
      "end": 920.4799999999999,
      "text": " Rust runtime as a library so literally what you have to left to right is your handler so using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 920.4799999999999,
      "end": 924.9599999999999,
      "text": " this tool the experience of writing lambda code is not very different from the experience you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 924.9599999999999,
      "end": 931.1999999999999,
      "text": " would have when writing something in Python or in Node.js and another interesting thing that it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 931.2,
      "end": 937.6800000000001,
      "text": " a common gotcha at the beginning is that if you're used to writing lambdas in Python or JavaScript"
    },
    {
      "speakerLabel": "spk_0",
      "start": 938.24,
      "end": 944.1600000000001,
      "text": " it's very easy to to receive generic pieces of JSON in your event process them read some data"
    },
    {
      "speakerLabel": "spk_0",
      "start": 944.1600000000001,
      "end": 949.76,
      "text": " and do something with it and then return another very generic JSON string as a as an answer of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 949.76,
      "end": 953.2800000000001,
      "text": " course when you use compile languages strongly typed languages it gets a little bit more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 953.2800000000001,
      "end": 959.12,
      "text": " complicated because you cannot just say whatever data type you need to be very specific with the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 959.12,
      "end": 963.92,
      "text": " data you are receiving and the data that you are returning so there is a library that can help a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 963.92,
      "end": 970,
      "text": " lot when you want to still keep that very generic ability to handle JSON input you don't want to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 970,
      "end": 974.48,
      "text": " create like very strict serializer and the serializer maybe you want to accept very generic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 974.48,
      "end": 981.04,
      "text": " JSON and this library is called SERDE and it's the most common library for serialization"
    },
    {
      "speakerLabel": "spk_0",
      "start": 981.04,
      "end": 985.84,
      "text": " the serialization Rust and it also supports JSON and with this library you can write an handler"
    },
    {
      "speakerLabel": "spk_0",
      "start": 985.84,
      "end": 990.4,
      "text": " that can receive any arbitrary JSON and then you have different way to extrapolate data from that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 990.4,
      "end": 995.76,
      "text": " arbitrary JSON effectively gives you an object that's like a tree and you have to traverse this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 995.76,
      "end": 1000.88,
      "text": " tree and verify okay am i getting an object here is this probably something that exists is it a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1000.88,
      "end": 1005.6800000000001,
      "text": " string is it an integer it takes a little bit more code to actually deserialize well to extrapolate"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1005.6800000000001,
      "end": 1012.72,
      "text": " your information but you don't have to deserialize into a very specific type if you want to do that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1012.72,
      "end": 1017.76,
      "text": " actually i think the runtime comes with for instance http types and the most common types"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1017.76,
      "end": 1022.64,
      "text": " already built in so if you are building andlets that are already targeting very specific types"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1022.64,
      "end": 1028.4,
      "text": " of default events in AWS there are different types already built in that you can just use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1028.4,
      "end": 1032.16,
      "text": " and you will have access to all the different properties that are expected for those events"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1033.84,
      "end": 1037.84,
      "text": " then the next step is how do you do local testing so with cargo lambda you can just run"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1037.84,
      "end": 1044.24,
      "text": " cargo lambda watch i think is the command which allows you to spin up like a local version of your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1044.24,
      "end": 1049.28,
      "text": " lambda and then local version restarts if you do changes in your code so it's kind of a live"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1049.28,
      "end": 1055.12,
      "text": " autoloading server at that point and then you can use cargo lambda invoke i believe is the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1055.12,
      "end": 1060.9599999999998,
      "text": " other command to send an event to this locally running server and see exactly what happens if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1060.9599999999998,
      "end": 1065.4399999999998,
      "text": " your code receives that event so you can keep doing that until you are happy with the result"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1065.44,
      "end": 1069.68,
      "text": " with the result of your code and then at that point you can run cargo lambda build"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1070.3200000000002,
      "end": 1075.6000000000001,
      "text": " and that will effectively compile your code and you can even pass a flag to build for graviton"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1075.6000000000001,
      "end": 1080,
      "text": " which is something i haven't tested yet but i'm very excited to try that because i'm hearing that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1080,
      "end": 1085.3600000000001,
      "text": " that makes the performance in certain cases even more interesting and there is also a template that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1085.3600000000001,
      "end": 1091.52,
      "text": " you can easily when you bootstrap your project you also get github ci template that you can use if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1091.52,
      "end": 1097.04,
      "text": " want to automate the testing and building process in your ci if you use github actions"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1104.16,
      "end": 1109.04,
      "text": " i like the idea that carzia's cargo lambda tool gives you this kind of one-stop shop for everything you need to do to create and build rust lambda projects but i'm kind of wondering how does it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1109.04,
      "end": 1113.52,
      "text": " fit in with the rest of the ecosystem that we know already like sam and serverless framework which"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1113.52,
      "end": 1118.24,
      "text": " allow you to create multiple functions and also deploy other resources along with that as well"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1118.24,
      "end": 1123.68,
      "text": " is is it is like is is the rust movement with lambda moving towards its own kind of closed"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1123.68,
      "end": 1127.92,
      "text": " ecosystem that it doesn't link through to the other tools or would you can you use some of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1133.84,
      "end": 1138.4,
      "text": " those other tools with rust as well yeah i don't think we have a critical mass of lambda rust projects today to say that the ecosystem is going one direction or another i think it's still very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1138.4,
      "end": 1145.04,
      "text": " very new in any way we saw actually when we were creating the the show notes for these episodes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1145.04,
      "end": 1148.8,
      "text": " that there is a serverless plugin so if you're using the serverless framework there is a rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1148.8,
      "end": 1153.28,
      "text": " plugin that should help you to to build things correctly and structure things correctly if you're"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1153.28,
      "end": 1158.08,
      "text": " using rust we haven't tested it yet so your knowledge might vary but there seems to be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1158.08,
      "end": 1164.8,
      "text": " different kind of tools it's not just cargo lambda you can also use container images so you could"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1165.6,
      "end": 1170.6399999999999,
      "text": " package rather than building this zip file with a banner inside you can package everything as a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1170.6399999999999,
      "end": 1174.8799999999999,
      "text": " container and we can reference an article that oh and you wrote some time ago if you want some"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1174.88,
      "end": 1180.72,
      "text": " generic guidance you will need to adjust that for rust and maybe you can find some other material"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1180.72,
      "end": 1185.7600000000002,
      "text": " that gives you more guidance on how to do that specifically for rust i did try myself to do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1185.7600000000002,
      "end": 1190.72,
      "text": " things manually because when i wrote my first lambda i didn't know about this cargo lambda"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.72,
      "end": 1195.68,
      "text": " maybe wasn't even there it takes a little bit of work because you need to figure out exactly what"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.68,
      "end": 1202,
      "text": " are the right flags to compile your code for the right architecture and then how to zip your file"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1202,
      "end": 1208.16,
      "text": " correctly so that the runtime is actually bootstrapped correctly so it's not that obvious"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1208.16,
      "end": 1212.4,
      "text": " and when i did it the first time there wasn't a lot of guides out there so i had to spend a little"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1212.4,
      "end": 1217.6,
      "text": " bit of time doing trial and error until i figured out exactly how configuration that worked so i'm"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1217.6,
      "end": 1222.64,
      "text": " looking forward to to spend more time playing with cargo lambda because it seems like it's the kind"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1222.64,
      "end": 1226.4,
      "text": " of tool that i would have wanted when i was doing this particular exercise and i ended up doing a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1226.4,
      "end": 1231.92,
      "text": " lot of stuff manually trying to figure out things by trial and error then another interesting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1231.92,
      "end": 1239.2,
      "text": " thing is that in that particular example that i mentioned before that twitter integration i needed"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1239.2,
      "end": 1245.6000000000001,
      "text": " to connect to something like dynamodb so you might wonder okay what's the sdk experience like it is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1245.6000000000001,
      "end": 1251.28,
      "text": " good actually because now and by now i mean probably this was reinvent of two years ago"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1251.28,
      "end": 1257.68,
      "text": " if i'm not wrong there is an official rust sdk officially supported by aws before then there used"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1257.68,
      "end": 1263.8400000000001,
      "text": " to be somebody writing it as a library so it maybe wasn't the most up-to-date experience it wasn't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263.8400000000001,
      "end": 1268.72,
      "text": " that official experience anyway now there is an official sdk so you might expect that it is as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1268.72,
      "end": 1275.04,
      "text": " good as the other ones if it's maintained by aws it is still a little bit too verbose because i"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1275.04,
      "end": 1281.2,
      "text": " think it's just the nature of strictly typed languages that you need to when you use this kind"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1281.2,
      "end": 1286.0800000000002,
      "text": " of sdk you are constructing a lot of objects and combining them and then calling specific methods"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1286.08,
      "end": 1290.6399999999999,
      "text": " and it tends to be a lot more verbose when done with a strictly typed language"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1291.6799999999998,
      "end": 1296.8,
      "text": " compares that to something like javascript or python although one thing that i like is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1297.9199999999998,
      "end": 1303.9199999999998,
      "text": " there are a lot of builder pattern utility so they can give you shortcuts to build objects"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1303.9199999999998,
      "end": 1309.1999999999998,
      "text": " where you can basically use all the defaults and just specify the thing that you want to customize"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1310,
      "end": 1314.6399999999999,
      "text": " it still takes a little bit of work to get used to it coming from the javascript sdk or the python"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1314.64,
      "end": 1320.3200000000002,
      "text": " sdk but i think eventually you can easily get used to it and the typing system it can actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1320.3200000000002,
      "end": 1326,
      "text": " be a good guidance to see exactly which options are supported which ones are not required and so on"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1327.2800000000002,
      "end": 1332.72,
      "text": " so yeah could be a bit verbose but also could be a little bit more guidance than you get when using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1332.72,
      "end": 1338.8000000000002,
      "text": " uh javascript or python maybe i can say why i am particularly excited about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1338.8,
      "end": 1344.3999999999999,
      "text": " rust and lambda together um the first thing and we already mentioned that is because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1345.9199999999998,
      "end": 1351.9199999999998,
      "text": " for all these cases where memory and speed are directly related to cost and this is particularly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1351.9199999999998,
      "end": 1357.68,
      "text": " the case for serverless using rust can really give you the the most optimized experience you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1357.68,
      "end": 1362.6399999999999,
      "text": " can possibly create so you can eventually save a lot of money so basically what i'm trying to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1362.6399999999999,
      "end": 1368.32,
      "text": " say is that if you're writing something in rust for lambda you should be able to get four"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1368.32,
      "end": 1373.76,
      "text": " to get fairly optimized memory consumption and performance so you are reducing to the minimum"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1373.76,
      "end": 1379.52,
      "text": " the two dimensions that eventually affect the cost of running your own lambda so i think in all these"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1379.52,
      "end": 1384.6399999999999,
      "text": " cases where you might be concerned about performance and cost probably investing in rust might be a good"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1384.6399999999999,
      "end": 1390,
      "text": " investment also again we already said that that the language itself pushes you to write code that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1390,
      "end": 1394.8,
      "text": " is generally more correct so it's potentially harder to create specific kind of bugs so that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1394.8,
      "end": 1399.44,
      "text": " can be another advantage if you have very business sensitive areas where you want to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1399.44,
      "end": 1403.68,
      "text": " make sure that you are not writing bugs or at least reduce the risk of writing bugs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1405.84,
      "end": 1411.44,
      "text": " so i expect rust to become more and more prominent in general so we will see a larger ecosystem more"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1411.44,
      "end": 1416.72,
      "text": " libraries more tutorials more examples more people willing to help or even to be hired in your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1416.72,
      "end": 1423.2,
      "text": " company with that expertise already so that i think contributes in the future of rust and lambda so we"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1423.2,
      "end": 1426.8,
      "text": " will probably see more use cases of rust and lambda just because the ecosystem is growing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1432.48,
      "end": 1437.3600000000001,
      "text": " yeah it sounds like there's a lot of benefits like i can from what you said i can think of like you've got a modern ecosystem great tooling right for rust itself and also for rust with lambda now"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1437.92,
      "end": 1441.44,
      "text": " you've got the performance benefit which was definitely going to be of interest to people who"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1441.44,
      "end": 1446.64,
      "text": " are like really trying to optimize and then also that relates to cost you know so if you've got a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1446.64,
      "end": 1452.72,
      "text": " really hot lambda and you can benefit with an order of magnitude improvement in performance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1452.72,
      "end": 1458.48,
      "text": " potentially with rust that has a huge appeal so there's lots of positives there in the interest"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1458.48,
      "end": 1464,
      "text": " of balance is there any drawbacks we should be aware of and maybe what's your advice in summary"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1471.1200000000001,
      "end": 1476.24,
      "text": " should should people try and adopt it now or hold off trying rust with lambda yeah so i think the the main decision point on whether you should be using rust or not is probably the learning curve"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1476.24,
      "end": 1480.64,
      "text": " so there is still a little bit of learning curve it's not a language that most people know and is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1480.64,
      "end": 1484.72,
      "text": " a language that comes with a very specific background that is closer to system programming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1484.72,
      "end": 1488.48,
      "text": " than it is to web programming so if you are coming from web programming there might be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1489.2800000000002,
      "end": 1493.5200000000002,
      "text": " a little bit more to learn there before you can fully appreciate the language and then you need"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1493.5200000000002,
      "end": 1499.2,
      "text": " to to learn all the distinctive characteristics of the language the syntax the memory model and so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1499.2,
      "end": 1504.16,
      "text": " on so there is definitely a little bit of learning curve there so it's not something to underestimate"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1504.16,
      "end": 1508.4,
      "text": " that learning curve because if you are building lambdas you're probably trying to optimize for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1508.4,
      "end": 1513.1200000000001,
      "text": " speed of delivery so when you think that you need to learn a new language and you combine with that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1513.1200000000001,
      "end": 1518.4,
      "text": " probably there is some sacrifices to be made there in the short term to give your team time to learn"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1518.4,
      "end": 1522.72,
      "text": " the language master it enough that they can be proficient with it and then you are going to get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1522.72,
      "end": 1527.68,
      "text": " all the benefits the rust gives you so that's something that only you can evaluate in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1527.68,
      "end": 1532.48,
      "text": " context of your company if it makes sense but if you are doing maybe some side project or some very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1532.48,
      "end": 1537.2,
      "text": " small experimental lambda it might be something worth trying just to get a feeling for what it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1537.2,
      "end": 1544.32,
      "text": " looks like i would say though that before you try it if you don't know rust itself maybe it is worth"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1545.92,
      "end": 1550.96,
      "text": " learning a little bit of rust first so just to get used to the characteristics of the language you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1550.96,
      "end": 1556.24,
      "text": " can do some coding challenges i really like exorcism.org we will have a link in the show"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1556.24,
      "end": 1561.44,
      "text": " notes because it does it's a totally free platform first of all it looks like lit code like one of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1561.44,
      "end": 1567.1200000000001,
      "text": " those platforms where you can do coding challenges but they have a specially good rust track that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1567.12,
      "end": 1572.08,
      "text": " is basically a sequence of i think 50 exercises that guides you through all the basics that you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1572.08,
      "end": 1576.8799999999999,
      "text": " need to learn to master the main concepts that you need to know in rust so that could be a very"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1576.8799999999999,
      "end": 1581.6,
      "text": " good way to just get started it's actually quite fun and the website is really well polished"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1581.6,
      "end": 1586.56,
      "text": " so maybe that's a low way low effort way to to get started with rust and then when you complete"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1586.56,
      "end": 1591.12,
      "text": " that track maybe you can start to try now how does it look like to actually try to write a lambda with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1591.12,
      "end": 1597.28,
      "text": " it so i think that's that's probably everything for today we probably cover way more than we"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1597.28,
      "end": 1603.36,
      "text": " wanted to cover originally i i really encourage everyone to to try this and give us your feedback"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1603.36,
      "end": 1608,
      "text": " if you found the experience interesting useful or maybe was just too difficult and you could"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1608,
      "end": 1612.6399999999999,
      "text": " really progress and you had to go back to javascript or python or something else and if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1612.6399999999999,
      "end": 1616.3999999999999,
      "text": " you build something with it always let us know what do you build because you know we are always"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1616.4,
      "end": 1622,
      "text": " curious to get use cases and understand how people use lambda serverless aws and definitely we can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1622,
      "end": 1626.64,
      "text": " have some nice conversations after that and we can also revisit our own assumptions and our own"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1626.64,
      "end": 1631.0400000000002,
      "text": " understanding of rust and lambda together and maybe come up later on with a new episode with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1631.0400000000002,
      "end": 1636.16,
      "text": " a refreshed perspective on this particular topic so thank you very much for being with us today"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1636.16,
      "end": 1646.96,
      "text": " and we look forward to seeing you in the next episode"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1646.96,
      "end": 1661.96,
      "text": " rot"
    }
  ]
}