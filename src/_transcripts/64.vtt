WEBVTT

1
00:00:00.000 --> 00:00:04.240
Unless you have been living under a rock, you probably notice that Rust is gaining more and

2
00:00:04.240 --> 00:00:09.360
more traction by the day. So today we want to talk about writing Lambda functions in Rust.

3
00:00:09.360 --> 00:00:13.440
We will be discussing why you might want to do something like this, analyzing pros and cons,

4
00:00:13.440 --> 00:00:18.560
then we will look at the steps needed to author and publish your very first Lambda in Rust.

5
00:00:18.560 --> 00:00:22.640
Finally, we will give our opinion on what's going to be the future of Rust in Lambda,

6
00:00:22.640 --> 00:00:24.480
and why we are so excited about it.

7
00:00:24.480 --> 00:00:29.840
My name is Luciano and today I'm joined by Eoin and this is AWS Bites podcast.

8
00:00:38.080 --> 00:00:43.920
AWS Bites is sponsored by fourTheorem. fourTheorem is an AWS consulting partner offering training,

9
00:00:43.920 --> 00:00:46.480
cloud migration, and modern application architecture.

10
00:00:46.480 --> 00:00:50.720
Find out more at fourtheorem.com. You will find the link in the show notes.

11
00:00:55.840 --> 00:00:59.840
Luciano, I know you've been learning Rust and sharing as you learn on your channel, which we can put the link for in the show notes. Could you start with a quick description?

12
00:00:59.840 --> 00:01:02.560
What is Rust and why is it gaining so much traction?

13
00:01:03.200 --> 00:01:09.440
Yeah, I'm gonna try to give my own view.

14
00:01:09.440 --> 00:01:15.760
I think Rust is a relatively new programming language, and by that I mean that the first release, the 1.0, was in 2015. So it's not that new.

15
00:01:15.760 --> 00:01:20.720
There is a good bit of background there and also existed for a while even before version 1.

16
00:01:21.280 --> 00:01:27.040
So it is, I think, still relatively new, meaning that it's getting traction more and more these

17
00:01:27.040 --> 00:01:31.840
days, but has been around already for a while. So it's not an immature language.

18
00:01:31.840 --> 00:01:33.200
There is some good background there.

19
00:01:33.840 --> 00:01:38.480
It was initially adopted in the context of Mozilla to rewrite some parts of Firefox,

20
00:01:38.480 --> 00:01:43.120
or at least that was the probably the first serious project where Rust was being adopted.

21
00:01:43.120 --> 00:01:49.280
Before that it was more of a research language. It is a strongly typed compiled language that

22
00:01:49.280 --> 00:01:53.440
doesn't have a garbage collector, so that's a very interesting, for instance, in comparison with Go,

23
00:01:53.440 --> 00:01:56.400
that is also strongly typed, but as a garbage collector.

24
00:01:58.000 --> 00:02:02.720
It was initially born as a system programming language because it was particularly focused

25
00:02:02.720 --> 00:02:08.640
on memory safety and performance, so trying to give people a safer experience when compared

26
00:02:08.640 --> 00:02:13.280
to things like C and C++ with also more modern toolchain.

27
00:02:13.920 --> 00:02:18.320
But the interesting thing is that these days it doesn't get promoted anymore as a system

28
00:02:18.320 --> 00:02:22.880
programming language, but it gets promoted more as a general programming language.

29
00:02:22.880 --> 00:02:28.240
And the website says a language empowering everyone to build reliable and efficient software.

30
00:02:28.240 --> 00:02:32.960
And this is specifically true because in Rust these days you can build pretty much anything

31
00:02:32.960 --> 00:02:37.600
from operative systems up to front-end application using WebAssembly.

32
00:02:37.600 --> 00:02:41.440
So that I think that the language is becoming very very general purpose these days,

33
00:02:42.400 --> 00:02:47.680
without losing those major characteristics like being very strongly typed and being very efficient

34
00:02:47.680 --> 00:02:54.240
and having an interesting memory model. It is used also by AWS heavily, and one of the more famous

35
00:02:54.240 --> 00:03:01.040
examples is Firecracker, which is the engine that powers Lambda and Fargate, and it's open source,

36
00:03:01.040 --> 00:03:07.680
so you can check it out if you want to see what a moderately complicated Rust project looks like.

37
00:03:07.680 --> 00:03:10.480
Okay that's pretty interesting. So even if you're already using Lambda,

38
00:03:10.480 --> 00:03:12.880
Firecracker is already in the picture there because it's running

39
00:03:13.920 --> 00:03:18.640
the Lambda infrastructure, that container micro VM infrastructure is already written in Rust.

40
00:03:19.200 --> 00:03:24.880
Okay so that's pretty interesting, but I guess the idea of writing Lambda functions themselves in Rust

41
00:03:24.880 --> 00:03:28.720
is something that's still pretty new. So what has been your experience with that so far? Have you given it a try?

42
00:03:28.720 --> 00:03:35.760
Yeah so I want to emphasize that I'm not an expert in Rust by any means.

43
00:03:35.760 --> 00:03:40.320
It's a language that I've been playing with so to speak for the last three years or three years and

44
00:03:40.320 --> 00:03:46.720
a half, mostly doing coding challenges, some simple games, building small libraries.

45
00:03:46.720 --> 00:03:51.760
I also did a lot of Advent of Code and I've also been streaming that on Twitch with some friends.

46
00:03:51.760 --> 00:03:55.120
We're going to have the link in the show notes if you're curious to see these kind of exercises.

47
00:03:55.120 --> 00:04:01.520
So I didn't really do anything production ready. So my perception right now is just from the point

48
00:04:01.520 --> 00:04:07.600
of view of somebody that has just been having fun with Rust. We might do this episode again after we

49
00:04:07.600 --> 00:04:11.840
build our first production ready Lambda in Rust and maybe reconsider some of the observations today.

50
00:04:12.720 --> 00:04:18.720
But I have actually built one Lambda in Rust for my own personal use case. I have basically a simple

51
00:04:18.720 --> 00:04:26.560
automation workflow on Twitter where if somebody follows me there is a hook that starts and it

52
00:04:26.560 --> 00:04:30.400
basically is going to send a welcome message to this person saying hey thank you for following me,

53
00:04:30.400 --> 00:04:34.400
can I help you with anything and it's just a nice way to get in touch with my followers, start a

54
00:04:34.400 --> 00:04:39.280
conversation and get to know them a little bit better.

55
00:04:39.280 --> 00:04:44.080
And I built this in Rust just because that was the perfect excuse to try to see what building a Lambda in Rust would look like in a very

56
00:04:44.080 --> 00:04:50.160
simple use case. Even though it's not really that simple because it still needs to do a lot of

57
00:04:50.160 --> 00:04:54.080
sophisticated integration because it needs to connect with the Twitter APIs which are HTTP

58
00:04:54.080 --> 00:05:00.320
requests there needs to be some state stored in DynamoDB so there is also the SDK that gets used

59
00:05:00.880 --> 00:05:07.120
plus I try to do some testing automated deployment and so on so even if it's a very simple Lambda

60
00:05:07.120 --> 00:05:11.120
there is still enough complexity to try to understand what writing Lambdas in Rust would look

61
00:05:11.120 --> 00:05:15.200
like.

62
00:05:15.200 --> 00:05:20.800
All right, that's pretty interesting, so I guess people can check out your Twitch channel to have a look at what you've been doing.

63
00:05:20.800 --> 00:05:25.840
When I'm hearing about writing Lambda functions in Rust, I kind of think back to the limited experience I have at writing Lambda functions in languages

64
00:05:25.840 --> 00:05:32.320
like C#/.NET and Java. I've used Java quite a lot in the past but I wouldn't jump to it immediately for Lambda.

65
00:05:32.320 --> 00:05:38.720
One of the reasons is that I guess historically it has been slow, right?

66
00:05:38.720 --> 00:05:43.360
There's a lot of steps taken recently to overcome that with things like GraalVM and then

67
00:05:43.360 --> 00:05:49.360
SnapStart very recently at re:Invent but generally when it comes to compiled languages, I wouldn't

68
00:05:49.360 --> 00:05:53.360
rush to them because I feel that dynamic languages are just a lot simpler when it comes to writing

69
00:05:53.360 --> 00:05:57.520
Lambda functions, especially when dealing with JSON payloads, etc.

70
00:05:57.520 --> 00:06:03.520
So I feel like there's more steps to perform when you're using compiled languages. What is Rust like in that context and what is the

71
00:06:03.520 --> 00:06:08.720
appeal of using it for Lambda? And then I suppose the other question is what's the build and

72
00:06:08.720 --> 00:06:13.120
deployment experience like? Are there a lot more steps or do they manage to simplify it somehow?

73
00:06:18.720 --> 00:06:24.000
Yeah, so there is definitely an extra step for Rust as well because it's a compiled language and you need to make sure that you compile your code before you are able to execute it and in this

74
00:06:24.000 --> 00:06:28.400
particular case, you need to compile your code for the specific target architecture which is the one where the Lambda effectively runs.

75
00:06:28.400 --> 00:06:32.480
It's not the one that you have in your own development

76
00:06:32.480 --> 00:06:37.760
environment so there might be a little bit of complexity there if you need to cross compile

77
00:06:37.760 --> 00:06:43.040
from, for instance, an architecture to another. There are tools that can help and we will probably

78
00:06:43.040 --> 00:06:48.400
mention some of them later but yeah there is definitely an extra step there just because of the characteristics of the language.

79
00:06:48.400 --> 00:06:53.200
On the other hand, it's a very fast and memory efficient language

80
00:06:53.200 --> 00:06:59.200
which affects very positively cold starts. I've seen incredibly small cold starts sometimes even

81
00:06:59.200 --> 00:07:05.840
a single digit millisecond cold start but generally doesn't go above 20 milliseconds for relatively simple Lambdas written in Rust.

82
00:07:05.840 --> 00:07:12.960
Also one thing that I really like is that the programming model

83
00:07:12.960 --> 00:07:18.800
helps to write safe and correct code and this is actually one of the reasons why I'm enjoying

84
00:07:18.800 --> 00:07:23.440
learning and writing Rust just because the language in itself is very mature.

85
00:07:23.440 --> 00:07:28.160
I think it brings in a lot of the nice things that came out of many different other languages.

86
00:07:28.160 --> 00:07:33.200
For instance there are no null types. You need to use optional and you need to be very explicit when some data

87
00:07:33.200 --> 00:07:38.320
type is going to be there 100% or there may be a case where it's not going to be there.

88
00:07:38.320 --> 00:07:42.800
And every time you have this kind of situation, you need to explicitly decide what's going to happen when the value is not there.

89
00:07:42.800 --> 00:07:47.360
And this is something that I found helps a lot to prevent a certain classes of

90
00:07:47.360 --> 00:07:54.720
bugs so by just learning the idiomatic way of writing Rust and the constructs that the language

91
00:07:54.720 --> 00:07:59.120
gives you, I think it's much easier to end up writing code that is actually more correct and

92
00:07:59.120 --> 00:08:03.520
there are less bugs which is definitely another advantage to keep in mind when choosing a language.

93
00:08:04.720 --> 00:08:09.680
And it's also very modern in terms of toolchain and ecosystem on libraries. For instance, there is

94
00:08:09.680 --> 00:08:16.320
a tool called Cargo which is somewhat similar to NPM if you come from Node.js, but it's very rich and

95
00:08:16.320 --> 00:08:20.720
allows you not just to install dependencies but also to build your code.

96
00:08:20.720 --> 00:08:26.240
It can easily be extended also for testing and for a bunch of other things, so there is this one tool that does almost everything

97
00:08:26.240 --> 00:08:31.040
you can possibly need and if you compare that for instance with Python where you have like 12 or

98
00:08:31.040 --> 00:08:36.080
more tools if you have to do installing dependencies, packaging, building native dependencies and so on it's a very different experience there.

99
00:08:36.080 --> 00:08:41.760
Another thing is that it supports async, so you can write

100
00:08:41.760 --> 00:08:49.040
very efficient servers or code that relies heavily on I/O without having to necessarily spin up multiple threads.

101
00:08:49.040 --> 00:08:53.760
So that's another interesting thing for a compiled language and I think actually

102
00:08:53.760 --> 00:08:58.560
Rust spend a lot of time, the community of Rust spend a lot of time trying to come up with a

103
00:08:58.560 --> 00:09:03.200
definition of async that doesn't affect performance and it's actually considered one of the most

104
00:09:03.200 --> 00:09:10.080
efficient implementation of async so also very interesting that aspect.

105
00:09:10.080 --> 00:09:14.720
The thing that is not as nice or at least initially might look a little bit weird is that there isn't that official

106
00:09:14.720 --> 00:09:20.160
runtime for Rust in AWS, so if you look at the list of the supported runtimes Rust is not there.

107
00:09:20.160 --> 00:09:24.880
So how it is even possible that you can write lambdas in Rust? Well effectively you can do that

108
00:09:24.880 --> 00:09:30.640
by creating your own custom runtime. AWS makes that a little bit easier than it seems if you have

109
00:09:30.640 --> 00:09:35.120
to do it from scratch because they literally give you a library that is an official library written

110
00:09:35.120 --> 00:09:40.080
by AWS (and we will have the link in the show notes) and that library is basically something that you

111
00:09:40.080 --> 00:09:44.160
use in your own code in your own handler and basically at the end of the day you are packaging

112
00:09:44.160 --> 00:09:49.280
one single binary which is a custom runtime that contains the runtime itself from the library and

113
00:09:49.280 --> 00:09:53.440
then your handler which is basically your own custom code.

114
00:09:53.440 --> 00:09:59.120
So you can imagine you wrap your handler with a custom runtime but that runtime is given to you by AWS in the form of a Rust library.

115
00:10:01.520 --> 00:10:06.160
Another interesting thing why I think that this is a very interesting and modern approach is that

116
00:10:06.160 --> 00:10:12.640
this custom runtime is fully async and in Rust there are different runtimes for async.

117
00:10:12.640 --> 00:10:20.400
One of the most famous is called Tokio (T-O-K-I-O) and Tokio is very interesting because it's kind of an ecosystem of libraries.

118
00:10:20.400 --> 00:10:25.120
It's not just the runtime but there is a lot more that it gives you

119
00:10:25.120 --> 00:10:31.360
and one of the things that gives you is something called Tower which is a way to define services.

120
00:10:31.360 --> 00:10:36.080
So in the most generic sense and you can imagine that a Lambda is a service on its own and a service

121
00:10:36.080 --> 00:10:39.600
it's something that automatically is like a middleware engine when you use this library

122
00:10:39.600 --> 00:10:47.200
called Tower so basically you don't need something like Middy if you're writing a Lambda in Rust because it's already built in.

123
00:10:47.200 --> 00:10:51.360
You can just write your middleware straight away and connect them to

124
00:10:51.360 --> 00:10:57.840
your handlers and if you want some examples of what you can do with that there is in the

125
00:10:57.840 --> 00:11:04.160
Tower repository itself - actually no, in the Lambda runtime repository itself - in the AWS Rust runtime,

126
00:11:04.160 --> 00:11:09.840
there is an example on how to use the Tower library in combination with the runtime to enable

127
00:11:09.840 --> 00:11:15.520
tracing and you just enable it as a middleware around your handler code and of course you can

128
00:11:27.280 --> 00:11:32.720
build your own custom middlewares for validation logging, deserialization, error handling and so on.

129
00:11:32.720 --> 00:11:38.560
Is this a little bit like Middy for Rust, then? It's just built into that runtime library they provide?

130
00:11:38.560 --> 00:11:42.960
In a way, I would say yes because  you already have that engine so when we say Middy, it is probably just Middy Core, just the engine. Then there isn't yet like a very mature ecosystem of middlewares that are specialized for Lambda. That can be an interesting other open source project if you wantto you or somebody else wants to explore building something like the middleware ecosystem for Rust.

131
00:11:50.720 --> 00:11:54.320
Yeah okay, that's an interesting approach because I guess every language has a slightly different take on that.

132
00:11:54.320 --> 00:11:58.560
So I think, based on what you said, I'm kind of convinced that there's enough

133
00:11:58.560 --> 00:12:04.640
of a benefit there for me to try it but I've got literally zero experience with Rust, I've just seen the hype emerge.

134
00:12:04.640 --> 00:12:10.160
So where do I start? How would you start? Would I start with Rust first or

135
00:12:10.160 --> 00:12:14.240
would I just jump in and try and write my first Lambda function in Rust? What's the best place to begin?

136
00:12:18.960 --> 00:12:24.720
I'm gonna assume for now that you know a little bit of Rust, even if maybe that's not the case. We can discuss later some tips on how to get started and let's just focus for now on if

137
00:12:24.720 --> 00:12:29.600
you know a little bit of Rust, how do you write your first lambda in Rust.

138
00:12:29.600 --> 00:12:37.040
Of course, you need to have Rust installed. There is actually a very good tool called Rustup which is basically a tool

139
00:12:37.040 --> 00:12:40.880
that allows you to install Rust in your system but also to keep it up to date every time there

140
00:12:40.880 --> 00:12:46.480
are new releases so definitely, the most recommended way to install Rust in any machine.

141
00:12:46.480 --> 00:12:53.600
And that way you can easily keep it up to date. This week actually I came across an interesting article

142
00:12:53.600 --> 00:12:59.920
that showcases exactly like what is the experience of building a Lambda in Rust from scratch.

143
00:12:59.920 --> 00:13:04.400
It's actually not an Hello World Lambda, it's actually an interesting Lambda because it's doing some query

144
00:13:04.400 --> 00:13:08.560
over a JSON file that is compressed. There is actually quite a bit of logic.

145
00:13:08.560 --> 00:13:15.760
It can be an interesting use case and this is coming from a company called Scanner which does logs and tracing

146
00:13:15.760 --> 00:13:19.520
so they are actually showing some of their code at the end of the day, probably it's a simplification

147
00:13:19.520 --> 00:13:25.200
but it's an actual business case and they actually use Rust as a Lambda in their own environment.

148
00:13:26.320 --> 00:13:30.640
One thing that I learned through this article is that there is a relatively new tool

149
00:13:30.640 --> 00:13:36.320
from somebody in AWS that is called Cargo Lambda which is an extension of Cargo, the tool we

150
00:13:36.320 --> 00:13:41.280
mentioned before that does package management, testing, building and so on.

151
00:13:41.280 --> 00:13:45.440
You can install this extension and this extension basically gives you a bunch of helpers directly that gets directly

152
00:13:45.440 --> 00:13:53.360
built in into Cargo to start a new Lambda in Rust, so, create the scaffolding for just like the

153
00:13:53.360 --> 00:13:58.160
structure of the code and how do you organize the libraries that you need and also gives you the

154
00:13:58.160 --> 00:14:03.840
ability of testing your code locally and also compile it and deploy it to AWS.

155
00:14:03.840 --> 00:14:09.680
So it's kind of one shop kind of tool that you just install, it extends your own main tool, which is Cargo, and then

156
00:14:09.680 --> 00:14:15.520
you just run 'cargo something' to to do all the different things that you might want to do for

157
00:14:15.520 --> 00:14:23.760
running writing and running and deploying lambdas written in Rust.

158
00:14:23.760 --> 00:14:29.680
So the experience is that generally if you use something like Cargo Lambda, you will do, i think it's 'cargo-lambda new' or something

159
00:14:29.680 --> 00:14:37.120
like that to create the structure. That gives you already a Rust project with runtime already installed.

160
00:14:37.120 --> 00:14:43.200
It's a little bit like Python or Node where you have a file where you define all

161
00:14:43.200 --> 00:14:48.320
your external dependencies, so all this structure is created for you you will have this cargo.toml

162
00:14:48.320 --> 00:14:53.120
which is the basically the the package.json of Rust if you want and, in that package.json you

163
00:14:53.120 --> 00:14:59.200
already will have a reference to the latest version of the Rust runtime and then it also

164
00:14:59.200 --> 00:15:04.800
creates a main file and the main file is basically your entry point when you compile your Rust code.

165
00:15:04.800 --> 00:15:09.120
It's going to start from that file, it's going to look for a main function and that's what gets

166
00:15:09.120 --> 00:15:16.720
executed first and that main function is already hooked into the Rust runtime as a library so

167
00:15:16.720 --> 00:15:22.240
literally what you have left to write is your handler.

168
00:15:22.240 --> 00:15:26.800
So using this tool, the experience of writing Lambda code is not very different from the experience you would have when writing something

169
00:15:26.800 --> 00:15:33.440
in Python or in Node.js and another interesting thing that it's a common gotcha at the beginning

170
00:15:33.440 --> 00:15:40.080
is that if you're used to writing Lambdas in Python or JavaScript, it's very easy to to receive

171
00:15:40.080 --> 00:15:45.200
generic pieces of JSON in your event, process them read some data and do something with it and then

172
00:15:45.200 --> 00:15:51.440
return another very generic JSON string as an answer.

173
00:15:51.440 --> 00:15:57.040
Of course, when you use compiled languages/strongly-typed languages, it gets a little bit more complicated because you cannot just say whatever data type.

174
00:15:57.040 --> 00:16:00.720
You need to be very specific with the data you are receiving and the data that you are returning.

175
00:16:00.720 --> 00:16:06.960
There is a library that can help a lot when you want to still keep that very generic

176
00:16:06.960 --> 00:16:12.080
ability to handle JSON input you don't want to create like very strict serializer.

177
00:16:12.080 --> 00:16:18.880
Maybe you want to accept very generic JSON. This library is called SERDE

178
00:16:18.880 --> 00:16:23.760
and it's the most common library for serialization the serialization Rust and it also supports JSON.

179
00:16:23.760 --> 00:16:28.320
With this library, you can write an handler that can receive any arbitrary JSON and then you

180
00:16:28.320 --> 00:16:32.000
have different ways to extrapolate data from the arbitrary JSON. It effectively gives you

181
00:16:32.960 --> 00:16:37.680
an object that's like a tree and you have to traverse this tree and verify, okay am I getting

182
00:16:37.680 --> 00:16:42.800
an object here, is this probably something that exists, is it a string, is it an integer.

183
00:16:42.800 --> 00:16:46.480
It takes a little bit more code to actually deserialize - well - to extrapolate your information but you

184
00:16:46.480 --> 00:16:53.200
don't have to deserialize into a very specific type if you want to do that.

185
00:16:53.200 --> 00:16:58.880
Actually, I think the runtime comes with for instance HTTP types and the most common types already built in so if you

186
00:16:58.880 --> 00:17:04.640
are building handlers that are already targeting very specific types of default events in AWS

187
00:17:04.640 --> 00:17:09.600
there are different types already built in that you can just use and you will have access to all

188
00:17:09.600 --> 00:17:15.200
the different properties that are expected for those events.

189
00:17:15.200 --> 00:17:21.760
Then the next step is, how do you do local testing. So with cargo lambda you can just run 'cargo-lambda watch' I think is the command

190
00:17:21.760 --> 00:17:27.600
which allows you to spin up like a local version of your lambda and then local version restarts

191
00:17:27.600 --> 00:17:32.400
if you do changes in your code. So it's kind of a live autoloading server at that point and then

192
00:17:32.400 --> 00:17:38.800
you can use 'cargo-lambda invoke' I believe is the other command to send an event to this

193
00:17:38.800 --> 00:17:43.520
locally running server and see exactly what happens if your code receives that event.

194
00:17:43.520 --> 00:17:47.920
So you can keep doing that until you are happy with with the result of your code and then at that

195
00:17:47.920 --> 00:17:53.280
point, you can run 'cargo-lambda build' and that will effectively compile your code and you can even

196
00:17:53.280 --> 00:17:59.040
pass a flag to build for graviton which is something I haven't tested yet but I'm very excited to try

197
00:17:59.040 --> 00:18:03.200
that because I'm hearing that that makes the performance in certain cases even more interesting.

198
00:18:04.000 --> 00:18:08.400
And there is also a template that you can easily when you bootstrap your project you also get

199
00:18:09.280 --> 00:18:15.440
GitHub CI template that you can use if you want to automate the testing and building process in yourCI if you use GitHub Actions.

200
00:18:22.160 --> 00:18:28.160
I like the idea that this cargo lambda tool gives you this kind of one-stop shop for everything you need to do to create and build rust lambda projects but I'm

201
00:18:28.160 --> 00:18:32.160
kind of wondering how does it fit in with the rest of the ecosystem that we know already, like SAM and

202
00:18:32.160 --> 00:18:37.040
Serverless Framework, which allow you to create multiple functions and also deploy other resources

203
00:18:37.040 --> 00:18:42.640
along with that as well. Is the rust movement with Lambda moving towards its own

204
00:18:42.640 --> 00:18:47.520
kind of closed ecosystem that doesn't link through to the other tools or can you use some of those other tools with rust as well?

205
00:18:53.200 --> 00:18:57.520
Yeah I don't think we have a critical mass of Lambda Rust projects today to say that the ecosystem is going one direction or another.

206
00:18:57.520 --> 00:19:04.080
I think it's still very very new. We saw actually when we were creating the the show

207
00:19:04.080 --> 00:19:08.080
notes for these episodes that there is a serverless plugin so if you're using the Serverless Framework,

208
00:19:08.080 --> 00:19:12.640
there is a Rust plugin that should help you to to build things correctly and structure things

209
00:19:12.640 --> 00:19:17.840
correctly if you're using Rust. We haven't tested it yet, so your mileage might vary but there seems

210
00:19:17.840 --> 00:19:24.480
to be different kind of tools, it's not just Cargo Lambda.

211
00:19:24.480 --> 00:19:30.480
You can also use container images, so you could package rather than building this zip file with a binary inside, you can package everythingas a container.

212
00:19:30.480 --> 00:19:34.640
And we can reference an article that Eoin you wrote some time ago if you want some generic guidance.

213
00:19:34.640 --> 00:19:40.160
You will need to adjust that for Rust and maybe you can find some other

214
00:19:40.160 --> 00:19:45.680
material that gives you more guidance on how to do that specifically for Rust.

215
00:19:45.680 --> 00:19:50.640
I did try myself to do things manually because when I wrote my first Lambda I didn't know about this cargo lambda

216
00:19:50.640 --> 00:19:55.600
maybe wasn't even there it takes a little bit of work because you need to figure out exactly what

217
00:19:55.600 --> 00:20:01.920
are the right flags to compile your code for the right architecture and then how to zip your file

218
00:20:01.920 --> 00:20:08.160
correctly so that the runtime is actually bootstrapped correctly so it's not that obvious

219
00:20:08.160 --> 00:20:12.320
and when I did it the first time there wasn't a lot of guides out there so I had to spend a little

220
00:20:12.320 --> 00:20:17.120
bit of time doing trial and error until I figured out exactly how configure I should have worked

221
00:20:17.120 --> 00:20:21.520
so I'm looking forward to to spend more time playing with cargo lambda because it seems like

222
00:20:22.160 --> 00:20:25.680
it's the kind of tool that I would have wanted when I was doing this particular exercise and

223
00:20:25.680 --> 00:20:29.200
I ended up doing a lot of stuff manually trying to figure out things by trial and error.

224
00:20:29.200 --> 00:20:34.640
Then another interesting thing is that in that particular example that I mentioned before that

225
00:20:34.640 --> 00:20:40.800
Twitter integration I needed to connect to something like DynamoDB so you might wonder

226
00:20:40.800 --> 00:20:47.680
okay, what's the SDK experience like? It is good actually because now and by now I mean probably

227
00:20:47.680 --> 00:20:52.880
this was reinvent of two years ago if I'm not wrong there is an official rust SDK officially

228
00:20:52.880 --> 00:21:00.160
supported by AWS before then there used to be somebody writing it as a library so it maybe

229
00:21:00.160 --> 00:21:04.240
wasn't the most up-to-date experience. It wasn't that official experience anyway now there is an

230
00:21:04.240 --> 00:21:09.520
official SDK so you might expect that it is as good as the other ones if it's maintained by AWS.

231
00:21:10.480 --> 00:21:14.720
It is still a little bit too verbose because I think it's just the nature of

232
00:21:16.240 --> 00:21:21.040
strictly-typed languages that you need to when you use this kind of SDKs you are constructing a lot

233
00:21:21.040 --> 00:21:26.640
of objects and combining them and then calling specific methods.  And it tends to be a lot more

234
00:21:26.640 --> 00:21:33.360
verbose when done with a strictly-typed language compared to something like JavaScript or Python.

235
00:21:33.920 --> 00:21:40.800
Although one thing that I like is that there are a lot of builder pattern utility so they can give

236
00:21:40.800 --> 00:21:46.480
you shortcuts to build objects where you can basically use all the defaults and just specifies

237
00:21:46.480 --> 00:21:53.200
the thing that you want to customize. It still takes a little bit of work to get used to it coming

238
00:21:53.200 --> 00:21:58.960
from the JavaScript SDK or the Python SDK but I think eventually you can easily get used to it and

239
00:21:58.960 --> 00:22:03.920
the typing system it can actually be a good guidance to see exactly which options are supported,

240
00:22:03.920 --> 00:22:10.320
which ones are not required and so on. So yeah, could be a bit verbose but also could be a little

241
00:22:10.320 --> 00:22:17.200
bit more guidance than you get when using JavaScript or Python.

242
00:22:17.200 --> 00:22:24.960
Maybe I can say why I am particularly excited about Rust and Lambda together. The first thing and we already mentioned that is

243
00:22:24.960 --> 00:22:32.240
because for all these cases where memory and speed are directly related to cost and this is

244
00:22:32.240 --> 00:22:38.400
particularly the case for serverless. Using Rust can really give you the most optimized experience

245
00:22:38.400 --> 00:22:43.280
you can possibly create so you can eventually save a lot of money, so basically what I'm trying

246
00:22:43.280 --> 00:22:49.120
to say is that if you're writing something in Rust for Lambda, you should be able to get fairly

247
00:22:49.120 --> 00:22:54.720
optimized memory consumption and performance.

248
00:22:54.720 --> 00:23:00.000
So you are reducing to the minimum the two dimensions that eventually affect the cost of running your own Lambda.

249
00:23:00.000 --> 00:23:04.640
I think in all these cases where you might be concerned about performance and cost probably investing in Rust might be a good investment.

250
00:23:04.640 --> 00:23:09.920
Also again we already said that that the language itself pushes you to write code that

251
00:23:09.920 --> 00:23:14.800
is generally more correct so it's potentially harder to create specific kind of bugs so that

252
00:23:14.800 --> 00:23:19.920
can be another advantage if you have very business sensitive areas where you want to make sure that

253
00:23:19.920 --> 00:23:27.280
you are not writing bugs or at least reduce the risk of writing bugs. So I expect Rust to become

254
00:23:27.280 --> 00:23:32.640
more and more prominent in general so we will see a larger ecosystem, more libraries, more tutorials,

255
00:23:32.640 --> 00:23:37.920
more examples, more people willing to help or even to be hired in your company with that expertise

256
00:23:37.920 --> 00:23:43.920
already. So that, I think, contributes in the future of Rust and Lambda so we will probably see more

257
00:23:43.920 --> 00:23:49.360
use cases of Rust and Lambda just because the ecosystem is growing.

258
00:23:49.360 --> 00:23:54.080
Yeah it sounds like there's a lot of benefits like from what you said, I can think of, like, you got a modern ecosystem,

259
00:23:54.080 --> 00:23:59.040
great tooling right for Rust itself and also for Rust with Lambda now you've got the performance

260
00:23:59.040 --> 00:24:02.960
benefit which was definitely going to be of interest to people who are like really trying

261
00:24:02.960 --> 00:24:08.000
to optimize. and then also that relates to cost you know so if you've got a really hot Lambda and

262
00:24:08.000 --> 00:24:14.000
you can benefit with an order of magnitude improvement in performance potentially with Rust

263
00:24:14.000 --> 00:24:19.280
that has a huge appeal. So there's lots of positives there.

264
00:24:20.160 --> 00:24:25.040
In the interest of balance, are there any drawbacks we should be aware of? And maybe what's your advice in summary? Should people try

265
00:24:25.040 --> 00:24:32.400
and adopt it now or hold off trying Rust with Lambda?

266
00:24:32.400 --> 00:24:37.360
Yeah so I think the main decision point on whether you should be using Rust or not is probably the learning curve so there is still a

267
00:24:37.360 --> 00:24:41.200
little bit of learning curve. It's not a language that most people know and it's a language that

268
00:24:41.200 --> 00:24:45.760
comes with a very specific background that is closer to system programming than it is to

269
00:24:45.760 --> 00:24:50.240
web programming. So if you are coming from web programming, there might be a little bit more to

270
00:24:50.240 --> 00:24:55.280
learn there before you can fully appreciate the language and then you need to learn all the

271
00:24:55.280 --> 00:24:59.920
distinctive characteristics of the language; the syntax, the memory model and so on.

272
00:24:59.920 --> 00:25:04.640
So there is definitely a little bit of learning curve there so it's not something to underestimate that learning

273
00:25:04.640 --> 00:25:09.440
curve because if you are building Lambdas you're probably trying to optimize for speed of delivery.

274
00:25:10.000 --> 00:25:13.440
When you think that you need to learn a new language and you combine with that probably there

275
00:25:13.440 --> 00:25:19.040
is some sacrifices to be made there in the short term to give your team time to learn the language,

276
00:25:19.040 --> 00:25:23.520
master it enough that they can be proficient with it and then you are going to get all the benefits

277
00:25:23.520 --> 00:25:28.560
that Rust gives you. So that's something that only you can evaluate in the context of your company

278
00:25:28.560 --> 00:25:33.760
if it makes sense. But if you are doing maybe some side project or some very small experimental Lambda

279
00:25:33.760 --> 00:25:37.600
it might be something worth trying just to get a feeling for what it looks like.

280
00:25:39.760 --> 00:25:44.160
I would say though that before you try it, if you don't know Rust itself, maybe it is worth

281
00:25:44.160 --> 00:25:49.840
learning a little bit of Rust first so just to get used to the characteristics of the language.

282
00:25:49.840 --> 00:25:55.280
You can do some coding challenges. I really like exercism.org - we will have a link in the show

283
00:25:55.280 --> 00:26:00.400
notes - because it has it's a totally free platform. First of all it looks like leetcode, like one of

284
00:26:00.400 --> 00:26:06.160
those platforms where you can do coding challenges. But they have a specially good Rust track that is

285
00:26:06.160 --> 00:26:11.360
basically a sequence of I think 50 exercises that guides you through all the basics that you need to

286
00:26:11.360 --> 00:26:16.400
learn to master the main concepts that you need to know in Rust.

287
00:26:16.400 --> 00:26:21.600
So that could be a very good way to just get started. It's actually quite fun and the website is really well polished so maybe that's a

288
00:26:21.600 --> 00:26:26.240
low effort way to to get started with Rust and then when you complete that track maybe you

289
00:26:26.240 --> 00:26:30.400
can start to try now how does it look like to actually try to write a Lambda with it.

290
00:26:32.160 --> 00:26:36.720
So I think that's that's probably everything for today we probably cover way more than we wanted to

291
00:26:36.720 --> 00:26:43.120
cover originally I really encourage everyone to to try this and give us your feedback if you found

292
00:26:43.120 --> 00:26:47.760
the experience interesting useful or maybe was just too difficult and you couldn't really progress

293
00:26:47.760 --> 00:26:52.800
and you had to go back to JavaScript or Python or something else. And if you build something with it

294
00:26:52.800 --> 00:26:57.200
always let us know what do you build because you know we are always curious to get use cases and

295
00:26:57.200 --> 00:27:02.320
understand how people use Lambda, Serverless, AWS and definitely we can have some nice conversations

296
00:27:02.320 --> 00:27:06.880
after that and we can also revisit our own assumptions and our own understanding of Rust

297
00:27:06.880 --> 00:27:11.600
and Lambda together and maybe come up later on with a new episode with a refreshed perspective

298
00:27:11.600 --> 00:27:16.320
on this particular topic. So thank you very much for being with us today and we look forward to

299
00:27:16.320 --> 00:27:35.360
seeing you in the next episode.
