WEBVTT

1
00:00:00.000 --> 00:00:02.040
The breadth of AWS services is huge.

2
00:00:02.160 --> 00:00:03.960
And when you're working on a cloud-based application,

3
00:00:04.080 --> 00:00:06.160
sometimes it seems like there's so much to do

4
00:00:06.280 --> 00:00:08.160
and it's easy to get lost and distracted.

5
00:00:08.280 --> 00:00:11.560
Today we have six time-saving tools to share with you

6
00:00:11.680 --> 00:00:14.520
to help to make you a more productive AWS guru.

7
00:00:14.640 --> 00:00:16.360
My name is Eoin and I'm joined by Luciano

8
00:00:16.480 --> 00:00:18.160
and this is the AWS Bites podcast.

9
00:00:18.280 --> 00:00:21.480
AWS Bites is sponsored by fourTheorem.

10
00:00:21.600 --> 00:00:23.120
fourTheorem is an AWS consulting partner

11
00:00:31.160 --> 00:00:32.640
offering training, cloud migration

12
00:00:32.760 --> 00:00:34.480
and modern application architecture,

13
00:00:34.600 --> 00:00:36.400
find out more at fourTheorem.com.

14
00:00:36.520 --> 00:00:38.600
You'll find that link in the show notes.

15
00:00:38.720 --> 00:00:41.000
Going into today's episode then, Luciano,

16
00:00:41.120 --> 00:00:43.400
we're going to try and share our top six tools

17
00:00:43.520 --> 00:00:44.720
for AWS productivity,

18
00:00:44.840 --> 00:00:46.240
things you may or may not have heard about.

19
00:00:46.360 --> 00:00:47.520
And if you hang around to the end,

20
00:00:47.640 --> 00:00:49.960
we've actually got a couple more bonus tips and tools

21
00:00:50.080 --> 00:00:52.720
to help you take your AWS expertise to the next level.

22
00:00:52.840 --> 00:00:54.840
And I'm going to start off with one that I think is really

23
00:00:54.960 --> 00:00:57.800
a time-saver for me and really helps you to get organized

24
00:00:57.800 --> 00:00:59.720
and helps with a bit of security as well.

25
00:00:59.840 --> 00:01:01.880
So there's a couple of things that I'd say first

26
00:01:02.000 --> 00:01:03.720
before I reveal what it is.

27
00:01:03.840 --> 00:01:07.240
If you're using AWS with the SDK or the command line,

28
00:01:07.360 --> 00:01:10.560
I would really recommend using AWS profiles

29
00:01:10.680 --> 00:01:14.200
and try to avoid just sharing environment variables

30
00:01:14.320 --> 00:01:15.640
and setting up environment variables

31
00:01:15.760 --> 00:01:19.600
for different accounts and roles as you need them.

32
00:01:19.720 --> 00:01:21.040
Profiles just make it a little bit easier

33
00:01:21.160 --> 00:01:22.280
because you've got named profiles

34
00:01:22.400 --> 00:01:24.840
for different AWS accounts and roles.

35
00:01:24.960 --> 00:01:27.360
And you can set those up using your credentials file,

36
00:01:27.360 --> 00:01:30.160
but it's even better if you set it up with AWS SSO.

37
00:01:30.280 --> 00:01:31.920
So we talked a bit about this before.

38
00:01:32.040 --> 00:01:34.240
We've got a previous episode, which we can link in

39
00:01:34.360 --> 00:01:36.840
all about identity management on AWS

40
00:01:36.960 --> 00:01:40.640
and why you might use SSO instead of just IAM users.

41
00:01:40.760 --> 00:01:42.960
When you're using SSO, then you can end up

42
00:01:43.080 --> 00:01:45.520
with an organization with lots of accounts.

43
00:01:45.640 --> 00:01:48.960
SSO allows you to have different sets of credentials

44
00:01:49.080 --> 00:01:50.960
managed automatically, so you never have to copy

45
00:01:51.080 --> 00:01:52.920
and paste environment variables

46
00:01:53.040 --> 00:01:55.440
or lines into your credentials file.

47
00:01:55.440 --> 00:01:58.520
It's all managed by the SSO credential process for you.

48
00:01:58.640 --> 00:02:00.040
But that can get a bit cumbersome

49
00:02:00.160 --> 00:02:03.440
if you've got tens or hundreds of accounts to work with.

50
00:02:03.560 --> 00:02:05.560
And if you're working with different companies

51
00:02:05.680 --> 00:02:07.920
or different customers, you really need to be careful

52
00:02:08.040 --> 00:02:10.840
that you're using the right set of credentials at the right time.

53
00:02:10.960 --> 00:02:13.120
And there's a really good tool that I started using

54
00:02:13.240 --> 00:02:16.920
in the last year, and you can find it on granted.dev.

55
00:02:17.040 --> 00:02:18.600
And the tool is called Assume,

56
00:02:18.720 --> 00:02:20.960
and it's a CLI tool that you can install,

57
00:02:20.960 --> 00:02:25.440
and it will allow you to assume a role on the command line.

58
00:02:25.560 --> 00:02:30.080
And it will basically scan your config file,

59
00:02:30.200 --> 00:02:33.360
your AWS config file, allow you to select which permission set,

60
00:02:33.480 --> 00:02:35.040
which role you want to assume,

61
00:02:35.160 --> 00:02:37.680
and then those credentials will be loaded into your shell.

62
00:02:37.800 --> 00:02:39.360
So that's one of the things it does.

63
00:02:39.480 --> 00:02:41.200
The other thing it does, which I really like,

64
00:02:41.320 --> 00:02:43.400
is it works with your browser.

65
00:02:43.520 --> 00:02:45.360
So I'm using Firefox containers,

66
00:02:45.480 --> 00:02:49.480
but this granted.dev tool also has its own containers

67
00:02:49.480 --> 00:02:53.200
plugged in for Firefox that allows you to log into the console

68
00:02:53.320 --> 00:02:54.880
using a given profile.

69
00:02:55.000 --> 00:02:58.600
So you don't have to set up the Firefox container manually

70
00:02:58.720 --> 00:03:00.920
and log in every time.

71
00:03:01.040 --> 00:03:04.040
It will automate a lot of that for you.

72
00:03:04.160 --> 00:03:05.760
So you can have multiple different tabs open

73
00:03:05.880 --> 00:03:07.360
for different AWS accounts.

74
00:03:07.480 --> 00:03:10.080
They get different colors. They're very easy to identify,

75
00:03:10.200 --> 00:03:12.920
and it streamlines all of that process for you.

76
00:03:13.040 --> 00:03:15.720
Now, one thing I'd say is that you do need to somehow load

77
00:03:15.840 --> 00:03:19.080
all of your accounts and SSO permission sets

78
00:03:19.080 --> 00:03:21.320
into your AWS config file for this to work,

79
00:03:21.440 --> 00:03:25.800
and I use Ben Kehoe's aws-sso-util do that.

80
00:03:25.920 --> 00:03:27.720
It will essentially populate your config file

81
00:03:27.840 --> 00:03:31.920
with all of the permission sets and all of the accounts that you have,

82
00:03:32.040 --> 00:03:35.560
and you can give it multiple URLs and just get it to scan all the URLs,

83
00:03:35.680 --> 00:03:38.280
the start SSO URLs you need.

84
00:03:38.400 --> 00:03:42.080
And then you can suddenly have like hundreds of profiles

85
00:03:42.200 --> 00:03:44.200
in your config file automated for you,

86
00:03:44.320 --> 00:03:47.720
and then granted.dev will allow you to log in on the CLI

87
00:03:47.720 --> 00:03:50.200
or in the browser really easily.

88
00:03:50.320 --> 00:03:51.720
And there's an alternative for this.

89
00:03:51.840 --> 00:03:54.440
So some of our colleagues at Fortherium I know use another one

90
00:03:54.560 --> 00:03:58.880
from Synfonatic on GitHub called AWS SSO CLI.

91
00:03:59.000 --> 00:04:00.640
It kind of does the two things together.

92
00:04:00.760 --> 00:04:03.560
It works in a slightly different way, so you can try both, I would say,

93
00:04:03.680 --> 00:04:06.560
but I've been really happy with the assume tool from Granted.

94
00:04:06.680 --> 00:04:08.360
So that's it.

95
00:04:08.480 --> 00:04:11.040
I suppose when you have this set up, then another thing to be aware of

96
00:04:11.160 --> 00:04:14.120
is you have to still keep ensuring that you're aware

97
00:04:14.240 --> 00:04:16.560
of what profile you're using at any given time.

98
00:04:16.560 --> 00:04:18.600
I think you've got a solution for this, Luciano.

99
00:04:18.720 --> 00:04:22.080
Yeah, definitely. So my solution for a long time has been always run

100
00:04:22.200 --> 00:04:25.920
AWS STS get-collared-entity every once in a while.

101
00:04:26.040 --> 00:04:27.920
But of course, that's not perfect science.

102
00:04:28.040 --> 00:04:29.520
You end up forgetting about that,

103
00:04:29.640 --> 00:04:32.320
and you might end up doing stuff on the wrong account

104
00:04:32.440 --> 00:04:35.560
without realizing it a little bit too late.

105
00:04:35.680 --> 00:04:40.440
So recently I started to use something called Starship Terminal,

106
00:04:40.560 --> 00:04:43.400
which is just kind of a universal terminal prompt.

107
00:04:43.400 --> 00:04:46.920
By that I mean that it works with most of the shells that you might be using.

108
00:04:47.040 --> 00:04:49.880
So I worked with Bash, Z Shell, Fish Shell and so on

109
00:04:50.000 --> 00:04:51.400
in a kind of a seamless way.

110
00:04:51.520 --> 00:04:53.480
And the reason why I really like this particular one

111
00:04:53.600 --> 00:04:55.560
is because it's almost zero config.

112
00:04:55.680 --> 00:04:58.160
Of course, you can configure it and customize it to your need,

113
00:04:58.280 --> 00:05:01.920
but out of the box, it comes with a lot of very good defaults.

114
00:05:02.040 --> 00:05:04.520
And one of the things that it does out of the box

115
00:05:04.640 --> 00:05:07.920
is that it's capable of recognizing your AWS profile,

116
00:05:08.040 --> 00:05:11.160
looking at different things it's able to display in your terminal

117
00:05:11.160 --> 00:05:13.400
which profile are you currently using.

118
00:05:13.520 --> 00:05:16.960
So that can be something very good to just keep there

119
00:05:17.080 --> 00:05:19.840
because every single command you're going to have an indication

120
00:05:19.960 --> 00:05:22.680
of which profile is going to be used for that particular command

121
00:05:22.800 --> 00:05:24.600
just in your terminal prompt.

122
00:05:24.720 --> 00:05:27.440
Of course, you can do the same if you prefer to do it with Z Shell

123
00:05:27.560 --> 00:05:31.840
and using plugins, or maybe you want to manually customize your Bash prompt.

124
00:05:31.960 --> 00:05:34.680
But all of that stuff will require a little bit more work

125
00:05:34.800 --> 00:05:35.880
on the configuration side.

126
00:05:36.000 --> 00:05:39.040
So you need to be a little bit more expert on the specific tools

127
00:05:39.160 --> 00:05:40.840
to be able to achieve the same kind of thing.

128
00:05:40.840 --> 00:05:43.320
Anything else we can do to be productive in the terminal?

129
00:05:43.440 --> 00:05:46.880
There's a tool that I really like, but it's actually been discontinued.

130
00:05:47.000 --> 00:05:49.520
But I'm going to talk about it anyway, because there is an alternative

131
00:05:49.640 --> 00:05:51.120
and it's called AWS Shell.

132
00:05:51.240 --> 00:05:54.920
So people probably know the AWS CLI.

133
00:05:55.040 --> 00:05:58.160
It's fairly widely used across all the operating systems.

134
00:05:58.280 --> 00:06:02.800
AWS Shell was kind of an extension to that, that AWS published,

135
00:06:02.920 --> 00:06:07.240
and it gave you a much more interactive layer on top of the AWS CLI.

136
00:06:07.360 --> 00:06:10.400
Now, the AWS Shell project has kind of been discontinued

137
00:06:10.400 --> 00:06:12.600
since the version 2 CLI came out.

138
00:06:12.720 --> 00:06:15.240
But its functionality has kind of been integrated now

139
00:06:15.360 --> 00:06:19.440
into the AWS CLI version 2, at least most of its functionality.

140
00:06:19.560 --> 00:06:21.360
So now you've got this option, and the option is

141
00:06:21.480 --> 00:06:23.920
--cli-auto-prompt.

142
00:06:24.040 --> 00:06:25.760
So CLI auto prompt.

143
00:06:25.880 --> 00:06:30.120
And when you run AWS with dash dash CLI auto prompt,

144
00:06:30.240 --> 00:06:33.040
it will then give you like an interactive Curses type interface.

145
00:06:33.160 --> 00:06:36.960
So when you type AWS, it'll suddenly give you a pre-populated list

146
00:06:37.080 --> 00:06:38.480
of all the services you could use.

147
00:06:38.480 --> 00:06:41.360
You type in EC2, and then it'll give you all of the actions you can use,

148
00:06:41.480 --> 00:06:43.280
like describe instances.

149
00:06:43.400 --> 00:06:46.240
And once you've done that, it'll give you a list of the options,

150
00:06:46.360 --> 00:06:49.840
and you can browse documentation for the options in line in your terminal.

151
00:06:49.960 --> 00:06:54.960
So if you're tired of switching between one terminal for AWS CLI

152
00:06:55.080 --> 00:06:58.000
and one for AWS CLI help, or your browser,

153
00:06:58.120 --> 00:07:00.960
then this is a way to get it all done in one shell,

154
00:07:01.080 --> 00:07:02.560
and it works really well.

155
00:07:02.680 --> 00:07:05.440
So I really like that one. Any more CLI tips?

156
00:07:05.560 --> 00:07:07.280
Yeah, I actually have another one.

157
00:07:07.280 --> 00:07:10.200
So one of the things that I often find myself doing

158
00:07:10.320 --> 00:07:14.320
when working with the CLI is consuming large blobs of JSON,

159
00:07:14.440 --> 00:07:16.880
because when you use AWS CLI, maybe you, I don't know,

160
00:07:17.000 --> 00:07:20.440
try to describe a cloud, a cloud formation stack,

161
00:07:20.560 --> 00:07:23.200
or maybe list a bunch of resources,

162
00:07:23.320 --> 00:07:26.160
and you get back sometimes very big objects,

163
00:07:26.280 --> 00:07:29.400
and it's hard to just find whatever you're looking for in that big object.

164
00:07:29.520 --> 00:07:31.680
So there are many solutions to this problem,

165
00:07:31.800 --> 00:07:35.000
but one of my favorite tools is JQ, which is a CLI helper.

166
00:07:35.000 --> 00:07:39.680
So you can just pipe output of other commands that produce JSON into JQ,

167
00:07:39.800 --> 00:07:41.880
and then JQ will do a bunch of things for you.

168
00:07:42.000 --> 00:07:44.000
Like, by default, if you don't pass any parameter,

169
00:07:44.120 --> 00:07:46.680
it's just going to nicely format and color the JSON.

170
00:07:46.800 --> 00:07:51.480
So if your JSON is not already made as much human readable as possible

171
00:07:51.600 --> 00:07:55.000
with proper indentation and spacing, JQ will do all of that for you,

172
00:07:55.120 --> 00:07:57.800
and that's already a big step to make it a little bit more readable.

173
00:07:57.920 --> 00:07:59.680
But you can also go another step forward,

174
00:07:59.800 --> 00:08:03.560
and you can use specific kind of expression that JQ supports

175
00:08:03.560 --> 00:08:05.560
to try to filter down that output.

176
00:08:05.680 --> 00:08:09.960
And this is something that sometimes you can use to build, like, automation scripts,

177
00:08:10.080 --> 00:08:13.120
because sometimes you want to do a specific AWS command.

178
00:08:13.240 --> 00:08:14.560
From the output of that command,

179
00:08:14.680 --> 00:08:17.640
you want to extrapolate only a very specific piece of information,

180
00:08:17.760 --> 00:08:20.000
so you can pipe that command into JQ

181
00:08:20.120 --> 00:08:22.400
with a specific query to extrapolate that information,

182
00:08:22.520 --> 00:08:25.440
and then maybe you can pipe that other command to something else,

183
00:08:25.560 --> 00:08:28.320
with Xargs or some other kind of pipeline.

184
00:08:28.440 --> 00:08:30.720
So that's something that I find myself doing quite often,

185
00:08:30.840 --> 00:08:32.440
and it can be very convenient.

186
00:08:32.440 --> 00:08:34.440
Now, there is a little bit of learning curves.

187
00:08:34.560 --> 00:08:36.080
Learning the JQ expression,

188
00:08:36.200 --> 00:08:40.120
it's something you'll need to try to practice a little bit and spend some time.

189
00:08:40.240 --> 00:08:43.640
You will get it wrong, so it can be a little bit frustrating at first

190
00:08:43.760 --> 00:08:46.640
to try to run the same command over and over with different filters

191
00:08:46.760 --> 00:08:48.360
until you actually get what you want.

192
00:08:48.480 --> 00:08:51.880
So I recently discovered another tool called iJQ,

193
00:08:52.000 --> 00:08:55.720
which stands for Interactive JQ, which is basically the same thing.

194
00:08:55.840 --> 00:08:59.280
So you can still pipe the output of another command into this tool,

195
00:08:59.280 --> 00:09:03.320
but it starts kind of an interactive and courses type of view,

196
00:09:03.440 --> 00:09:05.120
where you can try different filters,

197
00:09:05.240 --> 00:09:08.120
and in real time it's going to show you the effect of that filter

198
00:09:08.240 --> 00:09:09.800
on the actual JSON object.

199
00:09:09.920 --> 00:09:12.800
So that's something you can use to kind of speed up that process

200
00:09:12.920 --> 00:09:14.680
of trying to figure out what's the right filter

201
00:09:14.800 --> 00:09:17.360
for what you want to try to achieve.

202
00:09:17.480 --> 00:09:20.480
Some people might actually know that something similar

203
00:09:20.600 --> 00:09:23.200
is already built into the AWS CLI,

204
00:09:23.320 --> 00:09:25.240
and there are actually two flags that you can use

205
00:09:25.360 --> 00:09:28.000
if you don't want to bother installing JQ or learning,

206
00:09:28.000 --> 00:09:29.720
specifically, JQ.

207
00:09:29.840 --> 00:09:31.920
So these two flags are dash dash filter,

208
00:09:32.040 --> 00:09:33.680
which is on the work server side,

209
00:09:33.800 --> 00:09:35.640
so you are basically running a command

210
00:09:35.760 --> 00:09:38.040
and AWS will execute a filter on the server

211
00:09:38.160 --> 00:09:40.480
and just return less data to your client.

212
00:09:40.600 --> 00:09:42.200
Or if you just want to filter client side,

213
00:09:42.320 --> 00:09:44.680
so you're still getting all the data from AWS,

214
00:09:44.800 --> 00:09:47.720
but then client side you are displaying less information

215
00:09:47.840 --> 00:09:48.880
based on your filter.

216
00:09:49.000 --> 00:09:50.640
In that case, you can use dash dash query.

217
00:09:50.760 --> 00:09:55.160
So filter to do... dash dash filter to do the server side filtering

218
00:09:55.280 --> 00:09:57.680
of the output, dash dash query to do the same thing,

219
00:09:57.680 --> 00:09:59.320
but on the client side.

220
00:09:59.440 --> 00:10:01.920
I'm not too sure if the filter one is available

221
00:10:02.040 --> 00:10:03.200
for every single command,

222
00:10:03.320 --> 00:10:06.400
but I'm quite sure that the query is pretty much available in every one.

223
00:10:06.520 --> 00:10:10.360
So maybe worth double checking which one you have available,

224
00:10:10.480 --> 00:10:12.320
depending on the commands you're using.

225
00:10:12.440 --> 00:10:16.720
And finally, I have one last tip that I find it useful,

226
00:10:16.840 --> 00:10:20.000
especially when working with something like S3 or DynamoDB

227
00:10:20.120 --> 00:10:21.360
or in general data storage,

228
00:10:21.480 --> 00:10:24.760
just when you basically are trying to figure out

229
00:10:24.880 --> 00:10:27.040
how to do a specific change.

230
00:10:27.040 --> 00:10:29.200
But that change might actually be disruptive.

231
00:10:29.320 --> 00:10:32.720
So if you are not 100% sure that your command is right,

232
00:10:32.840 --> 00:10:35.480
you can use this flag called dash dash dry run,

233
00:10:35.600 --> 00:10:37.760
which is going to kind of simulate that command

234
00:10:37.880 --> 00:10:39.160
and give you some useful output,

235
00:10:39.280 --> 00:10:42.840
but without actually generating mutations on your account.

236
00:10:42.960 --> 00:10:44.920
So it's kind of a nice way, for instance,

237
00:10:45.040 --> 00:10:48.520
when you want to see if a specific folder needs a sync

238
00:10:48.640 --> 00:10:50.040
when you're trying to sync with S3,

239
00:10:50.160 --> 00:10:52.520
but you are not sure that you are checking the right folders

240
00:10:52.640 --> 00:10:55.080
or maybe that you want to actually sync in that moment.

241
00:10:55.200 --> 00:10:56.800
So in that case, you can use the dry run flag

242
00:10:56.800 --> 00:10:59.600
and it's going to show you exactly what is going to change

243
00:10:59.720 --> 00:11:01.280
if you remove the dry run flag,

244
00:11:01.400 --> 00:11:02.760
but without applying the changes.

245
00:11:02.880 --> 00:11:04.880
So you can double check and if you are okay with it,

246
00:11:05.000 --> 00:11:07.760
remove the dry run flag and run it again.

247
00:11:07.880 --> 00:11:11.000
So I think that covers this particular point,

248
00:11:11.120 --> 00:11:14.960
but kind of leads me to ask you a very specific question.

249
00:11:15.080 --> 00:11:18.440
Are there specific tips more on the documentation side?

250
00:11:18.560 --> 00:11:22.720
Like how do we learn more about SDK or CloudFormation?

251
00:11:22.840 --> 00:11:24.720
Because these are other things where I find myself

252
00:11:24.720 --> 00:11:26.880
most of the time wasting time trying to figure out

253
00:11:27.000 --> 00:11:29.040
how do I do a specific thing that I want to do?

254
00:11:29.160 --> 00:11:31.200
I know it's possible, but I don't remember exactly

255
00:11:31.320 --> 00:11:32.640
what's the right way of doing it.

256
00:11:32.760 --> 00:11:36.520
Some people rely on extensions in their IDE to integrate that.

257
00:11:36.640 --> 00:11:39.840
I just use Dash, which is a Mac OS application

258
00:11:39.960 --> 00:11:42.160
for local offline documentation.

259
00:11:42.280 --> 00:11:45.080
And I really like the way it works because it's simple.

260
00:11:45.200 --> 00:11:47.000
And what I really like about it

261
00:11:47.120 --> 00:11:48.680
is that it keeps me out of the browser.

262
00:11:48.800 --> 00:11:50.480
So if you end up going to the browser for documentation,

263
00:11:50.600 --> 00:11:52.240
there's a risk that you end up getting distracted

264
00:11:52.360 --> 00:11:54.080
and falling down a hole on the internet

265
00:11:54.080 --> 00:11:55.360
with another tab.

266
00:11:55.480 --> 00:11:58.120
But if you use Dash, then it's just for documentation

267
00:11:58.240 --> 00:12:00.640
and then you can load documentation sets

268
00:12:00.760 --> 00:12:02.200
or doc sets into it.

269
00:12:02.320 --> 00:12:04.960
So there's one there for the AWS CloudFormation docs

270
00:12:05.080 --> 00:12:07.160
and AWS SDKs.

271
00:12:07.280 --> 00:12:09.920
Actually, funnily enough, we talked about the new SDK

272
00:12:10.040 --> 00:12:11.920
for TypeScript recently in JavaScript.

273
00:12:12.040 --> 00:12:15.080
It doesn't seem to have doc sets for the version 3 SDK yet.

274
00:12:15.200 --> 00:12:20.360
It still has the older version 2 AWS SDK for JavaScript.

275
00:12:20.480 --> 00:12:22.640
So that's something that might limit you.

276
00:12:22.640 --> 00:12:24.760
I find that actually the version 3 documentation

277
00:12:24.880 --> 00:12:25.880
is quite limited anyway,

278
00:12:26.000 --> 00:12:28.280
so I don't think it makes a huge difference.

279
00:12:28.400 --> 00:12:30.960
But yeah, if you're doing...

280
00:12:31.080 --> 00:12:32.680
Dash also has great doc sets

281
00:12:32.800 --> 00:12:34.640
for all of the programming languages as well.

282
00:12:34.760 --> 00:12:37.000
So if you just want JavaScript docs or TypeScript docs

283
00:12:37.120 --> 00:12:38.720
and lots of other stuff, check it out.

284
00:12:38.840 --> 00:12:40.840
And I think there's an alternative for Windows and Linux as well.

285
00:12:40.960 --> 00:12:41.960
I don't know what they are,

286
00:12:42.080 --> 00:12:45.040
but if you search for Dash alternative, you'll find them.

287
00:12:45.160 --> 00:12:47.120
So yeah, that's a hot tip, I think,

288
00:12:47.240 --> 00:12:48.680
and a good one to make sure you don't get distracted

289
00:12:48.800 --> 00:12:51.560
as you're switching between code and documentation.

290
00:12:51.560 --> 00:12:52.760
What do you think Luciano?

291
00:12:52.880 --> 00:12:54.280
What else would you use to lean on?

292
00:12:54.400 --> 00:12:55.760
What other questions have you got to help you

293
00:12:55.880 --> 00:12:59.640
to be more productive at developing code on AWS?

294
00:12:59.760 --> 00:13:02.360
One thing that I've been using a lot in the last few months

295
00:13:02.480 --> 00:13:03.680
is GitHub CoPilot.

296
00:13:03.800 --> 00:13:08.120
And I find it in general very useful if used with moderation.

297
00:13:08.240 --> 00:13:11.400
Of course, you shouldn't trust GitHub CoPilot suggestions blindly,

298
00:13:11.520 --> 00:13:14.760
always terrified that they really are doing exactly

299
00:13:14.880 --> 00:13:15.920
what you were trying to do.

300
00:13:16.040 --> 00:13:18.720
And sometimes there are subtle mistakes that can be there.

301
00:13:18.720 --> 00:13:22.960
So definitely double check, triple check, GitHub CoPilot suggestion,

302
00:13:23.080 --> 00:13:26.080
and just be sure that it's actually what you want to do.

303
00:13:26.200 --> 00:13:28.080
But when you do that, it's still saving you a lot of time

304
00:13:28.200 --> 00:13:32.160
because sometimes it auto completes with significant amount of code

305
00:13:32.280 --> 00:13:34.320
that it will take you a while to write yourself.

306
00:13:34.440 --> 00:13:37.560
Or maybe you don't remember exactly the signature of something

307
00:13:37.680 --> 00:13:40.120
and it chances are that what CoPilot is giving you

308
00:13:40.240 --> 00:13:42.840
is more correct than what can you remember.

309
00:13:42.960 --> 00:13:46.160
So that's definitely something I would suggest.

310
00:13:46.160 --> 00:13:49.240
And it seems to work quite well with SDK,

311
00:13:49.360 --> 00:13:52.800
at least the one for JavaScript and Python, so far for my use cases.

312
00:13:52.920 --> 00:13:56.280
So sometimes you don't remember exactly how to do something

313
00:13:56.400 --> 00:13:58.320
like copy a file into S3.

314
00:13:58.440 --> 00:14:00.640
If you start to write code, chances are that CoPilot

315
00:14:00.760 --> 00:14:02.440
is going to give you a good enough suggestion

316
00:14:02.560 --> 00:14:05.360
that will kind of speed up your development time.

317
00:14:05.480 --> 00:14:07.280
And again, always double check,

318
00:14:07.400 --> 00:14:09.720
but it's sometimes faster to go through CoPilot

319
00:14:09.840 --> 00:14:12.960
and then double checking later if, for instance, with your IDE,

320
00:14:12.960 --> 00:14:16.080
you can highlight the specific function and see the documentation.

321
00:14:16.200 --> 00:14:18.600
But again, it's writing a significant chunk of code for you,

322
00:14:18.720 --> 00:14:20.760
so that can speed up your development time.

323
00:14:20.880 --> 00:14:23.520
Now, if you don't like CoPilot for whatever reason,

324
00:14:23.640 --> 00:14:24.880
there are alternatives.

325
00:14:25.000 --> 00:14:29.360
I didn't use them, but I heard people using Code Whisperer or tab 9

326
00:14:29.480 --> 00:14:30.800
as alternative to CoPilot.

327
00:14:30.920 --> 00:14:36.000
So they might be good enough and they could be interesting to try out.

328
00:14:36.120 --> 00:14:42.000
So moving on, when we were preparing this particular list of suggestions,

329
00:14:42.000 --> 00:14:45.680
we wanted to select only six of them just to try to keep the episode short.

330
00:14:45.800 --> 00:14:49.040
But I think there are still some mentions that we want to give.

331
00:14:49.160 --> 00:14:52.560
So Eoin, what do you have as honourable mentions?

332
00:14:52.680 --> 00:14:54.640
One that I'd really recommend.

333
00:14:54.760 --> 00:14:57.640
Bookmark this one, the IAM policy simulator.

334
00:14:57.760 --> 00:15:01.160
If you need to troubleshoot access denied errors with IAM,

335
00:15:01.280 --> 00:15:06.760
the IAM policy simulator opens up a fairly crude but very useful web UI

336
00:15:06.880 --> 00:15:10.080
that you can use to simulate any action against any service.

337
00:15:10.080 --> 00:15:15.240
And you just have to already be logged in with credentials into a console,

338
00:15:15.360 --> 00:15:18.640
then you open up in the same browser and it will allow you to run a simulation

339
00:15:18.760 --> 00:15:22.240
and it should be able to identify whether you get access denied or not

340
00:15:22.360 --> 00:15:25.280
and with reasonable level of accuracy why you're denied.

341
00:15:25.400 --> 00:15:28.360
So if it's a explicit deny or missing allow

342
00:15:28.480 --> 00:15:31.040
or if it's something in a service control policy or permissions boundary,

343
00:15:31.160 --> 00:15:32.640
you should be able to see that.

344
00:15:32.760 --> 00:15:35.360
Another one is for Python developers,

345
00:15:35.360 --> 00:15:39.960
or actually anybody doing data work in general is the AWS SDK for Pandas.

346
00:15:40.080 --> 00:15:42.400
That's the new name for it. It used to be called AWS Wrangler

347
00:15:42.520 --> 00:15:47.600
and that's a Python module that provides a whole set of very convenient APIs

348
00:15:47.720 --> 00:15:48.920
for dealing with data.

349
00:15:49.040 --> 00:15:51.440
So reading Parquet files from S3 and writing them,

350
00:15:51.560 --> 00:15:56.720
it's built on top of PyArrow and it allows you to read and write from S3,

351
00:15:56.840 --> 00:16:00.240
Redshift, other AWS data services

352
00:16:00.360 --> 00:16:02.800
and it even allows you to do things like reading logs

353
00:16:02.800 --> 00:16:06.160
without having to do all the pagination and stuff yourself.

354
00:16:06.280 --> 00:16:10.400
So definitely check that out if you're a Python developer.

355
00:16:10.520 --> 00:16:13.040
Last one is Cloud Shell and it's sometimes forgotten,

356
00:16:13.160 --> 00:16:16.240
but it's right there at the top of every browser session

357
00:16:16.360 --> 00:16:19.480
when you log into the AWS console, you just click on that terminal icon

358
00:16:19.600 --> 00:16:21.280
and you can get a shell into your AWS account

359
00:16:21.400 --> 00:16:25.760
that you can use for exploring with resources in your AWS account.

360
00:16:25.880 --> 00:16:27.160
And you get a limited amount of storage

361
00:16:27.280 --> 00:16:29.520
and it's retained for 30 days or something like that.

362
00:16:29.520 --> 00:16:33.360
So I think it's completely free for just using one for every account,

363
00:16:33.480 --> 00:16:34.800
for every user.

364
00:16:34.920 --> 00:16:37.600
And the only thing right now, the only thing that's missing

365
00:16:37.720 --> 00:16:39.440
is that it doesn't have VPC access.

366
00:16:39.560 --> 00:16:41.200
I hope that's coming soon.

367
00:16:41.320 --> 00:16:45.680
So what have you got? What are your three from the best of the best?

368
00:16:45.800 --> 00:16:49.400
I like your list and I definitely vouch for IAM policy simulator.

369
00:16:49.520 --> 00:16:51.720
Something saved my life a few times.

370
00:16:51.840 --> 00:16:56.000
So it's not perfect. Sometimes the labels don't quite make sense,

371
00:16:56.120 --> 00:16:57.760
but you still get a lot of value from it

372
00:16:57.760 --> 00:16:59.720
to still give you a lot of useful information

373
00:16:59.840 --> 00:17:01.240
when you are in trouble with permissions

374
00:17:01.360 --> 00:17:04.440
and you need to figure out why. So plus one on that.

375
00:17:04.560 --> 00:17:06.360
Other than that, I have a few ones.

376
00:17:06.480 --> 00:17:09.880
I'm going to be a little bit selfish because we have worked on some of them.

377
00:17:10.000 --> 00:17:15.000
So the first one is SLIC Watch, which is, I'm just going to say,

378
00:17:15.120 --> 00:17:16.840
a plugin for serverless framework,

379
00:17:16.960 --> 00:17:21.480
but in reality, we have extended it to work also with CDK and other tooling.

380
00:17:21.600 --> 00:17:24.400
So probably it's going to work with most of the infrastructure

381
00:17:24.520 --> 00:17:26.360
as code tools that you'd like to use.

382
00:17:26.360 --> 00:17:31.840
And basically what SLIC Watch does is tries to make serverless observability easier

383
00:17:31.960 --> 00:17:34.680
by just giving you a set of defaults built in.

384
00:17:34.800 --> 00:17:38.960
Like it's going to create dashboards, alarms, based on best practices,

385
00:17:39.080 --> 00:17:41.800
just by looking at what's your current infrastructure

386
00:17:41.920 --> 00:17:43.880
through your infrastructure as code definition.

387
00:17:44.000 --> 00:17:46.360
So check it out. We'll have the link in the show notes.

388
00:17:46.480 --> 00:17:49.200
If you like it, let us know. If it doesn't work for you,

389
00:17:49.320 --> 00:17:51.400
also let us know why. It's an open source project,

390
00:17:51.520 --> 00:17:55.000
so you are also welcome to contribute, open issues, send SPRs.

391
00:17:55.000 --> 00:17:59.280
If you find it useful, let's work on it together and let's make it better.

392
00:17:59.400 --> 00:18:03.200
The second one is Middy, which is a serverless framework for Node.js.

393
00:18:03.320 --> 00:18:05.680
So the idea is that when you write Lambda code,

394
00:18:05.800 --> 00:18:09.600
especially if you are building an application that contains a lot of Lambdas,

395
00:18:09.720 --> 00:18:11.960
maybe you are building an API and you have a lot of endpoints

396
00:18:12.080 --> 00:18:13.720
spread out in different Lambdas,

397
00:18:13.840 --> 00:18:16.480
you might end up with a lot of code duplication.

398
00:18:16.600 --> 00:18:20.280
Like there is a lot of concerns that are kind of repeated between Lambdas.

399
00:18:20.400 --> 00:18:23.440
For instance, the way you do validation, the way you do access control,

400
00:18:23.440 --> 00:18:26.360
the way you serialize and deserialize, input and output,

401
00:18:26.480 --> 00:18:28.120
and all these kind of concerns,

402
00:18:28.240 --> 00:18:30.480
you end up repeating that code over and over

403
00:18:30.600 --> 00:18:34.200
in a way that is generally not quite testable or usable.

404
00:18:34.320 --> 00:18:35.520
So Middy helps with that.

405
00:18:35.640 --> 00:18:38.000
It basically uses the middleware pattern heavily

406
00:18:38.120 --> 00:18:40.280
to try to extrapolate all this concern outside

407
00:18:40.400 --> 00:18:43.320
from your business core logic of your handler.

408
00:18:43.440 --> 00:18:46.040
So it's trying to keep your handler as pure as possible

409
00:18:46.160 --> 00:18:47.680
and moving all this concern outside

410
00:18:47.800 --> 00:18:50.240
in a way that makes them more usable and testable.

411
00:18:50.240 --> 00:18:53.360
And there are a bunch of built-in middlewares

412
00:18:53.480 --> 00:18:56.680
that you can just use for all sorts of most common type of concerns

413
00:18:56.800 --> 00:18:58.600
that we have seen in the last few years.

414
00:18:58.720 --> 00:19:03.280
Recently became the most used framework for Lambda

415
00:19:03.400 --> 00:19:06.160
in the Node.js space just by the number of weekly downloads.

416
00:19:06.280 --> 00:19:08.800
So that's just an estimate that it's only useful to people

417
00:19:08.920 --> 00:19:12.440
and you might want to check it out if you're not using it yet.

418
00:19:12.560 --> 00:19:16.160
Last one, which is closely related to Middy, is PowerTools,

419
00:19:16.280 --> 00:19:17.440
which is a library...

420
00:19:17.440 --> 00:19:20.400
It's actually multiple libraries for different languages

421
00:19:20.520 --> 00:19:23.160
that is built by different teams in AWS.

422
00:19:23.280 --> 00:19:25.400
For instance, you have the TypeScript one,

423
00:19:25.520 --> 00:19:28.680
which is actually good even for plain JavaScript, of course.

424
00:19:28.800 --> 00:19:31.800
You have the Python one, but there are also the Java one, I believe.

425
00:19:31.920 --> 00:19:36.280
So it's kind of a set of libraries that do more or less the same things.

426
00:19:36.400 --> 00:19:40.360
So they try to make your experience while writing Lambda a little bit better

427
00:19:40.480 --> 00:19:43.360
by giving you especially tools for observability,

428
00:19:43.480 --> 00:19:46.040
like making it easy to do structured logging,

429
00:19:46.040 --> 00:19:48.600
making it easier to register custom metrics,

430
00:19:48.720 --> 00:19:50.440
and also tracing as well.

431
00:19:50.560 --> 00:19:51.800
So check it out.

432
00:19:51.920 --> 00:19:54.160
I especially like the TypeScript one and the Python one.

433
00:19:54.280 --> 00:19:56.920
I've used them a lot and they are quite useful.

434
00:19:57.040 --> 00:19:58.360
They will save you a lot of time

435
00:19:58.480 --> 00:20:01.960
because all these things will take time to set up correctly.

436
00:20:02.080 --> 00:20:05.960
And if you use the library, it mostly works out of the box.

437
00:20:07.040 --> 00:20:09.120
We've actually got an article on the PowerTools

438
00:20:09.240 --> 00:20:10.640
that we can link in the show notes as well,

439
00:20:10.760 --> 00:20:15.080
as well as the link to our previous episodes on SLIC Watch and Middy.

440
00:20:15.080 --> 00:20:17.320
So hopefully people will find that useful.

441
00:20:17.440 --> 00:20:20.640
At this point, I guess I'm curious what we missed.

442
00:20:20.760 --> 00:20:23.280
What are the glaring obvious tools and productivity tips

443
00:20:23.400 --> 00:20:24.760
that everyone out there uses?

444
00:20:24.880 --> 00:20:27.480
So please put them in the YouTube comments

445
00:20:27.600 --> 00:20:29.000
or send them to us on Twitter.

446
00:20:29.120 --> 00:20:29.840
We want to know about them.

447
00:20:29.960 --> 00:20:32.520
Maybe we'll have enough for another episode.

448
00:20:32.640 --> 00:20:34.480
Thanks very much for listening to this one.

449
00:20:34.600 --> 00:20:35.920
It's been great to have you with us.

450
00:20:35.920 --> 00:20:54.600
Keep listening and we'll see you in the next episode.
