WEBVTT

1
00:00:00.000 --> 00:00:01.660
There are loads of reasons you might want to find out

2
00:00:01.820 --> 00:00:03.860
what resources are in your AWS account.

3
00:00:04.020 --> 00:00:06.020
Maybe you've got a lot of cruft you need to clean up,

4
00:00:06.200 --> 00:00:09.220
or you want to sort out security issues and get some compliance.

5
00:00:09.400 --> 00:00:13.060
How would you explore and query what actually exists in your AWS account

6
00:00:13.220 --> 00:00:15.820
so that you feel in control of a tidy cloud environment?

7
00:00:16.000 --> 00:00:17.560
Today, we're talking about tools and services

8
00:00:17.720 --> 00:00:20.220
that help you to answer the question, what's in my cloud?

9
00:00:20.600 --> 00:00:23.020
We are going to give you some practical suggestions for tools

10
00:00:23.200 --> 00:00:26.200
to give you visibility and queryability in AWS.

11
00:00:26.200 --> 00:00:29.860
I'm Eoin, I'm here with Luciano, and this is the AWS Bites podcast.

12
00:00:37.700 --> 00:00:39.460
AWS Bites is sponsored by fourTheorem.

13
00:00:39.620 --> 00:00:43.260
fourTheorem is your AWS partner for migration, architecture, and training.

14
00:00:43.420 --> 00:00:47.700
Find out more at fourtheorem.com, and you'll find the link in the show notes.

15
00:00:48.360 --> 00:00:49.720
Luciano, what are we trying to achieve

16
00:00:49.900 --> 00:00:52.460
when we're talking about finding out what goes on in the cloud?

17
00:00:52.620 --> 00:00:53.760
What are our use cases?

18
00:00:57.860 --> 00:00:59.760
Yeah, I think it's very common that you look at your account and you realize it is a bit of a mess,

19
00:00:59.940 --> 00:01:03.900
and there are a lot of resources there that maybe you created years ago

20
00:01:04.060 --> 00:01:05.360
and you don't remember anymore.

21
00:01:05.540 --> 00:01:09.560
It is actually very common that because AWS is such a learning journey

22
00:01:09.740 --> 00:01:11.360
that when you start using it,

23
00:01:11.540 --> 00:01:15.240
you either didn't have a lot of time to learn how to do things properly,

24
00:01:15.400 --> 00:01:17.400
or maybe you were just experimenting,

25
00:01:17.560 --> 00:01:20.660
you weren't even sure you would end up using AWS for a long time,

26
00:01:20.840 --> 00:01:22.960
you didn't even use infrastructure as code,

27
00:01:22.960 --> 00:01:25.820
so you might end up creating a lot of things manually.

28
00:01:26.280 --> 00:01:29.820
And basically, what could happen is that eventually,

29
00:01:29.980 --> 00:01:32.380
you might have something that you actually run

30
00:01:32.560 --> 00:01:34.880
in some kind of production environment,

31
00:01:35.060 --> 00:01:37.480
but at the same time, it is leaving with all that crap

32
00:01:37.660 --> 00:01:39.460
that you accumulated over the years.

33
00:01:39.780 --> 00:01:42.620
So that might be one reason why you might end up

34
00:01:42.780 --> 00:01:44.520
with an account that is not really tidy.

35
00:01:44.680 --> 00:01:47.680
So you might want to figure out, okay, what's going on right now

36
00:01:47.860 --> 00:01:49.080
and what should I clean?

37
00:01:49.260 --> 00:01:52.160
Other reasons could be maybe you just want to be sure

38
00:01:52.160 --> 00:01:55.000
that you are not using resources that you don't really need.

39
00:01:55.160 --> 00:01:57.960
So it's more of a cost optimization reason.

40
00:01:58.120 --> 00:02:00.820
You want to remove everything that you are not actually using,

41
00:02:01.000 --> 00:02:03.120
because of course, you might be paying for that.

42
00:02:03.300 --> 00:02:06.500
Other reasons could be more related to compliance or security,

43
00:02:06.660 --> 00:02:09.360
where maybe you want to make sure that you don't have resources

44
00:02:09.520 --> 00:02:13.100
that are not really up to date or up to the latest standards.

45
00:02:13.260 --> 00:02:16.760
One example could be maybe you want to make sure you don't have lambdas

46
00:02:16.920 --> 00:02:19.760
that are still running in Node.js 14 runtime,

47
00:02:19.760 --> 00:02:22.360
and you might want to update those in case you find them out

48
00:02:22.540 --> 00:02:24.000
to the more recent ones.

49
00:02:24.160 --> 00:02:28.760
Other ones could be, again, in security terms,

50
00:02:28.940 --> 00:02:31.600
you might want to check your VPCs

51
00:02:31.760 --> 00:02:34.140
and make sure that you don't have, I don't know,

52
00:02:34.300 --> 00:02:35.760
VPCs that are too open,

53
00:02:35.940 --> 00:02:38.600
or maybe you are not even running any resource on them,

54
00:02:38.760 --> 00:02:43.000
or maybe you want to make sure your street buckets are not public

55
00:02:43.160 --> 00:02:45.440
and all these kind of things.

56
00:02:45.600 --> 00:02:49.240
So it could be also more specific about compliance,

57
00:02:49.240 --> 00:02:52.780
because maybe at some point you define a set of good standards

58
00:02:52.940 --> 00:02:56.780
and you want to make sure that every time something changes in the account,

59
00:02:56.940 --> 00:03:01.100
it is still respecting the standards that you set up for your organization.

60
00:03:01.280 --> 00:03:03.180
So in order to do all these things,

61
00:03:03.340 --> 00:03:06.280
basically you need some kind of capabilities.

62
00:03:06.440 --> 00:03:10.180
You need to be able to list all the resources in your account

63
00:03:10.340 --> 00:03:14.000
and somehow understand what are the different types of every resource,

64
00:03:14.180 --> 00:03:16.500
so you can kind of categorize them logically.

65
00:03:16.500 --> 00:03:20.160
It might be useful to be able to run queries or filtering,

66
00:03:20.320 --> 00:03:23.760
because you might end up with a very big list with thousands of items.

67
00:03:23.920 --> 00:03:25.360
That's not going to be very helpful,

68
00:03:25.520 --> 00:03:27.500
so you should have some kind of control

69
00:03:27.660 --> 00:03:30.500
on figuring out exactly what's in this list.

70
00:03:30.660 --> 00:03:34.000
And of course, what if you have things in multiple regions,

71
00:03:34.160 --> 00:03:36.300
or even worse, in multiple accounts,

72
00:03:36.460 --> 00:03:38.500
those are like extra layers of complexity.

73
00:03:38.660 --> 00:03:42.120
So ideally you need tools that can do all of these things

74
00:03:42.300 --> 00:03:44.620
across regions and across accounts.

75
00:03:44.620 --> 00:03:49.180
And I believe that we have some tools in AWS to do that, right?

76
00:03:52.740 --> 00:03:55.780
Yeah, and your choice of tooling in AWS is going to depend on whether you're doing just like an ad hoc exercise,

77
00:03:55.940 --> 00:03:58.420
or whether you're trying to put in place some kind of formal,

78
00:03:58.580 --> 00:04:01.380
continuous inspection of resources over time,

79
00:04:01.540 --> 00:04:04.620
and then also really meet like third-party compliance

80
00:04:04.780 --> 00:04:07.020
or internal corporate compliance.

81
00:04:07.180 --> 00:04:09.680
So if we're talking about doing it really properly

82
00:04:09.840 --> 00:04:12.480
with that continuous practice,

83
00:04:12.480 --> 00:04:15.860
then AWS Config is probably the good place to start.

84
00:04:16.020 --> 00:04:18.960
So this is something that keeps track of resources

85
00:04:19.120 --> 00:04:21.520
and registers resource configurations.

86
00:04:21.680 --> 00:04:23.720
So it's called configuration items.

87
00:04:23.880 --> 00:04:26.620
It's kind of a standard practice in IT service management

88
00:04:26.780 --> 00:04:28.720
to record your configuration items,

89
00:04:28.880 --> 00:04:32.880
your assets in your cloud, and keep track of them.

90
00:04:33.060 --> 00:04:35.260
So Config supports quite a large number of services.

91
00:04:35.420 --> 00:04:37.720
It's growing all the time, so it's not every service.

92
00:04:37.880 --> 00:04:39.260
And this is something to be aware of.

93
00:04:39.420 --> 00:04:42.060
I think it's about 84 services, from what I can count.

94
00:04:42.060 --> 00:04:45.460
And that includes support for about 240 resources.

95
00:04:45.620 --> 00:04:48.920
So what it does is it gives you a basic repository

96
00:04:49.100 --> 00:04:50.920
of all of the items in your cloud

97
00:04:51.100 --> 00:04:54.060
by continuously monitoring for you.

98
00:04:54.220 --> 00:04:55.820
And it gives you then query capability.

99
00:04:56.000 --> 00:04:58.260
So there's an advanced query support

100
00:04:58.420 --> 00:05:01.100
where you can run SQL-like queries.

101
00:05:01.260 --> 00:05:03.800
It's not exactly SQL, but it's a subset of SQL

102
00:05:03.960 --> 00:05:06.500
that you can run on most of those resources.

103
00:05:06.660 --> 00:05:08.800
So again, not supporting all of the resource types

104
00:05:08.960 --> 00:05:11.300
that are captured, but probably most of the ones

105
00:05:11.300 --> 00:05:13.060
that you're interested in.

106
00:05:13.240 --> 00:05:16.100
And one of the nice things about AWS Config

107
00:05:16.260 --> 00:05:18.060
is that it will allow you to aggregate

108
00:05:18.240 --> 00:05:20.400
all of the configurations from all of the accounts

109
00:05:20.560 --> 00:05:22.060
in all of the regions you want.

110
00:05:22.240 --> 00:05:24.700
So we would typically set up AWS Config

111
00:05:24.860 --> 00:05:26.660
for all of the regions that you support.

112
00:05:26.840 --> 00:05:28.840
You disable the regions you don't want to support,

113
00:05:29.000 --> 00:05:30.340
and then you gather all of that data

114
00:05:30.500 --> 00:05:33.740
into one centralized aggregator within AWS Config.

115
00:05:33.900 --> 00:05:35.860
And then you can run queries to find out

116
00:05:36.040 --> 00:05:40.340
how many EC2 instances do I have across all my organization,

117
00:05:40.340 --> 00:05:43.740
all accounts, all regions, and what's their configuration.

118
00:05:43.900 --> 00:05:45.000
So that's really nice.

119
00:05:45.180 --> 00:05:47.380
You'll get a picture of the configuration,

120
00:05:47.540 --> 00:05:49.580
and then you can see how the configuration item

121
00:05:49.740 --> 00:05:52.340
has changed over time.

122
00:05:52.500 --> 00:05:56.000
And the other thing that it's really aimed at within Config

123
00:05:56.180 --> 00:05:57.600
is evaluating compliance rules.

124
00:05:57.780 --> 00:06:00.180
So you can use a lot of the pre-canned rules

125
00:06:00.340 --> 00:06:04.980
that AWS will give you, and those rules can also then form

126
00:06:05.140 --> 00:06:07.300
part of what's called a compliance pack.

127
00:06:07.480 --> 00:06:09.800
So that's a collection of rules all together

128
00:06:09.800 --> 00:06:12.300
that might tell you whether you are meeting the requirements

129
00:06:12.460 --> 00:06:17.200
of SOC 2 or NIST or CIS benchmarks

130
00:06:17.360 --> 00:06:20.000
or whatever industry standard you might need.

131
00:06:20.160 --> 00:06:22.960
You can also add your own rules using either Lambda functions

132
00:06:23.120 --> 00:06:26.200
to evaluate them or the CloudFormation guard syntax

133
00:06:26.360 --> 00:06:30.860
to check if resources meet your standards, essentially.

134
00:06:31.020 --> 00:06:33.460
So all in all, if you want to up your compliance gain,

135
00:06:33.620 --> 00:06:35.460
but also just do querying of resources

136
00:06:35.620 --> 00:06:37.800
and monitoring over time, Config is a good source.

137
00:06:37.800 --> 00:06:41.200
Now, the downside with Config is always,

138
00:06:41.360 --> 00:06:43.960
when it comes to certain cloud deployments,

139
00:06:44.140 --> 00:06:45.760
pricing might hit you,

140
00:06:45.940 --> 00:06:48.560
because it's priced per configuration item recorded,

141
00:06:48.740 --> 00:06:51.700
and that's priced every time it changes.

142
00:06:51.860 --> 00:06:53.960
And also, if you're evaluating compliance rules,

143
00:06:54.140 --> 00:06:56.600
every time they're evaluated, you're charged as well.

144
00:06:56.760 --> 00:07:00.560
So it's like 3 tenths of a cent for item recorded

145
00:07:00.740 --> 00:07:03.800
and one tenth of a cent every time you evaluate a rule.

146
00:07:03.960 --> 00:07:05.960
And a lot of the time, the pricing there is fine,

147
00:07:05.960 --> 00:07:08.620
but if you're somebody who deploys frequently

148
00:07:08.780 --> 00:07:10.620
and you're creating lots of resources

149
00:07:10.780 --> 00:07:13.220
and you're trying to capture rules for lots of different resource types,

150
00:07:13.380 --> 00:07:17.580
that can quickly escalate and you get an exponential effect there.

151
00:07:17.760 --> 00:07:20.120
You also might get a surprise when they add support

152
00:07:20.280 --> 00:07:22.320
for new resource types that they didn't support before,

153
00:07:22.480 --> 00:07:24.660
because your pricing, your bill will then go up,

154
00:07:24.820 --> 00:07:26.160
even though you didn't change anything.

155
00:07:26.320 --> 00:07:28.320
So it's definitely worth looking at.

156
00:07:28.480 --> 00:07:30.180
I wouldn't dismiss it just based on pricing,

157
00:07:30.360 --> 00:07:34.120
but just understand the pricing model well.

158
00:07:34.120 --> 00:07:35.960
Now, since we're talking about pricing,

159
00:07:36.120 --> 00:07:38.800
we'll go to something then next in AWS, which is completely free.

160
00:07:38.960 --> 00:07:42.460
And this is released last year, end of last year roughly,

161
00:07:42.620 --> 00:07:44.120
called Resource Explorer.

162
00:07:44.300 --> 00:07:46.460
And it's not really for continuous monitoring,

163
00:07:46.620 --> 00:07:48.120
but it's more for ad hoc querying.

164
00:07:48.300 --> 00:07:50.120
How do I find out what's in my account right now?

165
00:07:50.300 --> 00:07:51.720
How do I find that EC2 instance

166
00:07:51.900 --> 00:07:53.620
that I'm pretty sure I created last week?

167
00:07:53.800 --> 00:07:56.460
And Resource Explorer is pretty easy to set up.

168
00:07:56.620 --> 00:07:59.960
It's much simpler than Config, for example,

169
00:08:00.120 --> 00:08:01.120
and it builds an index.

170
00:08:01.300 --> 00:08:03.300
So it basically builds a cache that you can query

171
00:08:03.300 --> 00:08:05.560
and then you can query even just from the search bar

172
00:08:05.720 --> 00:08:07.560
at the top of the AWS console.

173
00:08:07.720 --> 00:08:09.800
So it's quite nice, quite easy to use,

174
00:08:09.960 --> 00:08:13.060
and you can aggregate all of the data

175
00:08:13.220 --> 00:08:16.060
from all of the regions you want into one account,

176
00:08:16.220 --> 00:08:17.300
or into one region.

177
00:08:17.460 --> 00:08:19.800
So it makes it easy to query cross region.

178
00:08:19.960 --> 00:08:22.140
Unfortunately, the downside is that it does not support

179
00:08:22.300 --> 00:08:23.140
multiple accounts yet.

180
00:08:23.300 --> 00:08:24.800
So you're just running a query,

181
00:08:24.960 --> 00:08:27.060
you have to run your queries per account.

182
00:08:27.220 --> 00:08:28.300
And that's a bit of a downside,

183
00:08:28.460 --> 00:08:30.800
since people are using more and more organizations

184
00:08:30.960 --> 00:08:33.060
with lots and lots of member accounts.

185
00:08:33.060 --> 00:08:36.060
The number of services supported is still quite small.

186
00:08:36.220 --> 00:08:39.060
It's just 18 services, but within each service,

187
00:08:39.220 --> 00:08:42.060
it's very comprehensive in the actual number of resources

188
00:08:42.220 --> 00:08:43.060
it supports.

189
00:08:43.220 --> 00:08:47.560
Like within RDS, you can query parameter groups, for example,

190
00:08:47.720 --> 00:08:51.560
which is very low level of granularity resource.

191
00:08:51.720 --> 00:08:52.560
But it is free.

192
00:08:52.720 --> 00:08:54.560
So I would say, I suggest to people,

193
00:08:54.720 --> 00:08:55.560
definitely try that one out.

194
00:08:55.720 --> 00:08:58.560
It's very easy to onboard and get up to speed with.

195
00:08:58.720 --> 00:09:01.560
Before we talk about maybe the non AWS services,

196
00:09:01.560 --> 00:09:03.560
what else have we missed in AWS, Luciano?

197
00:09:03.720 --> 00:09:06.060
Yeah, there are another couple I will mention.

198
00:09:06.220 --> 00:09:08.560
For instance, resource groups and tag editor,

199
00:09:08.720 --> 00:09:12.560
which are a little bit older than the ones you mentioned.

200
00:09:12.720 --> 00:09:14.560
There are some, probably they're going to be,

201
00:09:14.720 --> 00:09:19.560
eventually be superseded by config and resource explorer.

202
00:09:19.720 --> 00:09:22.060
But they are also free.

203
00:09:22.220 --> 00:09:24.060
So maybe also worth having a look.

204
00:09:24.220 --> 00:09:27.560
And I suppose they're not necessarily built

205
00:09:27.720 --> 00:09:29.560
for this particular intent,

206
00:09:29.560 --> 00:09:32.400
but they can be useful for instance, to tag resources.

207
00:09:32.560 --> 00:09:35.400
And you have different pieces of utility

208
00:09:35.560 --> 00:09:39.400
to actually find resources in bulk and apply tags.

209
00:09:39.560 --> 00:09:41.400
So maybe something that once you know

210
00:09:41.560 --> 00:09:44.400
what you have in your account or you start to discover,

211
00:09:44.560 --> 00:09:46.400
you can go to tag editor to apply tags.

212
00:09:46.560 --> 00:09:49.400
And we'll talk a little bit more about that later on.

213
00:09:49.560 --> 00:09:51.400
Another one which is actually really interesting

214
00:09:51.560 --> 00:09:55.400
and you should definitely rely on that one is CloudTrail.

215
00:09:55.560 --> 00:09:58.400
And the reason why I think it deserves some mention here

216
00:09:58.400 --> 00:10:02.240
is that even though it's not necessarily built for search,

217
00:10:02.400 --> 00:10:04.240
it basically tracks the entire history

218
00:10:04.400 --> 00:10:07.240
of how your resources change in a given account.

219
00:10:07.400 --> 00:10:09.240
So it's kind of an audit log.

220
00:10:09.400 --> 00:10:12.240
And therefore you can use it in many different ways.

221
00:10:12.400 --> 00:10:14.240
For instance, you could go all in

222
00:10:14.400 --> 00:10:17.240
and use CloudTrail to build your own inventory,

223
00:10:17.400 --> 00:10:20.240
maybe dump all the data in something like Elasticsearch.

224
00:10:20.400 --> 00:10:23.240
And at that point you have a lot of like queering power

225
00:10:23.400 --> 00:10:25.240
and you can be able to really understand

226
00:10:25.400 --> 00:10:27.240
what's going on in an account.

227
00:10:27.240 --> 00:10:29.080
And even more interesting, CloudTrail can help you

228
00:10:29.240 --> 00:10:33.080
to answer the question, how did something get into my account?

229
00:10:33.240 --> 00:10:36.080
Not just it is there, but also you can try to figure out

230
00:10:36.240 --> 00:10:38.080
the history of that particular resource.

231
00:10:38.240 --> 00:10:40.080
So who created it, when it was created,

232
00:10:40.240 --> 00:10:42.080
how many times did it change?

233
00:10:42.240 --> 00:10:45.080
So definitely worth considering because of that.

234
00:10:45.240 --> 00:10:47.080
And more often than not, you might find something

235
00:10:47.240 --> 00:10:49.080
through one of the other tools we mentioned.

236
00:10:49.240 --> 00:10:51.080
And then you might want to go to CloudTrail

237
00:10:51.240 --> 00:10:53.080
to actually try to understand the history

238
00:10:53.240 --> 00:10:54.080
of that particular resource.

239
00:10:54.240 --> 00:10:56.080
So CloudTrail is definitely something

240
00:10:56.080 --> 00:10:58.920
that is recommended to learn and to enable in every account

241
00:10:59.080 --> 00:11:01.920
and then start to use it heavily.

242
00:11:02.080 --> 00:11:04.920
Yeah, so you mentioned that there are other resources

243
00:11:05.080 --> 00:11:06.920
that are not AWS services.

244
00:11:07.080 --> 00:11:08.920
So which one of those?

245
00:11:09.080 --> 00:11:10.920
Well, one of the areas where third-party services

246
00:11:11.080 --> 00:11:13.920
can really help is where you just talked about CloudTrail

247
00:11:14.080 --> 00:11:15.920
and how Config and Resource Explorer

248
00:11:16.080 --> 00:11:18.920
will give you the ability to find out what's in my account now.

249
00:11:19.080 --> 00:11:20.920
But you have to go to CloudTrail to find out how did it get there

250
00:11:21.080 --> 00:11:22.920
and what's the story behind this resource.

251
00:11:23.080 --> 00:11:24.920
But those are two disconnected things

252
00:11:24.920 --> 00:11:28.760
and you might go through, use Athena to query your CloudTrail logs

253
00:11:28.920 --> 00:11:32.760
to try and do some detective work to go back.

254
00:11:32.920 --> 00:11:34.760
And I've kind of been there before.

255
00:11:34.920 --> 00:11:36.760
It's a little bit cumbersome and it takes time.

256
00:11:36.920 --> 00:11:38.760
But there's one commercial offering

257
00:11:38.920 --> 00:11:40.760
that I have been playing with recently

258
00:11:40.920 --> 00:11:42.760
and I managed to have a conversation

259
00:11:42.920 --> 00:11:43.760
with the founder of this company.

260
00:11:43.920 --> 00:11:45.760
So I decided I'd give it a try.

261
00:11:45.920 --> 00:11:47.760
And the product is called Resmo.

262
00:11:47.920 --> 00:11:50.760
And this is essentially a paid SaaS application

263
00:11:50.920 --> 00:11:53.760
and it's similar to AWS Config

264
00:11:53.760 --> 00:11:56.600
in its intent, but it supports a lot more than just AWS.

265
00:11:56.760 --> 00:11:58.600
So it's designed to support all the cloud providers

266
00:11:58.760 --> 00:12:01.600
and also a lot of different SaaS applications.

267
00:12:01.760 --> 00:12:03.600
So the advantage, I would suppose,

268
00:12:03.760 --> 00:12:05.600
as always when you go to a third-party provider

269
00:12:05.760 --> 00:12:07.600
is that you're getting a much more consistent

270
00:12:07.760 --> 00:12:10.600
and usable experience, much easier to get started.

271
00:12:10.760 --> 00:12:12.600
You don't have to do any configuration.

272
00:12:12.760 --> 00:12:14.600
It's all done for you.

273
00:12:14.760 --> 00:12:17.600
You can start once you set up access to your AWS account,

274
00:12:17.760 --> 00:12:21.600
which I thought was a fairly seamless onboarding experience

275
00:12:21.600 --> 00:12:24.440
and not too intrusive from a security point of view either.

276
00:12:24.600 --> 00:12:26.440
It will scan your resources and immediately

277
00:12:26.600 --> 00:12:29.440
you can start querying them with like full SQL syntax.

278
00:12:29.600 --> 00:12:32.440
It'll also give you lots of nice queries out of the box

279
00:12:32.600 --> 00:12:35.440
and compliance out of the box.

280
00:12:35.600 --> 00:12:38.440
This is kind of refreshing having set up Config a few times.

281
00:12:38.600 --> 00:12:41.440
With Config, you have to pick your compliance rules

282
00:12:41.600 --> 00:12:44.440
and compliance packs and turn them on and set up notifications

283
00:12:44.600 --> 00:12:47.440
with commercial offerings, in particular with Resmo.

284
00:12:47.600 --> 00:12:50.440
That is all out of the box.

285
00:12:50.440 --> 00:12:52.280
And the pricing model is different then again.

286
00:12:52.440 --> 00:12:55.280
So it's free for up to 3,000 resources

287
00:12:55.440 --> 00:12:59.280
and then you start paying per month as the number of resources.

288
00:12:59.440 --> 00:13:02.280
You hit basically tiers after that.

289
00:13:02.440 --> 00:13:05.280
So, yeah, if you're looking for something a little bit more user-friendly,

290
00:13:05.440 --> 00:13:08.280
that definitely ticks all the boxes.

291
00:13:08.440 --> 00:13:11.280
And as I say, also allows you to search outside of AWS

292
00:13:11.440 --> 00:13:15.280
and start correlating resources across different providers,

293
00:13:15.440 --> 00:13:17.280
which is really nice.

294
00:13:17.440 --> 00:13:18.280
So that's one of the commercial ones

295
00:13:18.440 --> 00:13:19.280
and I'm sure there's lots more.

296
00:13:19.280 --> 00:13:22.120
What about open source offerings?

297
00:13:22.280 --> 00:13:24.120
There's actually a couple of options there, right?

298
00:13:24.280 --> 00:13:26.120
So if you're trying to save on cost

299
00:13:26.280 --> 00:13:29.120
or you don't need to invest in any of these tools,

300
00:13:29.280 --> 00:13:32.120
what suggestions would you give Luciano?

301
00:13:35.280 --> 00:13:37.120
Yeah, so the two that I know that are probably the ones I would recommend people to just give it a spin

302
00:13:37.280 --> 00:13:39.120
and see if they work well for you.

303
00:13:39.280 --> 00:13:42.120
One is called Steampipe, steampipe.io,

304
00:13:42.280 --> 00:13:46.120
which comes actually from a company called Turbot,

305
00:13:46.120 --> 00:13:50.960
turbot.com, which is focused on extensive like cloud security,

306
00:13:51.120 --> 00:13:52.960
compliance, posture management.

307
00:13:53.120 --> 00:13:54.960
So they probably created Steampipe

308
00:13:55.120 --> 00:13:56.960
because it's something that they've been doing a lot

309
00:13:57.120 --> 00:13:57.960
in their line of duty.

310
00:13:58.120 --> 00:14:00.960
So they basically created this as an open source tool

311
00:14:01.120 --> 00:14:04.960
and everyone can actually use the basics of this approach,

312
00:14:05.120 --> 00:14:07.960
which again, it's SQL-based.

313
00:14:08.120 --> 00:14:10.960
So it will allow you to run kind of SQL queries

314
00:14:11.120 --> 00:14:12.960
on top of your account

315
00:14:12.960 --> 00:14:16.800
and it will give you the ability to figure out exactly

316
00:14:16.960 --> 00:14:20.800
what exists in your account by running these queries.

317
00:14:20.960 --> 00:14:24.800
There is a CLI, there isn't really a UI,

318
00:14:24.960 --> 00:14:26.800
but yeah, it's an open source tool.

319
00:14:26.960 --> 00:14:27.800
So probably you can get a lot of value,

320
00:14:27.960 --> 00:14:30.800
you can get started quite quickly from your own desktop

321
00:14:30.960 --> 00:14:33.800
and that way you can just keep going.

322
00:14:33.960 --> 00:14:34.800
And then if you need something more sophisticated,

323
00:14:34.960 --> 00:14:38.800
you can move into some commercial offering.

324
00:14:38.960 --> 00:14:41.800
Very similar is CloudQuery, cloudquery.io,

325
00:14:41.800 --> 00:14:45.640
which is basically an application that syncs

326
00:14:45.800 --> 00:14:47.640
cloud resources to a Postgres database.

327
00:14:47.800 --> 00:14:50.640
You can even use other destination if you want to.

328
00:14:50.800 --> 00:14:52.640
And then at that point you can use Postgres SQL

329
00:14:52.800 --> 00:14:57.640
to basically query what do you have in that account.

330
00:14:57.800 --> 00:15:01.640
Supports other vendors, so it's not just an AWS tool.

331
00:15:01.800 --> 00:15:02.640
You can use, for instance, Vercel.

332
00:15:02.800 --> 00:15:06.640
I've seen uses, supports other cloud providers.

333
00:15:06.800 --> 00:15:08.640
I've seen it also supports GitHub,

334
00:15:08.800 --> 00:15:10.640
so you can probably query your repositories

335
00:15:10.640 --> 00:15:12.480
and the people in your organization

336
00:15:12.640 --> 00:15:14.480
that have access to those repositories.

337
00:15:14.640 --> 00:15:17.480
I think it also supports authentication providers

338
00:15:17.640 --> 00:15:18.480
like Okta and OutZero.

339
00:15:18.640 --> 00:15:20.480
So definitely there is a huge variety there

340
00:15:20.640 --> 00:15:23.480
and this can be actually useful to even understand.

341
00:15:23.640 --> 00:15:25.480
For instance, if you are using these services

342
00:15:25.640 --> 00:15:27.480
in correlation with your AWS account,

343
00:15:27.640 --> 00:15:30.480
maybe you can do queries to try to understand

344
00:15:30.640 --> 00:15:31.480
what is the relationship there.

345
00:15:31.640 --> 00:15:33.480
Are you syncing data from one to the other?

346
00:15:33.640 --> 00:15:35.480
And is this data actually in sync?

347
00:15:35.640 --> 00:15:37.480
Is there something that you are missing?

348
00:15:37.480 --> 00:15:40.320
And it also supports compliance rules.

349
00:15:40.480 --> 00:15:43.320
So you can define your rules and use this tool

350
00:15:43.480 --> 00:15:45.320
to evaluate against those rules

351
00:15:45.480 --> 00:15:47.320
and see what's your current posture.

352
00:15:47.480 --> 00:15:50.320
Again, this is a CLI tool, so there isn't really much of a UI,

353
00:15:50.480 --> 00:15:53.320
but nonetheless it's something that can be useful

354
00:15:53.480 --> 00:15:56.320
and you can be really productive with it.

355
00:15:56.480 --> 00:15:58.320
Now, the next question I have is

356
00:15:58.480 --> 00:16:00.320
we have been talking a lot about tools

357
00:16:00.480 --> 00:16:03.320
that will allow you to discover exactly

358
00:16:03.480 --> 00:16:05.320
what do you have in your account.

359
00:16:05.320 --> 00:16:08.160
So you might end up having some surprises and figure out

360
00:16:08.320 --> 00:16:10.160
oh, there is a lot of stuff that I don't want to be there.

361
00:16:10.320 --> 00:16:11.160
So what do you do then?

362
00:16:13.320 --> 00:16:15.160
Yeah, we actually had this episode way back, episode 11, which was how do you move away

363
00:16:15.320 --> 00:16:18.160
from the management console and we'll link that in the show notes.

364
00:16:18.320 --> 00:16:20.160
So that gives you a bit more detail in there

365
00:16:20.320 --> 00:16:21.160
on how you can do that.

366
00:16:21.320 --> 00:16:24.160
I would say though there's kind of no silver bullet here.

367
00:16:24.320 --> 00:16:26.160
If you have a huge number of resources

368
00:16:26.320 --> 00:16:28.160
that aren't part of infrastructure as code

369
00:16:28.320 --> 00:16:30.160
and you need to tidy them up and clean them up,

370
00:16:30.320 --> 00:16:33.160
there's a bit of labor involved.

371
00:16:33.160 --> 00:16:36.000
If you've got an account and you're happy to clean up everything,

372
00:16:36.160 --> 00:16:38.000
that makes it a lot easier for you.

373
00:16:38.160 --> 00:16:39.000
So there's a couple of tools there.

374
00:16:39.160 --> 00:16:40.000
One is called Cloud Nuke

375
00:16:40.160 --> 00:16:42.000
and the other one is called AWS Nuke

376
00:16:42.160 --> 00:16:45.000
and they kind of do what you would imagine

377
00:16:45.160 --> 00:16:48.000
and allow you to destroy everything in an account.

378
00:16:48.160 --> 00:16:51.000
But they also have support for filtering the resources

379
00:16:51.160 --> 00:16:55.000
you want to delete based on resource type or tag.

380
00:16:55.160 --> 00:16:56.000
So what you could do,

381
00:16:56.160 --> 00:16:59.000
you could always manually delete things one by one.

382
00:16:59.160 --> 00:17:01.000
That's sometimes the best way of doing it.

383
00:17:01.000 --> 00:17:04.840
But it's a good idea to kind of label things first.

384
00:17:05.000 --> 00:17:05.840
If you're cleaning out your house,

385
00:17:06.000 --> 00:17:07.840
you might have one box for things to throw away,

386
00:17:08.000 --> 00:17:11.840
one box for things to keep and another for things to give away.

387
00:17:12.000 --> 00:17:13.840
So you take a similar approach here

388
00:17:14.000 --> 00:17:16.840
and you'd use tags to label things.

389
00:17:17.000 --> 00:17:21.840
So you might tag things first by project or by happy to delete

390
00:17:22.000 --> 00:17:23.840
and then you can kind of query that tag later,

391
00:17:24.000 --> 00:17:27.840
go through them and either import them into infrastructure as code

392
00:17:28.000 --> 00:17:29.840
or just delete them.

393
00:17:29.840 --> 00:17:33.680
And there's nothing there that will make that process really automated for you

394
00:17:33.840 --> 00:17:36.680
unless you're happy to just blank it, delete everything.

395
00:17:36.840 --> 00:17:38.680
If you've got old, I'm always happy if I find an old resource,

396
00:17:38.840 --> 00:17:40.680
I don't know what it is, but then I look at the tags

397
00:17:40.840 --> 00:17:42.680
and I see it like a CloudFormation stack name

398
00:17:42.840 --> 00:17:44.680
because then I can just go to CloudFormation,

399
00:17:44.840 --> 00:17:46.680
look at the whole application

400
00:17:46.840 --> 00:17:48.680
and decide if I want to delete the whole stack or not.

401
00:17:48.840 --> 00:17:50.680
And that's one of the beautiful things about CloudFormation

402
00:17:50.840 --> 00:17:54.680
is that it'll show you that it's part of an entire application

403
00:17:54.840 --> 00:17:56.680
and you can then destroy the whole thing together.

404
00:17:56.840 --> 00:17:58.680
But what if there are things you want to keep, Luciano,

405
00:17:58.680 --> 00:18:02.520
what would you recommend if you want to tidy everything up?

406
00:18:04.680 --> 00:18:09.520
Yeah, you already mentioned it is a good idea to start to define all these things as infrastructure as code

407
00:18:09.680 --> 00:18:12.520
because at that point you can store that in a repository

408
00:18:12.680 --> 00:18:14.520
and you can actually start to create a process

409
00:18:14.680 --> 00:18:18.520
to keep these things in order and evolve them over time

410
00:18:18.680 --> 00:18:22.520
without having to think too much about kind of a manual process

411
00:18:22.680 --> 00:18:24.520
that might change every single time.

412
00:18:24.680 --> 00:18:27.520
So it will help you to keep things more in order going forward

413
00:18:27.520 --> 00:18:30.360
and to actually distinguish what's really important and what's not

414
00:18:30.520 --> 00:18:32.360
and what's part of a specific application

415
00:18:32.520 --> 00:18:34.360
rather than maybe something else

416
00:18:34.520 --> 00:18:36.360
that you are just playing with for some time.

417
00:18:36.520 --> 00:18:39.360
And of course you can do all of that manually,

418
00:18:39.520 --> 00:18:41.360
but it might be a lot of work

419
00:18:41.520 --> 00:18:43.360
depending on how many resources do you have

420
00:18:43.520 --> 00:18:45.360
to convert into infrastructure as code.

421
00:18:45.520 --> 00:18:48.360
So there are some tools that can help.

422
00:18:48.520 --> 00:18:51.360
And to be fair, I would like to say that your knowledge might vary a lot.

423
00:18:51.520 --> 00:18:54.360
Like these tools are not necessarily perfect.

424
00:18:54.520 --> 00:18:55.360
They have their own quirks.

425
00:18:55.360 --> 00:18:58.200
So they might be good to try them,

426
00:18:58.360 --> 00:19:01.200
but I still find that the manual approach

427
00:19:01.360 --> 00:19:03.200
is always a little bit more reliable.

428
00:19:03.360 --> 00:19:06.200
It takes more time, but at least you are in charge

429
00:19:06.360 --> 00:19:08.200
of deciding what needs to happen,

430
00:19:08.360 --> 00:19:09.200
what really needs to be kept,

431
00:19:09.360 --> 00:19:11.200
what kind of tags are you going to apply.

432
00:19:11.360 --> 00:19:14.200
So definitely it might be a lot more frustrating

433
00:19:14.360 --> 00:19:16.200
having to do all that work manually,

434
00:19:16.360 --> 00:19:18.200
but I think the end result might be a little bit higher quality

435
00:19:18.360 --> 00:19:20.200
if you go for the manual approach.

436
00:19:20.360 --> 00:19:24.200
Nonetheless, feel free to try those kind of tools

437
00:19:24.200 --> 00:19:26.040
for automation. One is called Terraformer

438
00:19:26.200 --> 00:19:29.040
and the other one is called Former2.

439
00:19:29.200 --> 00:19:31.040
They are slightly different in what they offer

440
00:19:31.200 --> 00:19:33.040
and we'll provide the links in the show notes

441
00:19:33.200 --> 00:19:36.040
so that you can check the set of features.

442
00:19:36.200 --> 00:19:39.040
And again, I can just remark that it is important

443
00:19:39.200 --> 00:19:41.040
that even if you decide to keep things,

444
00:19:41.200 --> 00:19:43.040
it's actually even more important in that case

445
00:19:43.200 --> 00:19:45.040
to apply correct tags because at that point

446
00:19:45.200 --> 00:19:47.040
you can even track the cost.

447
00:19:47.200 --> 00:19:49.040
So maybe you decided to keep something

448
00:19:49.200 --> 00:19:52.040
without really knowing how much it's going to cost you.

449
00:19:52.040 --> 00:19:54.880
You can tag it and then you can start to observe cost

450
00:19:55.040 --> 00:19:57.880
and then maybe later on re-evaluate that decision

451
00:19:58.040 --> 00:19:59.880
and maybe realize, no, this is too expensive

452
00:20:00.040 --> 00:20:00.880
for the value that I'm getting.

453
00:20:01.040 --> 00:20:02.880
I'm just going to get rid of it.

454
00:20:03.040 --> 00:20:03.880
Or maybe you can actually realize, no,

455
00:20:04.040 --> 00:20:04.880
this is actually cheap enough.

456
00:20:05.040 --> 00:20:06.880
I can keep going and maybe I will be working

457
00:20:07.040 --> 00:20:08.880
on this a little bit later.

458
00:20:09.040 --> 00:20:10.880
And another idea could be consider moving things

459
00:20:11.040 --> 00:20:12.880
into different accounts if you find yourself

460
00:20:13.040 --> 00:20:14.880
having a lot of mixed things,

461
00:20:15.040 --> 00:20:17.880
which I probably do a lot with my own personal account.

462
00:20:18.040 --> 00:20:20.880
I have some small kind of production projects

463
00:20:20.880 --> 00:20:23.720
maybe from some of my own personal automation stuff

464
00:20:23.880 --> 00:20:25.720
or small applications that I built.

465
00:20:25.880 --> 00:20:28.720
But then I mixed up that a lot with, I don't know,

466
00:20:28.880 --> 00:20:30.720
maybe I'm just playing with some concept,

467
00:20:30.880 --> 00:20:31.720
I want to try some service,

468
00:20:31.880 --> 00:20:34.720
and then I ended up mixing all of these resources.

469
00:20:34.880 --> 00:20:36.720
This is definitely not a good practice going forward

470
00:20:36.880 --> 00:20:38.720
and if you find yourself doing that

471
00:20:38.880 --> 00:20:41.720
in corporate accounts, I think it's probably a good idea

472
00:20:41.880 --> 00:20:44.720
at that point to start to separate and create sub-accounts,

473
00:20:44.880 --> 00:20:46.720
one maybe for production application

474
00:20:46.880 --> 00:20:48.720
or even multiple ones for different applications

475
00:20:48.720 --> 00:20:52.560
and then keep other accounts for more kind of experimental processes

476
00:20:52.720 --> 00:20:55.560
where you can start to apply different policies,

477
00:20:55.720 --> 00:20:58.560
you can start to apply different rules to clean up resources over time

478
00:20:58.720 --> 00:21:01.560
and you are not going to have the risk to incidentally

479
00:21:01.720 --> 00:21:03.560
maybe deleting things that you're actually using in production

480
00:21:03.720 --> 00:21:05.560
just because you are trying to experiment

481
00:21:05.720 --> 00:21:08.560
with some new service or some new tool

482
00:21:08.720 --> 00:21:11.560
that maybe is going to give you some kind of value.

483
00:21:15.720 --> 00:21:17.560
Yeah, that's really good advice and I'm really interested to hear, did we miss anything, are there tools out there

484
00:21:17.560 --> 00:21:19.400
that could make this a little bit easier,

485
00:21:19.560 --> 00:21:21.400
especially the cleanup part, are there other tools

486
00:21:21.560 --> 00:21:24.400
that people use out there for querying their cloud

487
00:21:24.560 --> 00:21:27.400
and finding out what's going on under the hood?

488
00:21:27.560 --> 00:21:28.400
Thanks very much for listening,

489
00:21:28.560 --> 00:21:30.400
let us know your suggestions in the comments

490
00:21:30.560 --> 00:21:31.400
and we'll see you in the next episode.
