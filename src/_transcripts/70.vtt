WEBVTT

1
00:00:00.000 --> 00:00:04.960
In today's world of cloud development, collaboration is key and communication is critical.

2
00:00:04.960 --> 00:00:09.440
Unfortunately, sometimes words can be boring and ineffective when trying to describe complex

3
00:00:09.440 --> 00:00:13.680
systems and their components. And this is especially true in AWS where you have hundreds

4
00:00:13.680 --> 00:00:18.880
or even thousands of different kinds of resources to deal with. This is where diagrams comes in.

5
00:00:19.440 --> 00:00:24.240
Being able to sketch and understand diagrams is an essential part of the work of any cloud developer.

6
00:00:24.240 --> 00:00:29.600
I'm Luciano here with Eoin and this is AWS Bites Podcast. And today we'll explore why diagrams are

7
00:00:29.600 --> 00:00:34.480
so essential and how to create effective ones. We will also look at different tools available

8
00:00:34.480 --> 00:00:38.240
to make the process easier from manual tools to programmatic ones. And finally,

9
00:00:38.240 --> 00:00:42.560
we will discuss how to share your diagrams with your team and stakeholders effectively.

10
00:00:42.560 --> 00:00:43.520
So let's dive in.

11
00:00:52.640 --> 00:00:58.000
AWS Bites is sponsored by fourTheorem. fourTheorem is an AWS partner for migration, architecture,

12
00:00:58.000 --> 00:01:02.960
and training. Find out more at fourtheorem.com. You will find this link in the show notes.

13
00:01:04.000 --> 00:01:09.360
So just to get started, I want to clarify why are we even doing diagrams. And of course,

14
00:01:09.360 --> 00:01:15.760
communication is key. Unfortunately, we cannot always write software alone. We need to work in

15
00:01:15.760 --> 00:01:20.560
a team. So we need to figure out how to collaborate and communicate effectively with other humans.

16
00:01:21.440 --> 00:01:27.280
So words sometimes are really boring and pictures can tell us a lot of things. As we say,

17
00:01:27.280 --> 00:01:35.200
a picture is sometimes worth a thousand words. So in general, when you are trying to describe

18
00:01:35.200 --> 00:01:39.280
a complex architecture with lots of moving parts, lots of components,

19
00:01:39.280 --> 00:01:43.280
if you can provide a visual representation of that, it's going to be much easier,

20
00:01:43.280 --> 00:01:47.760
first of all, for yourself to understand it, but also for other people to understand what's going

21
00:01:47.760 --> 00:01:54.960
on and being able to contribute. So the next question is where do we start? What do we even

22
00:01:54.960 --> 00:02:01.920
put in our diagrams?

23
00:02:01.920 --> 00:02:06.240
When we're talking about AWS diagrams, maybe we should talk about where those sit and the other type of diagrams you might create. So if we think about the resolution and

24
00:02:06.240 --> 00:02:11.440
what kind of a message we're trying to get across, we could go back to the, there's a standard out

25
00:02:11.440 --> 00:02:17.360
there, which is reasonably well known called the C4 standard for diagrams.

26
00:02:17.360 --> 00:02:25.280
It describes, you know, component level, context level, container level, and code level. And so it basically

27
00:02:25.280 --> 00:02:30.160
describes four different hierarchical levels of detail you can put into architecture diagrams.

28
00:02:30.160 --> 00:02:35.680
Now, I wouldn't follow that model necessarily all the time, but I think it's useful just as a,

29
00:02:35.680 --> 00:02:39.280
to give you a bit of context so you can start thinking about the different levels.

30
00:02:39.280 --> 00:02:42.960
So you might say at one level, you've got like an enterprise level, which just shows all of the

31
00:02:42.960 --> 00:02:49.120
systems in a whole organization. You don't want to have AWS icons in there. That's generally block

32
00:02:49.120 --> 00:02:54.000
diagrams at a very high level showing very high level interactions between systems. But then you've

33
00:02:54.000 --> 00:03:00.640
got maybe a level down from that that shows some detail, still a block diagram on, you know, a

34
00:03:00.640 --> 00:03:05.760
domain within that system. But if you get into bounded contexts or very specific workflows,

35
00:03:05.760 --> 00:03:11.280
that's the level where you will want to probably start showing some of the physical resources that

36
00:03:11.280 --> 00:03:15.680
you're going to be deploying. So it's almost like a deployment diagram. And in some ways,

37
00:03:15.680 --> 00:03:19.440
I would almost say that this is a bit like a component diagram or in the olden days,

38
00:03:19.440 --> 00:03:24.320
I would say when you had monolithic applications in object oriented languages, and you might have a class diagram.

39
00:03:24.320 --> 00:03:29.600
Sometimes that was way too much level of detail in general, it was I would say,

40
00:03:29.600 --> 00:03:35.360
and difficult to keep in sync with your code. But in some ways, AWS resources can be as fine-grained

41
00:03:35.360 --> 00:03:39.760
as classes were back then, because you've got so many of them and there's so many small subtle

42
00:03:39.760 --> 00:03:45.200
interactions between them all. So it's very important to get the right level of resolution

43
00:03:45.200 --> 00:03:51.440
right. If you have hundreds of resources on one diagram, it's very unlikely, it might be useful,

44
00:03:51.440 --> 00:03:58.960
like a large map of navigating your system. But if you want to portray a message to other developers,

45
00:03:58.960 --> 00:04:04.640
architectures, architects, business stakeholders, you probably want something smaller.

46
00:04:04.640 --> 00:04:10.240
So I would say that maybe think about individual stacks or deployments, individual microservices, diagram

47
00:04:10.240 --> 00:04:16.240
those using your AWS icons, and then look at higher level block diagrams to show the picture

48
00:04:16.240 --> 00:04:23.280
one level up from that. So when we're talking about AWS icons, we see lots of different flavors of AWS icons.

49
00:04:23.280 --> 00:04:30.320
It's a bit of a bugbear of mine for some reason, but you do have older diagram icon

50
00:04:30.320 --> 00:04:37.680
styles and newer ones. I think they came up with a release in 2017, 2019, and 2021. The 2017 ones

51
00:04:37.680 --> 00:04:41.520
look pretty outdated by now, but you still see them a lot in the wild and sometimes mixed with

52
00:04:41.520 --> 00:04:47.120
the new styles. I think it's a good idea to use the latest style where available and also to

53
00:04:47.120 --> 00:04:51.440
include the labels because it's not obvious to everybody what all those icons mean, especially

54
00:04:51.440 --> 00:04:57.280
when you've got 50 different orange icons that look subtly different, just put the label on there.

55
00:04:57.280 --> 00:05:03.200
But those are available on the AWS website. So this PowerPoint version, there's PNG and SVG

56
00:05:03.200 --> 00:05:08.480
download available. And most of the tools include them embedded in, or you can import them.

57
00:05:10.800 --> 00:05:16.400
Maybe before we talk about tools, I would say that the last thing, and one thing I've heard the C4

58
00:05:16.400 --> 00:05:19.520
advocates talk about quite often, which is a really good idea, is always put a title and

59
00:05:19.520 --> 00:05:24.320
description with your diagrams. I've been guilty of creating diagrams in the past and I go back

60
00:05:24.320 --> 00:05:28.400
to read them myself. And because I didn't put a title and description, I'm not sure exactly what

61
00:05:28.400 --> 00:05:33.680
the scope is and what story it's trying to tell. That really helps. And if people read a title and

62
00:05:33.680 --> 00:05:38.480
a two line description, it'll sometimes really do wonders for making sure that people are

63
00:05:38.480 --> 00:05:44.400
communicating at the right level. So that's really what we're trying to achieve.

64
00:05:44.400 --> 00:05:49.360
We're trying to communicate at that level. And the question is, how do you create them? What are the tools to

65
00:05:49.360 --> 00:05:53.840
produce them? Where do we start with that?

66
00:05:53.840 --> 00:05:59.840
So before we move into that, I just want to mention that I love your comment about icons. And I found very funny that often people confuse the

67
00:05:59.840 --> 00:06:06.640
Lambda icon with the Half-Life video game icon, because they're so similar that it's very easy to

68
00:06:06.640 --> 00:06:10.960
confuse them. But that happens when you just search for Lambda rather than having an icon set

69
00:06:10.960 --> 00:06:16.720
that is already created for AWS. So that's just another way of saying that if you have an icon set

70
00:06:16.720 --> 00:06:21.280
already incorporated in your diagramming tool, it's just easier to end up with the right icons

71
00:06:21.280 --> 00:06:24.480
without having to search a specific icon all the time on the web.

72
00:06:25.280 --> 00:06:29.680
Now, there is a reference set of architecture diagrams AWS have as well.

73
00:06:29.680 --> 00:06:36.400
But one of the things, the icons also come with, you have a resource icon and then the service icon. But not all

74
00:06:36.400 --> 00:06:41.280
resources have both different flavors. So you have one icon, which is for the Lambda function,

75
00:06:41.280 --> 00:06:47.360
and one which is for the Lambda service. And it can become difficult to use and to know which

76
00:06:47.360 --> 00:06:51.840
one to pick and to use consistently. But I guess the important thing there is just to pick one

77
00:06:51.840 --> 00:06:56.960
approach and stick with it rather than mixing them.

78
00:06:56.960 --> 00:07:03.280
So going back to tools, I think we just need to discuss, first of all, what are the things that will look into specific tools for diagrams?

79
00:07:03.280 --> 00:07:06.800
And then we can mention what are some different kinds of tools, because there are different

80
00:07:06.800 --> 00:07:11.520
approaches to creating diagrams and different tools to try to satisfy these different approaches.

81
00:07:11.520 --> 00:07:17.360
So the first thing for me, at least, is how easy the tool is, especially if you are talking about

82
00:07:17.360 --> 00:07:23.040
a visual tool, how easy it is to actually put things on screen, resize things, move them around,

83
00:07:23.040 --> 00:07:31.120
group them, connect them with arrows or, I don't know, boundaries. And I found that different tools

84
00:07:31.120 --> 00:07:35.840
have very different characteristics in that respect. Some make this process very, very easy.

85
00:07:35.840 --> 00:07:39.600
Other ones are a little bit more cumbersome and you might end up spending a lot of time just

86
00:07:39.600 --> 00:07:45.280
trying to put things in order in the screen. So that's, for me, a very important dimension.

87
00:07:45.280 --> 00:07:51.440
Then we already mentioned icons. So is that tool something that gives us easy access to AWS icons?

88
00:07:51.440 --> 00:07:57.840
And if it does, are the icons up to date with the latest versions? Or at least are they categorized

89
00:07:57.840 --> 00:08:02.160
in such a way that it's going to be easy for me to pick up the right icons? And then finally,

90
00:08:02.160 --> 00:08:07.120
trying to distinguish different kinds of tools, we have manual tools, which is generally the visual

91
00:08:07.120 --> 00:08:11.680
kind of approach that is probably the most common, where you have to draw everything,

92
00:08:11.680 --> 00:08:16.480
but you have these panels with lots of icons and you can drag and drop and move things around.

93
00:08:16.480 --> 00:08:20.000
But we also have other types of tools. We have, for instance, programmatic tools,

94
00:08:20.000 --> 00:08:25.920
where you use some kind of programming language or maybe declarative language is more correct to say.

95
00:08:26.560 --> 00:08:31.920
Something like mermaid or something similar to markdown, where basically with that particular

96
00:08:31.920 --> 00:08:37.680
syntax, you can express what are the building blocks and how do they connect with each other?

97
00:08:37.680 --> 00:08:42.320
Generally, these tools are a little bit more generic, but maybe you can also use them to

98
00:08:42.320 --> 00:08:48.000
build your own AWS architecture diagrams. And finally, there is another category of tools,

99
00:08:48.000 --> 00:08:53.760
which is probably one of the most interesting, but we'll talk more about the implications of

100
00:08:53.760 --> 00:08:59.120
that approach, which is when you have already your infrastructure defined as infrastructure as code,

101
00:08:59.120 --> 00:09:04.160
and you can use a tool that is able to read and understand that and produce an architecture

102
00:09:04.160 --> 00:09:08.080
diagram from you out of the box. So you don't need to do anything manually. Just give it

103
00:09:08.080 --> 00:09:12.160
your infrastructure as code and the tool is going to produce you. Hopefully a nice diagram.

104
00:09:12.880 --> 00:09:16.960
So let's start maybe with the manual tools. Which ones are your favorite, Eoin?

105
00:09:19.840 --> 00:09:24.960
Yeah, when I started creating diagrams, I was using tools like Rational Rows and then Visio.

106
00:09:24.960 --> 00:09:32.560
It's funny that Visio is still around. I try not to use it very often, I guess, because these days

107
00:09:32.560 --> 00:09:37.840
we're a little bit more focused on collaborative SaaS-based tools. And I've been using Lucidchart

108
00:09:37.840 --> 00:09:44.080
now for over a decade. And it does AWS diagrams really well. It also does higher-level block

109
00:09:44.080 --> 00:09:48.560
diagrams really well. It's completely browser-based. And you do have to pay for it,

110
00:09:48.560 --> 00:09:53.920
but it does have good collaboration tools for teams and different users and permissions

111
00:09:53.920 --> 00:09:57.040
within your organization. Where it can get difficult then is when you're sharing with

112
00:09:57.040 --> 00:10:00.720
other people outside your company. If you're working on a private project but you can't

113
00:10:00.720 --> 00:10:04.560
share the diagram publicly, because that means people need to have an account. And with the

114
00:10:04.560 --> 00:10:10.000
free version, they can't necessarily edit the diagram that you shared with them or add

115
00:10:10.000 --> 00:10:14.000
resources to it because they may not have the license. So that's a bit of a challenge with

116
00:10:14.000 --> 00:10:18.640
Lucidchart, but I'm just so familiar with it after using it for so long. There is a free

117
00:10:18.640 --> 00:10:23.280
alternative, which is I think really popular out there now.

118
00:10:23.280 --> 00:10:27.360
It used to be called draw.io, but it changed to diagrams.net. And it's very similar to

119
00:10:27.360 --> 00:10:31.840
Lucidchart, but it's free and open source. The reason I'm kind of drawn to that these

120
00:10:31.840 --> 00:10:37.120
days, if you'll excuse the pun, it's got a desktop app and also a Visual Studio Code

121
00:10:37.120 --> 00:10:41.840
plugin. And it also allows you to store the diagrams in a variety of different backends.

122
00:10:41.840 --> 00:10:45.920
So you can store it in your Google Drive, but you can also store it locally on your file system.

123
00:10:45.920 --> 00:10:50.000
So if you're imagining that you've got a diagram in your code base sitting alongside your code,

124
00:10:50.000 --> 00:10:54.000
if you're using the VS Code plugin, it allows you to version that diagram with your code. And that's

125
00:10:54.000 --> 00:11:00.400
a really nice benefit. Another one I really like is ExcaliDraw. And I think this is another browser

126
00:11:00.400 --> 00:11:06.800
based one, but it allows you to create a much more informal style. It isn't big on AWS icons. I think

127
00:11:06.800 --> 00:11:10.960
if you want to get the full set, you kind of have to import them yourself. And there's another one

128
00:11:10.960 --> 00:11:16.000
which is also reasonably popular. For a long time, I didn't like it. It's called Cloudcraft.

129
00:11:16.000 --> 00:11:22.640
And you might recognize those kind of 3D diagrams that it creates because they were popular with a

130
00:11:22.640 --> 00:11:27.520
lot of blog post authors for a while. I always found it a little bit mind boggling because I

131
00:11:27.520 --> 00:11:32.480
had to kind of crane my neck to view the diagram. I'd much prefer a 2D diagram, but I know that

132
00:11:32.480 --> 00:11:36.480
they've since added support to render them as 2D as well. So that's quite a nice one.

133
00:11:37.200 --> 00:11:43.360
And I think Lucidchart and Cloudcraft both have some level of support for importing your diagrams

134
00:11:43.360 --> 00:11:49.120
from AWS. But I have to say, I've tried these things and I've never found it to be effective.

135
00:11:50.720 --> 00:11:56.640
On the subject of manual tools, when we were all working in offices back in the day, we just used

136
00:11:56.640 --> 00:12:02.240
to use whiteboard markers, draw these diagrams on a whiteboard, take a picture and maybe digitize

137
00:12:02.240 --> 00:12:07.840
them later with something like Lucidchart. These days, if I have to do something like that, I use

138
00:12:07.840 --> 00:12:13.600
TLDraw, which has a really nice rendering and drawing algorithm. So it feels super smooth and

139
00:12:13.600 --> 00:12:19.440
really as close as I've seen to just a whiteboard marker experience. I use it with a Wacom tablet,

140
00:12:19.440 --> 00:12:24.800
just a simple basic Wacom tablet. And it works really well. You've actually used it as well,

141
00:12:24.800 --> 00:12:31.360
Luciano, but I think with a iPad, is that right?

142
00:12:31.360 --> 00:12:37.600
Yeah, that's actually an interesting one because I use it in the iPad using the iOS and just opening a browser. And then you can use the Apple Pencil

143
00:12:37.600 --> 00:12:41.760
and it works really well. But recently I discovered another way of using it, which is even more

144
00:12:41.760 --> 00:12:48.080
convenient because if you use a MacBook, you can connect the iPad as a second screen. Then at that

145
00:12:48.080 --> 00:12:55.280
point you can drag a browser window into the iPad and open TLDraw there. At that point, that's

146
00:12:55.280 --> 00:13:01.280
actually a touch screen. So you can still use the Apple Pencil to draw. And at that point, because

147
00:13:01.280 --> 00:13:05.680
you are in the same operating system, you can easily copy paste the result or render files

148
00:13:05.680 --> 00:13:11.040
directly into your operative system. And it gets even easier to share the result of your sketches

149
00:13:11.040 --> 00:13:16.720
in this TLDraw whiteboard. So it's a really convenient way of using it. I'm actually liking it a lot.

150
00:13:16.720 --> 00:13:25.440
And the other thing is that there is a beta version. So you can go to beta.tldraw.com,

151
00:13:25.440 --> 00:13:31.760
which is still not perfect. There are still things that don't work 100%, but that seems like an even

152
00:13:31.760 --> 00:13:37.600
nicer and easier to use version of this tool. So one of my favorites so far in this category.

153
00:13:40.240 --> 00:13:46.720
So should we move to programmatic tools maybe? We explored already manual tools and what we can do

154
00:13:46.720 --> 00:13:51.760
with them. So what are some programmatic tools that maybe you can use to sketch diagrams?

155
00:13:52.560 --> 00:13:59.680
One of the most famous that I've seen is called Mermaid, which works really well for C4 and ER

156
00:13:59.680 --> 00:14:07.280
type of diagrams. The problem is that to do AWS, really you will need to import icons. And I don't

157
00:14:07.280 --> 00:14:11.680
know if it's even possible to import icons right now. So it is really good for doing the kind of

158
00:14:11.680 --> 00:14:16.880
defining blocks and how these blocks are connected with each other. But then if you want to kind of

159
00:14:16.880 --> 00:14:21.440
customize the output and maybe style it in different ways, you don't really have a lot

160
00:14:21.440 --> 00:14:29.200
of flexibility. Then another one is a Python library that is called Diagrams. So the way

161
00:14:29.200 --> 00:14:35.920
you use it is basically with code. You import this library into a Python script and then this

162
00:14:35.920 --> 00:14:43.200
library will give you factory classes that allow you to instantiate different things. And you can

163
00:14:43.200 --> 00:14:50.560
also instantiate resources, classes that represent resources in AWS. So you can use this diagrams

164
00:14:51.120 --> 00:14:54.960
library to basically describe how your architecture is going to look like.

165
00:14:54.960 --> 00:15:00.720
And then the outcome of that is that it's going to render kind of a screenshot of an

166
00:15:00.720 --> 00:15:07.440
architectural diagram for you. There are other ones. There is one called Pikchr, which is

167
00:15:07.440 --> 00:15:15.120
spelled P-I-K-C-H-R. And another one called Kroki, which are online tools. And I don't

168
00:15:15.120 --> 00:15:22.240
remember exactly what Pikchr does, but Kroki is kind of something that does it all. It basically

169
00:15:22.240 --> 00:15:27.840
supports all the most common programmatic tools for diagrams and basically allows you to easily

170
00:15:27.840 --> 00:15:33.200
see examples of each and every one of them. And also a very nice feature that basically allows

171
00:15:33.200 --> 00:15:38.880
you to render all the different kinds of diagrams that are supported by just constructing a URL that

172
00:15:38.880 --> 00:15:44.080
contains basically the entire content of the diagram as code. And then you can easily share

173
00:15:44.080 --> 00:15:49.120
that URL with anyone and they will see the diagram rendered. So definitely an interesting tool to

174
00:15:49.120 --> 00:15:55.120
explore if you just want to easily give a preview to somebody for an architectural diagram, or maybe

175
00:15:55.120 --> 00:15:59.520
if you want to embed this in a repository just to get a preview of that particular diagram.

176
00:16:00.560 --> 00:16:06.480
Now, in general, we'll say that the advantage of using these tools is that you can easily keep the

177
00:16:07.040 --> 00:16:11.440
diagrams together with your code because effectively it is code that is text that you

178
00:16:11.440 --> 00:16:16.320
can keep in your code base and version it. And the disadvantage, of course, is that you will

179
00:16:16.320 --> 00:16:21.440
need to learn the specific language of that tool. Like everyone has a slightly different flavor and

180
00:16:21.440 --> 00:16:27.120
it might take a while to get used to the semantics of that particular language and be proficient withit.

181
00:16:27.120 --> 00:16:32.720
So maybe there is a bit of a learning curve, but I think eventually there is a lot of value

182
00:16:32.720 --> 00:16:41.840
that you will unblock by using some of these tools. The next category is generating diagrams

183
00:16:41.840 --> 00:16:46.720
from your infrastructure as code. Do you know any tool for that, Eoin?

184
00:16:46.720 --> 00:16:51.360
There's a couple I've used quite recently, actually, that I think are pretty impressive.

185
00:16:51.360 --> 00:16:56.000
The first one is called cfn-diagram. So this is for AWS and it's for CloudFormation, hence the

186
00:16:56.000 --> 00:17:03.280
CFN. So it's by Lars Jacobssen. And I'm just really impressed by what this tool can do. So you need a

187
00:17:03.280 --> 00:17:07.360
CloudFormation template. That's what you feed it. So if you're using Serverless Framework, CDK,

188
00:17:07.360 --> 00:17:16.160
CloudFormation, any of those tools, SAM, you can use this. And it supports different output types.

189
00:17:16.160 --> 00:17:23.040
So it supports like ASCII output. It can generate Mermaid diagrams. It can generate draw.io output.

190
00:17:23.680 --> 00:17:28.240
So it can even like, you can sync it up with your VS code so that you can view the diagrams there.

191
00:17:29.280 --> 00:17:35.520
So it's got ASCII art, draw.io, Mermaid diagrams, and I think GraphViz as well.

192
00:17:35.520 --> 00:17:41.360
So all in all, I think it's pretty powerful. The diagrams look really good that it generates.

193
00:17:41.360 --> 00:17:45.520
Of course, with all generated diagrams, ultimately, if your code is complex and your

194
00:17:45.520 --> 00:17:49.520
infrastructure is complex, the resulting diagram is going to be complex. And the more resources

195
00:17:49.520 --> 00:17:54.880
you have in there, the more difficult it will be to read. But I think I've been impressed by the

196
00:17:54.880 --> 00:18:00.400
output so far. And if you've got an existing code base and you don't have any diagrams for it, you

197
00:18:00.400 --> 00:18:04.560
could use either something like X-Ray, like use your service map, like your actual dependency

198
00:18:04.560 --> 00:18:10.000
graph to start off, or you could use a tool like this. So I'd really recommend checking that one

199
00:18:10.000 --> 00:18:13.920
out. And if you're using CDK, people might already be familiar with another one by Tom

200
00:18:13.920 --> 00:18:20.320
Rushko called CDK-Dia. And it does a similar job. It generates, I think it's got a few different

201
00:18:20.320 --> 00:18:27.600
formats. I've just basically generated PNGs from it. And it'll include like bounding boxes.

202
00:18:27.600 --> 00:18:32.880
So different stacks within your architecture and different constructs will be grouped together.

203
00:18:32.880 --> 00:18:37.760
So again, if your code is nicely structured, your diagram will look well. So it's good incentive

204
00:18:37.760 --> 00:18:41.120
actually to break your application down into small stacks that are nicely structured.

205
00:18:42.240 --> 00:18:46.880
Outside of CloudFormation, I'm probably not the best person to give advice on the Terraform

206
00:18:46.880 --> 00:18:51.120
ecosystem. I know you can do Terraform graph, and I have used that from time to time. And that'll

207
00:18:51.120 --> 00:18:56.960
basically generate a dot format for graph is that will generate a, basically a dependency diagram

208
00:18:56.960 --> 00:19:02.480
for your infrastructure. And I guess a new one in this space is the AWS application Composer.

209
00:19:02.480 --> 00:19:07.200
So that's the new tool that was announced at

210
00:19:07.200 --> 00:19:11.040
reInvent last year. The team that built this is essentially the team that built another tool that

211
00:19:11.040 --> 00:19:15.440
was very similar to this in the past called Stackery. And AWS acquired that company and

212
00:19:15.440 --> 00:19:19.840
they've come up with some really nice tooling in AWS Application Composer. So as this adds more

213
00:19:19.840 --> 00:19:24.000
and more services, it's going to get really compelling because it can sync the code and

214
00:19:24.000 --> 00:19:32.000
the diagram in your console using the file system API in your browser. So that's a pretty good set,

215
00:19:32.000 --> 00:19:37.440
AWS applications. Those are really good for starting off to get a diagram. You can even

216
00:19:37.440 --> 00:19:43.600
generate them as part of your build system and include them in your readme then as part of an

217
00:19:43.600 --> 00:19:48.720
automated process. We mentioned that these are ultimately a tool for communication between

218
00:19:48.720 --> 00:19:52.320
members of a team and people in the company. So what do we do about sharing them and keeping them

219
00:19:52.320 --> 00:19:57.360
up to date and all that kind of stuff?

220
00:19:57.360 --> 00:20:03.040
So we already said that programmatic tools are better because you can keep them in a repository. So when you are sharing the code, if you have

221
00:20:03.040 --> 00:20:07.680
these diagrams in line with the code, they are immediately available to at least people that

222
00:20:07.680 --> 00:20:12.800
are trying to understand the code or contribute to the code. So that's definitely one way you can

223
00:20:12.800 --> 00:20:19.680
use programmatic tools. Manual tools are I think that they have kind of a lower barrier to entry

224
00:20:19.680 --> 00:20:24.400
because it's easier to just you open this kind of white canvas and it's easier to understand

225
00:20:24.400 --> 00:20:29.200
how to drag and drop things and connect them. But then you have the problem that how do you share

226
00:20:29.200 --> 00:20:33.360
them? Sometimes you need to give people access to that particular tool. For instance, we mentioned

227
00:20:33.360 --> 00:20:39.360
already Lucidchart, which has that particular problem. And the tool kind of becomes effectively

228
00:20:39.360 --> 00:20:44.720
a repository for you to host all your diagrams, which might get very messy.

229
00:20:44.720 --> 00:20:49.120
And if you are a company that deals with different projects and you want to share the diagrams with your customers,

230
00:20:49.680 --> 00:20:54.160
how do you do that? So sometimes you just end up exporting pictures and putting these pictures

231
00:20:54.160 --> 00:20:59.600
somewhere. And then there is the problem of how do you keep things in sync? Every time you change

232
00:20:59.600 --> 00:21:03.440
the diagram, you need to re-export the picture and make sure to copy it in the right place, which

233
00:21:04.080 --> 00:21:09.360
I've seen is kind of a common issue and you generally end up with pictures that are out

234
00:21:09.360 --> 00:21:15.520
of sync with the actual architecture diagram. So I don't necessarily have a solution for that

235
00:21:15.520 --> 00:21:20.400
problem except trying to be diligent with this process, but just be aware that when you use

236
00:21:20.400 --> 00:21:24.480
programmatic tools, you can kind of create pipelines that render the pictures and put them in the right places.

237
00:21:24.480 --> 00:21:29.600
When you're doing things manually using a manual tool, it's much harder to achieve that.

238
00:21:29.600 --> 00:21:35.040
So you have to be more diligent and trying to propagate the rendering of that diagram

239
00:21:35.040 --> 00:21:41.360
correctly in the right place. And then the other point is where is the place that people are

240
00:21:41.360 --> 00:21:46.880
expected to go in that particular organization to consume these architecture diagrams?

241
00:21:46.880 --> 00:21:51.200
Sometimes certain companies rely a lot on wikis, something like Confluence and there are specific sections

242
00:21:51.200 --> 00:21:55.920
for architecture, so they do expect to go there and be able to find some kind of visualization

243
00:21:55.920 --> 00:22:00.560
of this architecture. So in that case, you don't really have a lot of options. You still need to

244
00:22:00.560 --> 00:22:05.520
export pictures and embed them in the wiki system. I don't know if certain wiki systems maybe have

245
00:22:05.520 --> 00:22:12.000
plugins that can integrate with specific tools like Lucidchart or Visio or other things.

246
00:22:12.000 --> 00:22:16.400
Maybe there could be an option to try to keep things a little bit more in sync, but generally it gets

247
00:22:16.400 --> 00:22:22.160
more complicated to work with these kind of integrations. Another thing that I really like

248
00:22:22.160 --> 00:22:27.520
is to have diagrams in the readme. So again, if you work in a repository, don't just put the code

249
00:22:27.520 --> 00:22:32.160
there, but try to come up with a rendered version so that you can just click and see it straight

250
00:22:32.160 --> 00:22:37.120
away without having to clone the code and run some kind of script in your own machine to actually see

251
00:22:37.120 --> 00:22:44.080
the effect of that particular code-generated diagram. And for that, I really like the tool

252
00:22:44.080 --> 00:22:48.800
that we mentioned before, kroki.io, because you don't necessarily even have to create a pipeline,

253
00:22:48.800 --> 00:22:54.800
it's just literally the URL itself will become the picture that you can easily embed in your markdown.

254
00:22:56.000 --> 00:23:03.040
So I think this is all we have for today. I hope that you found some useful information in this

255
00:23:03.040 --> 00:23:08.080
chat, but also I'm really curious to hear if we did miss anything. If you have other tools that

256
00:23:08.080 --> 00:23:13.360
we were not aware about, we'd love to learn from you, we'd love to know if you have any

257
00:23:13.360 --> 00:23:17.280
best practice that you would recommend, so definitely reach out to us on Twitter or leave

258
00:23:17.280 --> 00:23:22.720
us a comment and we'll make sure to get back to you. So thank you very much and we'll see you in

259
00:23:22.720 --> 00:23:44.400
the next episode.
