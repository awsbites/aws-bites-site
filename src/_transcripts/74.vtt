WEBVTT

1
00:00:00.000 --> 00:00:04.320
People have been building APIs and web books on AWS Lambda for many years now.

2
00:00:04.880 --> 00:00:08.160
There used to be one way to do this with API Gateway REST APIs.

3
00:00:08.880 --> 00:00:11.440
Then came Lambda support for Application Load Balancer

4
00:00:11.440 --> 00:00:14.320
and then the new HTTP APIs in API Gateway.

5
00:00:14.880 --> 00:00:18.880
And the latest way to build simple APIs backed by Lambda is Function URLs.

6
00:00:18.880 --> 00:00:22.160
And you don't even need API Gateway or load balancer for that one.

7
00:00:22.160 --> 00:00:24.240
But should you use it? And if so, when?

8
00:00:24.880 --> 00:00:27.360
Today we will give you a quick and simple guide

9
00:00:27.360 --> 00:00:31.280
picking the best way to build APIs with Lambda and pitch Function URLs

10
00:00:31.280 --> 00:00:33.040
in a battle against API Gateway.

11
00:00:33.040 --> 00:00:36.560
And also we're going to mention the pros and cons of load balancers in between.

12
00:00:36.560 --> 00:00:40.000
I am Luciano and I'm here with Eoin and this is AWS Bites podcast.

13
00:00:47.200 --> 00:00:49.440
AWS Bites is sponsored by fourTheorem.

14
00:00:49.440 --> 00:00:53.360
fourTheorem is an AWS partner for migration, architecture and training,

15
00:00:53.360 --> 00:00:56.240
including APIs for application and system integration.

16
00:00:56.240 --> 00:00:58.480
Find out more at fourTheorem.com.

17
00:00:58.480 --> 00:00:59.840
There is a link in the show notes.

18
00:01:01.120 --> 00:01:03.760
So since Function URLs is the new feature here,

19
00:01:03.760 --> 00:01:07.840
what is it and why it's something that we should be excited about?

20
00:01:07.840 --> 00:01:13.280
With Function URLs, the focus is on trying to make almost any configuration go away.

21
00:01:13.280 --> 00:01:15.920
So if you have a function built in Lambda,

22
00:01:15.920 --> 00:01:20.160
the goal here is to give you the quickest way of getting a public URL to invoke that function.

23
00:01:20.800 --> 00:01:24.240
All of the other methods you talked about, like API Gateway and load balancer,

24
00:01:24.240 --> 00:01:26.720
they require you to create and configure lots of new resources

25
00:01:27.280 --> 00:01:30.880
and configure them and understand how those configurations are syntaxed.

26
00:01:31.520 --> 00:01:34.320
And you have to then integrate them with the Lambda service.

27
00:01:34.320 --> 00:01:37.920
With tools like SAM and the Serverless Framework, it makes that process easier,

28
00:01:37.920 --> 00:01:40.320
but there's still all those knobs under the hood

29
00:01:40.320 --> 00:01:41.600
and you kind of have to understand how they work.

30
00:01:41.600 --> 00:01:43.520
So Function URLs are a different approach.

31
00:01:43.520 --> 00:01:45.200
It's not even a simple separate service.

32
00:01:45.200 --> 00:01:47.520
It's just a feature of the Lambda service itself.

33
00:01:47.520 --> 00:01:49.840
So you only have to enable it with one property.

34
00:01:49.840 --> 00:01:53.200
And once you enable it, you get a generated URL right away for the function

35
00:01:53.200 --> 00:01:54.720
that can be invoked publicly.

36
00:01:55.520 --> 00:01:58.400
So the format of that URL you get is like HTTPS,

37
00:01:58.400 --> 00:02:04.640
a generated ID, dot Lambda URL, dot whatever region, dot on dot AWS.

38
00:02:04.640 --> 00:02:07.200
So it's different to the ones you've seen in API Gateway.

39
00:02:07.920 --> 00:02:10.880
Now, I did say that the aim was for zero configuration.

40
00:02:10.880 --> 00:02:13.760
There are a few parameters you can add if you want.

41
00:02:13.760 --> 00:02:15.200
So one is you can enable course.

42
00:02:16.320 --> 00:02:20.320
So if you've got a front end and you need to have course enabled for your API, you can do that.

43
00:02:20.320 --> 00:02:22.800
You can also enable IAM authorization.

44
00:02:22.800 --> 00:02:29.840
So while the URLs are public, you can restrict access to them by mandating IAM privileges.

45
00:02:31.200 --> 00:02:34.400
And that's the only supported authorization method for Function URLs.

46
00:02:35.360 --> 00:02:38.400
Another one you could do is you can actually map your Function URL

47
00:02:38.400 --> 00:02:41.200
to a specific Lambda function alias.

48
00:02:41.200 --> 00:02:44.880
So that means you have a label that points to a specific version of that Lambda function.

49
00:02:44.880 --> 00:02:49.520
And if you have safe deployments where you're shifting traffic from one version to another,

50
00:02:49.520 --> 00:02:55.680
you can do that using aliases in a controlled way and then point your Function URL to a specific alias.

51
00:02:56.800 --> 00:03:00.240
So what this simple configuration means is that you don't get a lot of the features

52
00:03:00.240 --> 00:03:02.000
that are supported with API Gateway.

53
00:03:02.800 --> 00:03:07.040
We could probably just quickly list through the features that you're going to be missing out on

54
00:03:07.040 --> 00:03:10.400
that you get with API Gateway, but don't come with Function URLs.

55
00:03:10.400 --> 00:03:12.400
So API keys are out.

56
00:03:13.520 --> 00:03:18.320
You can also don't have the option of using Cognito User Pool or Lambda Authorizers or

57
00:03:18.320 --> 00:03:19.920
JWT Authorizers.

58
00:03:20.400 --> 00:03:25.280
You have no support for custom domains, so you are restricted to using the generated names

59
00:03:25.280 --> 00:03:25.760
that you get.

60
00:03:26.960 --> 00:03:29.440
You don't get request or response validation.

61
00:03:29.440 --> 00:03:30.640
You don't get any caching.

62
00:03:31.200 --> 00:03:37.520
And if you want a web application firewall, there's no support with Function URLs directly.

63
00:03:38.240 --> 00:03:44.720
Now, you can use CloudFront in front of a Function URL if you want and get caching from CloudFront.

64
00:03:44.720 --> 00:03:48.960
You could also use that for WAF as well.

65
00:03:48.960 --> 00:03:54.640
So that's another way of overcoming the caching and WAF limitations in Function URLs.

66
00:03:54.640 --> 00:03:58.560
You don't get HTTP access logs with Function URLs, which might be a bit of a deal breaker

67
00:03:58.560 --> 00:03:59.120
for some people.

68
00:04:00.400 --> 00:04:03.040
And you have no way of doing throttling or usage plans.

69
00:04:03.600 --> 00:04:07.360
And of course, there's no WebSockets support like there is with API Gateway.

70
00:04:08.000 --> 00:04:09.840
So those are all the things you're missing out on.

71
00:04:09.840 --> 00:04:12.720
So given that that's quite a long list, what do you think?

72
00:04:12.720 --> 00:04:13.600
Why would you use it?

73
00:04:13.600 --> 00:04:16.080
What are the actual advantages of Function URLs, Luciano?

74
00:04:16.080 --> 00:04:21.280
And what kind of use cases might people say, OK, they don't have all the features, but

75
00:04:21.280 --> 00:04:22.960
I could still use Function URLs here?

76
00:04:28.320 --> 00:04:32.640
Yeah, I think as you said, if you don't need most of these features, there are some trade-offs for which I think it might be beneficial to consider something like functional URLs.

77
00:04:32.640 --> 00:04:34.240
First of all, it is much simpler.

78
00:04:34.240 --> 00:04:39.440
So if you just need a quick way to trigger a Lambda based on a URL, that's probably the

79
00:04:39.440 --> 00:04:41.280
simplest way that there is right now.

80
00:04:41.280 --> 00:04:42.320
It is also cheaper.

81
00:04:42.320 --> 00:04:46.720
It is actually free compared to all the other options where you have an extra cost other

82
00:04:46.720 --> 00:04:48.480
than the cost of the Lambda invocation.

83
00:04:48.480 --> 00:04:51.200
In the case of Function URLs, you don't have that extra cost.

84
00:04:51.200 --> 00:04:54.240
You just pay for the Lambda duration and the invocation.

85
00:04:56.320 --> 00:04:58.000
Also, there is an interesting article.

86
00:04:58.000 --> 00:05:02.720
We're going to put the link in the show notes that claims that this integration with function

87
00:05:02.720 --> 00:05:04.960
URL, it is the fastest one.

88
00:05:04.960 --> 00:05:11.120
And it claims something around 8.30 something milliseconds with a warm Lambda.

89
00:05:11.120 --> 00:05:15.200
That of additional overhead just in doing that HTTP request.

90
00:05:15.200 --> 00:05:17.600
But we were not actually able to replicate that number.

91
00:05:17.600 --> 00:05:21.760
And I think the best that we got in our tests was 100 milliseconds.

92
00:05:21.760 --> 00:05:24.320
Maybe that really depends on the testing methodology.

93
00:05:24.320 --> 00:05:25.360
It depends on the region.

94
00:05:25.360 --> 00:05:29.760
There might be many factors to affect really that particular result.

95
00:05:29.760 --> 00:05:31.040
We'd be curious to know more.

96
00:05:31.040 --> 00:05:35.680
So if you have any more data that can prove or disprove this hypothesis, definitely let

97
00:05:35.680 --> 00:05:36.720
us know in the comments.

98
00:05:36.720 --> 00:05:43.360
Another thing, and this is actually a really interesting one that may enable some interesting

99
00:05:43.360 --> 00:05:46.000
use cases, is that timeout is much longer than API Gateway.

100
00:05:46.720 --> 00:05:52.560
In fact, in API Gateway, you have 30 seconds, meaning that if your Lambda doesn't respond

101
00:05:52.560 --> 00:05:56.880
between 30 seconds, API Gateway will just stop the connection there and respond with

102
00:05:56.880 --> 00:05:57.360
an error.

103
00:05:58.640 --> 00:06:02.720
With Function URLs, instead, you can leverage the entire maximum direction of a Lambda.

104
00:06:02.720 --> 00:06:06.480
Because if your Lambda is lasting the maximum amount of time, which is 15 minutes,

105
00:06:06.480 --> 00:06:08.640
that connection is still going to be open.

106
00:06:08.640 --> 00:06:13.760
So you could use this particular feature if you have APIs that, for whatever reason, need

107
00:06:13.760 --> 00:06:17.440
to take more than 30 seconds to create a response for the user.

108
00:06:18.800 --> 00:06:22.880
And actually, with that, let's move on to some use cases.

109
00:06:22.880 --> 00:06:28.000
So we can try to think a little bit more practically what we can use this feature for.

110
00:06:29.360 --> 00:06:35.520
And the first use case, and probably the one that will come to mind first for most people,

111
00:06:35.520 --> 00:06:36.640
is Webhooks.

112
00:06:36.640 --> 00:06:41.120
Because Webhooks, traditionally, you just need a URL and that creates an integration

113
00:06:41.120 --> 00:06:42.720
point between different systems.

114
00:06:43.280 --> 00:06:44.400
And for instance, I do not.

115
00:06:44.400 --> 00:06:47.120
The common ones I've seen is CRM systems.

116
00:06:47.120 --> 00:06:49.440
They generally support Webhooks.

117
00:06:49.440 --> 00:06:55.200
So maybe you would want a way to know when a new deal is created in the system, because

118
00:06:55.200 --> 00:06:57.520
maybe you want to do some, I don't know, data enhancement.

119
00:06:57.520 --> 00:07:02.160
Maybe you want to use another system or another API to try to enrich the data.

120
00:07:02.160 --> 00:07:07.360
You could create your own Lambda with a Function URL and then create the Webhook integration

121
00:07:07.360 --> 00:07:08.560
using that Function URL.

122
00:07:09.280 --> 00:07:13.200
And very similarly, I've seen newsletter systems doing the same thing.

123
00:07:13.200 --> 00:07:17.360
Basically, every time somebody signs up for your newsletter, you can have the option to

124
00:07:17.360 --> 00:07:22.080
specify a Webhook URL there, and then you can run your own backend logic to do something

125
00:07:22.080 --> 00:07:22.480
with it.

126
00:07:22.480 --> 00:07:28.080
Maybe you can insert that email address into a specific database, maybe a marketing database

127
00:07:28.080 --> 00:07:33.520
or something like that, or maybe you can just send a custom newsletter to welcome the person

128
00:07:33.520 --> 00:07:34.640
into the system.

129
00:07:35.920 --> 00:07:38.720
Another one that I've seen is shipping providers.

130
00:07:38.720 --> 00:07:43.760
So if you are running an e-commerce that needs to send physical products, very, very often

131
00:07:43.760 --> 00:07:48.720
they will provide a Webhook-based interface to give you updates every time there is a

132
00:07:48.720 --> 00:07:51.120
status update on one of your shippings.

133
00:07:51.120 --> 00:07:56.480
So you could create a Lambda with a Function URL, and then you can receive those kinds

134
00:07:56.480 --> 00:08:01.600
of events and use those events to update your own database and maybe send notifications

135
00:08:01.600 --> 00:08:05.120
to your customers to tell them what's the status of their shipping.

136
00:08:06.080 --> 00:08:12.080
And finally, another one that I've seen a lot for Webhooks is integration with CI systems

137
00:08:12.080 --> 00:08:17.440
or repositories, where they also can trigger Webhooks based on different events.

138
00:08:17.440 --> 00:08:21.120
So if you want to do something custom, again, you can just build your own Lambda very quickly,

139
00:08:21.120 --> 00:08:23.120
Function URL and integrate it that way.

140
00:08:23.120 --> 00:08:28.080
Another use case could be outside Webhooks when you are building quick prototypes.

141
00:08:28.640 --> 00:08:33.680
And this can be also something that long term, maybe you want to do something like API Gateway,

142
00:08:33.680 --> 00:08:38.080
but you are just sketching out a Lambda just to see if the idea works.

143
00:08:38.080 --> 00:08:40.480
And maybe you are even using the web console.

144
00:08:40.480 --> 00:08:45.040
It could be very beneficial if you already have your cURL request ready or maybe post

145
00:08:45.040 --> 00:08:49.680
map request ready there to just quickly enable the Function URL just to get a URL that can

146
00:08:49.680 --> 00:08:54.160
invoke your Lambda, do the request, test that everything is actually working as you expect,

147
00:08:54.160 --> 00:08:58.560
and then you can switch it off and maybe before going to production, actually migrate to API

148
00:08:58.560 --> 00:09:00.480
Gateway to leverage all the other features.

149
00:09:02.000 --> 00:09:07.200
Another use case, and this is something that actually we found in the blog post announcement

150
00:09:07.200 --> 00:09:13.120
for Function URLs, is what they call single function microservices, which actually in

151
00:09:13.120 --> 00:09:16.640
the blog post didn't really explain what they meant with that example.

152
00:09:16.640 --> 00:09:22.000
But later on in the same blog post, they mentioned the idea that you could create a payment endpoint

153
00:09:22.000 --> 00:09:23.280
for a mobile application.

154
00:09:23.280 --> 00:09:26.880
So maybe that's what they were referring to as a single function microservice.

155
00:09:26.880 --> 00:09:30.880
And I think that makes a lot of sense if you also consider that you can use IAM authentication

156
00:09:30.880 --> 00:09:33.680
there, so you could create a very small service.

157
00:09:34.480 --> 00:09:35.360
It's just an endpoint.

158
00:09:35.360 --> 00:09:39.840
You don't need to create an API Gateway dedicated to that because you can secure it with IAM

159
00:09:39.840 --> 00:09:41.840
and then you can call it from other services.

160
00:09:41.840 --> 00:09:46.000
And then I was trying to think for other possible use cases and I was thinking the different

161
00:09:46.000 --> 00:09:49.280
features that you have with Lambda Function URLs.

162
00:09:49.280 --> 00:09:54.000
And since you can enable CORS, I think that enables a bunch of use cases where you have

163
00:09:54.000 --> 00:09:59.920
very simple front ends, maybe static websites, and you want to create some server-side functionality.

164
00:09:59.920 --> 00:10:05.600
Again, that could be a contact form or maybe a form to sign up for a newsletter and you

165
00:10:05.600 --> 00:10:09.680
can build all the server-side logic using a Lambda with a Function URL.

166
00:10:09.680 --> 00:10:14.960
And finally, again, thinking about that 15 minutes time, extra time that you can use

167
00:10:14.960 --> 00:10:19.120
compared to API Gateway, I was thinking that that could be a good use case if you have

168
00:10:19.120 --> 00:10:24.320
an API that runs some machine learning inference algorithm that maybe can take longer than

169
00:10:24.320 --> 00:10:30.400
30 seconds, maybe can take a few minutes, and you still want to use that HTTP protocol there.

170
00:10:31.120 --> 00:10:34.960
If you use Function URLs, then you can still use a Lambda to do all this work behind the

171
00:10:34.960 --> 00:10:35.460
scenes.

172
00:10:35.460 --> 00:10:40.740
So, of course, these are just some examples.

173
00:10:40.740 --> 00:10:45.700
If you have other ideas, we'd be curious to hear what you're thinking about in the comments,

174
00:10:45.700 --> 00:10:47.140
so definitely let us know.

175
00:10:47.140 --> 00:10:53.220
But it's always worth keeping in mind what are the limitations there, because in general,

176
00:10:53.220 --> 00:10:57.940
you can build all these different use cases, but you need to think that you have no authorizations,

177
00:10:57.940 --> 00:11:02.500
at least outside if you use IAM, but most importantly, you don't have DDoS protection.

178
00:11:02.500 --> 00:11:07.620
So that basically means that if somebody manages to figure out what's your Function URL, and

179
00:11:07.620 --> 00:11:11.780
if you're using that, for instance, BI in the frontend application, it will be there

180
00:11:11.780 --> 00:11:14.980
in the HTML, so it's not something that you can easily keep secret.

181
00:11:15.700 --> 00:11:20.340
So what they could do is they can start to generate requests against that particular URL

182
00:11:20.340 --> 00:11:25.780
and basically do a denial of wallet attack to you, because you might end up paying for

183
00:11:25.780 --> 00:11:26.980
all of those invocations.

184
00:11:26.980 --> 00:11:31.940
Now, we were trying to think, okay, are there strategies there that you can put in places

185
00:11:31.940 --> 00:11:33.380
to protect yourself against that?

186
00:11:33.940 --> 00:11:39.460
And maybe to some degree, what you could do, you could create an alarm to detect excessive

187
00:11:39.460 --> 00:11:44.900
invocations and then basically respond to that alarm by editing the Lambda function

188
00:11:44.900 --> 00:11:50.900
and setting the throttling to basically forbid additional invocations of that Lambda.

189
00:11:50.900 --> 00:11:54.820
And that could work, but you have to keep in mind that under the alarm, you have to

190
00:11:54.820 --> 00:11:57.940
and that could work, but you have to keep in mind that at that point you are stopping

191
00:11:57.940 --> 00:12:01.220
that Lambda entirely, even for legitimate invocations.

192
00:12:01.220 --> 00:12:07.140
So you are literally deciding, let's sacrifice this feature for now in exchange for not getting

193
00:12:07.140 --> 00:12:08.740
the denial of wallet attack.

194
00:12:09.300 --> 00:12:14.500
So again, if you are really worried about DDoS, probably Function URLs are not the best

195
00:12:14.500 --> 00:12:15.140
option there.

196
00:12:16.900 --> 00:12:22.740
The final point that I have is in terms of drawbacks of Function URLs is that there is

197
00:12:22.740 --> 00:12:25.460
no routes or HTTP methods.

198
00:12:25.460 --> 00:12:26.820
Again, it's just a URL.

199
00:12:26.820 --> 00:12:31.380
You get a custom domain and every request there will invoke the Lambda.

200
00:12:31.380 --> 00:12:36.580
So if you are expecting a post and somebody does a GET, you still get the Lambda invocation.

201
00:12:36.580 --> 00:12:40.740
Now, of course, you can do validation inside the Lambda function, but you have to remember

202
00:12:40.740 --> 00:12:42.100
that the Lambda gets invoked.

203
00:12:42.100 --> 00:12:45.700
So you're going to be paying for that, which is something that you can avoid instead with

204
00:12:45.700 --> 00:12:50.980
API Gateway because you can be very specific on which methods and paths will actually invoke

205
00:12:50.980 --> 00:12:52.740
the specific Lambda.

206
00:12:52.740 --> 00:12:58.180
And finally, the Function URL, since it's generated randomly, if for any reason you

207
00:12:58.180 --> 00:13:02.340
have to delete the stack, redeploy, so you're basically removing the Lambda and recreating

208
00:13:02.340 --> 00:13:04.500
it, you will end up with a new URL.

209
00:13:04.500 --> 00:13:09.940
So if you are assuming that that URL is going to be stable across the entire deletion of

210
00:13:09.940 --> 00:13:12.420
the stack and recreation, that's not going to be the case.

211
00:13:12.420 --> 00:13:16.420
So if you happen to do that, you will need to reconfigure whatever integration because

212
00:13:16.420 --> 00:13:18.580
you will have to provide a new Function URL.

213
00:13:18.580 --> 00:13:20.820
Yeah, that's a good point.

214
00:13:20.820 --> 00:13:22.500
And there's no real way around that.

215
00:13:22.500 --> 00:13:27.860
I think you can't use a CNAME because I presume the service uses the host header to do the

216
00:13:27.860 --> 00:13:29.460
routing back to the individual function.

217
00:13:30.260 --> 00:13:34.740
So given these drawbacks, let's kind of pitch Function URLs in a battle against the rest.

218
00:13:34.740 --> 00:13:39.140
We don't want to cover API Gateway in extensive detail, but we can remind ourselves of the

219
00:13:39.140 --> 00:13:40.180
options and the trade-offs.

220
00:13:40.820 --> 00:13:42.900
Now, API Gateway has two flavors.

221
00:13:42.900 --> 00:13:46.580
We have the classic REST API mode and the newer HTTP API.

222
00:13:46.580 --> 00:13:52.180
HTTP API is about 30% of the price of REST API roughly, but there are some feature gaps.

223
00:13:52.180 --> 00:13:52.900
So it's a bit leaner.

224
00:13:52.900 --> 00:13:54.500
It doesn't have all the features of REST API.

225
00:13:56.500 --> 00:14:00.260
We should mention you can also do WebSockets with API Gateway, but we'll leave that out

226
00:14:00.260 --> 00:14:02.500
since that's not really part of our use cases here.

227
00:14:02.500 --> 00:14:06.660
And we'll assume that you're dealing with GETs, POSTs, PUTs, patches, and that sort

228
00:14:06.660 --> 00:14:07.300
of typical stuff.

229
00:14:08.100 --> 00:14:13.700
So HTTP API, I would say, is the nearest competitor to Function URLs because it's a bit simpler

230
00:14:13.700 --> 00:14:16.820
and the price and performance are better than REST API.

231
00:14:18.020 --> 00:14:22.580
In terms of authorization, we mentioned that Function URLs supports IAM.

232
00:14:22.580 --> 00:14:28.500
HTTP API will support IAM Lambda authorizers as well and JWT authorizers.

233
00:14:29.060 --> 00:14:34.900
And those JWT authorizers can also be used with Cognito User Pools, whereas the REST

234
00:14:34.900 --> 00:14:38.980
API has a dedicated authorizer type just for Cognito User Pools.

235
00:14:38.980 --> 00:14:43.540
The older REST API also has a private mode, so you can use it for internal APIs.

236
00:14:43.540 --> 00:14:45.700
But that's not always plain sailing.

237
00:14:45.700 --> 00:14:50.420
If you want to use custom domains with private internal APIs, that's not very trivial and

238
00:14:50.420 --> 00:14:52.820
it requires a workaround with a load balancer in front.

239
00:14:55.060 --> 00:15:00.580
Otherwise, if it's not a private API, HTTP APIs and REST APIs both support custom domains

240
00:15:00.580 --> 00:15:02.020
with your own domain names.

241
00:15:02.020 --> 00:15:07.220
So that handles the case you mentioned, Luciano, where you delete the function, redeploy it.

242
00:15:07.220 --> 00:15:12.260
If you've got custom domains, then you can map that to the underlying API and you don't

243
00:15:12.260 --> 00:15:14.580
have to worry about regenerating URLs.

244
00:15:15.620 --> 00:15:18.660
But HTTP API and REST API both have throttling support.

245
00:15:19.940 --> 00:15:23.700
They both have the concept of stages, so you can have like a production stage and a development

246
00:15:23.700 --> 00:15:29.060
stage, QA stages, and they both have some level of open API or swagger support.

247
00:15:30.180 --> 00:15:36.260
Now, REST API does have a bunch of extra features that HTTP API does not have, like edge deployments.

248
00:15:36.260 --> 00:15:42.900
request response validation with JSON schemas, and also request response transformation with

249
00:15:42.900 --> 00:15:45.140
velocity template language or VTL.

250
00:15:45.700 --> 00:15:50.260
This actually gives you the option of excluding Lambda altogether and having a functionless

251
00:15:50.260 --> 00:15:50.760
API.

252
00:15:51.380 --> 00:15:58.260
And you can proxy your API into a backend service like DynamoDB or Kinesis or some other

253
00:15:58.260 --> 00:15:59.380
underlying service.

254
00:15:59.380 --> 00:16:03.300
And that can be optimal in terms of cost and performance for some cases.

255
00:16:03.300 --> 00:16:06.340
REST API also has caching and it has X-Ray tracing support.

256
00:16:06.340 --> 00:16:09.620
HTTP API doesn't have X-Ray support yet.

257
00:16:10.180 --> 00:16:13.140
So that's a pretty important one, I think, for a lot of people.

258
00:16:14.740 --> 00:16:20.340
I would say that the general guidance is use HTTP APIs if you don't need anything in that

259
00:16:20.340 --> 00:16:25.060
list, because REST API has a lot of those features, but they're not required in all

260
00:16:25.060 --> 00:16:25.620
cases.

261
00:16:25.620 --> 00:16:28.420
Edge deployments, not particularly.

262
00:16:28.420 --> 00:16:31.060
You can always use CloudFront as an option instead of edge deployments anyway.

263
00:16:31.060 --> 00:16:33.940
And request response validation and transformation.

264
00:16:33.940 --> 00:16:36.500
I don't see it used a lot in the wild, really.

265
00:16:36.500 --> 00:16:40.340
They're a little bit of niche in terms of their usage.

266
00:16:41.540 --> 00:16:50.260
So I would say also as a point of note on observability, both of these API gateway modes

267
00:16:50.260 --> 00:16:53.780
will give you logs, access logs, and you can configure that log format.

268
00:16:54.420 --> 00:16:58.740
It's worth mentioning that although you don't get any access logs with function, you're

269
00:16:58.740 --> 00:17:02.820
also you do get CloudWatch metrics.

270
00:17:02.820 --> 00:17:09.300
So you get the request count, request latency, and metrics for 400 hours and 500 hours as

271
00:17:09.300 --> 00:17:09.800
well.

272
00:17:16.660 --> 00:17:20.740
Yeah, so my understanding is that the general guidance seems to be that you should be using Function URLs if your use case is very, very simple and you don't really have a lot of

273
00:17:20.740 --> 00:17:26.580
patience for configuring a bunch of other resources just to route traffic to a Lambda.

274
00:17:26.580 --> 00:17:31.700
And that's probably a good use case if you are just learning AWS and these are your first

275
00:17:31.700 --> 00:17:35.060
experiments with Lambda and you just want something simple that just works.

276
00:17:35.060 --> 00:17:39.380
You are not too concerned about extremely production ready deployments at that stage.

277
00:17:40.900 --> 00:17:45.220
If that's not your case, probably your second best choice is to use HTTP APIs.

278
00:17:45.940 --> 00:17:49.940
But of course, this is the case when you don't need caching, you don't need private endpoints,

279
00:17:49.940 --> 00:17:53.860
X-Ray validation, transformations, and all the other extra features that are not currently

280
00:17:53.860 --> 00:17:55.700
supported by HTTP APIs.

281
00:17:55.700 --> 00:17:59.940
Because if you need those, of course, you need to fall back to more traditional REST

282
00:17:59.940 --> 00:18:02.420
APIs on API Gateway.

283
00:18:03.460 --> 00:18:08.340
But we still have left out another contender there, which is using an Application Load

284
00:18:08.340 --> 00:18:08.820
Balancer.

285
00:18:08.820 --> 00:18:13.220
So let's try to have a quick overview on why that might be an interesting option.

286
00:18:14.020 --> 00:18:19.060
And to be fair, in general, it's not too common to see load balancers being used with Lambda.

287
00:18:19.060 --> 00:18:23.460
They are more used for traditional EC2 deployments or Fargate deployments.

288
00:18:23.460 --> 00:18:28.580
But it is definitely possible to use load balancer to forward traffic to Lambda, basically

289
00:18:28.580 --> 00:18:30.820
to Invocate Lambdas with an HTTP event.

290
00:18:32.500 --> 00:18:35.140
And there are some advantages actually in doing that.

291
00:18:35.140 --> 00:18:40.260
For instance, if you use API Gateway, something that I don't think is very commonly known,

292
00:18:40.260 --> 00:18:42.900
there is a limit of 10,000 requests per second.

293
00:18:42.900 --> 00:18:45.700
There is some burst capacity there, but there is a limit anyway.

294
00:18:46.740 --> 00:18:50.980
While if you use a load balancer, you can literally have millions of requests per second.

295
00:18:50.980 --> 00:18:54.500
Now, I don't know if that's really that useful in the context of a Lambda, because in the

296
00:18:54.500 --> 00:18:59.380
context of a Lambda, you always need to keep in mind that if you have many concurrent requests,

297
00:18:59.380 --> 00:19:04.180
that would probably trigger many concurrent invocations of different Lambda instances.

298
00:19:04.740 --> 00:19:09.860
So basically, you might run out of concurrency in Lambda anyway at some point.

299
00:19:09.860 --> 00:19:14.820
So I don't think you can easily leverage millions of requests per second by just using Lambda

300
00:19:14.820 --> 00:19:19.940
behind the scene, unless you really had a lot of conversations with AWS and they managed

301
00:19:19.940 --> 00:19:22.020
to increase your quota significantly.

302
00:19:22.020 --> 00:19:27.140
But that probably only happens if you really have a very large business running lots of

303
00:19:27.140 --> 00:19:28.420
infrastructure in AWS.

304
00:19:30.420 --> 00:19:37.220
Interesting enough, ALB and general use with EC2, as we said, so you have options to route

305
00:19:38.020 --> 00:19:39.460
traffic in many different ways.

306
00:19:39.460 --> 00:19:43.620
For instance, you can look at the hostname, you can look at headers, you can look at query

307
00:19:43.620 --> 00:19:44.500
strings.

308
00:19:44.500 --> 00:19:50.180
So in the case where you have complex microservices, where you have different routing logic, I

309
00:19:50.180 --> 00:19:55.140
think ALBs are the most flexible option there to decide where to send specific requests.

310
00:19:55.700 --> 00:19:58.740
And we will talk more about an example that can be relevant there.

311
00:19:59.380 --> 00:20:05.860
And finally, another one is about pricing, because if you have very little traffic with

312
00:20:05.860 --> 00:20:11.620
load balancer, there is a specific pricing model where basically it might be a little

313
00:20:11.620 --> 00:20:15.620
bit more expensive to just have an ALB to route traffic if you don't really have a lot

314
00:20:15.620 --> 00:20:16.500
of requests.

315
00:20:16.500 --> 00:20:21.940
But when you start to have a significant amount of requests, I think that price is actually

316
00:20:21.940 --> 00:20:25.780
much more justified and overall you might end up with a better pricing compared, for

317
00:20:25.780 --> 00:20:27.380
instance, to just having API Gateway.

318
00:20:28.100 --> 00:20:33.460
So keep in mind that also pricing might be interesting depending on what's your particular

319
00:20:33.460 --> 00:20:34.100
need there.

320
00:20:34.100 --> 00:20:40.180
Just to mention that particular example that I was saying before, one good use case is

321
00:20:40.180 --> 00:20:44.020
when you are trying to migrate a monolith application, maybe behind an Application Load

322
00:20:44.020 --> 00:20:48.980
Balancer, to something that looks like microservices and maybe you want to use Lambda as part of

323
00:20:48.980 --> 00:20:50.740
this new microservice architecture.

324
00:20:50.740 --> 00:20:54.980
What you could do, you could still keep your own monolith and apply the strangler pattern

325
00:20:54.980 --> 00:20:59.220
to slowly migrate bits and pieces of that application to microservices.

326
00:20:59.220 --> 00:21:02.740
So basically what you could do as soon as you implement a new endpoint with a Lambda,

327
00:21:02.740 --> 00:21:07.380
you can just change the routing logic at the load balancer level and use the load balancer

328
00:21:07.380 --> 00:21:11.220
itself to map that particular endpoint to a Lambda invocation.

329
00:21:11.220 --> 00:21:15.940
So that way you basically can do everything at the load balancer level, manage all that

330
00:21:15.940 --> 00:21:20.820
routing, keep using the monolith as long as we have features to migrate over to serverless

331
00:21:20.820 --> 00:21:25.940
functions and then at some point you will have only serverless functions in a microservices

332
00:21:26.820 --> 00:21:27.320
way.

333
00:21:27.320 --> 00:21:31.480
So just to summarize, we have four options.

334
00:21:31.480 --> 00:21:34.360
We have Function URLs, which are the simplest and the quickest.

335
00:21:34.360 --> 00:21:38.840
Very good for webhooks, very good for quick experimentation, very good if you are learning

336
00:21:38.840 --> 00:21:44.040
Lambda and you want a simple option just to trigger HTTP requests and invoke Lambdas.

337
00:21:44.600 --> 00:21:50.920
Then we have HTTP APIs where you can leverage some of the more advanced features of API

338
00:21:50.920 --> 00:21:55.000
Gateway, but they are not as feature complete as REST API Gateways.

339
00:21:55.000 --> 00:22:01.000
So if you need all the additional features, of course, go to REST API Gateway.

340
00:22:01.000 --> 00:22:05.000
And finally, we have Application Load Balancer, which are generally very good either when

341
00:22:05.000 --> 00:22:09.480
you are migrating from monoliths or where you have a lot of traffic and therefore it

342
00:22:09.480 --> 00:22:13.640
might be more beneficial in terms of pricing and scalability to use an Application Load

343
00:22:13.640 --> 00:22:14.140
Balancer.

344
00:22:15.000 --> 00:22:19.000
We also have a repository where we put some of these notes and some of the evaluation

345
00:22:19.000 --> 00:22:23.400
tests that we made to prepare this episode, so we will have the link in the show notes.

346
00:22:23.400 --> 00:22:25.240
And this is everything we have for today.

347
00:22:25.240 --> 00:22:30.120
So really looking forward to your opinion, which HTTP integration method to use.

348
00:22:30.120 --> 00:22:34.280
And if you have any other suggestions on the we missed some other reason to use one approach

349
00:22:34.280 --> 00:22:37.160
rather than another, please let us know in the chat.

350
00:22:37.160 --> 00:22:42.200
Sorry, in the comments and we'll be back to you and trying to debate whether we like this

351
00:22:42.200 --> 00:22:45.000
opinion or not, or whether we are missing something there.

352
00:22:45.000 --> 00:22:54.200
Thank you very much and we'll see you in the next episode.
