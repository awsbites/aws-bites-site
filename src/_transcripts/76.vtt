WEBVTT

1
00:00:00.000 --> 00:00:04.000
Hello everyone and welcome back to another episode of AWS Bites.

2
00:00:04.000 --> 00:00:07.680
Today we have an incredibly exciting episode in store for you.

3
00:00:07.680 --> 00:00:10.080
We are here to do something a little bit different than usual.

4
00:00:10.080 --> 00:00:15.040
We want to unbox an AWS product and specifically we want to unbox AWS Copilot.

5
00:00:15.760 --> 00:00:19.280
This is going to be a very visual episode and we will be screen sharing.

6
00:00:19.280 --> 00:00:21.600
So if you are listening to the audio only version,

7
00:00:21.600 --> 00:00:23.760
we will be doing our best to describe what's happening

8
00:00:23.760 --> 00:00:27.200
but you might be better off watching the video version on YouTube or Spotify.

9
00:00:27.200 --> 00:00:31.600
Now I mentioned that in this episode we will be exploring Copilot.

10
00:00:31.600 --> 00:00:34.560
Copilot is not to be confused with GitHub Copilot.

11
00:00:34.560 --> 00:00:38.800
We are talking about AWS Copilot which is a CLI helper

12
00:00:38.800 --> 00:00:43.440
that helps you to create container-based applications and deploy them on AWS.

13
00:00:44.000 --> 00:00:45.840
We will work you through the entire process.

14
00:00:45.840 --> 00:00:48.160
We will show you how to install it, how to configure it

15
00:00:48.160 --> 00:00:51.760
and we will create a container application and deploy it on AWS.

16
00:00:52.400 --> 00:00:56.480
So I hope you are as excited as we are to explore AWS Copilot.

17
00:00:56.480 --> 00:00:58.320
Hopefully we will make the best of it.

18
00:00:58.320 --> 00:01:02.080
So sit back, enjoy and relax and let's have fun together.

19
00:01:10.480 --> 00:01:12.640
AWS Bites is sponsored by fourTheorem.

20
00:01:12.640 --> 00:01:16.560
fourTheorem is a cloud consulting firm that helps businesses to migrate to AWS

21
00:01:16.560 --> 00:01:18.560
and optimize their cloud infrastructure.

22
00:01:18.560 --> 00:01:21.360
With a theme of experience cloud architects and engineers,

23
00:01:21.360 --> 00:01:24.320
fourTheorem provides end-to-end solutions for cloud migrations,

24
00:01:24.320 --> 00:01:27.200
application development and infrastructure management.

25
00:01:27.200 --> 00:01:30.560
If you're interested in finding out more, check out fourtheorem.com.

26
00:01:30.560 --> 00:01:32.000
The link is in the show notes.

27
00:01:33.040 --> 00:01:35.840
So today we are here to explore AWS Copilot.

28
00:01:35.840 --> 00:01:37.920
Eoin, what do you have in store for us?

29
00:01:39.200 --> 00:01:41.440
Well, when you take it out of the box, the first place you might look

30
00:01:41.440 --> 00:01:44.960
is the Copilot landing page on the AWS site.

31
00:01:44.960 --> 00:01:46.240
So there's a quick overview here.

32
00:01:46.880 --> 00:01:49.600
You might be wondering, okay, where does this fit into

33
00:01:49.600 --> 00:01:53.040
the 17 different ways to run containers on AWS?

34
00:01:53.040 --> 00:01:56.640
So I suppose it's not really a separate way to run containers.

35
00:01:57.200 --> 00:02:01.360
It's just like a tool that you can use to run them on the existing services.

36
00:02:01.360 --> 00:02:05.120
So we've already talked on the podcast about ECS and we've talked about Fargate.

37
00:02:05.120 --> 00:02:10.160
We haven't talked a lot about AppRunner yet, but AppRunner is a relatively new way

38
00:02:10.160 --> 00:02:14.880
to get up and running with running containers on AWS for fairly simple applications.

39
00:02:14.880 --> 00:02:19.280
Now those could be like background processing or APIs or front-end applications,

40
00:02:19.280 --> 00:02:22.640
but it hides a lot of the stuff you normally have to deal with,

41
00:02:22.640 --> 00:02:26.320
like task definitions and services and load balancers.

42
00:02:26.320 --> 00:02:30.320
AppRunner makes that a lot simpler, but it also is a bit limited.

43
00:02:30.320 --> 00:02:34.080
You can only run so many parallel containers of certain sizes,

44
00:02:34.080 --> 00:02:38.080
but for a lot of use cases, it would be perfectly okay.

45
00:02:38.080 --> 00:02:41.760
So what Copilot is doing is it's allowing you to run stuff on ECS and Fargate,

46
00:02:42.560 --> 00:02:45.920
but you avoid having to write loads of cloud information yourself

47
00:02:45.920 --> 00:02:49.360
or Terraform or CDK code.

48
00:02:50.080 --> 00:02:52.880
You don't have to worry about all of the well-architected pieces

49
00:02:52.880 --> 00:02:56.480
because Copilot, I think, is trying to sort that for you,

50
00:02:56.480 --> 00:03:02.240
try to make it observable, make it easy to set up deployment pipelines, safe deployments.

51
00:03:02.960 --> 00:03:07.120
It's a command line interface only, so there's no AWS service here or anything like that.

52
00:03:07.120 --> 00:03:08.160
So we're going to give it a try.

53
00:03:13.440 --> 00:03:18.640
So is it fair to say that Copilot is basically a guided experience into trying to deploy containers in AWS the right way, hopefully?

54
00:03:19.360 --> 00:03:21.280
Yeah, I think that's a good way to put it.

55
00:03:21.920 --> 00:03:26.880
If you go to the Copilot CLI documentation, you've got this GitHub page.

56
00:03:28.160 --> 00:03:33.600
So it's hosted on GitHub pages, and it's got a good getting started guide,

57
00:03:33.600 --> 00:03:35.600
which we're going to have a look at to take you through.

58
00:03:35.600 --> 00:03:40.960
If we go to getting started for the first time, you install the Copilot CLI.

59
00:03:40.960 --> 00:03:44.320
I'm on Mac OS here, so I've already brew installed it,

60
00:03:44.320 --> 00:03:45.920
so I've already followed this part.

61
00:03:46.560 --> 00:03:48.320
And then you can see the commands you get.

62
00:03:48.880 --> 00:03:52.560
There's a couple of concepts here in Copilot, which we might cover quickly.

63
00:03:53.520 --> 00:03:56.640
When you start initially, you do this `copilot init`.

64
00:03:56.640 --> 00:04:00.960
If I go `copilot init`, it's going to ask me if I want to create an application,

65
00:04:01.520 --> 00:04:04.640
and then it's going to ask me for my Dockerfile,

66
00:04:04.640 --> 00:04:07.200
and then it's going to go ahead and deploy everything.

67
00:04:07.200 --> 00:04:10.800
And it's going to ask me, give me a few options here.

68
00:04:10.800 --> 00:04:14.720
So let me just give an example here.

69
00:04:14.720 --> 00:04:18.160
So I'm just going to say test, application name test.

70
00:04:18.160 --> 00:04:22.320
It asks me what kind of workload represents my architecture.

71
00:04:22.320 --> 00:04:26.400
So it's showing me here that I can have like a web service backed by AppRunner

72
00:04:26.960 --> 00:04:31.840
or a web service backed by ECS on Fargate with a load balancer in front of it.

73
00:04:32.880 --> 00:04:35.760
Or I can have a back end service, which is ECS on Fargate.

74
00:04:35.760 --> 00:04:40.320
So it doesn't have an internet facing connectivity.

75
00:04:40.320 --> 00:04:42.880
And then it can have like background services,

76
00:04:42.880 --> 00:04:46.240
like something pulling off a queue or a scheduled job.

77
00:04:46.240 --> 00:04:49.120
So if I run one of these things, it'll ask me for a name.

78
00:04:49.120 --> 00:04:54.480
By the way, this wizard is also, it has this question mark for help, which is pretty good.

79
00:04:55.120 --> 00:04:59.040
At every step, it'll give you more details about all these configuration options and what they do.

80
00:04:59.040 --> 00:05:00.800
Let's say I call this service one.

81
00:05:02.560 --> 00:05:04.560
And then it asks me which Dockerfile I want.

82
00:05:04.560 --> 00:05:06.320
So there's a couple of concepts here.

83
00:05:06.320 --> 00:05:07.760
It's got application.

84
00:05:07.760 --> 00:05:11.920
Within the application, there's a service and you can have multiple services within your application.

85
00:05:11.920 --> 00:05:13.600
And those could be microservices.

86
00:05:13.600 --> 00:05:16.800
So it could be a front end and then you might have an API gateway.

87
00:05:16.800 --> 00:05:21.760
And then you might have other services that talk to each other and it will set up all that for us.

88
00:05:22.400 --> 00:05:25.360
So an application is almost like a workspace, right?

89
00:05:26.960 --> 00:05:27.440
Yeah, exactly.

90
00:05:27.440 --> 00:05:28.320
That's a good way to look at it.

91
00:05:28.880 --> 00:05:29.760
Cancel out of that.

92
00:05:29.760 --> 00:05:34.400
Because we did a quick dry run for this earlier on, actually, it was more than a dry run.

93
00:05:34.400 --> 00:05:38.800
It was a bit of a failed attempt where we explored it, a few different AppRunner concepts.

94
00:05:38.800 --> 00:05:44.480
And one of the things we realized is that if you want to use custom domains for an internet facing

95
00:05:44.480 --> 00:05:48.880
application, the default setup doesn't work out of the box.

96
00:05:48.880 --> 00:05:53.840
So if you just do copilot in it, it'll create that application for you, but it doesn't give you the

97
00:05:53.840 --> 00:05:57.440
option of using a custom domain and it's difficult to apply it after the effect.

98
00:05:57.440 --> 00:06:01.600
So there's this, the better way to set up a copilot application for the first time

99
00:06:01.600 --> 00:06:06.320
seems to be to use `copilot app init` first.

100
00:06:06.320 --> 00:06:11.280
And once you do that, it will allow you to specify your domain.

101
00:06:11.280 --> 00:06:14.400
When you deploy an application to it, you can use your custom domain.

102
00:06:15.280 --> 00:06:19.360
So it's more of a step by step because when you do `copilot app init`, it doesn't create any

103
00:06:19.360 --> 00:06:22.000
services, it just creates the workspace as you call it.

104
00:06:22.560 --> 00:06:26.080
And then you later have to go and add services in it.

105
00:06:26.080 --> 00:06:28.240
So you can add services into that workspace.

106
00:06:29.520 --> 00:06:33.840
So it takes a little bit of time to get those concepts in your head, but you've got your

107
00:06:33.840 --> 00:06:36.080
application, your services in your application.

108
00:06:36.080 --> 00:06:37.920
And then the third thing is you've got environments.

109
00:06:37.920 --> 00:06:41.760
So you have your test environment, your QA environment, production environment.

110
00:06:41.760 --> 00:06:46.880
We can start with our `copilot app init` and let's put a domain in.

111
00:06:46.880 --> 00:06:53.280
We're using an AWS account that has a domain registered with route 53 and the hosted zone

112
00:06:53.280 --> 00:06:55.040
for that is in the same account.

113
00:06:55.040 --> 00:07:00.000
So that makes it easier when it comes to creating certificates and we'll see how that works.

114
00:07:00.640 --> 00:07:01.920
So let's get cracking then.

115
00:07:01.920 --> 00:07:06.320
So we've got an awsbites.click domain, which we can use.

116
00:07:06.320 --> 00:07:07.920
So let's give that a go.

117
00:07:07.920 --> 00:07:09.680
It's going to check that we own it first.

118
00:07:09.680 --> 00:07:13.040
Let's just call our application copilot app.

119
00:07:13.920 --> 00:07:17.680
And now it says it's proposing infrastructure changes, which is not a term that you would

120
00:07:17.680 --> 00:07:21.360
understand by just from normal AWS usage.

121
00:07:21.360 --> 00:07:24.800
What it's basically doing is creating CloudFormation templates.

122
00:07:24.800 --> 00:07:29.520
It says it's creating an admin role for CloudFormation, which is good.

123
00:07:29.520 --> 00:07:32.640
And then it's adding name server records for our domain.

124
00:07:38.720 --> 00:07:39.360
So basically it requires us to have an hosted zone on route 53 with that particular domain, right?

125
00:07:43.440 --> 00:07:44.000
If we go into AWS, we can actually look into CloudFormation and see what is happening under the hood.

126
00:07:44.880 --> 00:07:48.080
So here's one stack being created by copilot app.

127
00:07:49.440 --> 00:07:52.640
And in here, we've got the admin role it mentioned.

128
00:07:52.640 --> 00:07:56.400
It's creating a hosted zone and it's creating an execution role.

129
00:07:56.400 --> 00:07:59.360
So we can look, click into that hosted zone even.

130
00:07:59.360 --> 00:07:59.760
Okay.

131
00:07:59.760 --> 00:08:03.760
This hosted zone is basically a sub domain over our main domain.

132
00:08:04.480 --> 00:08:05.280
Yeah.

133
00:08:05.280 --> 00:08:11.040
So we've also got our main domains hosted zone in here in awsbites.click.

134
00:08:11.040 --> 00:08:17.680
It hasn't created a delegate NS record in here yet, but I expect that it will.

135
00:08:17.680 --> 00:08:21.360
These name servers are publicly available and anyone who's doing DNS queries against

136
00:08:21.360 --> 00:08:24.640
this domain, the records will come from these name servers.

137
00:08:25.520 --> 00:08:31.360
But this new one, our copilot-app.awsbites.click, that's in a different hosted

138
00:08:31.360 --> 00:08:32.080
zone.

139
00:08:32.080 --> 00:08:34.480
So that uses a different set of name servers.

140
00:08:34.480 --> 00:08:37.920
So we need to delegate from this one to the subdomains name servers.

141
00:08:38.320 --> 00:08:38.880
Okay.

142
00:08:38.880 --> 00:08:40.720
So this create is still in progress.

143
00:08:41.440 --> 00:08:44.400
It's weird the way it says stack set.

144
00:08:44.400 --> 00:08:49.520
I saw that it's creating stack sets and I'm wondering why does it need stack sets because

145
00:08:49.520 --> 00:08:54.640
stack sets are normally when you need to deploy a stack across multiple regions in AWS.

146
00:08:54.640 --> 00:08:59.840
And it seems like it has support for creating some resources across region, like your ECR

147
00:08:59.840 --> 00:09:01.680
repository, where you're going to put container images.

148
00:09:02.640 --> 00:09:07.200
But I couldn't find anywhere in the documentation that explains why it was doing multi-region

149
00:09:08.080 --> 00:09:13.440
configuration by default or where the set of supported regions would be defined or how

150
00:09:13.440 --> 00:09:17.280
you would actually proceed and do a multi-region deployment with copilot.

151
00:09:17.280 --> 00:09:18.960
So it's a little bit strange.

152
00:09:18.960 --> 00:09:23.600
I wonder if it's just like future proofing in some way so that eventually they can support

153
00:09:24.320 --> 00:09:27.200
multi-region disaster recovery type deployments.

154
00:09:27.840 --> 00:09:29.440
Yeah, that's an interesting detail.

155
00:09:29.440 --> 00:09:29.840
Okay.

156
00:09:29.840 --> 00:09:34.720
It says it's complete and it also says it has added the NS records to delegate responsibility.

157
00:09:35.600 --> 00:09:39.120
What I like about this is that it gives you much more human readable output than just

158
00:09:39.120 --> 00:09:43.200
giving you the CloudFormation events raw.

159
00:09:43.200 --> 00:09:45.920
And I also like that it told you what to do next.

160
00:09:45.920 --> 00:09:48.640
Yeah, I think it's the usability and the developer experience.

161
00:09:48.640 --> 00:09:50.560
Somebody has put a lot of thought in here.

162
00:09:50.560 --> 00:09:53.360
So well done and thank you.

163
00:09:54.960 --> 00:09:55.760
So this is done.

164
00:09:55.760 --> 00:09:58.400
Let's have a quick look in our hosted zone.

165
00:09:58.400 --> 00:10:05.040
So the hosted zone, which was there before, it has been updated to add the delegate NS

166
00:10:05.040 --> 00:10:05.540
records.

167
00:10:06.640 --> 00:10:07.200
And that's it.

168
00:10:07.200 --> 00:10:08.560
So we don't have any application yet.

169
00:10:08.560 --> 00:10:11.280
All we've got is some foundational stuff set up.

170
00:10:11.280 --> 00:10:15.120
But now, as you said, Luciano, it's told us that the next step is to add the host

171
00:10:15.120 --> 00:10:17.440
and the next step is to run copilot init.

172
00:10:17.440 --> 00:10:18.480
So let's try that.

173
00:10:20.000 --> 00:10:25.680
Oh, by the way, this application we have, I just based it on the one that comes with

174
00:10:26.240 --> 00:10:27.600
the getting started documentation.

175
00:10:28.800 --> 00:10:29.840
That's what it looks like.

176
00:10:29.840 --> 00:10:30.160
Okay.

177
00:10:30.800 --> 00:10:33.760
Should we have a look at the Dockerfile as well very quickly?

178
00:10:33.760 --> 00:10:34.640
Yeah, let's do that.

179
00:10:34.640 --> 00:10:35.140
Yeah.

180
00:10:35.440 --> 00:10:36.720
So this is the Dockerfile.

181
00:10:36.720 --> 00:10:38.720
So it's almost as simple as you can get.

182
00:10:38.720 --> 00:10:40.320
It's using an Nginx web server.

183
00:10:40.320 --> 00:10:44.720
It's exposing port 80 and it's using all the default config in Nginx.

184
00:10:44.720 --> 00:10:48.400
And it's just overriding the index.html and adding an image.

185
00:10:50.160 --> 00:10:53.200
So it's literally just a static website backed by Nginx.

186
00:10:53.920 --> 00:10:54.420
Yep.

187
00:10:54.560 --> 00:10:57.760
So I think we can try and init.

188
00:10:58.800 --> 00:10:59.300
Okay.

189
00:10:59.680 --> 00:11:02.240
So we're going to go for a load balanced web service.

190
00:11:02.240 --> 00:11:06.240
So this is one that will use a load balancer rather than using AppRunner.

191
00:11:06.240 --> 00:11:11.280
I think this is a kind of a more interesting example and probably more common given that

192
00:11:11.280 --> 00:11:13.280
this is our static application.

193
00:11:13.280 --> 00:11:14.240
Let's call this front end.

194
00:11:15.120 --> 00:11:19.840
And it's asking us whether we want to use a Dockerfile or an existing container image.

195
00:11:19.840 --> 00:11:22.000
We want to use our Dockerfile because we haven't built the image yet.

196
00:11:22.880 --> 00:11:23.440
So let's try that.

197
00:11:24.400 --> 00:11:24.900
Aha.

198
00:11:24.960 --> 00:11:30.640
It's interesting that it says that it's detected that I am on ARM 64, but it's going to set

199
00:11:30.640 --> 00:11:33.280
the platform to Linux x86 64 instead.

200
00:11:33.280 --> 00:11:34.880
Yeah, that's a very common problem.

201
00:11:40.400 --> 00:11:44.400
Yeah, that's a very common mistake that it's always very hard to troubleshoot because of course you need to build the container for the target architecture, but by default it's

202
00:11:44.400 --> 00:11:48.880
going to be the container for your system architecture, the one you are working on.

203
00:11:48.880 --> 00:11:53.440
So if there is a mismatch, you might end up with a container that is going to fail in

204
00:11:53.440 --> 00:11:55.360
very weird ways in production.

205
00:12:01.280 --> 00:12:01.780
We're going to do x86, but it says here that we can update a manifest if we want to change that.

206
00:12:02.640 --> 00:12:03.140
Okay.

207
00:12:03.140 --> 00:12:05.620
Please change the platform field in your workload manifest.

208
00:12:06.820 --> 00:12:09.380
So maybe we can have a look at that while it's doing the next step because it says,

209
00:12:09.380 --> 00:12:11.140
would you like to deploy a test environment?

210
00:12:11.140 --> 00:12:12.340
And I would say yes.

211
00:12:19.940 --> 00:12:20.740
By the way, that's another interesting concept that it supports this idea of environments out of the box.

212
00:12:22.260 --> 00:12:27.860
By environment, we mean a development environment, QA staging, whatever you want to call it,

213
00:12:27.860 --> 00:12:32.020
and production or more custom environments if you want to.

214
00:12:32.020 --> 00:12:32.520
Yeah.

215
00:12:32.660 --> 00:12:36.820
And my understanding is that it will give you a set of best practices there as well,

216
00:12:36.820 --> 00:12:39.060
like isolate them in different domains.

217
00:12:39.620 --> 00:12:40.120
Yeah.

218
00:12:40.120 --> 00:12:42.820
I think it creates maybe different VPCs as well.

219
00:12:42.820 --> 00:12:45.860
Yeah, that's a good point actually.

220
00:12:45.860 --> 00:12:49.220
We can switch back to the docs actually, because we didn't really focus enough on what's

221
00:12:49.220 --> 00:12:49.720
in the docs.

222
00:12:50.420 --> 00:12:56.900
So the docs will show you what the different concepts are, the things we talked about,

223
00:12:56.900 --> 00:12:58.820
applications, environments, services.

224
00:12:58.820 --> 00:13:03.540
It mentions that it has application-wide resources that are not specific to environments, like

225
00:13:03.540 --> 00:13:05.140
your ECR repositories, buckets.

226
00:13:07.780 --> 00:13:12.100
And by the way, you also have these handy utilities like Copilot App Show or Copilot

227
00:13:12.100 --> 00:13:17.460
Service Show, which would just give you a text summary of an application or an environment,

228
00:13:17.460 --> 00:13:19.700
I think, or a service.

229
00:13:21.380 --> 00:13:27.780
So if we look at developing, we've got the ability to add additional resources to the

230
00:13:27.780 --> 00:13:29.460
additional resources.

231
00:13:29.460 --> 00:13:36.420
So I was kind of surprised to see this, but you can add a bucket or a DBDB table or an

232
00:13:36.420 --> 00:13:40.740
Aurora serverless cluster using the copilot storage init command.

233
00:13:40.740 --> 00:13:41.540
I haven't tried this.

234
00:13:42.180 --> 00:13:45.060
But you could also add custom resources, right?

235
00:13:45.620 --> 00:13:52.500
If you want to do your own CloudFormation, row, just add whatever you need, right?

236
00:13:53.540 --> 00:13:54.040
Yeah.

237
00:13:54.040 --> 00:14:00.040
So we've got here the concept of add-on templates, which allow you to put in essentially raw

238
00:14:00.040 --> 00:14:00.760
CloudFormation.

239
00:14:01.240 --> 00:14:04.520
So it supports then properties, resources, outputs, parameters.

240
00:14:07.400 --> 00:14:11.560
Interestingly, there is another section in here on overrides.

241
00:14:11.560 --> 00:14:14.760
It talks here about CloudFormation overrides.

242
00:14:15.480 --> 00:14:19.480
There's also the concept of CDK overrides.

243
00:14:19.480 --> 00:14:25.000
So CDK overrides actually allow you to put CDK components into your application as well.

244
00:14:25.000 --> 00:14:29.720
And then there's task definition overrides, which I guess allow you, if you discover that

245
00:14:29.720 --> 00:14:36.200
the generated ECS task definition isn't exactly what you want, you can go in and customize

246
00:14:36.200 --> 00:14:37.960
it at a more granular level.

247
00:14:39.400 --> 00:14:42.440
So this manifest was mentioned, so let's have a quick look at it.

248
00:14:42.440 --> 00:14:51.480
So the manifest, it looks like this is just the, this is the declaration for our whole

249
00:14:51.480 --> 00:14:51.980
application.

250
00:14:52.840 --> 00:14:57.240
And if you were doing ECS from scratch or Fargate from scratch, you'd have to do a lot

251
00:14:57.240 --> 00:14:59.080
of CloudFormation or Terraform.

252
00:15:00.600 --> 00:15:07.400
But this is like a very concise, higher level declaration of an application that avoids

253
00:15:07.400 --> 00:15:08.120
you having to do that.

254
00:15:08.120 --> 00:15:12.120
So the pieces in here are the HTTP setup.

255
00:15:12.120 --> 00:15:14.760
So you could set up the path health checks.

256
00:15:16.280 --> 00:15:19.240
You specify your image config and then the container config.

257
00:15:20.440 --> 00:15:26.440
So this one is using a quarter of a CPU, half a gig of RAM, it's x86, and it's going to

258
00:15:26.440 --> 00:15:28.840
run one task by default, it looks like.

259
00:15:29.880 --> 00:15:34.040
It's going to support ECS exec, which is nice because then we can shell into containers

260
00:15:34.040 --> 00:15:34.760
if we need to.

261
00:15:34.760 --> 00:15:40.680
Oh yeah, and for microservice fans, the way it supports communication between microservices

262
00:15:40.680 --> 00:15:43.400
is using ECS service connect.

263
00:15:43.400 --> 00:15:50.600
So you turn that on, it allows you to address other microservices and it will use ECS service

264
00:15:50.600 --> 00:15:56.840
connect, which uses Cloud Map, which is like internal DNS and a load balancer.

265
00:15:56.840 --> 00:15:59.640
The one also supports HTTPS, right?

266
00:15:59.640 --> 00:16:00.440
Across server.

267
00:16:00.440 --> 00:16:06.600
This is with self-signed certificates or something like that?

268
00:16:12.280 --> 00:16:12.840
I don't think that's provided by service connect out of the box, but yeah, there is something in here.

269
00:16:14.120 --> 00:16:18.680
Yeah, it may be under the load balance web service.

270
00:16:18.680 --> 00:16:19.480
Here we go.

271
00:16:19.480 --> 00:16:23.480
Yeah, if you look under load balance web service, there's some things that are quite nice about

272
00:16:23.480 --> 00:16:24.360
the documentation.

273
00:16:24.360 --> 00:16:29.000
So when you go in here, you can see sample configurations for lots of different workload

274
00:16:29.000 --> 00:16:30.520
types.

275
00:16:30.520 --> 00:16:36.360
So you've got basic configuration and then a manifest with a domain and then examples

276
00:16:36.360 --> 00:16:39.240
of configuring larger containers, auto scaling.

277
00:16:41.640 --> 00:16:45.480
And if we go further to the right, we've got end to end encryption.

278
00:16:46.600 --> 00:16:48.440
So I think this is what you were getting at.

279
00:16:48.440 --> 00:16:49.160
Right.

280
00:16:49.160 --> 00:16:49.480
Okay.

281
00:16:49.480 --> 00:16:51.800
So you still need to provide a little bit more configuration.

282
00:16:53.240 --> 00:16:55.640
It seems to be using Envoy as a sidecar.

283
00:16:56.520 --> 00:16:57.080
Okay.

284
00:16:57.080 --> 00:16:57.640
Interesting.

285
00:17:05.960 --> 00:17:06.520
Our deployment, meanwhile, is still chugging away, but we have this very nice summary of what it's doing.

286
00:17:15.640 --> 00:17:17.240
Yeah, I don't know how I feel about this YAML because on one side is another type of, I don't know, infrastructure as code.

287
00:17:17.240 --> 00:17:22.600
Let's call it this way, another specification that you will need to learn and get familiar

288
00:17:22.600 --> 00:17:28.360
with, but at the same time, it's much more friendly than it would be if you just go with

289
00:17:28.360 --> 00:17:32.120
CloudFormation, especially if it's the first time that you're trying to do something like

290
00:17:32.120 --> 00:17:32.360
this.

291
00:17:33.400 --> 00:17:34.840
I wonder where this applies.

292
00:17:34.840 --> 00:17:35.080
Yeah.

293
00:17:35.080 --> 00:17:39.400
Is it for people who just don't want to get bogged down in CloudFormation all the time?

294
00:17:39.400 --> 00:17:45.080
I can certainly understand why people wouldn't want to, but there's also a lot of options

295
00:17:45.080 --> 00:17:45.800
for containers.

296
00:17:45.800 --> 00:17:54.840
Like I've deployed lots of different ECS clusters and services, and it's still not trivial to

297
00:17:54.840 --> 00:17:56.760
configure and deploy.

298
00:17:56.760 --> 00:17:59.400
There's always something that's subtly different between setups.

299
00:17:59.960 --> 00:18:03.240
So I can understand the appeal of making that a bit simpler.

300
00:18:03.240 --> 00:18:08.920
Also, I can imagine if you were migrating a load of on-premises workloads to the cloud

301
00:18:08.920 --> 00:18:15.480
with AWS, you don't want to have to configure all that syntax yourself.

302
00:18:15.480 --> 00:18:19.640
If you could use something like this, it could make the job a little bit easier.

303
00:18:20.600 --> 00:18:24.600
And maybe a good question, maybe somebody out there knows, but there is another tool

304
00:18:24.600 --> 00:18:27.000
that AWS has called App2Container.

305
00:18:27.000 --> 00:18:28.120
I don't know if you've seen that one.

306
00:18:28.680 --> 00:18:29.240
I haven't.

307
00:18:30.120 --> 00:18:38.440
But it's partly designed for if you've got on-premises workloads like Java applications

308
00:18:38.440 --> 00:18:43.640
or.NET applications, it allows you to containerize those in order to move them to AWS.

309
00:18:43.640 --> 00:18:44.520
Okay.

310
00:18:44.520 --> 00:18:49.160
So I think it's doing it a little bit like Copilot, but it's more aimed at detecting

311
00:18:49.160 --> 00:18:54.120
your Spring Boot application configuration, packaging it, and launching it into ECS.

312
00:18:55.320 --> 00:18:56.040
Okay, interesting.

313
00:18:56.040 --> 00:19:01.080
So it's probably more of a migration tool than a more general part was stored.

314
00:19:01.720 --> 00:19:02.680
What has it actually done?

315
00:19:03.400 --> 00:19:04.760
It talks about Fargate.

316
00:19:04.760 --> 00:19:06.440
It's creating load balancer resources.

317
00:19:06.440 --> 00:19:14.280
It's created HTTP and HTTPS listener rules, CloudWatch logs, and it's created the ECS

318
00:19:14.280 --> 00:19:15.080
service.

319
00:19:15.080 --> 00:19:20.440
So the ECS service, it's in the middle of creating that and waiting for the desired

320
00:19:20.440 --> 00:19:21.480
task to be running.

321
00:19:23.880 --> 00:19:24.920
So it has a target group.

322
00:19:27.400 --> 00:19:29.320
Yeah, so it's almost there, I would say.

323
00:19:31.800 --> 00:19:32.520
What about...

324
00:19:32.520 --> 00:19:33.480
DNS?

325
00:19:35.480 --> 00:19:37.160
Didn't see anything relating to DNS.

326
00:19:37.960 --> 00:19:42.760
I'm curious to look in the console and see what it looks like from the raw CloudFormation

327
00:19:42.760 --> 00:19:43.260
view.

328
00:19:43.960 --> 00:19:50.360
If I understand correctly, what we expect to have at the end is something like test.copilot.

329
00:19:52.040 --> 00:19:52.760
awsbites, what did we call it?

330
00:19:52.760 --> 00:19:53.260
.clicks?

331
00:19:53.800 --> 00:19:54.300
.click, yeah.

332
00:19:55.800 --> 00:20:00.360
Right, so it needs to create that domain as well and map it to the AWS.

333
00:20:00.360 --> 00:20:04.120
It needs to create that domain as well and map it to this particular environment, right?

334
00:20:06.120 --> 00:20:07.240
Yeah, I think so.

335
00:20:07.240 --> 00:20:10.040
Yeah, well, I would expect an alias pointing to that load balancer.

336
00:20:13.240 --> 00:20:14.760
So this is our stack.

337
00:20:14.760 --> 00:20:16.840
Maybe we can have a quick look at the template.

338
00:20:19.400 --> 00:20:24.040
So does it have Route 53 resources?

339
00:20:24.040 --> 00:20:26.200
Yes, it has a record set.

340
00:20:26.200 --> 00:20:30.200
And does it have a certificate?

341
00:20:33.000 --> 00:20:33.960
No, it doesn't.

342
00:20:35.480 --> 00:20:39.400
Okay, this is going to be interesting then to see what we get in the end.

343
00:20:41.960 --> 00:20:44.440
Maybe because it did create a star certificate.

344
00:20:47.000 --> 00:20:48.360
Did it create a star certificate?

345
00:20:49.800 --> 00:20:50.300
Yes.

346
00:20:51.400 --> 00:20:52.600
Well, no, it created test.

347
00:20:52.600 --> 00:20:56.120
It has one for the test environment created.

348
00:20:56.120 --> 00:20:58.680
Okay, but it's not part of that stack that we are developing.

349
00:20:58.680 --> 00:20:59.080
Must be.

350
00:21:03.000 --> 00:21:04.280
Let's see what the CLI says.

351
00:21:04.920 --> 00:21:06.040
Okay, it says it's done.

352
00:21:06.040 --> 00:21:08.120
Oh yeah, and it's giving us the address.

353
00:21:08.680 --> 00:21:11.880
So our address is pretty much what you said.

354
00:21:12.760 --> 00:21:14.440
It's a bit of a mouthful, but front end.

355
00:21:15.080 --> 00:21:16.600
So that's the service name.

356
00:21:16.600 --> 00:21:18.360
.test, which is the environment name.

357
00:21:18.360 --> 00:21:20.680
.copilot-app, which is the application name.

358
00:21:20.680 --> 00:21:23.400
And then the domain, awsbites.click.

359
00:21:24.440 --> 00:21:25.160
Let's click on it.

360
00:21:28.440 --> 00:21:29.160
It's working.

361
00:21:30.040 --> 00:21:30.540
Nice.

362
00:21:31.480 --> 00:21:32.360
Why are we surprised?

363
00:21:33.080 --> 00:21:38.280
I am surprised that it is probably creating some kind of star certificate because this

364
00:21:38.280 --> 00:21:40.840
is called frontend.test, right?

365
00:21:40.840 --> 00:21:45.640
So it didn't create a TLS certificate for frontend.test, but just test.

366
00:21:45.640 --> 00:21:50.360
So I wonder if this certificate also contains asterisk.test.

367
00:21:51.480 --> 00:21:51.880
You're right.

368
00:21:51.880 --> 00:21:52.360
It does.

369
00:21:52.360 --> 00:21:52.920
Okay, perfect.

370
00:21:52.920 --> 00:21:53.420
Yeah.

371
00:21:55.400 --> 00:21:58.520
I guess that's, I'm sure that certificate must have been in this template.

372
00:21:59.240 --> 00:22:01.400
If I look in resources and search for cert.

373
00:22:03.720 --> 00:22:05.640
So was it in the previous stack?

374
00:22:06.280 --> 00:22:11.000
So probably there is a stack for the environment and then a stack for the specific.

375
00:22:12.040 --> 00:22:14.360
Yeah, you're completely correct.

376
00:22:14.360 --> 00:22:17.400
There's a stack for the environment and a stack for the service.

377
00:22:17.400 --> 00:22:20.200
And it was created in the previous stack five minutes ago.

378
00:22:20.200 --> 00:22:20.920
We didn't even notice.

379
00:22:21.800 --> 00:22:22.680
Okay, good.

380
00:22:23.560 --> 00:22:26.840
I'm curious to have a quick look at the load balancer just to see what it looks like.

381
00:22:33.240 --> 00:22:33.640
So it did create a significant number of resources for us, which is probably worth highlighting, right?

382
00:22:33.640 --> 00:22:39.240
That we got a VPC fully created from scratch with all the subnets and everything else.

383
00:22:40.280 --> 00:22:43.080
And maybe there are questionees, we might check in a second.

384
00:22:43.080 --> 00:22:44.920
If it did create a NAT gateway or not.

385
00:22:46.360 --> 00:22:47.400
Let's have a look at that.

386
00:22:47.400 --> 00:22:49.480
Then it did create a load balancer.

387
00:22:49.480 --> 00:22:58.920
It did create DNS records, certificates, Fargate cluster, Fargate tasks, built our container,

388
00:22:58.920 --> 00:23:05.400
deployed it into a registry and kind of connected all the dots, even supporting a multi-environment

389
00:23:06.120 --> 00:23:06.680
setup.

390
00:23:06.680 --> 00:23:11.880
Right now we just deployed a test, we call it, but we could deploy QA in production,

391
00:23:11.880 --> 00:23:12.380
right?

392
00:23:12.380 --> 00:23:16.000
Yeah, I guess so.

393
00:23:16.000 --> 00:23:19.680
And then we could change the number of containers in production so that it's more than just

394
00:23:19.680 --> 00:23:23.440
one runs across multiple availability zones, handles.

395
00:23:23.440 --> 00:23:25.360
We've even put in auto scaling if we want to.

396
00:23:26.560 --> 00:23:30.880
What I'm slightly confused by here is that it adds another listener.

397
00:23:32.000 --> 00:23:39.520
So it has a HTTP port 80 listener as well, which also seems to forward to the same target

398
00:23:39.520 --> 00:23:41.760
group as the HTTPS listener.

399
00:23:41.760 --> 00:23:42.240
All right.

400
00:23:42.240 --> 00:23:43.520
It doesn't do a redirect.

401
00:23:44.560 --> 00:23:48.000
It doesn't do a redirect, but it gave me a 503.

402
00:23:48.640 --> 00:23:50.880
Our other one seems still to be working.

403
00:23:50.880 --> 00:23:55.600
And if you use this one, but on HTTP, what happens if you use that domain?

404
00:23:55.600 --> 00:23:56.640
But HTTP.

405
00:23:56.640 --> 00:23:57.600
Well, good question.

406
00:23:57.600 --> 00:23:58.320
Yep.

407
00:23:58.320 --> 00:23:59.600
Is it using like host header?

408
00:24:00.960 --> 00:24:01.280
Okay.

409
00:24:01.280 --> 00:24:02.880
Does it redirect it somehow?

410
00:24:03.680 --> 00:24:05.760
Is NGINX doing the redirect in that case?

411
00:24:11.120 --> 00:24:11.840
I don't think so because I think NGINX is just on port 80 for what I could tell from that Dockerfile.

412
00:24:12.960 --> 00:24:14.240
Yes, it is.

413
00:24:20.800 --> 00:24:25.680
But I'm just wondering if it has, if it can check the X headers to see where it came from and redirect like the forwarded by headers.

414
00:24:26.480 --> 00:24:27.040
I don't know.

415
00:24:29.280 --> 00:24:34.320
I suppose one thing I'd like to do is turn off port 80 on the load balancer or on the

416
00:24:34.320 --> 00:24:36.960
port 80 on the load balancer or else ensure that it's just a redirect.

417
00:24:37.920 --> 00:24:40.000
Should we try creating a pipeline?

418
00:24:40.800 --> 00:24:42.960
We should check the NAT gateway first.

419
00:24:42.960 --> 00:24:43.840
Oh, the NAT.

420
00:24:44.720 --> 00:24:49.680
But anyway, I want to remark that we did a little bit of preparation.

421
00:24:49.680 --> 00:24:51.920
So that's of course to be mentioned.

422
00:24:51.920 --> 00:24:57.440
But other than that, we spent slightly more than 30 minutes to have all these things configured.

423
00:24:57.440 --> 00:25:02.720
And we have a container up and running in AWS with a fairly decent setup that we could

424
00:25:02.720 --> 00:25:07.280
probably take into like production with confidence.

425
00:25:08.000 --> 00:25:09.680
So that's fairly impressive.

426
00:25:09.680 --> 00:25:10.240
It's not bad.

427
00:25:10.800 --> 00:25:11.520
Not bad at all.

428
00:25:13.200 --> 00:25:17.440
In the VPC resources, we can see the internet gateway that it created.

429
00:25:18.240 --> 00:25:21.200
We can also see if there's a NAT gateway.

430
00:25:21.200 --> 00:25:23.760
And I'm happy to report that there's no NAT gateway.

431
00:25:23.760 --> 00:25:27.440
So you don't have to worry about mortgaging the house to pay for it.

432
00:25:32.240 --> 00:25:36.080
But that also means that our container is not going to be able to reach out to the internet if it needs to, I don't know, download anything or call an API, right?

433
00:25:36.080 --> 00:25:38.320
Yeah, which is a nice default.

434
00:25:39.120 --> 00:25:43.680
But I guess if we need to, then yeah, that would involve extra configuration.

435
00:25:43.680 --> 00:25:49.040
But you can provide if you do your VPC configuration separately, and lots of people will, or they'll

436
00:25:49.040 --> 00:25:51.600
have existing VPCs, you can provide those inputs.

437
00:25:51.600 --> 00:25:54.160
You don't have to get Copilot to create it.

438
00:25:54.160 --> 00:25:59.120
So we can see here that we've got this new resource map is pretty handy.

439
00:25:59.120 --> 00:26:05.280
It's showing us that we've got a public subnet and a private subnet, two availability zones.

440
00:26:06.480 --> 00:26:10.640
And yeah, it's from the public, so it must be the internet gateway route.

441
00:26:10.640 --> 00:26:11.920
Yeah, that's what it is.

442
00:26:14.160 --> 00:26:16.880
Okay, anything else we want to check?

443
00:26:16.880 --> 00:26:19.440
Or we try to automate this with a beautiful pipeline?

444
00:26:19.440 --> 00:26:20.080
Let's see.

445
00:26:20.080 --> 00:26:24.240
Let's have a look at the pipeline.

446
00:26:24.240 --> 00:26:24.740
Okay.

447
00:26:28.640 --> 00:26:33.760
So one thing I guess to understand is that it allows you to use Copilot to set up a code

448
00:26:33.760 --> 00:26:34.260
pipeline.

449
00:26:35.680 --> 00:26:39.040
And it supports GitHub, Bitbucket, or AWS CodeCommit.

450
00:26:40.320 --> 00:26:44.240
And it will deploy to your environments and runs automated testing.

451
00:26:45.040 --> 00:26:46.240
So it's code pipeline only.

452
00:26:46.240 --> 00:26:51.040
If you're using GitHub actions, you're out of luck.

453
00:26:51.040 --> 00:26:54.320
You got to do that yourself.

454
00:26:54.320 --> 00:26:58.080
But you can still use GitHub for repository, basically.

455
00:26:58.080 --> 00:27:00.960
Copilot pipeline init is the first step.

456
00:27:01.680 --> 00:27:02.960
So let's try this.

457
00:27:03.600 --> 00:27:05.280
Let's call this container front end main.

458
00:27:05.280 --> 00:27:07.600
That seems like a decent default.

459
00:27:08.720 --> 00:27:12.320
Okay, so what kind of continuous delivery pipeline is this?

460
00:27:13.600 --> 00:27:15.600
Workloads or environments?

461
00:27:15.600 --> 00:27:19.360
Deploys the service or jobs in your workspace or deploys the environments in your workspace?

462
00:27:19.360 --> 00:27:22.000
That's a bit obscure to me what it means.

463
00:27:22.000 --> 00:27:23.440
What's the difference between the two?

464
00:27:24.480 --> 00:27:26.240
It says we can do question mark for help.

465
00:27:27.840 --> 00:27:32.000
The help says a pipeline can be set up to deploy either your workloads or your environments.

466
00:27:32.640 --> 00:27:33.120
Okay.

467
00:27:33.120 --> 00:27:34.560
It's not really telling us anything new.

468
00:27:37.120 --> 00:27:38.080
Which would you pick?

469
00:27:38.080 --> 00:27:39.920
I don't know what the difference is.

470
00:27:39.920 --> 00:27:41.200
We go back to the docs?

471
00:27:41.200 --> 00:27:42.880
Yeah, let's have a quick look at the docs.

472
00:27:42.880 --> 00:27:45.040
We must be desperate if we're checking the docs.

473
00:27:45.040 --> 00:27:45.760
Okay.

474
00:27:45.760 --> 00:27:48.320
Pipeline configurations are created at a workspace level.

475
00:27:48.320 --> 00:27:51.760
If your workspace has a single service, then your pipeline will be triggered only for that service.

476
00:27:51.760 --> 00:27:55.680
If you've got multiple services, then the pipeline will build all the services in your workspace.

477
00:27:56.480 --> 00:27:57.360
That makes sense.

478
00:27:57.920 --> 00:28:02.560
But what's the thing about pipe applications versus environments?

479
00:28:03.120 --> 00:28:03.840
It doesn't tell us.

480
00:28:03.840 --> 00:28:05.920
It doesn't say anything about this question in the documentation.

481
00:28:05.920 --> 00:28:09.760
I have a feeling that you could probably have different pipelines for different environments.

482
00:28:10.400 --> 00:28:10.880
Yeah.

483
00:28:10.880 --> 00:28:13.920
It's not too obvious which one is which.

484
00:28:13.920 --> 00:28:19.360
Well, as opposed to have like one global pipeline that maybe allows you to promote things across environments.

485
00:28:19.360 --> 00:28:23.280
I wonder if maybe this is a new feature that isn't in the latest documentation yet or something.

486
00:28:26.480 --> 00:28:26.800
Okay.

487
00:28:26.800 --> 00:28:27.920
So let's try this again.

488
00:28:28.960 --> 00:28:29.920
Go for workloads.

489
00:28:30.560 --> 00:28:32.880
And which environments would we like to add to the pipeline?

490
00:28:33.680 --> 00:28:34.880
Oh, we've only got one at the moment.

491
00:28:34.880 --> 00:28:36.720
So we'll just use that one.

492
00:28:36.720 --> 00:28:37.120
Okay.

493
00:28:37.120 --> 00:28:38.640
That seems to be all good.

494
00:28:38.640 --> 00:28:40.400
And now we can deploy.

495
00:28:41.920 --> 00:28:45.040
Oh, commit and push the copilot directory to your repository first.

496
00:28:45.040 --> 00:28:50.400
All the copilot manifests gets pushed and has to be in your Git repo.

497
00:28:52.080 --> 00:28:52.400
Okay.

498
00:28:52.400 --> 00:28:55.120
So now we can do copilot pipeline deploy.

499
00:28:58.400 --> 00:28:58.720
Okay.

500
00:28:58.720 --> 00:29:00.560
And it says action required.

501
00:29:00.560 --> 00:29:06.400
I have to go to here to update the status of connection from pending to available.

502
00:29:06.400 --> 00:29:06.800
Okay.

503
00:29:06.800 --> 00:29:10.320
So this is for connecting to GitHub.

504
00:29:10.320 --> 00:29:13.120
So this is probably a one-off operation, right?

505
00:29:13.120 --> 00:29:14.640
For this particular pipeline.

506
00:29:14.640 --> 00:29:14.800
Yeah.

507
00:29:14.800 --> 00:29:19.520
So this is like basically the OAuth flow to connect to your GitHub repo.

508
00:29:20.400 --> 00:29:23.280
It's interesting that I pasted in this URL.

509
00:29:23.280 --> 00:29:29.200
It goes to the CodeSuite service and this lands me in, redirects me to the Stockholm region.

510
00:29:30.560 --> 00:29:31.360
For some region.

511
00:29:31.360 --> 00:29:32.240
Very random.

512
00:29:32.240 --> 00:29:32.720
Okay.

513
00:29:32.720 --> 00:29:35.120
Okay.

514
00:29:35.120 --> 00:29:37.520
Let's go back to home.

515
00:29:37.520 --> 00:29:39.120
And this one is pending.

516
00:29:39.120 --> 00:29:39.600
Okay.

517
00:29:40.320 --> 00:29:40.960
Connection.

518
00:29:48.960 --> 00:29:50.400
So I got to update this pending connection, which means I have to do an OAuth dance with GitHub, I imagine.

519
00:29:50.400 --> 00:29:51.600
Okay.

520
00:29:51.600 --> 00:29:59.920
So let's say install a new app, pick awsbites and do my multi-factor dance as well.

521
00:29:59.920 --> 00:30:00.240
Okay.

522
00:30:00.240 --> 00:30:07.200
So now that I've got the GitHub app configured, I can just hit connect.

523
00:30:07.200 --> 00:30:15.040
And then it knows how to talk to GitHub and set up web hooks to trigger the pipeline and

524
00:30:15.040 --> 00:30:15.840
all of that good stuff.

525
00:30:15.840 --> 00:30:18.240
Let's see what our...

526
00:30:18.240 --> 00:30:19.360
Oh, okay.

527
00:30:19.360 --> 00:30:21.120
So it says it has created the pipeline.

528
00:30:21.120 --> 00:30:24.080
So let's go into code pipelines, see what we've got there.

529
00:30:24.080 --> 00:30:24.560
Okay.

530
00:30:25.920 --> 00:30:27.760
So it is in progress.

531
00:30:27.760 --> 00:30:31.360
And it's the latest one is my latest commit, which adds the copilot directory.

532
00:30:31.360 --> 00:30:32.960
So this should be deploying.

533
00:30:33.600 --> 00:30:34.800
So what does it actually do?

534
00:30:34.800 --> 00:30:36.400
So it takes the source from GitHub.

535
00:30:36.400 --> 00:30:39.200
It's got the commit there and it's running a CodeBuild job.

536
00:30:40.080 --> 00:30:41.280
What does the CodeBuild job do?

537
00:30:41.280 --> 00:30:43.360
Probably builds the container, I imagine, right?

538
00:30:44.400 --> 00:30:45.040
So we'll look.

539
00:30:45.920 --> 00:30:46.400
Okay.

540
00:30:46.400 --> 00:30:46.960
Build details.

541
00:30:46.960 --> 00:30:49.360
We should be able to see the build spec here.

542
00:30:49.360 --> 00:30:50.000
I'm guessing.

543
00:30:51.440 --> 00:30:51.920
Okay.

544
00:30:51.920 --> 00:30:53.440
So that's in the source code.

545
00:30:53.440 --> 00:30:58.880
So we can go back to VS code to see that.

546
00:31:01.520 --> 00:31:02.880
Pipelines build spec.

547
00:31:04.880 --> 00:31:05.200
Okay.

548
00:31:05.200 --> 00:31:06.400
So what's this build spec?

549
00:31:09.600 --> 00:31:11.360
It downloads Copilot itself.

550
00:31:12.960 --> 00:31:13.840
Specific version.

551
00:31:15.360 --> 00:31:17.520
Runs the tests, but that's commented out right now.

552
00:31:18.480 --> 00:31:19.120
Post build.

553
00:31:19.120 --> 00:31:23.200
Okay.

554
00:31:23.200 --> 00:31:23.700
Ooh.

555
00:31:24.080 --> 00:31:25.040
It's converting.

556
00:31:25.040 --> 00:31:27.040
YAML to JSON, right?

557
00:31:27.040 --> 00:31:28.560
YAML to JSON using Ruby.

558
00:31:30.800 --> 00:31:31.920
That's why it needs Ruby.

559
00:31:33.600 --> 00:31:34.160
Okay.

560
00:31:34.160 --> 00:31:36.080
It's quite verbose.

561
00:31:37.440 --> 00:31:37.920
Okay.

562
00:31:37.920 --> 00:31:39.840
This is going through all the environments.

563
00:31:46.080 --> 00:31:46.580
So it's reading the environments from here, but we asked it to only run the test environment, didn't we?

564
00:31:46.580 --> 00:31:49.300
But okay, let's go have a look at that.

565
00:31:49.300 --> 00:31:50.900
It comes from the pipeline.

566
00:31:52.260 --> 00:31:53.620
The pipeline manifest.

567
00:31:53.620 --> 00:31:54.100
Okay.

568
00:31:54.100 --> 00:32:00.100
So I guess that's what dictates the environments, its stages, and then the name.

569
00:32:00.100 --> 00:32:02.740
So it's only going to pick out test because there is only test.

570
00:32:02.740 --> 00:32:06.180
But we can add more there to this array, I guess.

571
00:32:06.180 --> 00:32:06.660
Yeah.

572
00:32:06.660 --> 00:32:07.060
Okay.

573
00:32:07.060 --> 00:32:11.860
So here there is a similar concept where build spec is fairly complicated.

574
00:32:11.860 --> 00:32:17.540
So they kind of provide this higher level, simpler interface, which is the manifest YAML.

575
00:32:18.900 --> 00:32:19.400
Yeah.

576
00:32:24.980 --> 00:32:29.220
It's interesting, though, that this build spec is part of your source code then instead of all of this, all of these steps being somehow folded into the Copilot CLI itself.

577
00:32:31.780 --> 00:32:32.580
That's true.

578
00:32:32.580 --> 00:32:33.460
Good point.

579
00:32:38.820 --> 00:32:43.620
Probably because they want to allow you to change things in there, like enable the test or I don't know.

580
00:32:50.980 --> 00:32:53.140
So from what I can see, it's basically doing Copilot package, which is generating the cloud information and not doing any deployment.

581
00:32:54.420 --> 00:32:59.460
I don't see it doing Docker build, though, but maybe that is happening as part of the

582
00:33:00.020 --> 00:33:00.420
package.

583
00:33:01.220 --> 00:33:03.380
Let's have a look, see how our pipeline is doing.

584
00:33:04.980 --> 00:33:05.860
Build logs.

585
00:33:05.860 --> 00:33:06.980
It's succeeded anyway.

586
00:33:06.980 --> 00:33:08.980
So what did it say?

587
00:33:10.340 --> 00:33:11.940
Oh, yeah, it does build the container image.

588
00:33:14.260 --> 00:33:19.860
And pushes it to ECR and it has also generated the stack, the cloud information stack and

589
00:33:19.860 --> 00:33:20.580
the parameters.

590
00:33:20.580 --> 00:33:21.300
Cool.

591
00:33:21.300 --> 00:33:23.460
But it did not deploy, did it?

592
00:33:24.340 --> 00:33:25.860
This was just the build step.

593
00:33:25.860 --> 00:33:28.100
So I think there's an additional step for deployment.

594
00:33:30.580 --> 00:33:31.140
So here is the deployment step.

595
00:33:31.140 --> 00:33:32.580
Which is in progress, though.

596
00:33:32.580 --> 00:33:33.940
We don't have to manually approve.

597
00:33:39.300 --> 00:33:43.220
We don't have to manually improve, but from what I can see by the manifest, you have the option for each stage to say whether it requires manual approval.

598
00:33:43.220 --> 00:33:44.180
That's pretty good.

599
00:33:44.180 --> 00:33:45.140
Yeah, nice.

600
00:33:47.540 --> 00:33:51.860
I still prefer GitHub actions, but it's pretty good.

601
00:33:57.540 --> 00:33:58.100
One thing we could test is to change that index HTML and I don't know, add a title or whatever.

602
00:33:58.100 --> 00:34:07.540
Commit again and then we should see another run of the pipeline and eventually we should

603
00:34:07.540 --> 00:34:10.500
land that change into the test environment.

604
00:34:11.220 --> 00:34:11.780
Aha.

605
00:34:11.780 --> 00:34:13.780
OK, so this is updating the CloudFormation stack.

606
00:34:14.420 --> 00:34:18.820
So this, OK, the deploy action is actually an AWS CloudFormation integration.

607
00:34:18.820 --> 00:34:19.860
It's not a CodeBuild job.

608
00:34:20.420 --> 00:34:22.820
That's why it took us directly to it.

609
00:34:22.820 --> 00:34:26.740
So it's taking the CloudFormation template that was generated in the previous step and

610
00:34:26.740 --> 00:34:29.940
the parameters and it's using the CloudFormation integration directly.

611
00:34:30.660 --> 00:34:30.980
OK.

612
00:34:31.620 --> 00:34:36.740
While that's happening, should we talk about our failed attempt or disappointing attempt

613
00:34:36.740 --> 00:34:37.460
with AppRunner?

614
00:34:38.180 --> 00:34:38.420
Yes.

615
00:34:38.420 --> 00:34:42.340
Earlier, because we've deliberately decided to use the load balancer here because we tried

616
00:34:42.340 --> 00:34:48.420
this earlier with AppRunner and we were recording and everything and it all went a little bit

617
00:34:49.620 --> 00:34:50.020
sour.

618
00:34:51.620 --> 00:34:52.500
To say the least.

619
00:34:52.500 --> 00:34:55.300
It went well to start with because it created AppRunner.

620
00:34:55.300 --> 00:34:57.860
We were keen to see AppRunner because we haven't used it very much.

621
00:34:58.500 --> 00:34:59.780
We were keen to see how it would work.

622
00:35:01.460 --> 00:35:03.140
But it has a couple of flaws, right?

623
00:35:03.940 --> 00:35:06.180
At least the copilot experience with AppRunner.

624
00:35:06.180 --> 00:35:07.300
How would you describe it?

625
00:35:07.860 --> 00:35:09.780
Yeah, I think it wasn't too bad.

626
00:35:11.140 --> 00:35:16.180
Initially, I think it got a little bit tricky when we said, what do we do about domains?

627
00:35:16.180 --> 00:35:16.740
Yeah.

628
00:35:16.740 --> 00:35:23.300
And I think because AppRunner is, it almost looks like a PaaS, like a Heroku that tries

629
00:35:23.300 --> 00:35:26.900
to remove all the details.

630
00:35:26.900 --> 00:35:33.140
Like you don't get to see where is the load balancer, where is ACM, how does it generate

631
00:35:33.140 --> 00:35:37.700
certificates, how does it manage DNS and all that kind of stuff because they are happening

632
00:35:37.700 --> 00:35:41.300
in some kind of global AWS account that you don't get to control.

633
00:35:42.100 --> 00:35:42.420
Yeah.

634
00:35:42.420 --> 00:35:47.140
So a lot of the automation that we were expecting was not actually happening.

635
00:35:47.140 --> 00:35:51.780
It was more, for instance, OK, if you want to use this custom domain, you definitely

636
00:35:51.780 --> 00:35:56.180
can, but you need to basically create all these DNS records yourself.

637
00:35:57.140 --> 00:35:57.780
Yeah.

638
00:35:57.780 --> 00:36:01.300
Which, first of all, we didn't expect it.

639
00:36:01.300 --> 00:36:06.260
So it took us a while to figure out that literally was blocked waiting for us to creating

640
00:36:06.900 --> 00:36:08.660
these DNS records manually.

641
00:36:08.660 --> 00:36:13.460
And then it did take a while to actually validate the DNS records themselves.

642
00:36:13.460 --> 00:36:15.300
I think it took like 15 minutes.

643
00:36:15.300 --> 00:36:22.340
So we were wondering, are we doing something wrong or is it normal that it takes so long?

644
00:36:22.340 --> 00:36:28.500
Plus, we did a few mistakes with DNS ourselves because, of course, with DNS, there is always

645
00:36:28.500 --> 00:36:29.460
something that goes wrong.

646
00:36:29.460 --> 00:36:29.700
Right.

647
00:36:30.900 --> 00:36:35.460
So I don't know if I'm missing anything, but this is my recollection of what went wrong.

648
00:36:37.140 --> 00:36:38.100
Yeah, exactly.

649
00:36:38.100 --> 00:36:43.380
I think we just made an assumption, like at the start of this exercise, we use this

650
00:36:43.380 --> 00:36:47.620
`--domain` when creating the application to associate the Route 53 domain.

651
00:36:47.620 --> 00:36:49.540
And that worked so well for this one.

652
00:36:49.540 --> 00:36:54.820
But when we tried it with AppRunner, you'll notice in the documentation, this is all specific

653
00:36:54.820 --> 00:36:58.100
to the load balancer, well, it's our web service application type.

654
00:36:59.140 --> 00:37:04.820
And this is all nicely documented and it tells you how to use different domains for different

655
00:37:04.820 --> 00:37:07.700
environments, et cetera, what it works like under the hood.

656
00:37:07.700 --> 00:37:09.060
That's really nicely documented.

657
00:37:10.180 --> 00:37:12.340
You can also import your own existing certificate.

658
00:37:12.340 --> 00:37:18.660
But if you go down to this section, admittedly, we didn't read this before we tried it.

659
00:37:19.700 --> 00:37:22.660
The request-driven web service, that's the AppRunner version.

660
00:37:23.220 --> 00:37:25.540
It says that you can also add a custom domain for this.

661
00:37:26.340 --> 00:37:33.300
But the way it works is that you specify a subdomain in your alias here, but it's unrelated

662
00:37:33.300 --> 00:37:35.860
to your dash dash domain in your app.

663
00:37:35.860 --> 00:37:37.220
This is just per service.

664
00:37:37.220 --> 00:37:42.900
And you get one domain name per service and you can't use different domain names for different

665
00:37:42.900 --> 00:37:43.380
environments.

666
00:37:44.900 --> 00:37:49.700
So there's this info here, which should be maybe warning, but it says for now, they only

667
00:37:49.700 --> 00:37:56.580
support one level subdomains and environment level subdomains or application level domains

668
00:37:56.580 --> 00:37:58.980
are not support or route domains are not supported yet.

669
00:38:00.580 --> 00:38:02.100
So there's a few caveats there.

670
00:38:03.780 --> 00:38:06.100
It's a pity because AppRunner, I think, is really nice.

671
00:38:06.100 --> 00:38:11.540
I think our summary at the end of that, Luciano, it was more like AppRunner is already pretty

672
00:38:11.540 --> 00:38:16.260
simple to set up, even with CloudFormation or with console or whatever you're using.

673
00:38:16.260 --> 00:38:21.460
So maybe Copilot doesn't really add that much, especially given that you've got these restrictions.

674
00:38:22.740 --> 00:38:25.860
Yeah, that seems like a fair conclusion.

675
00:38:27.220 --> 00:38:28.900
I don't know why they are trying to support it.

676
00:38:28.900 --> 00:38:31.940
Maybe there are more advanced use cases that they want to support.

677
00:38:31.940 --> 00:38:37.460
But in general, it feels that for ECS, Fargate, there is a lot of value there just because

678
00:38:37.460 --> 00:38:43.220
doing things manually and by manually writing your own CloudFormation or Terraform, even

679
00:38:43.220 --> 00:38:46.420
if you are experienced, it's still going to take you probably an entire day just to set

680
00:38:46.420 --> 00:38:47.220
up everything.

681
00:38:47.220 --> 00:38:49.700
If you are not experienced, probably we're talking about weeks.

682
00:38:50.260 --> 00:38:56.500
So here, this tool is probably going to take the time down by a lot, like probably in the

683
00:38:56.500 --> 00:38:58.020
order of hours or even less.

684
00:38:58.020 --> 00:39:01.380
Should we make an aesthetic change to our application?

685
00:39:01.380 --> 00:39:06.100
Yeah, let's just add an H1 tag or let's change the background code.

686
00:39:08.500 --> 00:39:09.140
That sound good?

687
00:39:10.580 --> 00:39:11.140
Sounds good.

688
00:39:12.020 --> 00:39:15.380
It's not going to be very pretty, but it's a very visible change.

689
00:39:16.260 --> 00:39:16.740
Lovely.

690
00:39:18.180 --> 00:39:19.460
It's attention grabbing.

691
00:39:19.460 --> 00:39:20.740
Okay, so let's add this.

692
00:39:21.700 --> 00:39:24.660
You should add like a CSS animation and make it flash.

693
00:39:24.660 --> 00:39:33.700
All right, let's push this and see if CodePipeline does its thing.

694
00:39:43.460 --> 00:39:44.020
Also, this can be an interesting test to see how long does it take from commit to actual production.

695
00:39:44.020 --> 00:39:53.300
Well, it's CodePipeline, so it's not fast is the default answer in that case.

696
00:39:53.300 --> 00:39:56.820
But I'm curious to see, are we talking about one minute or like 10 minutes?

697
00:39:58.260 --> 00:40:01.140
The first execution was eight minutes, 49 seconds end to end.

698
00:40:01.700 --> 00:40:06.660
Okay, let's see if it has some kind of cache or whatever.

699
00:40:07.300 --> 00:40:08.580
If it's faster than that, no.

700
00:40:14.260 --> 00:40:18.580
Probably a good time to promote or refer people to our CodePipeline versus GitHub actions episode, where the performance of CodePipeline is a hot topic.

701
00:40:19.220 --> 00:40:19.700
Indeed.

702
00:40:19.700 --> 00:40:24.820
Yeah, because here what we are effectively doing is not allowed, right?

703
00:40:24.820 --> 00:40:30.500
It is building a new version of the container, but hopefully it uses the Docker cache effectively.

704
00:40:30.500 --> 00:40:35.220
Also, it's a relatively small container, like we literally have two files, one is the

705
00:40:35.220 --> 00:40:43.460
starting from NGINX, and then it's created the CloudFormation using the CLL, the Copilot

706
00:40:43.460 --> 00:40:51.860
CLI, and then it is using the CloudFormation integrations to actually deploy that.

707
00:40:52.660 --> 00:40:56.100
Yeah, and in the last pipeline execution, that was the part that took the time, five

708
00:40:56.100 --> 00:40:57.460
minutes and 12 seconds.

709
00:40:57.460 --> 00:40:57.940
Okay.

710
00:40:57.940 --> 00:41:02.420
So I'm guessing that the reason for that is because it's a relatively small container,

711
00:41:02.420 --> 00:41:07.700
okay, so I'm guessing that the reason for that is not for CloudFormation, because I

712
00:41:07.700 --> 00:41:10.900
don't think CloudFormation itself is at fault for that performance.

713
00:41:10.900 --> 00:41:17.860
I think it's just ECS, load balancer, target group, updates, all of that, all those shenanigans.

714
00:41:17.860 --> 00:41:19.780
Waiting for the health checks and so on.

715
00:41:20.740 --> 00:41:24.900
That's actually maybe something worth looking at while the deployment is happening.

716
00:41:24.900 --> 00:41:27.140
What happens to the service?

717
00:41:27.140 --> 00:41:28.340
It's not going to go down, right?

718
00:41:28.340 --> 00:41:33.380
I imagine it's going to kind of soft roll out to the new version in a way or another.

719
00:41:33.380 --> 00:41:35.700
This is a good question, actually.

720
00:41:35.700 --> 00:41:37.300
I think we have options there.

721
00:41:41.540 --> 00:41:46.900
Because this is also one of the things that when you have to decide for yourself, it's a difficult choice and it's difficult to configure it correctly, so I'm curious to see

722
00:41:46.900 --> 00:41:47.940
what's the default here.

723
00:41:48.740 --> 00:41:50.340
I'm guessing it's not doing the blue-green.

724
00:42:02.260 --> 00:42:04.500
It's probably just waiting for the new containers to be up and receiving traffic and being healthy and then starting to drain the older ones.

725
00:42:05.460 --> 00:42:09.780
Will it add it as a target to our load balancer before it removes the old target?

726
00:42:12.580 --> 00:42:17.940
Maybe an interesting thing to do is to keep doing requests on the website and see if it

727
00:42:17.940 --> 00:42:22.020
flashes back and forward for a while in the background.

728
00:42:24.660 --> 00:42:26.100
Oh, I got that.

729
00:42:26.100 --> 00:42:32.580
So you see that you have both containers running right now for a while until I suppose it's

730
00:42:32.580 --> 00:42:34.180
going to start to drain the old one.

731
00:42:36.580 --> 00:42:38.660
Which I mean is not necessarily too bad.

732
00:42:41.700 --> 00:42:43.620
But I do want to go back to the docs because...

733
00:42:46.580 --> 00:42:47.460
Okay, here we go.

734
00:42:47.460 --> 00:42:52.660
So in the deployment section, you can specify a rolling deployment strategy.

735
00:42:52.660 --> 00:42:55.380
Which is probably what we have right now, right?

736
00:42:56.660 --> 00:42:56.900
Yeah.

737
00:42:57.460 --> 00:43:01.700
The valid values are default, which creates new tasks before stopping the old ones.

738
00:43:03.540 --> 00:43:06.500
So you have a moment in time where you have both versions running.

739
00:43:07.620 --> 00:43:08.120
Yeah.

740
00:43:08.660 --> 00:43:09.620
Or you can recreate.

741
00:43:10.500 --> 00:43:12.820
But there's no blue-green deployment or canary deployment.

742
00:43:13.620 --> 00:43:14.340
Anything like that.

743
00:43:14.340 --> 00:43:18.340
So what is recreate doing?

744
00:43:20.980 --> 00:43:21.860
Recreate...

745
00:43:21.860 --> 00:43:22.660
Sorry, where did it go?

746
00:43:24.180 --> 00:43:26.740
Stops all running tasks and then spins up the new tasks.

747
00:43:26.740 --> 00:43:28.900
So you have some kind of downtime, I imagine.

748
00:43:29.620 --> 00:43:30.120
Yeah.

749
00:43:30.420 --> 00:43:32.500
Minimum healthy percent is zero, which is...

750
00:43:36.340 --> 00:43:43.540
I guess this is faster to get your new container up and running completely, but more dangerous

751
00:43:43.540 --> 00:43:45.220
if you've got a service that people rely on.

752
00:43:45.940 --> 00:43:46.340
Okay.

753
00:43:46.340 --> 00:43:50.180
Interesting to see that there is no other strategy there available.

754
00:43:50.180 --> 00:43:50.740
Yeah.

755
00:43:50.740 --> 00:43:55.300
I think for people's benefit, there is a good blog post on the fourTheorem Blog by Gurarpit,

756
00:43:55.300 --> 00:44:00.020
which is about blue-green deployments with AWS CodeDeploy on ECS.

757
00:44:00.980 --> 00:44:06.020
And this is using Terraform, but I think the same kind of strategy still apply because it's using

758
00:44:06.020 --> 00:44:10.180
CloudFormation, ECS integration for the blue-green part anyway.

759
00:44:10.180 --> 00:44:14.260
But I think if you read this, like there's a very thorough article that you'll realize

760
00:44:14.260 --> 00:44:19.220
how much complexity and how much goes into thinking about safe deployments on ECS.

761
00:44:19.220 --> 00:44:24.740
And it's probably understandable then why Copilot doesn't support it out of the box.

762
00:44:24.740 --> 00:44:24.980
Yeah.

763
00:44:24.980 --> 00:44:27.860
We will have the link in the show notes for you too.

764
00:44:27.860 --> 00:44:29.220
It looks like we're all yellow.

765
00:44:29.220 --> 00:44:29.700
Okay.

766
00:44:29.700 --> 00:44:34.180
And I'm curious to see if the pipeline says that everything is completed.

767
00:44:34.180 --> 00:44:36.580
It looks like it took at least five minutes, right?

768
00:44:36.580 --> 00:44:36.820
Yeah.

769
00:44:36.820 --> 00:44:37.940
Not as long as I thought.

770
00:44:37.940 --> 00:44:38.820
Let's have a look.

771
00:44:38.820 --> 00:44:39.700
Six minutes.

772
00:44:39.700 --> 00:44:41.220
It was six minutes, 50 seconds.

773
00:44:41.220 --> 00:44:46.660
And the breakdown was also five minutes for CloudFormation.

774
00:44:46.660 --> 00:44:48.740
It's just that the...

775
00:44:49.380 --> 00:44:51.380
What is the difference with the previous one?

776
00:44:51.940 --> 00:44:54.580
Probably build it a container was faster because...

777
00:44:54.580 --> 00:44:55.700
Five, 1.5.

778
00:44:59.700 --> 00:45:01.700
Previous one is 5, 1.53.

779
00:45:02.580 --> 00:45:03.540
It's the exact same.

780
00:45:03.540 --> 00:45:08.260
I think the difference is probably just it could be the amount of time it was waiting

781
00:45:08.260 --> 00:45:10.340
for CodeBuild to provide a container.

782
00:45:10.340 --> 00:45:10.660
Right.

783
00:45:10.660 --> 00:45:12.820
So transitioning between the steps.

784
00:45:13.540 --> 00:45:14.100
Yeah.

785
00:45:14.100 --> 00:45:15.940
It was pretty successful.

786
00:45:15.940 --> 00:45:17.140
This unboxing.

787
00:45:19.140 --> 00:45:24.740
I think we saw that there's some gotchas with this, but hopefully it's fairly obvious to

788
00:45:24.740 --> 00:45:25.460
people that...

789
00:45:25.460 --> 00:45:31.300
Like the documentation, I think we've all seen mixed quality AWS documents.

790
00:45:31.300 --> 00:45:38.580
I think this is a good example, one that we should probably call out as a nice document.

791
00:45:38.580 --> 00:45:41.060
The tool itself, I think provides good onboarding.

792
00:45:41.940 --> 00:45:44.980
There's a couple of concepts you have to get used to, like what's an app, what's a service,

793
00:45:44.980 --> 00:45:47.380
what do you do first, how do you add things?

794
00:45:47.380 --> 00:45:49.540
In general, it provides a nice guided experience.

795
00:45:49.540 --> 00:45:51.060
It is developer friendly.

796
00:45:51.060 --> 00:45:52.660
So I think that's off.

797
00:45:53.780 --> 00:45:54.180
Indeed.

798
00:45:54.180 --> 00:45:55.780
Yeah, I agree with that.

799
00:45:56.740 --> 00:45:59.940
I'm just surprised that this tool seems to have been around for a while.

800
00:45:59.940 --> 00:46:01.700
I think you mentioned like 4 years.

801
00:46:02.980 --> 00:46:03.220
Yeah.

802
00:46:03.220 --> 00:46:07.700
And it's not something that I see often being mentioned.

803
00:46:08.660 --> 00:46:10.900
I mean, it's definitely worth using.

804
00:46:11.700 --> 00:46:12.580
I would use it again.

805
00:46:13.140 --> 00:46:15.380
That's my impression from having used it today.

806
00:46:16.820 --> 00:46:25.460
If we look at it, it has been used, it has been committed to since I think 2019 is when

807
00:46:25.460 --> 00:46:27.780
the repo starts, but it's continually maintained.

808
00:46:27.780 --> 00:46:30.260
Issues are being opened and closed all the time.

809
00:46:30.820 --> 00:46:33.780
It's long enough time that we can say like, this is definitely being maintained.

810
00:46:33.780 --> 00:46:37.060
But yeah, it's not going to go away anytime soon, probably.

811
00:46:37.060 --> 00:46:41.620
I get one of the things like it provides an abstraction over ECS, Fargate, AppRunner.

812
00:46:42.820 --> 00:46:46.900
I think it's probably more valuable for ECS and Fargate, but I'm interested to know if

813
00:46:46.900 --> 00:46:50.420
other people have tried it with AppRunner or have opinions on it.

814
00:46:50.420 --> 00:46:55.060
Maybe people who've got experience of running co-pilot based workloads in production and

815
00:46:55.060 --> 00:46:56.820
how it compares to the other options.

816
00:47:02.100 --> 00:47:06.820
Yeah, or also if you use it for other kinds of workloads, like I don't know, task based from, I don't know, workers processing tasks from a queue or something like that, which

817
00:47:06.820 --> 00:47:08.660
seems to be an option that it is support.

818
00:47:08.660 --> 00:47:12.500
So I'd be curious if people tried that, what is your feedback?

819
00:47:16.500 --> 00:47:21.140
Yeah, and also if people have tried it from microservices applications with service connect for inter-process communication, maybe some of the more advanced stuff like auto-scaling.

820
00:47:21.140 --> 00:47:25.700
And also there's some concepts we didn't even touch on here altogether.

821
00:47:25.700 --> 00:47:30.180
Maybe it's under developing, but you've got the ability to put a cloud front CDN in front

822
00:47:30.180 --> 00:47:31.060
of it as well.

823
00:47:31.060 --> 00:47:33.700
Add additional sidecars for whatever you want.

824
00:47:33.700 --> 00:47:37.780
So I'm interested to know what's the most extreme co-pilot example out there in the

825
00:47:37.780 --> 00:47:38.260
wild.

826
00:47:39.460 --> 00:47:42.180
Okay, so I suppose that's all we have for today.

827
00:47:42.180 --> 00:47:44.500
This has been a little bit of a long episode.

828
00:47:44.500 --> 00:47:48.500
I hope you will like this new format that we're trying to explore.

829
00:47:48.500 --> 00:47:52.900
So definitely give us your feedback if there is something you particularly liked or you

830
00:47:52.900 --> 00:47:56.980
didn't like, or maybe another product that you would like us to unbox.

831
00:47:57.540 --> 00:48:01.700
Let us know in the comments and we'll take your feedback very seriously and hopefully

832
00:48:01.700 --> 00:48:03.940
we'll be able to give you value in the next episode.

833
00:48:04.580 --> 00:48:08.820
So thank you very much for being with us today and we look forward to seeing you in the next

834
00:48:08.820 --> 00:48:19.620
episode.
