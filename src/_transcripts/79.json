{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 2.7600000000000002,
      "text": " In today's episode, we'll be discussing a fascinating topic,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2.86,
      "end": 4.76,
      "text": " the benefits of functionless applications."
    },
    {
      "speakerLabel": "spk_0",
      "start": 4.86,
      "end": 6,
      "text": " Yep, you heard that right."
    },
    {
      "speakerLabel": "spk_0",
      "start": 6.1000000000000005,
      "end": 8.84,
      "text": " We'll be exploring how to reduce the number of Lambda functions."
    },
    {
      "speakerLabel": "spk_0",
      "start": 8.94,
      "end": 10.68,
      "text": " Don't worry, we still love Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 10.78,
      "end": 12.74,
      "text": " But let's be fair, reducing the number of Lambda functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.84,
      "end": 15.48,
      "text": " can simplify your applications, resulting in lower latency,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.58,
      "end": 17.740000000000002,
      "text": " no cold starts, and cheaper costs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.84,
      "end": 20.68,
      "text": " So today we'll learn how to use service proxies to forward requests"
    },
    {
      "speakerLabel": "spk_0",
      "start": 20.78,
      "end": 24.060000000000002,
      "text": " directly to AWS services without the need for a Lambda function."
    },
    {
      "speakerLabel": "spk_0",
      "start": 24.16,
      "end": 26.22,
      "text": " My name is Eoin, and I'm here with Luciano"
    },
    {
      "speakerLabel": "spk_0",
      "start": 26.32,
      "end": 28.62,
      "text": " for another episode of the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 28.62,
      "end": 30.62,
      "text": " AWS Bites is sponsored by fourTheorem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 30.720000000000002,
      "end": 34.3,
      "text": " fourTheorem is an AWS partner for migration, architecture, and training."
    },
    {
      "speakerLabel": "spk_0",
      "start": 34.4,
      "end": 36.3,
      "text": " Find out more at fortheorem.com."
    },
    {
      "speakerLabel": "spk_0",
      "start": 36.4,
      "end": 38.2,
      "text": " The link is in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 38.3,
      "end": 40.3,
      "text": " So what are we talking about today?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.4,
      "end": 43.1,
      "text": " Well, let's say you've built an API with API Gateway,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 43.2,
      "end": 46.44,
      "text": " and you want to forward the request to another AWS service like SQS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 46.540000000000006,
      "end": 47.94,
      "text": " This is a really common pattern."
    },
    {
      "speakerLabel": "spk_0",
      "start": 48.040000000000006,
      "end": 50.14,
      "text": " Your Lambda function isn't necessarily doing that much"
    },
    {
      "speakerLabel": "spk_0",
      "start": 50.24,
      "end": 52.78,
      "text": " except wiring the database to the other server."
    },
    {
      "speakerLabel": "spk_0",
      "start": 52.88,
      "end": 55.38,
      "text": " So let's say you're building an API with API Gateway,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 55.38,
      "end": 58.72,
      "text": " your Lambda function isn't necessarily doing that much except wiring the data"
    },
    {
      "speakerLabel": "spk_0",
      "start": 58.82,
      "end": 61.82,
      "text": " you get from the API into the service at the backend."
    },
    {
      "speakerLabel": "spk_0",
      "start": 61.92,
      "end": 65.42,
      "text": " So you don't necessarily need to use a Lambda function to do this at all."
    },
    {
      "speakerLabel": "spk_0",
      "start": 65.52000000000001,
      "end": 67.96000000000001,
      "text": " You can use service proxies instead."
    },
    {
      "speakerLabel": "spk_0",
      "start": 68.06,
      "end": 71.06,
      "text": " You're still using API Gateway, but you're skipping the Lambda step"
    },
    {
      "speakerLabel": "spk_0",
      "start": 71.16,
      "end": 74.24000000000001,
      "text": " and forwarding the request directly to the destination service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 74.34,
      "end": 77.14,
      "text": " So Luciano, are there some example use cases"
    },
    {
      "speakerLabel": "spk_0",
      "start": 77.24000000000001,
      "end": 79.68,
      "text": " that this is particularly good for?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 82.54,
      "end": 85.32000000000001,
      "text": " Yeah, this seems pretty exciting, and I'm already thinking about some potentially interesting use cases."
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.42,
      "end": 89.48,
      "text": " For instance, I think a very common one is you want to store click data"
    },
    {
      "speakerLabel": "spk_1",
      "start": 89.58000000000001,
      "end": 92.58000000000001,
      "text": " on an e-commerce is one we always mention, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 92.68,
      "end": 94.68,
      "text": " And if you do that through an API,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 94.78,
      "end": 97.26,
      "text": " because you want to collect this data through the web,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 97.36000000000001,
      "end": 100.42,
      "text": " most often you create a Lambda, and then you send that data to Kinesis."
    },
    {
      "speakerLabel": "spk_1",
      "start": 100.52000000000001,
      "end": 104.36000000000001,
      "text": " So why do we have that Lambda in the first place just to do this mapping, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 104.46000000000001,
      "end": 107.16000000000001,
      "text": " If you could remove that Lambda, it would be nice if you could just send the data"
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.26,
      "end": 110,
      "text": " from API Gateway directly to Kinesis."
    },
    {
      "speakerLabel": "spk_1",
      "start": 110,
      "end": 113,
      "text": " So that would be a really cool example, I believe."
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.1,
      "end": 116.38,
      "text": " Similarly, other examples we've mentioned many times"
    },
    {
      "speakerLabel": "spk_1",
      "start": 116.48,
      "end": 118.84,
      "text": " is you just need to put records to DynamoDB."
    },
    {
      "speakerLabel": "spk_1",
      "start": 118.94,
      "end": 122.34,
      "text": " So there is a very specific type of request you receive through an API call"
    },
    {
      "speakerLabel": "spk_1",
      "start": 122.44,
      "end": 126.78,
      "text": " and probably want to store most of it in a DynamoDB type as a record"
    },
    {
      "speakerLabel": "spk_1",
      "start": 126.88,
      "end": 129.46,
      "text": " with some maybe minimal data manipulation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 129.56,
      "end": 132.46,
      "text": " We generally used to do that with a Lambda. Do we really need that Lambda?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 132.56,
      "end": 136.5,
      "text": " Maybe we can do the data manipulation by using this new feature."
    },
    {
      "speakerLabel": "spk_1",
      "start": 136.5,
      "end": 142.6,
      "text": " And another one could be if you want to do some kind of event-based system,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 142.7,
      "end": 147.4,
      "text": " maybe you are receiving, I don't know, jobs that you can process from an SQS queue."
    },
    {
      "speakerLabel": "spk_1",
      "start": 147.5,
      "end": 150.48,
      "text": " So you receive that request through the web, API Gateway receives the request,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 150.58,
      "end": 154.08,
      "text": " you just want to send that payload to SQS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 154.18,
      "end": 157.28,
      "text": " That's one example. Or similarly, you might be using SNS or Event Bridge"
    },
    {
      "speakerLabel": "spk_1",
      "start": 157.38,
      "end": 159.92000000000002,
      "text": " just to propagate an event."
    },
    {
      "speakerLabel": "spk_1",
      "start": 160.02,
      "end": 164.82,
      "text": " And I think it's important to call out what are the pros and cons of this approach,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 164.82,
      "end": 167.72,
      "text": " because of course it's not a silver bullet for everything."
    },
    {
      "speakerLabel": "spk_1",
      "start": 167.82,
      "end": 170.56,
      "text": " I think we still use Lambda for many other use cases."
    },
    {
      "speakerLabel": "spk_1",
      "start": 170.66,
      "end": 173.85999999999999,
      "text": " So let's try to figure out when this kind of approach is useful"
    },
    {
      "speakerLabel": "spk_1",
      "start": 173.95999999999998,
      "end": 177.2,
      "text": " and when it gets a little bit more challenging."
    },
    {
      "speakerLabel": "spk_1",
      "start": 177.29999999999998,
      "end": 180.34,
      "text": " So in terms of pros, for sure, lower latency,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 180.44,
      "end": 184.24,
      "text": " because you have a direct integration between two services."
    },
    {
      "speakerLabel": "spk_1",
      "start": 184.34,
      "end": 189.04,
      "text": " You are not waiting for a Lambda to spin up, to execute and do all the API calls,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 189.14,
      "end": 191.72,
      "text": " but that API call will be done directly by AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 191.72,
      "end": 195.26,
      "text": " So most likely much lower latency if you use this approach."
    },
    {
      "speakerLabel": "spk_1",
      "start": 195.35999999999999,
      "end": 197.96,
      "text": " And again, that means no call starts."
    },
    {
      "speakerLabel": "spk_1",
      "start": 198.06,
      "end": 202.2,
      "text": " So, and not creating a new Lambda for that specific use case."
    },
    {
      "speakerLabel": "spk_1",
      "start": 202.3,
      "end": 207.06,
      "text": " So that's probably giving you more capacity available in your Lambda pool to do other stuff."
    },
    {
      "speakerLabel": "spk_1",
      "start": 207.16,
      "end": 209.74,
      "text": " So if you're not in your account, you have lots of Lambdas,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 209.84,
      "end": 213.78,
      "text": " that's kind of giving you more space to do more useful work with your Lambdas."
    },
    {
      "speakerLabel": "spk_1",
      "start": 213.88,
      "end": 216.84,
      "text": " It's going to be cheaper because again, you are not executing that compute"
    },
    {
      "speakerLabel": "spk_1",
      "start": 216.94,
      "end": 218.38,
      "text": " and you're going to be paying for that compute."
    },
    {
      "speakerLabel": "spk_1",
      "start": 218.48,
      "end": 220.57999999999998,
      "text": " So that's going to lower down your cost."
    },
    {
      "speakerLabel": "spk_1",
      "start": 220.58,
      "end": 224.82000000000002,
      "text": " And in general, I think there is a concept of you are going to be maintaining less code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 224.92000000000002,
      "end": 227.96,
      "text": " You will have less code to understand, write, deploy."
    },
    {
      "speakerLabel": "spk_1",
      "start": 228.06,
      "end": 231.06,
      "text": " So I think in general, the cognitive load of the team"
    },
    {
      "speakerLabel": "spk_1",
      "start": 231.16000000000003,
      "end": 235.60000000000002,
      "text": " or people working in this project in general, it's going to be much lower."
    },
    {
      "speakerLabel": "spk_1",
      "start": 235.70000000000002,
      "end": 238.4,
      "text": " Now, it seems amazing. So where does it fall down?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 238.5,
      "end": 240.5,
      "text": " What are the cons of this approach?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 240.60000000000002,
      "end": 245.20000000000002,
      "text": " Well, the first one and the most obvious one is that you have to use this VTL templating language,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 245.3,
      "end": 249.18,
      "text": " which I haven't heard anyone actually loving it so far."
    },
    {
      "speakerLabel": "spk_1",
      "start": 249.18,
      "end": 251.94,
      "text": " So that's going to be definitely on the con side."
    },
    {
      "speakerLabel": "spk_1",
      "start": 252.04000000000002,
      "end": 256.12,
      "text": " So it's basically a language that allows you to do some kind of templating to map"
    },
    {
      "speakerLabel": "spk_1",
      "start": 256.22,
      "end": 261.48,
      "text": " how are you going to reshape the input data to send the request to the downstream AWS service."
    },
    {
      "speakerLabel": "spk_1",
      "start": 261.58,
      "end": 264.66,
      "text": " And then also you have to send a response back to the client."
    },
    {
      "speakerLabel": "spk_1",
      "start": 264.76,
      "end": 268.42,
      "text": " So how do you manipulate data to create that response as well?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 268.52,
      "end": 271.36,
      "text": " So to define all this mapping, you need to use VTL."
    },
    {
      "speakerLabel": "spk_1",
      "start": 271.46000000000004,
      "end": 273.96000000000004,
      "text": " And again, it's not the most intuitive language ever."
    },
    {
      "speakerLabel": "spk_1",
      "start": 274.06,
      "end": 277.74,
      "text": " It's not super easy to learn. People complain a lot about that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 277.74,
      "end": 280.40000000000003,
      "text": " And it's also a little bit tricky to find a good example."
    },
    {
      "speakerLabel": "spk_1",
      "start": 280.5,
      "end": 284.54,
      "text": " So that's maybe one of the reasons why nobody's really loving VTL."
    },
    {
      "speakerLabel": "spk_1",
      "start": 284.64,
      "end": 290.54,
      "text": " It might be a bit complicated to set up and it's not well supported by some serverless framework."
    },
    {
      "speakerLabel": "spk_1",
      "start": 290.64,
      "end": 294.68,
      "text": " So you might need to be spending a little bit of time there just to figure out how do you make it work."
    },
    {
      "speakerLabel": "spk_1",
      "start": 294.78000000000003,
      "end": 299.42,
      "text": " And the other bit is not going to be super straightforward to debug"
    },
    {
      "speakerLabel": "spk_1",
      "start": 299.52,
      "end": 303.02,
      "text": " because maybe you set up something, then it doesn't really work."
    },
    {
      "speakerLabel": "spk_1",
      "start": 303.12,
      "end": 307.1,
      "text": " Where do you even start looking for trying to figure out what did you do wrong?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 307.1,
      "end": 309.96000000000004,
      "text": " And we'll have some suggestions later on on this."
    },
    {
      "speakerLabel": "spk_0",
      "start": 310.06,
      "end": 314.14000000000004,
      "text": " I remember using VTL or Velocity template language,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 314.24,
      "end": 317.78000000000003,
      "text": " I think it was like back in 2006 or something like that,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 317.88,
      "end": 320.08000000000004,
      "text": " like building a custom reporting solution."
    },
    {
      "speakerLabel": "spk_0",
      "start": 320.18,
      "end": 321.98,
      "text": " So there's lots of templating languages out there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 322.08000000000004,
      "end": 323.38,
      "text": " Velocity is one of the older ones."
    },
    {
      "speakerLabel": "spk_0",
      "start": 323.48,
      "end": 324.94,
      "text": " So it's an interesting choice."
    },
    {
      "speakerLabel": "spk_0",
      "start": 325.04,
      "end": 328.58000000000004,
      "text": " It's based on an Apache project from the Java ecosystem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.68,
      "end": 332.32000000000005,
      "text": " And it's okay when you're just using it as a templating system."
    },
    {
      "speakerLabel": "spk_0",
      "start": 332.42,
      "end": 335.36,
      "text": " You have your inputs, you can run the template, generate the outputs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 335.36,
      "end": 337.22,
      "text": " But when it's tightly integrated into API Gateway,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 337.32,
      "end": 339.90000000000003,
      "text": " it can definitely be difficult to troubleshoot."
    },
    {
      "speakerLabel": "spk_0",
      "start": 340,
      "end": 343.5,
      "text": " So the whole experience of building this end to end, let's give an example."
    },
    {
      "speakerLabel": "spk_0",
      "start": 343.6,
      "end": 346.90000000000003,
      "text": " Let's say you want to build an API to receive some data from a sensor."
    },
    {
      "speakerLabel": "spk_0",
      "start": 347,
      "end": 350.88,
      "text": " So for example, let's say in my greenhouse and growing tomatoes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 350.98,
      "end": 353.08000000000004,
      "text": " and I want to monitor the temperature of this greenhouse."
    },
    {
      "speakerLabel": "spk_0",
      "start": 353.18,
      "end": 354.48,
      "text": " So I've got a sensor in there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 354.58000000000004,
      "end": 358.92,
      "text": " And this supports sending the data from the sensor to a HTTPS endpoint."
    },
    {
      "speakerLabel": "spk_0",
      "start": 359.02000000000004,
      "end": 362.28000000000003,
      "text": " So I want to bring up a HTTPS endpoint where it can send the data,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 362.38,
      "end": 364.52000000000004,
      "text": " then I can monitor the temperature of the greenhouse,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 364.52,
      "end": 368.46,
      "text": " find out it's not getting too hot and turning my tomatoes into pizza sauce."
    },
    {
      "speakerLabel": "spk_0",
      "start": 368.56,
      "end": 370.26,
      "text": " So how would we do this?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 370.35999999999996,
      "end": 374.76,
      "text": " Well, you'd start off by creating your REST API resource in CloudFormation,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 374.85999999999996,
      "end": 376.46,
      "text": " as we would normally do."
    },
    {
      "speakerLabel": "spk_0",
      "start": 376.56,
      "end": 380.35999999999996,
      "text": " You normally have to create the API and a stage and then a resource type,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 380.46,
      "end": 383.7,
      "text": " all this usual kind of hierarchy of resources"
    },
    {
      "speakerLabel": "spk_0",
      "start": 383.79999999999995,
      "end": 386.4,
      "text": " until you get down to the actual HTTP method."
    },
    {
      "speakerLabel": "spk_0",
      "start": 386.5,
      "end": 389.94,
      "text": " So at that point, you want to say, okay, here's my post action"
    },
    {
      "speakerLabel": "spk_0",
      "start": 390.03999999999996,
      "end": 392.91999999999996,
      "text": " for this sensor readings resource."
    },
    {
      "speakerLabel": "spk_0",
      "start": 392.92,
      "end": 398.08000000000004,
      "text": " And it's in this method where you configure this AWS service proxy integration."
    },
    {
      "speakerLabel": "spk_0",
      "start": 398.18,
      "end": 402.32,
      "text": " So with these integrations, there are different types you can choose from."
    },
    {
      "speakerLabel": "spk_0",
      "start": 402.42,
      "end": 406.46000000000004,
      "text": " And then one you'd normally use for a Lambda function is AWS proxy."
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.56,
      "end": 412.16,
      "text": " But you can also have a HTTP type that's just used for proxying the request"
    },
    {
      "speakerLabel": "spk_0",
      "start": 412.26,
      "end": 413.70000000000005,
      "text": " to another web server."
    },
    {
      "speakerLabel": "spk_0",
      "start": 413.8,
      "end": 416.74,
      "text": " You have the Mock one, which is also quite commonly used,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 416.84000000000003,
      "end": 421.84000000000003,
      "text": " especially for just generating static responses like options,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 421.84,
      "end": 424.08,
      "text": " method responses for cores."
    },
    {
      "speakerLabel": "spk_0",
      "start": 424.17999999999995,
      "end": 425.28,
      "text": " That's quite common."
    },
    {
      "speakerLabel": "spk_0",
      "start": 425.38,
      "end": 427.52,
      "text": " If you use the serverless framework or SAM,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 427.61999999999995,
      "end": 429.52,
      "text": " it'll normally generate those ones for you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 429.61999999999995,
      "end": 431.47999999999996,
      "text": " and you don't even have to worry about it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 431.58,
      "end": 433.88,
      "text": " And then there's the AWS integration type."
    },
    {
      "speakerLabel": "spk_0",
      "start": 433.97999999999996,
      "end": 437.06,
      "text": " So when you use the AWS integration type, that's the one that says,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.15999999999997,
      "end": 442,
      "text": " okay, I want you to integrate this API gateway method into an AWS service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 442.09999999999997,
      "end": 447.23999999999995,
      "text": " And then you specify a URI, and that's essentially an ARN for the AWS API."
    },
    {
      "speakerLabel": "spk_0",
      "start": 447.34,
      "end": 451.5,
      "text": " So it's something like SQS actions send message."
    },
    {
      "speakerLabel": "spk_0",
      "start": 451.5,
      "end": 454.18,
      "text": " Because you're making that API request,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 454.28,
      "end": 457.58,
      "text": " you need to give this method a role that it can assume."
    },
    {
      "speakerLabel": "spk_0",
      "start": 457.68,
      "end": 460.88,
      "text": " So it's a role with a trust policy that trusts API gateway"
    },
    {
      "speakerLabel": "spk_0",
      "start": 460.98,
      "end": 465.16,
      "text": " and allows you to perform whatever action you want, like a SQS send message."
    },
    {
      "speakerLabel": "spk_0",
      "start": 465.26,
      "end": 469.06,
      "text": " And then you could basically use your velocity templating language, your VTL,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 469.16,
      "end": 474.66,
      "text": " to map the input you get into the input that is required by that API."
    },
    {
      "speakerLabel": "spk_0",
      "start": 474.76,
      "end": 479.54,
      "text": " And that's usually a little bit where it starts to get difficult,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 479.54,
      "end": 482.14000000000004,
      "text": " difficult to develop, difficult to troubleshoot,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 482.24,
      "end": 487.44,
      "text": " especially because sometimes you need to basically generate"
    },
    {
      "speakerLabel": "spk_0",
      "start": 487.54,
      "end": 490.74,
      "text": " form encoded syntax."
    },
    {
      "speakerLabel": "spk_0",
      "start": 490.84000000000003,
      "end": 494.72,
      "text": " So it's not as easy as just generating JSON always."
    },
    {
      "speakerLabel": "spk_0",
      "start": 494.82000000000005,
      "end": 497.48,
      "text": " But once you've done that, you can also do the same thing with the response."
    },
    {
      "speakerLabel": "spk_0",
      "start": 497.58000000000004,
      "end": 499.48,
      "text": " So if you get a response back from this API,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 499.58000000000004,
      "end": 503.32000000000005,
      "text": " you can either return a static response for different error codes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 503.42,
      "end": 506.22,
      "text": " and different even content type headers,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 506.22,
      "end": 509.46000000000004,
      "text": " you can return different responses back to your client."
    },
    {
      "speakerLabel": "spk_0",
      "start": 509.56,
      "end": 513.6,
      "text": " So there's nothing you can shield the underlying implementation completely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 513.7,
      "end": 515,
      "text": " from your API consumers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 515.1,
      "end": 519.64,
      "text": " They don't have to know SQS or Kinesis or whatever it is under the hood."
    },
    {
      "speakerLabel": "spk_0",
      "start": 519.74,
      "end": 523.0400000000001,
      "text": " So in a lot of ways, many people who've worked with AppSync"
    },
    {
      "speakerLabel": "spk_0",
      "start": 523.14,
      "end": 524.88,
      "text": " are actually a lot more familiar with this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 524.98,
      "end": 526.82,
      "text": " than people who are working with API gateway"
    },
    {
      "speakerLabel": "spk_0",
      "start": 526.9200000000001,
      "end": 532.1800000000001,
      "text": " because with AppSync resolvers traditionally are also using VTL."
    },
    {
      "speakerLabel": "spk_0",
      "start": 532.28,
      "end": 534.36,
      "text": " The difference is now in AppSync,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 534.36,
      "end": 537.16,
      "text": " you have the great new option of using JavaScript resolvers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 537.26,
      "end": 539.82,
      "text": " That option isn't there yet in API gateway,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 539.92,
      "end": 542.16,
      "text": " but it's something that might come, who knows?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 542.26,
      "end": 544.76,
      "text": " And by the way, this kind of integration is supported"
    },
    {
      "speakerLabel": "spk_0",
      "start": 544.86,
      "end": 548.16,
      "text": " in the version one and version two of API gateway."
    },
    {
      "speakerLabel": "spk_0",
      "start": 548.26,
      "end": 553.34,
      "text": " So the rest API method and in the HTTP API method."
    },
    {
      "speakerLabel": "spk_0",
      "start": 553.44,
      "end": 558.24,
      "text": " We did mention that debugging all of this stuff can be tricky,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 558.34,
      "end": 560.98,
      "text": " but you can use the test feature in API gateway console,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 560.98,
      "end": 565.08,
      "text": " which can give you some details on all the steps of your API"
    },
    {
      "speakerLabel": "spk_0",
      "start": 565.1800000000001,
      "end": 568.98,
      "text": " as it goes through the different life cycles and gives you logs as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 569.08,
      "end": 571.96,
      "text": " And also you'd want to probably set up some good local development tooling"
    },
    {
      "speakerLabel": "spk_0",
      "start": 572.0600000000001,
      "end": 574.82,
      "text": " where you can run these templates with sample inputs as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 574.9200000000001,
      "end": 576.26,
      "text": " That just makes sense."
    },
    {
      "speakerLabel": "spk_0",
      "start": 576.36,
      "end": 579.8000000000001,
      "text": " Almost the same as if you're doing a step function development really."
    },
    {
      "speakerLabel": "spk_0",
      "start": 581.16,
      "end": 584,
      "text": " I think that's probably everything we can cover on the topic,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 584.1,
      "end": 585.9,
      "text": " but there are some really good resources out there actually."
    },
    {
      "speakerLabel": "spk_0",
      "start": 586,
      "end": 589.08,
      "text": " So there are some people who have been talking about this functionless approach"
    },
    {
      "speakerLabel": "spk_0",
      "start": 589.08,
      "end": 591.1,
      "text": " to developing serverless applications."
    },
    {
      "speakerLabel": "spk_0",
      "start": 591.2,
      "end": 594.6800000000001,
      "text": " There's a really good blog post from a few years ago from Alex DeBrie"
    },
    {
      "speakerLabel": "spk_0",
      "start": 594.7800000000001,
      "end": 597.72,
      "text": " with a great example of doing this with SNS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 597.82,
      "end": 601.62,
      "text": " Sheen Brisals also has a great article on writing functionless applications,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 601.72,
      "end": 605.4200000000001,
      "text": " writing less code and covers a lot of ways to reduce the number of lambda functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 605.5200000000001,
      "end": 608.9000000000001,
      "text": " in your architecture, including a service proxy example."
    },
    {
      "speakerLabel": "spk_0",
      "start": 609,
      "end": 615.2,
      "text": " And there's a great article on this style of development as well from Paul Swail"
    },
    {
      "speakerLabel": "spk_0",
      "start": 615.3000000000001,
      "end": 617.9000000000001,
      "text": " called Some Code is More Equal than Others."
    },
    {
      "speakerLabel": "spk_0",
      "start": 617.9,
      "end": 620.1,
      "text": " So we'll link all of those in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 620.1999999999999,
      "end": 623.1999999999999,
      "text": " And we're very interested to hear if anybody there has done something really cool"
    },
    {
      "speakerLabel": "spk_0",
      "start": 623.3,
      "end": 625.24,
      "text": " with service proxies as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 625.34,
      "end": 626.84,
      "text": " 🍅 Like growing tomatoes, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 626.9399999999999,
      "end": 627.9399999999999,
      "text": " 🤣 Mm-hmm."
    },
    {
      "speakerLabel": "spk_0",
      "start": 628.04,
      "end": 629.54,
      "text": " So that's all we have for this episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 629.64,
      "end": 631.78,
      "text": " Thanks very much. Don't forget to like and subscribe."
    },
    {
      "speakerLabel": "spk_0",
      "start": 631.88,
      "end": 633.52,
      "text": " And we'll see you in the next episode."
    }
  ]
}