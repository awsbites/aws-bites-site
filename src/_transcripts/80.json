{
  "speakers": {
    "spk_0": "Luciano",
    "spk_1": "Eoin"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3.44,
      "text": " Hosting a public website on the internet is something pretty easy."
    },
    {
      "speakerLabel": "spk_0",
      "start": 3.44,
      "end": 6.96,
      "text": " You know we love static websites, we've been talking about them quite a lot"
    },
    {
      "speakerLabel": "spk_0",
      "start": 6.96,
      "end": 10.64,
      "text": " and you have seen probably some of our work around them. But we also work with a lot of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 10.64,
      "end": 15.200000000000001,
      "text": " enterprises and they often want to do static sites but they want to keep them private for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.200000000000001,
      "end": 20.400000000000002,
      "text": " internet consumption, which means no connectivity from the outside and only connectivity from the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 20.400000000000002,
      "end": 26.8,
      "text": " enterprise network. So if hosting static website publicly is very easy, doing it for private ones"
    },
    {
      "speakerLabel": "spk_0",
      "start": 26.8,
      "end": 31.12,
      "text": " is a completely different story. And today we're going to talk with you about why something that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 31.12,
      "end": 35.44,
      "text": " seems very easy, it becomes actually very very hard when you try to do it in a private way."
    },
    {
      "speakerLabel": "spk_0",
      "start": 35.44,
      "end": 40.64,
      "text": " There are actually many solutions so we want to discover today what can you do and what are the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.64,
      "end": 45.36,
      "text": " pros and cons of every single solution. I am Luciano and I'm here today with Eoin and this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 45.36,
      "end": 46.16,
      "text": " is another episode of the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 56.36,
      "end": 58.16,
      "text": " AWS Bites is sponsored by fourTheorem. fourTheorem is an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 58.16,
      "end": 63.120000000000005,
      "text": " AWS consulting partner offering training, cloud migration and architecture consulting. Find out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 63.120000000000005,
      "end": 69.68,
      "text": " more at fourTheorem.com. You'll find this link in the show notes. Okay so let's start by summarizing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.68,
      "end": 76.4,
      "text": " why you might want to use a static website in a private mode, right? Because maybe if you haven't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 76.4,
      "end": 81.2,
      "text": " worked with enterprises it's not something that can be necessarily too obvious."
    },
    {
      "speakerLabel": "spk_0",
      "start": 81.2,
      "end": 85.92000000000002,
      "text": "  And I think that the main thing to understand is that companies of a certain size they will often have what they"
    },
    {
      "speakerLabel": "spk_0",
      "start": 85.92000000000002,
      "end": 90.88000000000001,
      "text": " would call internal applications or internal corporate applications and those are applications"
    },
    {
      "speakerLabel": "spk_0",
      "start": 90.88000000000001,
      "end": 95.36000000000001,
      "text": " that they don't need to expose to external customers or external stakeholders but something"
    },
    {
      "speakerLabel": "spk_0",
      "start": 95.36,
      "end": 100.64,
      "text": " that they use internally to fulfill specific tasks. And you can imagine something like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 100.64,
      "end": 106.4,
      "text": " documentation, wiki, so things, information that they want to make available inside the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 106.4,
      "end": 110.4,
      "text": " corporate network but it can also be a little bit more advanced than that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 110.4,
      "end": 115.2,
      "text": "  So if they want to expose some kind of functionalities, some kind of interactive website they can do that using a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 115.2,
      "end": 120.88,
      "text": " single page application and this single page application will be totally static."
    },
    {
      "speakerLabel": "spk_0",
      "start": 120.88,
      "end": 126.08,
      "text": " It's just HTML, CSS and JavaScript and it will be relying on some internal APIs for more dynamic functionality."
    },
    {
      "speakerLabel": "spk_0",
      "start": 126.08,
      "end": 130.72,
      "text": " And one example for instance could be, I don't know, you can imagine a bank that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 130.72,
      "end": 137.84,
      "text": " internal needs to have a way to browse, I don't know, mortgage application maybe and they can do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 137.84,
      "end": 143.44,
      "text": " all of that using an SPA and that SPA can call internal APIs and they can make it available only"
    },
    {
      "speakerLabel": "spk_0",
      "start": 143.44,
      "end": 150.88,
      "text": " for internal consumption. Now again this just emphasizes how it is very common for web application"
    },
    {
      "speakerLabel": "spk_0",
      "start": 150.88,
      "end": 155.52,
      "text": " to have a static part and a dynamic part. So we are trying to figure out how do we host that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 155.52,
      "end": 161.2,
      "text": " static part in the most efficient way or in the simplest way and the idea is that it's going to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 161.2,
      "end": 168.48,
      "text": " be only files, specifically HTML, JS, CSS, maybe some images, maybe some other assets like JSON,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 168.48,
      "end": 175.84,
      "text": " JSON, whatever and we need to have an easy way to serve those assets using HTTP."
    },
    {
      "speakerLabel": "spk_0",
      "start": 175.84,
      "end": 180.39999999999998,
      "text": " And for public websites, I know you are probably already thinking this is very easy, you will expect to be able to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 180.39999999999998,
      "end": 186.48,
      "text": " do that in like minutes just taking a repository from GitHub and deploying from there and if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 186.48,
      "end": 191.51999999999998,
      "text": " have used Netlify or Vercel, these are the kind of experience you will get and we actually have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 191.51999999999998,
      "end": 196.39999999999998,
      "text": " spoken about that in a dedicated episode, check it out, episode 3, link is in the show notes if"
    },
    {
      "speakerLabel": "spk_0",
      "start": 196.4,
      "end": 202.64000000000001,
      "text": " you are curious. How does it get difficult if you want to do it for private websites?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 203.6,
      "end": 207.28,
      "text": " What are the requirements there I guess is the question."
    },
    {
      "speakerLabel": "spk_1",
      "start": 214.4,
      "end": 219.6,
      "text": " A lot of the requirements are the same as when you're doing a public app so you want HTTPS, normally you want a custom domain so people can find it easily. You probably want a low latency"
    },
    {
      "speakerLabel": "spk_1",
      "start": 219.6,
      "end": 223.44,
      "text": " as possible for fast load times, sometimes that matters less in the corporate context but not"
    },
    {
      "speakerLabel": "spk_1",
      "start": 223.44,
      "end": 229.2,
      "text": " really, people's expectations for web applications is generally just going in one direction and you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 229.2,
      "end": 235.2,
      "text": " want support for large and small assets so not too limited in terms of asset size. Where it gets"
    },
    {
      "speakerLabel": "spk_1",
      "start": 235.2,
      "end": 239.52,
      "text": " different is that unlike a public app, like you said, it should only be accessible from a corporate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 239.52,
      "end": 245.04,
      "text": " network, it should not leave the network boundary, often you also have a requirement to use an"
    },
    {
      "speakerLabel": "spk_1",
      "start": 245.04,
      "end": 251.6,
      "text": " internal DNS service, also sometimes a third party HTTPS certificate vendor or provisioning mechanism"
    },
    {
      "speakerLabel": "spk_1",
      "start": 251.6,
      "end": 257.28,
      "text": " and sometimes even you have a requirement that even for DNS records there's no public DNS trace"
    },
    {
      "speakerLabel": "spk_1",
      "start": 257.28,
      "end": 262.15999999999997,
      "text": " so even though it might be acceptable for a lot of organisations to have some public DNS resources"
    },
    {
      "speakerLabel": "spk_1",
      "start": 262.15999999999997,
      "end": 268.08,
      "text": " that resolve to private IP addresses, that's not always the case and sometimes it's just a hard no"
    },
    {
      "speakerLabel": "spk_1",
      "start": 268.08,
      "end": 275.52,
      "text": " on things like that. So I guess why can't we just use something like S3 then? That's probably"
    },
    {
      "speakerLabel": "spk_1",
      "start": 275.52,
      "end": 278.48,
      "text": " somebody's first answer when you think about static websites on AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 278.48,
      "end": 284.8,
      "text": " Yeah and I mean this is something that was also my first idea, right?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 284.8,
      "end": 290.56,
      "text": " Sounds almost obvious that you just want to serve files in AWS, that's a string, right? That's what S3 is for. But there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 290.56,
      "end": 296.8,
      "text": " is a slight caveat there which is S3 is really good because it kind of offers that website feature"
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.8,
      "end": 302.96000000000004,
      "text": " but it's not quite there because it only works on HTTP so extremely annoying that you have like 90%"
    },
    {
      "speakerLabel": "spk_0",
      "start": 302.96,
      "end": 308.56,
      "text": " of what you need and that 10% becomes kind of the hard no that kind of stops you from using"
    },
    {
      "speakerLabel": "spk_0",
      "start": 308.56,
      "end": 315.91999999999996,
      "text": " that feature. So that's maybe my wishlist request for AWS to please, please, please support HTTPS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 315.91999999999996,
      "end": 322.47999999999996,
      "text": " on S3 websites that will make some of these things much easier and make S3 a viable option here."
    },
    {
      "speakerLabel": "spk_0",
      "start": 323.35999999999996,
      "end": 328.32,
      "text": " Now the next best solution that we might think of if we still want to use S3 because S3 is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.32,
      "end": 333.59999999999997,
      "text": " really good for hosting files and keeping them around versioning, storing them in a reliable"
    },
    {
      "speakerLabel": "spk_0",
      "start": 333.59999999999997,
      "end": 339.04,
      "text": " way and all the different things we know about S3. The next thing is probably, okay, can we just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 339.04,
      "end": 345.68,
      "text": " put CloudFront in front of it? And this is actually the most common way of serving public"
    },
    {
      "speakerLabel": "spk_0",
      "start": 345.68,
      "end": 351.36,
      "text": " static websites. In AWS you put the files in S3 and you create a CloudFront distribution"
    },
    {
      "speakerLabel": "spk_0",
      "start": 351.36,
      "end": 357.84,
      "text": " to distribute the files. And with CloudFront you get HTTPS, you even get cache, you get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 357.84,
      "end": 363.44,
      "text": " custom domains. So it looks like a good solution and it is definitely for public websites."
    },
    {
      "speakerLabel": "spk_0",
      "start": 364.23999999999995,
      "end": 368.96,
      "text": " Now when you want to make it private, there are some things to consider there. First of all,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 368.96,
      "end": 374.64,
      "text": " you are already buying into a level of complexity that you probably don't need. Like why do you need"
    },
    {
      "speakerLabel": "spk_0",
      "start": 374.64,
      "end": 379.91999999999996,
      "text": " a CDN? I think unless you are like such a huge organization with offices all around the world"
    },
    {
      "speakerLabel": "spk_0",
      "start": 379.91999999999996,
      "end": 383.76,
      "text": " and you want to distribute that internal application in a way that can be performant"
    },
    {
      "speakerLabel": "spk_0",
      "start": 383.76,
      "end": 388.88,
      "text": " for everyone, maybe even in different continents, maybe okay. It could make sense to think about a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 388.88,
      "end": 394.96,
      "text": " CDN, but for most use cases probably that's a bit of an overkill."
    },
    {
      "speakerLabel": "spk_0",
      "start": 396.32,
      "end": 402,
      "text": " The other thing is that some assets somehow still need to be unsecured. Like let's say that you have a login page,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 402,
      "end": 406.71999999999997,
      "text": " most likely you would want to have a login page. How do you do all of that? Maybe you can use some"
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.71999999999997,
      "end": 413.68,
      "text": " kind of IDP and then MFA and all that good stuff. But once you have all of that, how do you connect"
    },
    {
      "speakerLabel": "spk_0",
      "start": 413.68,
      "end": 420.16,
      "text": " it with the CDN distribution? And there you could be using Lambda at Edge and do kind of a dynamic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 420.16,
      "end": 424.72,
      "text": " layer of authentication there to make sure the user is authenticated before you serve that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 424.72,
      "end": 432.08,
      "text": " static content through CloudFront. Another thing is that you need to actually keep it private."
    },
    {
      "speakerLabel": "spk_0",
      "start": 432.08,
      "end": 438.48,
      "text": " So how do you make it possible that if I am accessing from the internal network, I am authorized to see"
    },
    {
      "speakerLabel": "spk_0",
      "start": 438.48,
      "end": 443.68,
      "text": " that content, but if I am somewhere else, I shouldn't be able to see anything? So one way is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 443.68,
      "end": 449.76,
      "text": " you could be setting up a web application firewall in front of CloudFront and with a web application"
    },
    {
      "speakerLabel": "spk_0",
      "start": 449.76,
      "end": 456.8,
      "text": " firewall you can define IP filtering. So you could say this class of IPs will be able to pass,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 456.8,
      "end": 463.36,
      "text": " anybody else is going to be blocked. And if you use private classes of IPs, that should be a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 463.36,
      "end": 469.28000000000003,
      "text": " secure enough approach because I think it's not possible or if it is, I think it's easy to spoof"
    },
    {
      "speakerLabel": "spk_0",
      "start": 469.28000000000003,
      "end": 474.32,
      "text": " private IPs. So that should be a good way to create that kind of security boundary."
    },
    {
      "speakerLabel": "spk_0",
      "start": 475.76,
      "end": 480.08000000000004,
      "text": " Now there is a next issue though, which is companies will tell you, okay, but then the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 480.08000000000004,
      "end": 486.32,
      "text": " traffic is not flowing through my VPC because effectively we have to think as CloudFront as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 486.32,
      "end": 491.36,
      "text": " location at the edge, which means that these are servers that live outside the data centers, the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 491.36,
      "end": 499.76,
      "text": " AWS data centers. So you cannot really have kind of a VPC only flow of data. You need to go around"
    },
    {
      "speakerLabel": "spk_0",
      "start": 499.76,
      "end": 505.84000000000003,
      "text": " and that's not always desired because companies would want to track all the traffic in VPCs. They"
    },
    {
      "speakerLabel": "spk_0",
      "start": 505.84000000000003,
      "end": 510.88,
      "text": " often use VPC flow logs. So they are not too happy if you tell them, well, some of your traffic is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 510.88,
      "end": 516.8000000000001,
      "text": " going to go in the public internet anyway. So that's another big no-no."
    },
    {
      "speakerLabel": "spk_0",
      "start": 516.8,
      "end": 521.68,
      "text": " this approach is way more complicated than we wanted it to be. It looks feasible."
    },
    {
      "speakerLabel": "spk_0",
      "start": 521.68,
      "end": 526.0799999999999,
      "text": " It looks nice because you can use S3, but then there is a lot going on there and setting it up correctly and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 526.0799999999999,
      "end": 531.04,
      "text": " securely. It is a lot of work and still there are some areas where it's still not perfect."
    },
    {
      "speakerLabel": "spk_0",
      "start": 531.92,
      "end": 537.8399999999999,
      "text": " So what's the next idea Eoin?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 537.8399999999999,
      "end": 542.3199999999999,
      "text": " I think after that, at this point you'd probably think, okay, well, the way we used to do this is just to run it in a container and have something like Nginx server"
    },
    {
      "speakerLabel": "spk_1",
      "start": 542.32,
      "end": 548.8000000000001,
      "text": " static content. So let's have a look at that. And again, this is probably more complex than you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 548.8000000000001,
      "end": 555.6,
      "text": " might think. And the way you would normally do it is like, let's say take ECS or Fargate,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 555.6,
      "end": 560.48,
      "text": " you'd package your Nginx application, maybe with the static content in it, or else the Nginx is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 560.48,
      "end": 565.7600000000001,
      "text": " pulling and streaming from S3 in the background. And you can put an application load balancer in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 565.7600000000001,
      "end": 569.6800000000001,
      "text": " front of that. Then of course you have to make sure it's connected to your VPC correctly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 569.68,
      "end": 575.52,
      "text": " And then you're running your container in multiple availability zones. And with the load balancer,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 575.52,
      "end": 581.04,
      "text": " you can attach your HTTPS certificate. You can integrate it with Route 53 private hosted zones"
    },
    {
      "speakerLabel": "spk_1",
      "start": 581.04,
      "end": 586.7199999999999,
      "text": " or third-party DNS, and you're ready to go. I still think it's like quite a lot of work"
    },
    {
      "speakerLabel": "spk_1",
      "start": 586.7199999999999,
      "end": 592.8,
      "text": " for what you're trying to do here. If we go back to one of your first ideas, if we just had HTTPS"
    },
    {
      "speakerLabel": "spk_1",
      "start": 592.8,
      "end": 598.56,
      "text": " in S3 and a private option there, you could use your resource policy and restrict it to your VPC."
    },
    {
      "speakerLabel": "spk_1",
      "start": 598.56,
      "end": 603.92,
      "text": " That would simplify the thing a lot, but it seems like if you were to compare"
    },
    {
      "speakerLabel": "spk_1",
      "start": 604.64,
      "end": 610.56,
      "text": " this kind of container setup to just running a very simple API with Lambda, it's a lot of work."
    },
    {
      "speakerLabel": "spk_1",
      "start": 611.52,
      "end": 616.56,
      "text": " And since we're mentioning API Gateway, I mean, there is a workaround here that maybe some people"
    },
    {
      "speakerLabel": "spk_1",
      "start": 616.56,
      "end": 620.88,
      "text": " would think of in this case, which could be a bit easier, which is you could say, well,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 620.88,
      "end": 626,
      "text": " let's just use our API Gateway to serve our static content instead. And that's something that can"
    },
    {
      "speakerLabel": "spk_1",
      "start": 626,
      "end": 630.72,
      "text": " definitely work. You can imagine an API Gateway endpoint with a Lambda function behind it, and it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 630.72,
      "end": 636.24,
      "text": " will take the content from your S3 bucket and push it through back to your response."
    },
    {
      "speakerLabel": "spk_1",
      "start": 636.88,
      "end": 640.96,
      "text": " You could also do like a service proxy integration, like we talked about in the last episode,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 641.6,
      "end": 646.88,
      "text": " and fetch data directly from S3 and go back through the API Gateway. But there's a couple"
    },
    {
      "speakerLabel": "spk_1",
      "start": 646.88,
      "end": 652.08,
      "text": " of limits there, and we talked about these limits recently when we were talking about response"
    },
    {
      "speakerLabel": "spk_1",
      "start": 652.08,
      "end": 659.2,
      "text": " streaming with Lambda. You have a 10 megabyte payload limit in API Gateway. So that could be a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 659.2,
      "end": 666.96,
      "text": " bit of a blocking issue. You can, of course, if you're using Lambda, you can stream the response,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 666.96,
      "end": 671.36,
      "text": " like we mentioned with response streaming. That gives you the time to first byte benefit,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 671.36,
      "end": 675.84,
      "text": " which is important for this kind of scenario. And it will also give you the opportunity to go over"
    },
    {
      "speakerLabel": "spk_1",
      "start": 675.84,
      "end": 680.1600000000001,
      "text": " the 10 megabyte limit. But I don't think response streaming really helps you for this case, because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 680.16,
      "end": 686,
      "text": " you only get that benefit with Lambda function URLs. And Lambda function URLs are not recommended"
    },
    {
      "speakerLabel": "spk_1",
      "start": 686,
      "end": 692,
      "text": " for production by AWS, really. They are for testing Lambda functions, really, and not for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 692,
      "end": 698.56,
      "text": " this kind of highly secure corporate environment. So the other thing is that private custom domain"
    },
    {
      "speakerLabel": "spk_1",
      "start": 698.56,
      "end": 702.4,
      "text": " names in API Gateway, you still need a load balancer anyway. So it seems like no matter what"
    },
    {
      "speakerLabel": "spk_1",
      "start": 702.4,
      "end": 708.4,
      "text": " direction we turn to, things are just getting more complex instead of simpler. Is there any hope"
    },
    {
      "speakerLabel": "spk_1",
      "start": 708.4,
      "end": 714.0799999999999,
      "text": " for a simpler approach, Luciano?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 714.0799999999999,
      "end": 720.72,
      "text": " There is maybe one. I mean, recently, we've been looking into AppRunner, which is a relatively new service from AWS. And the nice thing with AppRunner is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 720.72,
      "end": 728.0799999999999,
      "text": " it tries to be a lot more like a SaaS offering, where in a way similar to what Vercell or Netify"
    },
    {
      "speakerLabel": "spk_0",
      "start": 728.0799999999999,
      "end": 734.0799999999999,
      "text": " would be doing for you, where you just provide a repository or a container image, and you don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 734.08,
      "end": 738.88,
      "text": " have to worry too much about everything else. AWS will take care of load balancers, network,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 738.88,
      "end": 743.12,
      "text": " scaling groups, and all the different things that we generally have to create ourselves when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 743.12,
      "end": 750.1600000000001,
      "text": " deploying things on AWS. So it's kind of trading convenience for less control. You don't see a lot"
    },
    {
      "speakerLabel": "spk_0",
      "start": 750.1600000000001,
      "end": 754.96,
      "text": " of the stuff that is going on, but you get a lot more convenience. And you can definitely run"
    },
    {
      "speakerLabel": "spk_0",
      "start": 754.96,
      "end": 762.1600000000001,
      "text": " static websites on AppRunner publicly. You just do a container that will serve your static assets."
    },
    {
      "speakerLabel": "spk_0",
      "start": 762.16,
      "end": 768.7199999999999,
      "text": " But what it looks like for a private alternative, can we do that? And until very recently, you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 768.7199999999999,
      "end": 774,
      "text": " couldn't really do private containers using AppRunner. But this has just changed because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 774,
      "end": 779.76,
      "text": " now you can create private endpoints in AppRunner, which are only accessible from a specific VPC and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 779.76,
      "end": 784.48,
      "text": " uses the VPC interface endpoints feature. So we are going to have a link in the show notes if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 784.48,
      "end": 788.9599999999999,
      "text": " want to deep dive on this feature. But this is what is kind of making us reconsider AppRunner for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 788.96,
      "end": 794.48,
      "text": " this particular use case. And we could get this up and running by following a few steps. So definitely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 794.48,
      "end": 799.52,
      "text": " we need to define the container image. So what I could think is the simplest way to serve static"
    },
    {
      "speakerLabel": "spk_0",
      "start": 799.52,
      "end": 805.2,
      "text": " assets is to just spin up an NGINX container. You make sure to bundle all your static assets in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 805.2,
      "end": 811.6800000000001,
      "text": " NGINX HTTP folder. And then that container should be a good enough starting point for serving those"
    },
    {
      "speakerLabel": "spk_0",
      "start": 811.68,
      "end": 820.4,
      "text": " static assets on the web. Now we need to, the way that you expose this stuff to AppRunner, again,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 820.4,
      "end": 825.3599999999999,
      "text": " is either to a repository, for instance, on GitHub, or through an ECR registry. So you can decide"
    },
    {
      "speakerLabel": "spk_0",
      "start": 825.3599999999999,
      "end": 831.8399999999999,
      "text": " whether you want to publish stuff directly to a registry or keep a repository and then AppRunner"
    },
    {
      "speakerLabel": "spk_0",
      "start": 831.8399999999999,
      "end": 836.9599999999999,
      "text": " will abstract the publishing process for you. You also need to create a VPC endpoint, interface"
    },
    {
      "speakerLabel": "spk_0",
      "start": 836.96,
      "end": 841.76,
      "text": " endpoint, and something that is called ingress connection. That is what is used to link that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 841.76,
      "end": 848.5600000000001,
      "text": " endpoint to the AppRunner service. Finally, you need to set up a custom domain. And that is where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 848.5600000000001,
      "end": 854.48,
      "text": " things get a little bit hairy. And because that forces you to use a public DNS record."
    },
    {
      "speakerLabel": "spk_0",
      "start": 855.36,
      "end": 861.36,
      "text": " At least it doesn't support yet private hosted zones, but there is an open issue on GitHub. So"
    },
    {
      "speakerLabel": "spk_0",
      "start": 861.36,
      "end": 866.96,
      "text": " hopefully that's something that is going to change soon enough in the future. So I think that's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 867.6,
      "end": 873.12,
      "text": " quite a reasonable option, but is it what we would recommend today or do we have a different"
    },
    {
      "speakerLabel": "spk_0",
      "start": 873.12,
      "end": 879.2,
      "text": " final recommendation?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 879.2,
      "end": 884.32,
      "text": " I think given everything we've said, it depends on what category you fall into, but let's assume that in a strict corporate environment, you can't let anything be visible"
    },
    {
      "speakerLabel": "spk_1",
      "start": 884.32,
      "end": 888.4,
      "text": " outside your organization. So no public DNS, everything is completely strict, all within the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 888.4,
      "end": 894.4,
      "text": " network boundary. You're not going for a zero trust policy on this at all. So if you have that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 894.4,
      "end": 898.8,
      "text": " case, then I think the most pragmatic solution is to go with that Fargate container and load"
    },
    {
      "speakerLabel": "spk_1",
      "start": 898.8,
      "end": 903.6,
      "text": " balancer approach that you described. The way I do it though, is I say, okay, within a corporate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 903.6,
      "end": 908.72,
      "text": " environment, don't make every team do that every time they need to deploy a static website."
    },
    {
      "speakerLabel": "spk_1",
      "start": 908.72,
      "end": 914.8,
      "text": " Instead, provide centralized platform that where you do this once and pretty much leave it running"
    },
    {
      "speakerLabel": "spk_1",
      "start": 914.8,
      "end": 919.12,
      "text": " and you just monitor it and support it like you do everything else in your platform. Just have"
    },
    {
      "speakerLabel": "spk_1",
      "start": 919.12,
      "end": 923.3599999999999,
      "text": " a centralized bit of infrastructure with your Fargate container application load balancer,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 923.3599999999999,
      "end": 927.04,
      "text": " and allow people to just publish containers somewhere to start that content, or just put"
    },
    {
      "speakerLabel": "spk_1",
      "start": 927.04,
      "end": 932.24,
      "text": " their content into a bucket and automate the process of making that available then as a static"
    },
    {
      "speakerLabel": "spk_1",
      "start": 932.24,
      "end": 938.9599999999999,
      "text": " website with a certificate and a domain and all of that good stuff. Just as if S3 already had that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 938.96,
      "end": 945.84,
      "text": " out of the box for a private corporate network. And you can also use application scaling at Fargate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 945.84,
      "end": 949.84,
      "text": " to make sure it scales to your needs. So while this is a complex enough setup for just a single"
    },
    {
      "speakerLabel": "spk_1",
      "start": 949.84,
      "end": 954.64,
      "text": " web application, if you've got some strict applications, strict requirements, and you've got"
    },
    {
      "speakerLabel": "spk_1",
      "start": 954.64,
      "end": 960.72,
      "text": " multiple teams that you want to allow them to publish with very minimal manual effort, static"
    },
    {
      "speakerLabel": "spk_1",
      "start": 960.72,
      "end": 964.8000000000001,
      "text": " websites for different line of business applications, then I think this is a good compromise"
    },
    {
      "speakerLabel": "spk_1",
      "start": 964.8,
      "end": 972.4799999999999,
      "text": " solution."
    },
    {
      "speakerLabel": "spk_0",
      "start": 972.4799999999999,
      "end": 978.0799999999999,
      "text": " I like this approach because I think it kind of removes that on one side it still gives you the S3 option, which is the simplest interface I could think of if I just want to publish static"
    },
    {
      "speakerLabel": "spk_0",
      "start": 978.0799999999999,
      "end": 982.9599999999999,
      "text": " assets. On the other side, if you have a platform that takes care of updates and making sure"
    },
    {
      "speakerLabel": "spk_0",
      "start": 982.9599999999999,
      "end": 987.4399999999999,
      "text": " everything is always up and running with the most secure setup, and you avoid duplicating all of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 987.4399999999999,
      "end": 991.68,
      "text": " that work for every single team for every single project, I think that seems like a very good"
    },
    {
      "speakerLabel": "spk_0",
      "start": 991.68,
      "end": 997.28,
      "text": " compromise. So it would be nice to be able to suggest some open source solution that does that,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 997.28,
      "end": 1002.2399999999999,
      "text": " but I don't think I'm aware of one. So if you know of something like this, please leave us a comment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1003.76,
      "end": 1009.04,
      "text": " in the comments box below. So let's maybe try to wrap up this episode by summarizing all the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1009.04,
      "end": 1014.2399999999999,
      "text": " options we mentioned today. So we have S3 with CloudFront, which is good performance,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1014.2399999999999,
      "end": 1020.16,
      "text": " global distribution, HTTPS support, but it's definitely an overkill. The CDN is still public,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1020.16,
      "end": 1027.28,
      "text": " and you are relying on IP whitelisting. So good enough, but not quite. Then we discuss containers"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1027.28,
      "end": 1034.24,
      "text": " on ECS Fargate with ALB, which is good because it meets all the strict requirements. It's probably"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1034.24,
      "end": 1040.08,
      "text": " easy enough for new teams to add web applications when they need it, but it would be a bit too"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1040.08,
      "end": 1044.24,
      "text": " complex for a single web application because you need to set up a lot of stuff up front."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1044.24,
      "end": 1050.88,
      "text": " Then we have API Gateway, which could be used with Lambda to fetch from S3. It doesn't need"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1050.88,
      "end": 1056.96,
      "text": " to have a multi-xid setup and load balancers, but then it's limited to 10 megabytes, which could be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1056.96,
      "end": 1062,
      "text": " a very strict requirement, maybe if you're serving big files, I don't know, maybe you have big images"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1062,
      "end": 1068.24,
      "text": " or other kind of big enough payloads. Also doing private custom domains is not supported yet, so"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1068.24,
      "end": 1075.1200000000001,
      "text": " that's another big issue. Finally, we have AppRunner, which is an interesting solution. It is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1075.1200000000001,
      "end": 1079.1200000000001,
      "text": " probably something that we will need to revisit more in the future. It might become one of the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1079.1200000000001,
      "end": 1083.68,
      "text": " best solutions if they enable certain features. As of today, it's simple enough to set up, it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1083.68,
      "end": 1090.16,
      "text": " multi-xid, it can give you private endpoints, but then you still are running public DNS records,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1090.16,
      "end": 1094.32,
      "text": " so that's something that some companies might not be entirely happy with, and they might just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1094.32,
      "end": 1100.24,
      "text": " disregard the solution because of that. Hopefully, that issue will be eventually closed and we will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1100.24,
      "end": 1104.96,
      "text": " have that support, which might make AppRunner one of the best options out there for AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1105.76,
      "end": 1112.3999999999999,
      "text": " So that's everything we have for today, and again, if you think that we missed any idea that you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1112.3999999999999,
      "end": 1115.9199999999998,
      "text": " maybe have solved this problem in a different way and you want to share your approach, we'd love to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1115.9199999999998,
      "end": 1120.48,
      "text": " hear that. I think we spent significant amount of time thinking about this problem. For sure, we are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1120.48,
      "end": 1125.76,
      "text": " missing some option there. I'm sure there are many other combinations of AWS services that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1125.76,
      "end": 1130.48,
      "text": " use to achieve something like this, so if you know any one of them, please share it with us. We'd love"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1130.48,
      "end": 1151.76,
      "text": " to hear from you. Thank you very much, and we'll see you in the next episode."
    }
  ]
}