WEBVTT

1
00:00:00.000 --> 00:00:04.800
Are you tired of being tied to your local development environment when working on your cloud projects?

2
00:00:04.800 --> 00:00:10.960
Well, today we'll talk about how to use VS Code to develop against a remote cloud 9 instance running on AWS.

3
00:00:10.960 --> 00:00:15.280
With this setup, you can go from anywhere and take advantage of the power of the cloud.

4
00:00:15.280 --> 00:00:19.280
So whether you're working from home, a coffee shop, or maybe on a beach in Sicily,

5
00:00:19.280 --> 00:00:23.280
you can continue developing your project without worrying about hardware limitations.

6
00:00:23.280 --> 00:00:26.320
If you are like me, you probably spend a lot of money to get an iPad,

7
00:00:26.320 --> 00:00:30.000
and you might be happy to know that you can finally use it also for coding.

8
00:00:30.000 --> 00:00:34.640
So in this episode, we'll talk you through the process of launching a cloud 9 IDE

9
00:00:34.640 --> 00:00:39.600
and two different ways that you can use to basically edit the code using VS Code

10
00:00:39.600 --> 00:00:42.400
instead of using directly cloud 9 as an editor.

11
00:00:42.400 --> 00:00:46.880
My name is Luciano and I'm here with Eoin, and this is another episode of AWS Bites podcast.

12
00:00:46.880 --> 00:00:56.160
AWS Bites is sponsored by fourTheorem.

13
00:00:56.160 --> 00:01:01.200
fourTheorem is an AWS consulting partner offering training, cloud migrations, and architecture.

14
00:01:01.200 --> 00:01:04.640
Find out more at fourtheorem.com. You'll find the link in the show notes.

15
00:01:05.680 --> 00:01:09.920
So let's start with the question, why would you want to remotely develop with VS Code?

16
00:01:11.280 --> 00:01:14.960
And I think there are some use cases here that are interesting,

17
00:01:14.960 --> 00:01:19.360
and maybe not just the fact that you might be in Sicily enjoying some sunshine.

18
00:01:20.880 --> 00:01:24.720
Maybe somebody calls you because there is an urgent bug to fix,

19
00:01:24.720 --> 00:01:28.560
and you have to struggle to fix it without leaving the seaside, right?

20
00:01:28.560 --> 00:01:31.440
So that could be one use case, but let's think about other use cases.

21
00:01:32.000 --> 00:01:36.160
Maybe a simple one that actually is something that happens to us quite commonly in our line

22
00:01:36.160 --> 00:01:39.520
of work is when we have to do training or when we have to deliver a demo.

23
00:01:39.520 --> 00:01:42.800
Maybe you want to have some kind of isolated development environment

24
00:01:42.800 --> 00:01:47.680
to give people the opportunity to play around, but without having them to think,

25
00:01:47.680 --> 00:01:50.240
okay, I need to set up an entire development machine.

26
00:01:50.240 --> 00:01:52.560
So maybe we can give them something a little bit easier.

27
00:01:52.560 --> 00:01:55.760
That's actually, I think, one of the most representative use cases here.

28
00:01:56.720 --> 00:02:00.560
Another one could be when you have many developers in an organization,

29
00:02:00.560 --> 00:02:08.160
and it might be tricky to set up the development environment for everyone in kind of a uniform way.

30
00:02:08.160 --> 00:02:10.240
So if you can set up something in the cloud,

31
00:02:10.240 --> 00:02:13.200
that could be a solution that gets people started very quickly,

32
00:02:13.200 --> 00:02:16.160
and they are not also limited by specific hardware.

33
00:02:16.160 --> 00:02:19.760
Another one is that if you cannot access the network,

34
00:02:19.760 --> 00:02:22.640
the specific AWS network resources from your laptop,

35
00:02:24.080 --> 00:02:25.680
that client needs to be in AWS.

36
00:02:25.680 --> 00:02:28.560
So by setting up the development environment directly in AWS,

37
00:02:28.560 --> 00:02:33.600
you can easily work around that limitation of being physically present in that network

38
00:02:33.600 --> 00:02:34.800
with your development machine.

39
00:02:35.600 --> 00:02:39.200
So what kind of options do we have here to start to set things up?

40
00:02:39.200 --> 00:02:40.960
Yeah, so maybe just for a bit of context first.

41
00:02:40.960 --> 00:02:43.200
So in case people haven't used Cloud9,

42
00:02:43.200 --> 00:02:46.320
it's basically an AWS service that gives you a development environment.

43
00:02:46.320 --> 00:02:49.680
And how it does that is you can either use an existing EC2 instance,

44
00:02:49.680 --> 00:02:51.360
or it'll spin one up for you,

45
00:02:51.360 --> 00:02:54.720
and then it gives you a code editor and a terminal in the browser

46
00:02:54.720 --> 00:02:56.240
that you can use to do your development.

47
00:02:56.240 --> 00:03:00.160
And it's quite common to use this for training and once-off environments.

48
00:03:00.160 --> 00:03:02.080
But the Cloud9 editor is pretty good,

49
00:03:02.080 --> 00:03:06.320
but it's not as good as all of the best editors out there like VS Code or Vim,

50
00:03:06.320 --> 00:03:07.360
which is obviously the best.

51
00:03:07.360 --> 00:03:12.080
There's a couple of things you can now do if you want to get around that limitation.

52
00:03:12.080 --> 00:03:15.120
And in fact, these methods will also work with just an EC2 instance.

53
00:03:15.120 --> 00:03:16.240
It doesn't have to be Cloud9.

54
00:03:16.960 --> 00:03:18.880
So what you need to do to get started,

55
00:03:18.880 --> 00:03:22.800
if you want to use VS Code on your local machine,

56
00:03:22.800 --> 00:03:25.280
is install the VS Code remote development extension.

57
00:03:26.080 --> 00:03:27.920
And then there's two methods here.

58
00:03:27.920 --> 00:03:29.440
One is using SessionManager.

59
00:03:29.440 --> 00:03:32.640
And we just talked about SessionManager as part of the Bastion host episode.

60
00:03:33.280 --> 00:03:36.640
And one of the things we mentioned that SessionManager can do in SSM

61
00:03:36.640 --> 00:03:39.840
is it can provide you with SSH tunnels.

62
00:03:39.840 --> 00:03:43.040
And that's the secret ingredient here to making this work.

63
00:03:44.000 --> 00:03:46.160
So if you've got AWS CLI installed,

64
00:03:46.880 --> 00:03:49.760
and then you've got the SessionManager plugin for AWS CLI installed,

65
00:03:50.320 --> 00:03:52.080
then you can set up this tunnel.

66
00:03:52.080 --> 00:03:54.240
And the process for that, there's a few steps,

67
00:03:54.240 --> 00:03:55.760
and I'll just run through them really quickly.

68
00:03:56.320 --> 00:03:57.840
You need to have an SSH key.

69
00:03:57.840 --> 00:03:58.960
So you might have one already,

70
00:03:58.960 --> 00:04:01.280
or you might create one just for this purpose.

71
00:04:01.280 --> 00:04:03.360
So you do your SSH keygen to generate that.

72
00:04:03.360 --> 00:04:08.000
On your Cloud9 instance, then you can go to the shell in that instance.

73
00:04:08.000 --> 00:04:09.520
You need to find out your instance ID.

74
00:04:09.520 --> 00:04:11.360
So you can get that from the EC2 console,

75
00:04:11.360 --> 00:04:14.880
or you can curl it from the metadata service in EC2.

76
00:04:14.880 --> 00:04:16.400
Once you have that instance ID,

77
00:04:16.400 --> 00:04:18.160
which is the one that begins with `i-`,

78
00:04:19.040 --> 00:04:21.840
then you also need to add the public key

79
00:04:21.840 --> 00:04:24.880
that you generated to your authorized keys on the Cloud9 instance.

80
00:04:24.880 --> 00:04:29.120
So that's basically authorizing your client to connect to this SSH server.

81
00:04:29.120 --> 00:04:31.440
And the SSH server is already running on the Cloud9 instance.

82
00:04:31.440 --> 00:04:33.520
So you don't have to start it or configure it.

83
00:04:34.160 --> 00:04:37.440
Then on your client machine, this is where the magic happens.

84
00:04:37.440 --> 00:04:40.320
So you edit the SSH config on your local machine,

85
00:04:41.200 --> 00:04:43.360
and you need to add in basically a rule that says,

86
00:04:43.360 --> 00:04:46.720
whenever my host matches the syntax, which is `i-*`,

87
00:04:47.760 --> 00:04:50.400
then create this proxy locally.

88
00:04:50.400 --> 00:04:53.680
And by the way, the instructions for doing this are in the SSM documentation.

89
00:04:53.680 --> 00:04:55.760
So this isn't unique to what we're trying to do here.

90
00:04:55.760 --> 00:04:59.520
If you search for how to create an SSH tunnel with SSM,

91
00:04:59.520 --> 00:05:01.760
with SSM, you'll find these instructions.

92
00:05:01.760 --> 00:05:03.440
And we can also put a link in the show notes.

93
00:05:04.400 --> 00:05:09.040
And that means that every time you do SSH to an `i-` host,

94
00:05:09.040 --> 00:05:10.880
that it will basically intercept that

95
00:05:10.880 --> 00:05:13.920
and create an AWS SSM start session command with the CLI.

96
00:05:14.720 --> 00:05:19.680
And it will create this local tunnel that goes over SSM,

97
00:05:19.680 --> 00:05:22.000
uses IAM authentication to do the SSM.

98
00:05:22.560 --> 00:05:28.720
And suddenly you've got a socket between your host and the remote Cloud9 instance.

99
00:05:28.720 --> 00:05:31.200
So then you can just SSH directly into your Cloud9 instance.

100
00:05:31.200 --> 00:05:32.800
First check that that works.

101
00:05:33.520 --> 00:05:37.920
Then you can also create a few additional parameters in this SSH config,

102
00:05:37.920 --> 00:05:40.000
which VS Code can then pick up.

103
00:05:40.000 --> 00:05:43.200
So you basically make sure you specify your Cloud9 host

104
00:05:43.760 --> 00:05:46.960
and the user you want to connect as, which is usually EC2 user.

105
00:05:47.760 --> 00:05:50.080
And that's it. That's all your setup done.

106
00:05:50.080 --> 00:05:54.480
Now you can just go VS Code, do control shift P or command shift P

107
00:05:54.480 --> 00:05:56.240
and select the connect to host option.

108
00:05:56.240 --> 00:06:01.280
And this host then, VS Code will automatically pick up this entry from your SSH config

109
00:06:01.280 --> 00:06:02.400
and allow you to connect to it.

110
00:06:02.400 --> 00:06:05.760
And right away, you're up and coding on this remote instance.

111
00:06:05.760 --> 00:06:08.720
You've got your VS Code environment on your laptop

112
00:06:08.720 --> 00:06:10.160
with everything you've configured on.

113
00:06:10.160 --> 00:06:12.880
You can, you get your autocompletion and your IntelliSense.

114
00:06:12.880 --> 00:06:14.480
You've got the VS Code terminal.

115
00:06:14.480 --> 00:06:18.640
You can do debugging, everything just works out of the box.

116
00:06:18.640 --> 00:06:22.960
Nice.

117
00:06:22.960 --> 00:06:25.120
I haven't seen before this proxy command thing with SSH, but sounds pretty clever and pretty useful in this,

118
00:06:25.120 --> 00:06:30.560
but in this particular case, I think it's useful also to summarize all the steps

119
00:06:30.560 --> 00:06:32.400
other than just linking the official documentation,

120
00:06:32.400 --> 00:06:36.160
we'll summarize all the steps and make them available in a gist on GitHub.

121
00:06:36.160 --> 00:06:37.920
And the link will be in the show notes.

122
00:06:37.920 --> 00:06:42.080
So you can easily just copy paste the commands of everything we just described

123
00:06:42.080 --> 00:06:43.680
and be running very quickly.

124
00:06:44.800 --> 00:06:46.400
So what's the second option?

125
00:06:46.400 --> 00:06:48.400
Because you mentioned there are two options there.

126
00:06:48.400 --> 00:06:49.760
The second option is a lot simpler.

127
00:06:50.320 --> 00:06:50.960
It's a lot easier.

128
00:06:50.960 --> 00:06:52.080
Maybe we should have gone with it first,

129
00:06:52.080 --> 00:06:55.440
but the second option isn't maybe isn't available to everybody,

130
00:06:55.440 --> 00:06:57.200
depending on what kind of environment you're in.

131
00:06:57.200 --> 00:07:01.360
Again, if it's an enterprise corporate restrictions, who knows?

132
00:07:01.360 --> 00:07:03.520
But the other option is using VS Code tunnels,

133
00:07:03.520 --> 00:07:06.240
which is their inbuilt remote development mode,

134
00:07:06.240 --> 00:07:08.080
which doesn't use SSH.

135
00:07:08.800 --> 00:07:13.840
It basically it's like doing its own version of how we described SSM working.

136
00:07:13.840 --> 00:07:16.400
And you're basically establishing a connection from both hosts

137
00:07:17.120 --> 00:07:19.600
into VS Code's proxy layer.

138
00:07:19.600 --> 00:07:22.640
So you could do this by just having two VS Codes running.

139
00:07:22.640 --> 00:07:25.920
You can connect to one from the other if you're signed in with your GitHub account.

140
00:07:26.480 --> 00:07:28.240
It's a bit like VS Code live sharing.

141
00:07:28.240 --> 00:07:30.240
If anyone has used that, it's a similar mechanism.

142
00:07:31.280 --> 00:07:34.080
But on your Cloud9 instance, you don't need to run a full VS Code.

143
00:07:34.080 --> 00:07:35.520
You can run the headless binary.

144
00:07:35.520 --> 00:07:39.120
So you can just download the VS Code CLI from the Microsoft website.

145
00:07:40.240 --> 00:07:44.240
You can run that on any platform, including x64 Linux or ARM Linux.

146
00:07:44.720 --> 00:07:48.240
And then you just get a code binary and you run the command code tunnel.

147
00:07:48.240 --> 00:07:53.440
And right away, it'll allow you to log in using the OAuth device code flow.

148
00:07:53.440 --> 00:07:56.720
Some people might remember that from our live stream episode,

149
00:07:56.720 --> 00:08:00.720
where we built the WeShare product, the WeTransfer clone.

150
00:08:01.440 --> 00:08:03.120
We actually implemented that device code flow.

151
00:08:03.680 --> 00:08:08.000
So that'll allow you to log in with your GitHub account on your VS Code instance,

152
00:08:08.000 --> 00:08:08.960
just using your browser.

153
00:08:09.840 --> 00:08:11.840
And then you just have to give it a machine name.

154
00:08:11.840 --> 00:08:14.480
So you just give it a name like my Cloud9 instance.

155
00:08:14.480 --> 00:08:17.520
And you immediately get a vscode.dev link.

156
00:08:17.520 --> 00:08:20.640
So you can click on that link and then you get a VS Code editor in your browser.

157
00:08:20.640 --> 00:08:25.280
So this is where you might finally, you know, you might be able to pay off your iPad

158
00:08:25.280 --> 00:08:30.240
because you can suddenly start developing on your iPad with this vscode.dev link.

159
00:08:30.240 --> 00:08:32.000
And you don't have to install anything locally.

160
00:08:32.000 --> 00:08:33.600
You can do this on any machine you're in.

161
00:08:33.600 --> 00:08:36.240
You know, even if it's a coffee shop library, you can potentially do this.

162
00:08:37.040 --> 00:08:40.720
But you could also then go back to your VS Code on your host

163
00:08:40.720 --> 00:08:42.720
if you want to use your local environment.

164
00:08:42.720 --> 00:08:47.200
And you can do control shift P, command shift P, and then connect to tunnel

165
00:08:47.200 --> 00:08:49.120
instead of connect to server.

166
00:08:49.680 --> 00:08:52.480
And it'll give you, because you're logged in on GitHub on both sides,

167
00:08:52.480 --> 00:08:54.960
it'll allow you to pick the machine name that you just specified

168
00:08:54.960 --> 00:08:56.800
and you're up and coding again in VS Code.

169
00:08:57.680 --> 00:08:58.000
Nice.

170
00:09:03.440 --> 00:09:07.360
I'll give you an extra tip there that if you use GitHub for login and you have enabled GitHub, so saving your VS Code settings through GitHub,

171
00:09:07.360 --> 00:09:10.160
basically,

172
00:09:10.160 --> 00:09:14.960
when you bootstrap this vscode.dev web instance of VS Code,

173
00:09:14.960 --> 00:09:18.560
it's actually going to start to inherit all your themes and plugins.

174
00:09:18.560 --> 00:09:22.160
So you don't even have to think about reinstalling everything in this environment.

175
00:09:22.160 --> 00:09:26.480
It kind of starts as if it was your main development environment,

176
00:09:26.480 --> 00:09:27.280
which is pretty good.

177
00:09:27.920 --> 00:09:31.760
This really feels like magic, this being able to do this.

178
00:09:31.760 --> 00:09:34.160
I can imagine using this in lots of different situations.

179
00:09:34.160 --> 00:09:38.080
The only thing is I'd love to know more about what it's sharing under the hood,

180
00:09:38.080 --> 00:09:41.200
what is being exposed and being copied from one instance to the other.

181
00:09:41.200 --> 00:09:44.640
Because if you imagine, if you're working on a customer application,

182
00:09:44.640 --> 00:09:47.440
I wouldn't do this without understanding exactly what's being shared.

183
00:09:48.160 --> 00:09:52.720
For example, when I launched my vscode.dev,

184
00:09:53.360 --> 00:09:56.480
I could see that it had picked up that I was using AWS toolkit locally.

185
00:09:56.480 --> 00:09:57.680
It installed this.

186
00:09:57.680 --> 00:10:02.000
I could select various AWS credentials that I had on my local machine,

187
00:10:02.000 --> 00:10:04.240
even though this was running on the remote machine.

188
00:10:04.240 --> 00:10:06.320
Now these credentials didn't actually work,

189
00:10:06.320 --> 00:10:08.160
but it seemed like it made me think,

190
00:10:08.160 --> 00:10:13.120
okay, well, what is actually being shared here between my client machine and my server machine?

191
00:10:14.320 --> 00:10:18.000
Are my local AWS credentials possibly being copied up onto this Cloud9 instance?

192
00:10:18.000 --> 00:10:18.800
I don't think they are,

193
00:10:19.440 --> 00:10:23.760
but it's worth investigating more thoroughly before you would adopt this widely

194
00:10:23.760 --> 00:10:27.200
for sensitive applications or code bases

195
00:10:27.200 --> 00:10:30.320
where you don't want the code to be leaked outside the environment.

196
00:10:30.320 --> 00:10:30.800
Awesome.

197
00:10:30.800 --> 00:10:35.040
So again, we'll make all the links and all the resources available in the show notes.

198
00:10:35.040 --> 00:10:39.360
Make sure to check them out if you are curious to try out some of these ideas.

199
00:10:39.920 --> 00:10:42.480
And we are also curious to know from you, as usual,

200
00:10:42.480 --> 00:10:46.880
if you have solved this problem in different ways, maybe using other tools.

201
00:10:47.600 --> 00:10:50.000
So definitely let us know in the comments.

202
00:10:50.000 --> 00:10:52.960
And if you liked the episode, remember to give us a thumbs up,

203
00:10:52.960 --> 00:10:56.160
subscribe, do a review of the podcast.

204
00:10:56.160 --> 00:10:58.000
If you are listening to the audio podcast,

205
00:10:58.000 --> 00:11:01.200
all of that stuff is going to help us a lot to keep promoting the podcast

206
00:11:01.200 --> 00:11:05.040
and understand what you like the most so we can produce more content like that.

207
00:11:05.040 --> 00:11:31.600
Thank you very much again and we will see you in the next episode.
