{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 2.2800000000000002,
      "text": " For a long time, if you asked a lot of architects,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 2.44,
      "end": 4.84,
      "text": " \"How do I make my system faster?\", the answer was \"Redis\"!"
    },
    {
      "speakerLabel": "spk_0",
      "start": 5.5200000000000005,
      "end": 7.28,
      "text": " It's still one of the most important instruments"
    },
    {
      "speakerLabel": "spk_0",
      "start": 7.44,
      "end": 9,
      "text": " there in the architect's toolbox."
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.16,
      "end": 12.44,
      "text": " On AWS, the recommended way to run Redis has been ElastiCache,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.6,
      "end": 14.120000000000001,
      "text": " but that's not without its problems."
    },
    {
      "speakerLabel": "spk_0",
      "start": 14.280000000000001,
      "end": 17.36,
      "text": " We're going to talk about the joys and woes of Redis on AWS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.52,
      "end": 19.8,
      "text": " and share with you some exciting alternatives."
    },
    {
      "speakerLabel": "spk_0",
      "start": 19.8,
      "end": 30.68,
      "text": " I'm Eoin, I'm here with Luciano and this is the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 30.840000000000003,
      "end": 33.52,
      "text": " Our sponsor is fourTheorem, an AWS consulting partner"
    },
    {
      "speakerLabel": "spk_0",
      "start": 33.68,
      "end": 37.400000000000006,
      "text": " that helps your organization get excited about building software again."
    },
    {
      "speakerLabel": "spk_0",
      "start": 37.56,
      "end": 41.120000000000005,
      "text": " Find out more at fourtheorem.com. You'll find that link in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 41.88,
      "end": 44.64,
      "text": " Luciano, what is Redis and how does it work?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 44.8,
      "end": 45.96,
      "text": " Let's start with the name."
    },
    {
      "speakerLabel": "spk_1",
      "start": 46.120000000000005,
      "end": 48.24,
      "text": " Also, because before we prepare for this episode,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 48.24,
      "end": 51.52,
      "text": " I actually didn't even know what the name of Redis stands for."
    },
    {
      "speakerLabel": "spk_1",
      "start": 52.480000000000004,
      "end": 54.04,
      "text": " We figured it out by looking on Wikipedia"
    },
    {
      "speakerLabel": "spk_1",
      "start": 54.2,
      "end": 58.08,
      "text": " that stands for remote dictionary server, which I don't know."
    },
    {
      "speakerLabel": "spk_1",
      "start": 58.24,
      "end": 61.6,
      "text": " Didn't expect that meaning. Let's move on."
    },
    {
      "speakerLabel": "spk_1",
      "start": 61.760000000000005,
      "end": 63.760000000000005,
      "text": " Let's talk a little bit about the story of Redis"
    },
    {
      "speakerLabel": "spk_1",
      "start": 63.92,
      "end": 65.88,
      "text": " and then try to understand how it works."
    },
    {
      "speakerLabel": "spk_1",
      "start": 66.04,
      "end": 67.92,
      "text": " Redis was born from an Italian startup"
    },
    {
      "speakerLabel": "spk_1",
      "start": 68.08,
      "end": 72.52000000000001,
      "text": " that was building effectively a real-time web log analyzer type of application."
    },
    {
      "speakerLabel": "spk_1",
      "start": 72.68,
      "end": 75.56,
      "text": " I imagine that like some kind of Google Analytics alternative."
    },
    {
      "speakerLabel": "spk_1",
      "start": 75.72,
      "end": 77.12,
      "text": " I don't know if it's too accurate,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 77.12,
      "end": 79.84,
      "text": " but you can imagine the kind of data problems,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 80,
      "end": 81.68,
      "text": " number crunching that you have to do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 81.84,
      "end": 85.68,
      "text": " to keep aggregating all the type of information coming through very quickly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 85.84,
      "end": 90.52000000000001,
      "text": " I believe initially this company was using MySQL for all the persistence,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 90.68,
      "end": 93.76,
      "text": " but they, of course, if at the point of scale"
    },
    {
      "speakerLabel": "spk_1",
      "start": 93.92,
      "end": 98.4,
      "text": " where they needed to do all these operations fast for large volumes of data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 98.56,
      "end": 100.56,
      "text": " MySQL wasn't really enough."
    },
    {
      "speakerLabel": "spk_1",
      "start": 100.72,
      "end": 103.84,
      "text": " Antirez, Salvatore Sanfilippo is the real name,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 103.84,
      "end": 108.52000000000001,
      "text": " was the developer of Redis, which was initially written in Tcl"
    },
    {
      "speakerLabel": "spk_1",
      "start": 108.68,
      "end": 110.12,
      "text": " to try to address this problem."
    },
    {
      "speakerLabel": "spk_1",
      "start": 110.28,
      "end": 113.68,
      "text": " So how do we figure out a different kind of storage"
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.84,
      "end": 116.4,
      "text": " and data persistent layer that allows us to aggregate"
    },
    {
      "speakerLabel": "spk_1",
      "start": 116.56,
      "end": 119.60000000000001,
      "text": " all this information fast enough for this specific problem?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 119.76,
      "end": 121.96000000000001,
      "text": " Now, after the first prototype in Tcl,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 122.12,
      "end": 125.60000000000001,
      "text": " they realized that this solution could work"
    },
    {
      "speakerLabel": "spk_1",
      "start": 125.76,
      "end": 128.56,
      "text": " and they rewrote that in C and open-sourced."
    },
    {
      "speakerLabel": "spk_1",
      "start": 128.72,
      "end": 132.36,
      "text": " And it was actually quite successful, especially in the Ruby space."
    },
    {
      "speakerLabel": "spk_1",
      "start": 132.36,
      "end": 135.92000000000002,
      "text": " And it was quite quickly adopted by GitHub, later on by Instagram."
    },
    {
      "speakerLabel": "spk_1",
      "start": 136.08,
      "end": 140.32000000000002,
      "text": " I believe also Twitter was a heavy user of Redis as well,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 140.48000000000002,
      "end": 143.08,
      "text": " at least for the very initial period."
    },
    {
      "speakerLabel": "spk_1",
      "start": 143.24,
      "end": 146.04000000000002,
      "text": " Now, how does it work and why it is faster than MySQL?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 146.20000000000002,
      "end": 149.88000000000002,
      "text": " And the main difference is that while MySQL is a database"
    },
    {
      "speakerLabel": "spk_1",
      "start": 150.04000000000002,
      "end": 153.4,
      "text": " that tries to give you the best guarantees"
    },
    {
      "speakerLabel": "spk_1",
      "start": 153.56,
      "end": 157.36,
      "text": " that when your writes are acknowledged, they are actually persisted on disk,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 157.52,
      "end": 160.4,
      "text": " and you can trust that you're not going to lose your data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 160.56,
      "end": 162,
      "text": " Redis works in a totally different way"
    },
    {
      "speakerLabel": "spk_1",
      "start": 162,
      "end": 164.36,
      "text": " because performance is the main concern."
    },
    {
      "speakerLabel": "spk_1",
      "start": 164.52,
      "end": 166.44,
      "text": " So what they do, they just store everything in memory."
    },
    {
      "speakerLabel": "spk_1",
      "start": 166.6,
      "end": 168.96,
      "text": " And of course, it's a little bit less reliable"
    },
    {
      "speakerLabel": "spk_1",
      "start": 169.12,
      "end": 171.04,
      "text": " when it comes to making sure that the data is there,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 171.2,
      "end": 173.08,
      "text": " but it will give you very fast times"
    },
    {
      "speakerLabel": "spk_1",
      "start": 173.24,
      "end": 175.64,
      "text": " and it will be doing very, very fast operations."
    },
    {
      "speakerLabel": "spk_1",
      "start": 175.8,
      "end": 177.08,
      "text": " So we'll talk more about the trade-off"
    },
    {
      "speakerLabel": "spk_1",
      "start": 177.24,
      "end": 180.32,
      "text": " and what can you do to mitigate the risk of losing data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 180.48,
      "end": 182.32,
      "text": " So the idea is that you store everything in memory,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 182.48,
      "end": 184.64,
      "text": " but it's also a distributed data store"
    },
    {
      "speakerLabel": "spk_1",
      "start": 184.8,
      "end": 187.64,
      "text": " and it works with that key value kind of mindset."
    },
    {
      "speakerLabel": "spk_1",
      "start": 187.8,
      "end": 189.96,
      "text": " So the main primitive is that you just say,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 189.96,
      "end": 192.44,
      "text": " in this key, I want to store this information,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 192.6,
      "end": 195.04000000000002,
      "text": " and you don't really have a lot of flexibility"
    },
    {
      "speakerLabel": "spk_1",
      "start": 195.20000000000002,
      "end": 197.20000000000002,
      "text": " like you would have with a relational database."
    },
    {
      "speakerLabel": "spk_1",
      "start": 197.36,
      "end": 200.48000000000002,
      "text": " So you really need to think about your key value pairs there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 200.64000000000001,
      "end": 204.52,
      "text": " You get very fast sub-millisecond latency."
    },
    {
      "speakerLabel": "spk_1",
      "start": 204.68,
      "end": 207.08,
      "text": " Very commonly, of course, it might depend on networking,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 207.24,
      "end": 211.4,
      "text": " but if you have a good networking connection with the client,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 211.56,
      "end": 213.56,
      "text": " you get very, very fast times."
    },
    {
      "speakerLabel": "spk_1",
      "start": 213.72,
      "end": 215.20000000000002,
      "text": " It is mostly used for caching."
    },
    {
      "speakerLabel": "spk_1",
      "start": 215.36,
      "end": 218.68,
      "text": " So that's a case where if you lose some of the data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 218.68,
      "end": 220.32,
      "text": " it's not a big deal,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 220.48000000000002,
      "end": 223.36,
      "text": " but you're going to get very, very fast round trips,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 223.52,
      "end": 225.56,
      "text": " reading the data and writing data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 225.72,
      "end": 227.72,
      "text": " It can also be used as a message broker."
    },
    {
      "speakerLabel": "spk_1",
      "start": 227.88,
      "end": 231.36,
      "text": " It does support natively kind of a pub-sub mechanism."
    },
    {
      "speakerLabel": "spk_1",
      "start": 231.52,
      "end": 233.44,
      "text": " And then coming to the durability piece,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 233.6,
      "end": 235.4,
      "text": " there are some options there that you can enable"
    },
    {
      "speakerLabel": "spk_1",
      "start": 235.56,
      "end": 238.56,
      "text": " to try to mitigate the risk of losing data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 238.72,
      "end": 241.4,
      "text": " Like you can create snapshots and do different things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 241.56,
      "end": 244.56,
      "text": " We'll spend a little bit more time later on that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 244.72,
      "end": 247.68,
      "text": " Now, another cool thing is that every time you write something on a key,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 247.68,
      "end": 250.96,
      "text": " you can decide which data type you want to use for that particular key."
    },
    {
      "speakerLabel": "spk_1",
      "start": 251.12,
      "end": 254.32,
      "text": " And then based on that data type, you can do different operations."
    },
    {
      "speakerLabel": "spk_1",
      "start": 254.48000000000002,
      "end": 257.72,
      "text": " So in a way, this could be like your own introduction"
    },
    {
      "speakerLabel": "spk_1",
      "start": 257.88,
      "end": 259.92,
      "text": " to algorithms and data structures."
    },
    {
      "speakerLabel": "spk_1",
      "start": 260.08,
      "end": 263.28000000000003,
      "text": " If you read the documentation where you see all the data types supported"
    },
    {
      "speakerLabel": "spk_1",
      "start": 263.44,
      "end": 265.44,
      "text": " and all the operations for every different data type,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 265.6,
      "end": 267.8,
      "text": " you also get what is the time and space complexity"
    },
    {
      "speakerLabel": "spk_1",
      "start": 267.96000000000004,
      "end": 269.2,
      "text": " of each and every one of them,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 269.36,
      "end": 272.88,
      "text": " which is really cool if you come from a computer science background"
    },
    {
      "speakerLabel": "spk_1",
      "start": 273.04,
      "end": 276,
      "text": " to see in real life how all these different algorithms"
    },
    {
      "speakerLabel": "spk_1",
      "start": 276,
      "end": 279.52,
      "text": " and data structure affect things that you can actually use"
    },
    {
      "speakerLabel": "spk_1",
      "start": 279.68,
      "end": 281.4,
      "text": " in production to build products."
    },
    {
      "speakerLabel": "spk_1",
      "start": 281.56,
      "end": 284.76,
      "text": " And just to give you some examples, you can write, of course, strings,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 284.92,
      "end": 286.68,
      "text": " but you can also write lists, maps,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 286.84,
      "end": 289,
      "text": " which are effectively ash maps or dictionaries."
    },
    {
      "speakerLabel": "spk_1",
      "start": 289.16,
      "end": 291.6,
      "text": " You can also write sets, sorted set."
    },
    {
      "speakerLabel": "spk_1",
      "start": 291.76,
      "end": 294.52,
      "text": " You can even have more advanced data types, for instance, streams,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 294.68,
      "end": 297.32,
      "text": " or you can even use the special indexes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 297.48,
      "end": 300.52,
      "text": " if you are trying to index points in space"
    },
    {
      "speakerLabel": "spk_1",
      "start": 300.68,
      "end": 304.48,
      "text": " and do queries on geographical problems."
    },
    {
      "speakerLabel": "spk_1",
      "start": 304.48,
      "end": 307.92,
      "text": " And other data structures like that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 308.08000000000004,
      "end": 312.68,
      "text": " It is also extensible because it supports out-of-the-box Lua scripting."
    },
    {
      "speakerLabel": "spk_1",
      "start": 312.84000000000003,
      "end": 316.36,
      "text": " So if you want to build, let's say, your own kind of operation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 316.52000000000004,
      "end": 318.04,
      "text": " by using the basic APIs,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 318.20000000000005,
      "end": 321.64000000000004,
      "text": " you could provision into a Redis instance your own Lua script"
    },
    {
      "speakerLabel": "spk_1",
      "start": 321.8,
      "end": 325.36,
      "text": " and then you can invoke it later to do more complicated stuff."
    },
    {
      "speakerLabel": "spk_1",
      "start": 325.52000000000004,
      "end": 329.8,
      "text": " In a way, it kind of reminds me of when you start functions in a database"
    },
    {
      "speakerLabel": "spk_1",
      "start": 329.96000000000004,
      "end": 331.28000000000003,
      "text": " and then you call this function."
    },
    {
      "speakerLabel": "spk_1",
      "start": 331.44,
      "end": 333.20000000000005,
      "text": " It's probably kind of a very similar idea."
    },
    {
      "speakerLabel": "spk_1",
      "start": 333.2,
      "end": 335.68,
      "text": " So stored procedure, that kind of thing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 335.84,
      "end": 338.08,
      "text": " And you can also create pipelines."
    },
    {
      "speakerLabel": "spk_1",
      "start": 338.24,
      "end": 340.44,
      "text": " So if you want to do a series of commands,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 340.59999999999997,
      "end": 343.44,
      "text": " you can just send this kind of pipeline of commands to Redis"
    },
    {
      "speakerLabel": "spk_1",
      "start": 343.59999999999997,
      "end": 345.36,
      "text": " and Redis will execute them in order."
    },
    {
      "speakerLabel": "spk_1",
      "start": 345.52,
      "end": 347.64,
      "text": " And there is kind of a structure in place"
    },
    {
      "speakerLabel": "spk_1",
      "start": 347.8,
      "end": 349.84,
      "text": " that allows you to define this kind of pipelines."
    },
    {
      "speakerLabel": "spk_1",
      "start": 350,
      "end": 352.59999999999997,
      "text": " And finally, one really cool thing, this is more recent."
    },
    {
      "speakerLabel": "spk_1",
      "start": 352.76,
      "end": 355.64,
      "text": " In recent years, the developers of Redis"
    },
    {
      "speakerLabel": "spk_1",
      "start": 355.8,
      "end": 358.2,
      "text": " spend a lot of time trying to make it extensible."
    },
    {
      "speakerLabel": "spk_1",
      "start": 358.36,
      "end": 361.4,
      "text": " And now there is a quite large ecosystem of modules"
    },
    {
      "speakerLabel": "spk_1",
      "start": 361.4,
      "end": 365.64,
      "text": " that you can add on top of Redis to just extend its functionality."
    },
    {
      "speakerLabel": "spk_1",
      "start": 365.79999999999995,
      "end": 370.44,
      "text": " And some interesting use cases are there are modules for full-text search,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 370.59999999999997,
      "end": 374.23999999999995,
      "text": " for converting Redis into kind of a graph database."
    },
    {
      "speakerLabel": "spk_1",
      "start": 374.4,
      "end": 377.4,
      "text": " So for all the kind of graph problems, you can store the information Redis"
    },
    {
      "speakerLabel": "spk_1",
      "start": 377.56,
      "end": 380.44,
      "text": " and the module will give you query functionality"
    },
    {
      "speakerLabel": "spk_1",
      "start": 380.59999999999997,
      "end": 382.35999999999996,
      "text": " to use Redis as a graph database."
    },
    {
      "speakerLabel": "spk_1",
      "start": 382.52,
      "end": 387.03999999999996,
      "text": " And there are also some modules that will give you some ML capabilities."
    },
    {
      "speakerLabel": "spk_1",
      "start": 387.2,
      "end": 388.84,
      "text": " So given all this introduction,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 388.84,
      "end": 392.56,
      "text": " and now you should be understanding all the capability of Redis,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 392.71999999999997,
      "end": 394.76,
      "text": " what is it good for? What are some use cases?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 394.91999999999996,
      "end": 397.2,
      "text": " Session storage is probably the number one use case."
    },
    {
      "speakerLabel": "spk_0",
      "start": 397.35999999999996,
      "end": 402.08,
      "text": " So if you go back to the early days of web applications,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 402.23999999999995,
      "end": 405.88,
      "text": " it was more common in the beginning to not have any high availability"
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.03999999999996,
      "end": 408.4,
      "text": " and to have single servers with state in them."
    },
    {
      "speakerLabel": "spk_0",
      "start": 408.55999999999995,
      "end": 411.15999999999997,
      "text": " And eventually people realised that we needed to be able to scale"
    },
    {
      "speakerLabel": "spk_0",
      "start": 411.32,
      "end": 415.2,
      "text": " for high availability and also for performance, horizontally scale."
    },
    {
      "speakerLabel": "spk_0",
      "start": 415.35999999999996,
      "end": 418.12,
      "text": " Then the question became, how would you store distributed state"
    },
    {
      "speakerLabel": "spk_0",
      "start": 418.12,
      "end": 419.6,
      "text": " like session storage?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 419.76,
      "end": 423.24,
      "text": " And Redis is, I think it's probably the number one use case there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 423.4,
      "end": 425.8,
      "text": " Also with the web applications, web page caching,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 425.96,
      "end": 429.12,
      "text": " like pre-rendering, pre-rendered server-side content"
    },
    {
      "speakerLabel": "spk_0",
      "start": 429.28000000000003,
      "end": 431.2,
      "text": " is something you can also store in Redis."
    },
    {
      "speakerLabel": "spk_0",
      "start": 431.36,
      "end": 433.24,
      "text": " And then you can just use it as a database cache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 433.4,
      "end": 435.04,
      "text": " And I think this is probably one of the areas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 435.2,
      "end": 437.32,
      "text": " where it became popular in the Rails community,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.48,
      "end": 440.04,
      "text": " where you've got a relational database in the back end,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 440.2,
      "end": 442.96,
      "text": " but you don't want to hit the database for every single query,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 443.12,
      "end": 444.12,
      "text": " especially for reads."
    },
    {
      "speakerLabel": "spk_0",
      "start": 444.28000000000003,
      "end": 445.8,
      "text": " So you could use it as a database cache"
    },
    {
      "speakerLabel": "spk_0",
      "start": 445.96,
      "end": 447.64,
      "text": " because it's only coming from memory."
    },
    {
      "speakerLabel": "spk_0",
      "start": 447.64,
      "end": 449.68,
      "text": " You could save a lot of latency."
    },
    {
      "speakerLabel": "spk_0",
      "start": 449.84,
      "end": 451.96,
      "text": " You can reduce the query load on your database"
    },
    {
      "speakerLabel": "spk_0",
      "start": 452.12,
      "end": 454.52,
      "text": " and that can internally save you a lot of money."
    },
    {
      "speakerLabel": "spk_0",
      "start": 454.68,
      "end": 457.88,
      "text": " So Redis is also a cost optimisation tool in that sense."
    },
    {
      "speakerLabel": "spk_0",
      "start": 458.03999999999996,
      "end": 460.12,
      "text": " It's not just a cache as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 460.28,
      "end": 462.68,
      "text": " So it does have support for pub-sub messaging,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 462.84,
      "end": 465,
      "text": " which means that it has become quite common"
    },
    {
      "speakerLabel": "spk_0",
      "start": 465.15999999999997,
      "end": 467.68,
      "text": " for low latency microservice communication as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 467.84,
      "end": 470.2,
      "text": " I've also been using ElastiCache and Redis"
    },
    {
      "speakerLabel": "spk_0",
      "start": 470.36,
      "end": 472.24,
      "text": " for things like application stage."
    },
    {
      "speakerLabel": "spk_0",
      "start": 472.4,
      "end": 475.71999999999997,
      "text": " So if you've got, especially in a serverless environment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 475.72,
      "end": 477.64000000000004,
      "text": " where you've got lots of Lambda functions"
    },
    {
      "speakerLabel": "spk_0",
      "start": 477.8,
      "end": 479.96000000000004,
      "text": " that need some sort of shared state,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 480.12,
      "end": 482.48,
      "text": " but you want really low latency for that state,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 482.64000000000004,
      "end": 485.52000000000004,
      "text": " you realise you can't just have point-to-point communication"
    },
    {
      "speakerLabel": "spk_0",
      "start": 485.68,
      "end": 488.40000000000003,
      "text": " or networking between functions because that doesn't exist."
    },
    {
      "speakerLabel": "spk_0",
      "start": 488.56,
      "end": 491.32000000000005,
      "text": " Instead, you use Redis as your state store."
    },
    {
      "speakerLabel": "spk_0",
      "start": 491.48,
      "end": 494.28000000000003,
      "text": " Another example, which is kind of similar and related,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 494.44000000000005,
      "end": 499.88000000000005,
      "text": " is when you need to be able to query lots of keys in S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 500.04,
      "end": 503.52000000000004,
      "text": " S3 isn't a file system. It's an object store, as we know."
    },
    {
      "speakerLabel": "spk_0",
      "start": 503.52,
      "end": 507.64,
      "text": " So one of the disadvantages there is that doing file lookup operations"
    },
    {
      "speakerLabel": "spk_0",
      "start": 507.79999999999995,
      "end": 509.32,
      "text": " can be very expensive on S3,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 509.47999999999996,
      "end": 512.88,
      "text": " especially if you want to do a list of all your keys in S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 513.04,
      "end": 516.04,
      "text": " So what I've done in the past in a number of different cases"
    },
    {
      "speakerLabel": "spk_0",
      "start": 516.1999999999999,
      "end": 518.88,
      "text": " is every time an object is put into S3,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 519.04,
      "end": 521.16,
      "text": " you can capture that event with event bridge,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 521.3199999999999,
      "end": 523.8,
      "text": " and then you can have a function or some downstream process"
    },
    {
      "speakerLabel": "spk_0",
      "start": 523.96,
      "end": 528.56,
      "text": " that takes that event and registers the presence of the object in Redis."
    },
    {
      "speakerLabel": "spk_0",
      "start": 528.72,
      "end": 532.3199999999999,
      "text": " And then if you want to do a lookup of all objects with a certain prefix,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 532.32,
      "end": 536.6400000000001,
      "text": " you could just do a list operation in Redis or whatever."
    },
    {
      "speakerLabel": "spk_0",
      "start": 536.8000000000001,
      "end": 538.96,
      "text": " So that makes it incredibly fast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 539.12,
      "end": 541.44,
      "text": " If you were to do this with the S3 API"
    },
    {
      "speakerLabel": "spk_0",
      "start": 541.6,
      "end": 543.2800000000001,
      "text": " and do pagination with list objects,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 543.44,
      "end": 546.6,
      "text": " you could be there for days reading a large bucket with lots of objects."
    },
    {
      "speakerLabel": "spk_1",
      "start": 549.2800000000001,
      "end": 551.6400000000001,
      "text": " Yeah, I do remember that use case, and it was pretty cool to be able to solve it with Redis."
    },
    {
      "speakerLabel": "spk_1",
      "start": 551.8000000000001,
      "end": 554.6,
      "text": " And yeah, the performance difference was impressed."
    },
    {
      "speakerLabel": "spk_0",
      "start": 558,
      "end": 559.84,
      "text": " I think the trade-off there is always that when it comes to Redis, you just need to make sure you have the right memory."
    },
    {
      "speakerLabel": "spk_0",
      "start": 559.84,
      "end": 562.64,
      "text": " And also if you've got lots of objects arriving at a fast period,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 562.8000000000001,
      "end": 564.64,
      "text": " you need to be able to scale it correctly."
    },
    {
      "speakerLabel": "spk_0",
      "start": 564.8000000000001,
      "end": 566.52,
      "text": " So maybe a little bit later on,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 566.6800000000001,
      "end": 569.88,
      "text": " we'll talk a little bit more about the non-serverless nature"
    },
    {
      "speakerLabel": "spk_0",
      "start": 570.0400000000001,
      "end": 571.48,
      "text": " and how we might overcome that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 571.64,
      "end": 574.4,
      "text": " But maybe first let's talk about the persistence."
    },
    {
      "speakerLabel": "spk_0",
      "start": 574.5600000000001,
      "end": 576.88,
      "text": " Some people like to use Redis as a database."
    },
    {
      "speakerLabel": "spk_0",
      "start": 577.0400000000001,
      "end": 581.1600000000001,
      "text": " It's something I would be very fearful of using as a database myself."
    },
    {
      "speakerLabel": "spk_0",
      "start": 581.32,
      "end": 583.88,
      "text": " There are things that will give you ACID compliance."
    },
    {
      "speakerLabel": "spk_0",
      "start": 584.0400000000001,
      "end": 585.36,
      "text": " Redis will not."
    },
    {
      "speakerLabel": "spk_0",
      "start": 585.52,
      "end": 587.24,
      "text": " What persistence options do we have?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 590.6800000000001,
      "end": 592.08,
      "text": " Yeah, so if we just take a vanilla installation of Redis, not necessarily in AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 592.24,
      "end": 595.36,
      "text": " there are some interesting options worth exploring."
    },
    {
      "speakerLabel": "spk_1",
      "start": 595.52,
      "end": 599,
      "text": " And the main one is that you have point-in-time snapshots."
    },
    {
      "speakerLabel": "spk_1",
      "start": 599.16,
      "end": 602,
      "text": " So you can imagine those as a backup"
    },
    {
      "speakerLabel": "spk_1",
      "start": 602.16,
      "end": 603.92,
      "text": " that you can do every once in a while,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 604.08,
      "end": 606.44,
      "text": " and that will give you a full snapshot of all the data"
    },
    {
      "speakerLabel": "spk_1",
      "start": 606.6,
      "end": 608.36,
      "text": " that is currently stored in memory."
    },
    {
      "speakerLabel": "spk_1",
      "start": 608.52,
      "end": 609.92,
      "text": " That's one thing that you can do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 610.08,
      "end": 612.92,
      "text": " and is definitely something recommended to do anyway,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 613.08,
      "end": 615.04,
      "text": " unless you really don't care about losing the data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 615.04,
      "end": 618.16,
      "text": " Maybe it's very cheap for you to rebuild all that information in memory"
    },
    {
      "speakerLabel": "spk_1",
      "start": 618.3199999999999,
      "end": 620.04,
      "text": " if you happen to lose all of it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 620.1999999999999,
      "end": 623.68,
      "text": " The other option is you can use Redis as an append-only file."
    },
    {
      "speakerLabel": "spk_1",
      "start": 623.8399999999999,
      "end": 626.12,
      "text": " You can enable this append-only file log,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 626.28,
      "end": 630.0799999999999,
      "text": " which basically is going to write a transaction log in the background"
    },
    {
      "speakerLabel": "spk_1",
      "start": 630.24,
      "end": 632.16,
      "text": " and you can configure the frequency."
    },
    {
      "speakerLabel": "spk_1",
      "start": 632.3199999999999,
      "end": 636.36,
      "text": " And I think the recommended setup that I saw somewhere was one second."
    },
    {
      "speakerLabel": "spk_1",
      "start": 636.52,
      "end": 641.88,
      "text": " So it's going to flash that transaction log into disk every one second."
    },
    {
      "speakerLabel": "spk_1",
      "start": 641.88,
      "end": 645.92,
      "text": " And that way you have a little bit more guarantee"
    },
    {
      "speakerLabel": "spk_1",
      "start": 646.08,
      "end": 647.56,
      "text": " that if you lose data,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 647.72,
      "end": 650.36,
      "text": " it's not going to be more than one second worth of data."
    },
    {
      "speakerLabel": "spk_1",
      "start": 650.52,
      "end": 654.04,
      "text": " Now, this is still maybe something that could not be acceptable for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 654.2,
      "end": 656.64,
      "text": " Maybe you want really not to lose any record."
    },
    {
      "speakerLabel": "spk_1",
      "start": 656.8,
      "end": 661.2,
      "text": " You can actually even configure the system to flash into disk"
    },
    {
      "speakerLabel": "spk_1",
      "start": 661.36,
      "end": 662.64,
      "text": " for every single record."
    },
    {
      "speakerLabel": "spk_1",
      "start": 662.8,
      "end": 665.52,
      "text": " But I think that kind of defeats the point of Redis a little bit"
    },
    {
      "speakerLabel": "spk_1",
      "start": 665.68,
      "end": 669.24,
      "text": " because then you are converting what is effectively an in-memory database"
    },
    {
      "speakerLabel": "spk_1",
      "start": 669.24,
      "end": 672.5600000000001,
      "text": " into something that needs to write to disk for every single write operation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 672.72,
      "end": 675.64,
      "text": " So you're probably going to lose most of the benefits"
    },
    {
      "speakerLabel": "spk_1",
      "start": 675.8,
      "end": 678.08,
      "text": " in terms of performance that Redis can give you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 678.24,
      "end": 679.48,
      "text": " So this is definitely an option."
    },
    {
      "speakerLabel": "spk_1",
      "start": 679.64,
      "end": 681.6,
      "text": " It could be interesting for you to explore that option,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 681.76,
      "end": 683.28,
      "text": " but just keep in mind that at that point,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 683.44,
      "end": 685.36,
      "text": " you are almost having the same constraints"
    },
    {
      "speakerLabel": "spk_1",
      "start": 685.52,
      "end": 687.64,
      "text": " that you have with a regular relational database"
    },
    {
      "speakerLabel": "spk_1",
      "start": 687.8,
      "end": 690.64,
      "text": " minus all the features that a relational database would give you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 690.8,
      "end": 692.88,
      "text": " So worth considering the kind of trade-off"
    },
    {
      "speakerLabel": "spk_1",
      "start": 693.04,
      "end": 694.92,
      "text": " if you want to go down that path."
    },
    {
      "speakerLabel": "spk_1",
      "start": 695.08,
      "end": 698.4,
      "text": " So in general, it's probably worth enabling both of these options."
    },
    {
      "speakerLabel": "spk_1",
      "start": 698.4,
      "end": 702.28,
      "text": " You can have the snapshots just in case, I don't know,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 702.4399999999999,
      "end": 704.8,
      "text": " something fails or you are restarting your machine."
    },
    {
      "speakerLabel": "spk_1",
      "start": 704.9599999999999,
      "end": 706.76,
      "text": " Maybe you are doing, I don't know, an upgrade."
    },
    {
      "speakerLabel": "spk_1",
      "start": 706.92,
      "end": 710.88,
      "text": " It's going to be very easy for you to rehydrate all that memory"
    },
    {
      "speakerLabel": "spk_1",
      "start": 711.04,
      "end": 713,
      "text": " with the information coming from the backup."
    },
    {
      "speakerLabel": "spk_1",
      "start": 713.16,
      "end": 716.0799999999999,
      "text": " And then you can use this append-only file"
    },
    {
      "speakerLabel": "spk_1",
      "start": 716.24,
      "end": 720.16,
      "text": " just to kind of protect you from data loss."
    },
    {
      "speakerLabel": "spk_1",
      "start": 720.3199999999999,
      "end": 721.8,
      "text": " It's not going to be a perfect protection,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 721.9599999999999,
      "end": 724.8,
      "text": " but it can be quite good for most use cases."
    },
    {
      "speakerLabel": "spk_1",
      "start": 724.96,
      "end": 727.76,
      "text": " Now, all of this makes sense in the sense"
    },
    {
      "speakerLabel": "spk_1",
      "start": 727.76,
      "end": 729.52,
      "text": " of a kind of generic context"
    },
    {
      "speakerLabel": "spk_1",
      "start": 729.68,
      "end": 732.3199999999999,
      "text": " where we are not specifically talking about AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 732.48,
      "end": 734.8,
      "text": " So maybe it's worth spending a little bit of time"
    },
    {
      "speakerLabel": "spk_1",
      "start": 734.96,
      "end": 738.4399999999999,
      "text": " trying to figure out what is AWS giving us out of the box,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 738.6,
      "end": 741.96,
      "text": " what kind of services can we use to provision Redis in AWS,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 742.12,
      "end": 744.16,
      "text": " and what are the features available if we do that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 748.8,
      "end": 751.4,
      "text": " I mean, you can always run Redis on EC2 or in ECS or EKS, manage it yourself and get full control and flexibility,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 751.56,
      "end": 755.56,
      "text": " but we tend to always look for ways of saving ourselves, heavy lifting,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 755.56,
      "end": 759,
      "text": " and all sorts of upgrades and patching."
    },
    {
      "speakerLabel": "spk_0",
      "start": 759.16,
      "end": 762.52,
      "text": " So we turn to the managed version, which is ElastiCache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 762.68,
      "end": 765.0799999999999,
      "text": " ElastiCache is managed cache,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 765.2399999999999,
      "end": 766.92,
      "text": " and it's based on either Redis or Memcache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 767.0799999999999,
      "end": 768.4,
      "text": " So you can kind of choose your flavor"
    },
    {
      "speakerLabel": "spk_0",
      "start": 768.56,
      "end": 771.28,
      "text": " when you set up an ElastiCache cluster."
    },
    {
      "speakerLabel": "spk_0",
      "start": 771.4399999999999,
      "end": 774.4799999999999,
      "text": " Now, despite the fact that it's called ElastiCache,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 774.64,
      "end": 777.68,
      "text": " it's not just a cache, you get all the features pretty much of Redis"
    },
    {
      "speakerLabel": "spk_0",
      "start": 777.8399999999999,
      "end": 780.4799999999999,
      "text": " when you have an ElastiCache Redis instance."
    },
    {
      "speakerLabel": "spk_0",
      "start": 780.64,
      "end": 783.68,
      "text": " So you get PubSub, you get streams."
    },
    {
      "speakerLabel": "spk_0",
      "start": 783.68,
      "end": 788.5999999999999,
      "text": " Of course, those aren't necessarily natively integrated with AWS services."
    },
    {
      "speakerLabel": "spk_0",
      "start": 788.76,
      "end": 790.3199999999999,
      "text": " It's not possible yet, but it would be interesting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 790.4799999999999,
      "end": 794.16,
      "text": " if you could trigger like EventBridge or Lambda from a Redis PubSub."
    },
    {
      "speakerLabel": "spk_0",
      "start": 794.3199999999999,
      "end": 797.3199999999999,
      "text": " It's in memory only, really, so no persistence."
    },
    {
      "speakerLabel": "spk_0",
      "start": 797.4799999999999,
      "end": 799.92,
      "text": " The append only file mode, the AOF,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 800.0799999999999,
      "end": 802.2399999999999,
      "text": " it's not supported anymore on ElastiCache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 802.4,
      "end": 806.16,
      "text": " So you can just use the snapshots,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 806.3199999999999,
      "end": 808.16,
      "text": " and you can also do backups to S3."
    },
    {
      "speakerLabel": "spk_0",
      "start": 808.3199999999999,
      "end": 810.04,
      "text": " You can also do replication groups."
    },
    {
      "speakerLabel": "spk_0",
      "start": 810.1999999999999,
      "end": 812.8,
      "text": " So there's two different ways you can set up"
    },
    {
      "speakerLabel": "spk_0",
      "start": 812.8,
      "end": 814.12,
      "text": " a high availability."
    },
    {
      "speakerLabel": "spk_0",
      "start": 814.28,
      "end": 816.0799999999999,
      "text": " You can have vertical scaling,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 816.24,
      "end": 820.4799999999999,
      "text": " where you just have read replicas in your cluster,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 820.64,
      "end": 823.1999999999999,
      "text": " but you can also set up what's called cluster mode,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 823.3599999999999,
      "end": 827.64,
      "text": " which is where you start sharding your data over multiple nodes,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 827.8,
      "end": 829.3199999999999,
      "text": " and you can scale horizontally as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 829.4799999999999,
      "end": 831.8399999999999,
      "text": " I mentioned that you can do backups to S3,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 832,
      "end": 833.4399999999999,
      "text": " so minimum of one an hour."
    },
    {
      "speakerLabel": "spk_0",
      "start": 833.5999999999999,
      "end": 835.3199999999999,
      "text": " If you want to do more granular backups,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 835.4799999999999,
      "end": 837.64,
      "text": " you'll have to rely on snapshots or some other mechanism."
    },
    {
      "speakerLabel": "spk_0",
      "start": 837.8,
      "end": 839.5999999999999,
      "text": " I think the most important message to take away"
    },
    {
      "speakerLabel": "spk_0",
      "start": 839.76,
      "end": 841.8399999999999,
      "text": " from using ElastiCache on Redis"
    },
    {
      "speakerLabel": "spk_0",
      "start": 841.84,
      "end": 844.64,
      "text": " is it's not a serverless service."
    },
    {
      "speakerLabel": "spk_0",
      "start": 844.8000000000001,
      "end": 846.4,
      "text": " You need to right-size it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 846.5600000000001,
      "end": 851.32,
      "text": " So that means you have to monitor things like your latency,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 851.48,
      "end": 853.88,
      "text": " the performance, CPU, and memory in particular."
    },
    {
      "speakerLabel": "spk_0",
      "start": 854.0400000000001,
      "end": 856.1600000000001,
      "text": " Everything is stored in memory, so you need to keep an eye on that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 856.32,
      "end": 857.9200000000001,
      "text": " There's CloudWatch metrics for all of that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 858.08,
      "end": 859.1600000000001,
      "text": " You should have alarms on them,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 859.32,
      "end": 862.12,
      "text": " and you should be constantly revisiting that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 862.2800000000001,
      "end": 865.36,
      "text": " Redis as well is single-threaded and uses an event loop."
    },
    {
      "speakerLabel": "spk_0",
      "start": 865.52,
      "end": 867.4000000000001,
      "text": " So if you've got expensive commands,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 867.5600000000001,
      "end": 868.8000000000001,
      "text": " like you mentioned Lua scripts,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 868.96,
      "end": 871.32,
      "text": " you could have Lua scripts in your event loop."
    },
    {
      "speakerLabel": "spk_0",
      "start": 871.32,
      "end": 873.8000000000001,
      "text": " That can tie up your cluster for a long time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 873.96,
      "end": 876.48,
      "text": " So you should look at the latency metric to help you spot that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 876.6400000000001,
      "end": 879.6800000000001,
      "text": " and see if you need to spread your workload in some other way"
    },
    {
      "speakerLabel": "spk_0",
      "start": 879.84,
      "end": 882.1600000000001,
      "text": " or just increase the size of the instance"
    },
    {
      "speakerLabel": "spk_0",
      "start": 882.32,
      "end": 884.32,
      "text": " that's underpinning your ElastiCache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 884.48,
      "end": 887.5600000000001,
      "text": " Should we talk about ElastiCache in a serverless context?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 887.72,
      "end": 890.2,
      "text": " Because you mentioned that, and I think it's really interesting"
    },
    {
      "speakerLabel": "spk_1",
      "start": 890.36,
      "end": 896.12,
      "text": " to double down on that and see how serverless it is, ElastiCache."
    },
    {
      "speakerLabel": "spk_1",
      "start": 896.2800000000001,
      "end": 900.6,
      "text": " And you already spoiled it a bit that it is not really that serverless."
    },
    {
      "speakerLabel": "spk_1",
      "start": 900.6,
      "end": 904.28,
      "text": " We need to do cluster management, high availability."
    },
    {
      "speakerLabel": "spk_1",
      "start": 904.44,
      "end": 906.24,
      "text": " We need to figure out what's the right size,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 906.4,
      "end": 908.4,
      "text": " what kind of..."
    },
    {
      "speakerLabel": "spk_1",
      "start": 908.5600000000001,
      "end": 910.96,
      "text": " How much memory do we need effectively for the given workload"
    },
    {
      "speakerLabel": "spk_1",
      "start": 911.12,
      "end": 912.52,
      "text": " that we want to use Redis for?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 912.6800000000001,
      "end": 916.4,
      "text": " So in a way, it reminds me of RDS in terms of experience."
    },
    {
      "speakerLabel": "spk_1",
      "start": 916.5600000000001,
      "end": 920.16,
      "text": " You need... Yeah, you don't necessarily need to host"
    },
    {
      "speakerLabel": "spk_1",
      "start": 920.32,
      "end": 922.24,
      "text": " and make sure everything is running all the time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 922.4,
      "end": 924.84,
      "text": " but you need to know a lot about how Redis works"
    },
    {
      "speakerLabel": "spk_1",
      "start": 925,
      "end": 927.24,
      "text": " and how to configure your workload upfront"
    },
    {
      "speakerLabel": "spk_1",
      "start": 927.24,
      "end": 930.52,
      "text": " if you want to make sure everything is going to work well in production."
    },
    {
      "speakerLabel": "spk_1",
      "start": 930.6800000000001,
      "end": 933.48,
      "text": " And that's, of course, also in terms of networking,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 933.64,
      "end": 935,
      "text": " it requires a VPC."
    },
    {
      "speakerLabel": "spk_1",
      "start": 935.16,
      "end": 939.36,
      "text": " You need to make sure that any instance that wants to connect to Redis"
    },
    {
      "speakerLabel": "spk_1",
      "start": 939.52,
      "end": 941.24,
      "text": " has network access to that VPC."
    },
    {
      "speakerLabel": "spk_1",
      "start": 941.4,
      "end": 942.84,
      "text": " For instance, if you use Lambda,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 943,
      "end": 944.8,
      "text": " that Lambda needs to be provisioned in a subnet"
    },
    {
      "speakerLabel": "spk_1",
      "start": 944.96,
      "end": 948.44,
      "text": " that has access to that ElastiCache VPC."
    },
    {
      "speakerLabel": "spk_1",
      "start": 948.6,
      "end": 953.4,
      "text": " So you might argue there's no necessarily great fit for serverless,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 953.5600000000001,
      "end": 955.16,
      "text": " even though we have been using it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 955.16,
      "end": 957.12,
      "text": " and the performance is still pretty good."
    },
    {
      "speakerLabel": "spk_1",
      "start": 957.28,
      "end": 959.7199999999999,
      "text": " It's just that the amount of effort in managing it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 959.88,
      "end": 962.68,
      "text": " is probably way more than what we wanted it to be."
    },
    {
      "speakerLabel": "spk_1",
      "start": 962.8399999999999,
      "end": 968.36,
      "text": " So if we can have an additional wishlist item for reInvent 2023,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 968.52,
      "end": 972.36,
      "text": " that would be to have a real serverless Redis available in AWS"
    },
    {
      "speakerLabel": "spk_1",
      "start": 972.52,
      "end": 976.36,
      "text": " that we can just click and it's available and it auto scales,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 976.52,
      "end": 978.52,
      "text": " even scales to zero if you're not using it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 978.68,
      "end": 983.48,
      "text": " and pricing should be kind of, of course, proportional to that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 983.48,
      "end": 987.8000000000001,
      "text": " Now, AWS actually announced MemoryDB quite recently,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 987.96,
      "end": 989.16,
      "text": " and we were excited,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 989.32,
      "end": 991.44,
      "text": " but that excitement didn't last too long"
    },
    {
      "speakerLabel": "spk_1",
      "start": 991.6,
      "end": 993.8000000000001,
      "text": " because by just reading the announcement,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 993.96,
      "end": 997.64,
      "text": " we realized, okay, Redis is compatible, is durable, is in memory."
    },
    {
      "speakerLabel": "spk_1",
      "start": 997.8000000000001,
      "end": 1001.6800000000001,
      "text": " All of that were very good tick boxes and made us very happy."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1001.84,
      "end": 1004.28,
      "text": " But then we saw, okay, still requires a VPC,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1004.44,
      "end": 1007.64,
      "text": " still requires us to specify an instance size."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1007.8000000000001,
      "end": 1009.48,
      "text": " Also, it's not open source."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1009.64,
      "end": 1010.9200000000001,
      "text": " While Redis, it is open source,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1010.92,
      "end": 1013.7199999999999,
      "text": " so we don't really know exactly what's going on there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1013.88,
      "end": 1017.16,
      "text": " And it was also in terms of pricing quite expensive,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1017.3199999999999,
      "end": 1018.7199999999999,
      "text": " or at least that's what it seemed"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1018.88,
      "end": 1021.16,
      "text": " from just looking at the table of prices."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1021.3199999999999,
      "end": 1024.32,
      "text": " So the next question will be,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1024.48,
      "end": 1028.92,
      "text": " are there alternatives that maybe are a bit more easier to use"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1029.08,
      "end": 1030.76,
      "text": " when you have a serverless setup?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1030.92,
      "end": 1033.96,
      "text": " Well, if we think about the distributed state example"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1034.12,
      "end": 1035.48,
      "text": " we mentioned earlier,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1035.6399999999999,
      "end": 1038.84,
      "text": " it would actually probably try and go for DynamoDB first before last catch"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1038.84,
      "end": 1040.76,
      "text": " because of the amount of extra management"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1040.9199999999998,
      "end": 1043.9599999999998,
      "text": " and the whole non-serverless nature of ElastiCache."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1044.12,
      "end": 1046.6399999999999,
      "text": " And it might work for you, but DynamoDB,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1046.8,
      "end": 1051.8799999999999,
      "text": " we know that you get single millisecond reads for records on DynamoDB,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1052.04,
      "end": 1054.1599999999999,
      "text": " but your writes can be slower and queries,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1054.32,
      "end": 1056.9199999999998,
      "text": " like if you're trying to do a query like in Redis,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1057.08,
      "end": 1061.28,
      "text": " you can do a wildcard lookup of a bunch of keys with a specific prefix"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1061.4399999999998,
      "end": 1063.9599999999998,
      "text": " and its nanosecond responses."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1064.12,
      "end": 1068.04,
      "text": " With DynamoDB, that's going to be multiple tens,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1068.04,
      "end": 1069.72,
      "text": " hundreds of milliseconds potentially,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1069.8799999999999,
      "end": 1072.08,
      "text": " and you have pagination and all that kind of stuff."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1072.24,
      "end": 1073.84,
      "text": " Now you can use DynamoDB DAX,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1074,
      "end": 1078.04,
      "text": " which is their cache layer that is on top of DynamoDB,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1078.2,
      "end": 1081.12,
      "text": " but that's only going to help if you have a read-heavy workload."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1081.28,
      "end": 1084.24,
      "text": " If you've got lots of writes happening, as many writes as you have reads,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1084.3999999999999,
      "end": 1086.8799999999999,
      "text": " then that read cache isn't really going to help you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1087.04,
      "end": 1089.12,
      "text": " because you still have to write it to DynamoDB,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1089.28,
      "end": 1092.48,
      "text": " it's still going to make sure that it's committed to at least part two nodes"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1092.6399999999999,
      "end": 1094.76,
      "text": " before you get a response."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1094.92,
      "end": 1097.04,
      "text": " So if you really need that low latency,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1097.04,
      "end": 1099.6,
      "text": " then you might look at some of the hosted Redis solutions."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1099.76,
      "end": 1102.92,
      "text": " I think we've mentioned Upstash on the podcast quite a few times."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1103.08,
      "end": 1106.96,
      "text": " They're not sponsors, but we like to point people"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1107.12,
      "end": 1108.3999999999999,
      "text": " in the right direction from time to time."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1108.56,
      "end": 1113.1599999999999,
      "text": " That's a much more serverless option, at least at the pricing level."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1113.32,
      "end": 1114.8799999999999,
      "text": " So you've got Upstash Redis,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1115.04,
      "end": 1117.12,
      "text": " and you also have Redis Enterprise Cloud"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1117.28,
      "end": 1119.8799999999999,
      "text": " from the company that's managing Redis as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1120.04,
      "end": 1122.8799999999999,
      "text": " Now there's been a fairly new player on the block as well,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1123.04,
      "end": 1124.56,
      "text": " which I think is a very interesting one to watch,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1124.56,
      "end": 1127.28,
      "text": " and I've been watching it fairly closely, which is Momento."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1127.44,
      "end": 1131.72,
      "text": " And this is not hosted Redis or even a Redis compatible cache,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1131.8799999999999,
      "end": 1134.8799999999999,
      "text": " but it's a completely new SaaS offering."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1135.04,
      "end": 1137.24,
      "text": " And it's aimed at a similar space, at least for caching,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1137.3999999999999,
      "end": 1141.6799999999998,
      "text": " and they do actually have a new PubSub offering as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1141.84,
      "end": 1145.3999999999999,
      "text": " So this is built on Pelikan, which is an open source caching engine"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1145.56,
      "end": 1148.96,
      "text": " that came from a lot of the ideas in Twitter."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1149.12,
      "end": 1151.2,
      "text": " And this Pelikan open source caching engine"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1151.36,
      "end": 1153.72,
      "text": " has recently been rewritten in Rust,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1153.72,
      "end": 1158.52,
      "text": " so we can expect very low latency and good performance and security there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1158.68,
      "end": 1161.72,
      "text": " And they have their own SDKs, so they have like Java, Node,.NET,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1161.88,
      "end": 1163.76,
      "text": " Python, PHP, Go, Rust."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1163.92,
      "end": 1167.4,
      "text": " And they do actually have a Redis compatible kind of drop-in library"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1167.56,
      "end": 1169.88,
      "text": " for Node.js, which will work for some of the Redis commands,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1170.04,
      "end": 1171.6000000000001,
      "text": " not all of them, I believe."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1171.76,
      "end": 1174.52,
      "text": " And the idea of it is it runs in AWS or GCP,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1174.68,
      "end": 1179.08,
      "text": " so you can pick your cloud host and your region"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1179.24,
      "end": 1181.04,
      "text": " to make sure that you get low latency"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1181.04,
      "end": 1184,
      "text": " and you avoid data transfer costs as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1184.1599999999999,
      "end": 1185.92,
      "text": " And then the pricing on that, at the moment,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1186.08,
      "end": 1187.8799999999999,
      "text": " it's like 50 cents per gigabyte."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1188.04,
      "end": 1190.12,
      "text": " So this is the kind of thing where you could,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1190.28,
      "end": 1192.32,
      "text": " some pricing models will work well for your workload,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1192.48,
      "end": 1195.28,
      "text": " depending on your patterns, your read and write patterns."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.44,
      "end": 1197.24,
      "text": " It could be expensive for data-heavy operations,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1197.3999999999999,
      "end": 1199.68,
      "text": " could be very cheap for lower volume operations,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1199.84,
      "end": 1201.52,
      "text": " but you get a pretty good free tier actually,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1201.68,
      "end": 1204,
      "text": " so 50 gigabytes every month is free."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1204.1599999999999,
      "end": 1207.56,
      "text": " So I think that sounds like a pretty nice incentive"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1207.72,
      "end": 1209.12,
      "text": " to start using Momento."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1209.12,
      "end": 1212.76,
      "text": " It's pretty new, but we suddenly see them everywhere."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1212.9199999999998,
      "end": 1214.9199999999998,
      "text": " And I certainly like the idea of having"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1215.08,
      "end": 1220.2399999999998,
      "text": " a completely serverless, lightweight, simple caching"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1220.3999999999999,
      "end": 1222.4799999999998,
      "text": " that can work with your AWS deployment."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1222.6399999999999,
      "end": 1224.1599999999999,
      "text": " I think that they've got funding as well,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1224.32,
      "end": 1226.76,
      "text": " and I think part of that significant funding they got"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1226.9199999999998,
      "end": 1229.1599999999999,
      "text": " is towards supporting other clouds as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1229.32,
      "end": 1232.7199999999998,
      "text": " So we can probably expect Azure support down the line."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1232.8799999999999,
      "end": 1234.32,
      "text": " I was actually impressed to find"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1234.4799999999998,
      "end": 1236.4399999999998,
      "text": " that they got a cloud formation provider"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1236.6,
      "end": 1238.8799999999999,
      "text": " for their caches as well on GitHub."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1238.88,
      "end": 1241.92,
      "text": " So that you can put that provider in your account,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1242.0800000000002,
      "end": 1245.64,
      "text": " and then you can create a cache just like you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1245.8000000000002,
      "end": 1246.8000000000002,
      "text": " with a Redis cluster."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1246.96,
      "end": 1249.3200000000002,
      "text": " And you can expect the management overhead"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1249.48,
      "end": 1250.96,
      "text": " will be significantly less."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1251.1200000000001,
      "end": 1252.68,
      "text": " If you're looking to find them, by the way,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1252.8400000000001,
      "end": 1255.1200000000001,
      "text": " their website is at gomomento.com,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1255.2800000000002,
      "end": 1256.3200000000002,
      "text": " and that link is in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1256.48,
      "end": 1258.88,
      "text": " I mention this because they seem to have a bit of an SEO problem,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1259.0400000000002,
      "end": 1263.5200000000002,
      "text": " since there's also a Memento database with an E."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263.68,
      "end": 1265.96,
      "text": " Momento, the one we were talking about, is with an O."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1266.1200000000001,
      "end": 1267.72,
      "text": " But definitely check them out."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1267.72,
      "end": 1270.2,
      "text": " So if you have any other alternatives, please let us know."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1270.3600000000001,
      "end": 1272.2,
      "text": " That's it for today's episode of AWS Bites."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1272.3600000000001,
      "end": 1274.92,
      "text": " Whether you watch on YouTube or you listen on your podcast player,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1275.08,
      "end": 1277.4,
      "text": " if you like it, please subscribe, leave a review,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1277.56,
      "end": 1280.1200000000001,
      "text": " and share AWS Bites with your friends and colleagues."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1280.28,
      "end": 1281.48,
      "text": " And we really appreciate that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1281.64,
      "end": 1282.84,
      "text": " We'll see you in the next episode."
    }
  ]
}