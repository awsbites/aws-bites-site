WEBVTT

1
00:00:00.000 --> 00:00:05.720
S3, an object storage service, is one of the oldest and most used AWS services.

2
00:00:05.720 --> 00:00:09.640
Even if you don't use AWS regularly, chances are that you have been working with a project

3
00:00:09.640 --> 00:00:11.280
that relies on S3.

4
00:00:11.280 --> 00:00:15.020
In this episode, we will cover some of the best practices to adopt when creating and

5
00:00:15.020 --> 00:00:17.080
configuring S3 packets.

6
00:00:17.080 --> 00:00:20.520
With the list that we are going to cover today, you'll be able to start with the right setup

7
00:00:20.520 --> 00:00:24.440
straight away and won't have to go back and revisit all your packets.

8
00:00:24.440 --> 00:00:36.800
I am Luciano and I'm here with Eoin for another episode of AWS Bites podcast.

9
00:00:36.800 --> 00:00:41.500
Today's sponsor is fourTheorem, an AWS consulting partner that helps your organization to get

10
00:00:41.500 --> 00:00:44.160
excited again about building software.

11
00:00:44.160 --> 00:00:47.640
Find more at fourtheorem.com, you'll find the link in the show notes.

12
00:00:47.640 --> 00:00:53.320
So, I would like to start today with a very quick recap of what is S3, because maybe it's

13
00:00:53.320 --> 00:00:56.480
the first time that you are approaching this topic and I think it's good to get the basics

14
00:00:56.480 --> 00:01:00.040
nailed down, or maybe you haven't used S3 in a while, and again, it's a good practice

15
00:01:00.040 --> 00:01:03.600
to just review what are the main concepts that we will be relying on for the rest of

16
00:01:03.600 --> 00:01:04.600
the episode.

17
00:01:04.600 --> 00:01:07.200
So, S3 is a storage service.

18
00:01:07.200 --> 00:01:11.740
The name actually means simple storage service, and the idea is that basically it allows you

19
00:01:11.740 --> 00:01:15.920
to store files in a scalable, reliable, and somewhat cheap way.

20
00:01:15.920 --> 00:01:18.320
There are two main concepts.

21
00:01:18.320 --> 00:01:19.640
The first one is bucket.

22
00:01:19.640 --> 00:01:23.880
So the idea of a bucket is pretty much, it is a container where you can store your files.

23
00:01:23.880 --> 00:01:29.920
So you can think about that as a folder or a drive in a kind of a file system, parallel

24
00:01:29.920 --> 00:01:30.920
word.

25
00:01:30.920 --> 00:01:33.600
But of course, it's in the cloud and it scales very different.

26
00:01:33.600 --> 00:01:38.480
It scales to different sizes than you can just scale your local drive.

27
00:01:38.480 --> 00:01:39.960
And what do you put in a bucket?

28
00:01:39.960 --> 00:01:41.080
You put objects.

29
00:01:41.080 --> 00:01:46.060
So this is the actual term that S3 uses for the idea is files, pretty much.

30
00:01:46.060 --> 00:01:51.760
And every file is identified univocally by a key that needs to be unique in that particular

31
00:01:51.760 --> 00:01:52.760
bucket.

32
00:01:52.760 --> 00:01:56.840
Now, again, this is an AWS service, so you can use it from the web console, you can use

33
00:01:56.840 --> 00:02:00.960
it from the CLI, or even programmatically with one of the many SDKs that are available

34
00:02:00.960 --> 00:02:03.320
for different programming languages.

35
00:02:03.320 --> 00:02:07.360
Just to give you some common use cases, when you use S3, what you could do with it, you

36
00:02:07.360 --> 00:02:11.440
could store images, videos, or other assets that you need, for instance, for a web application

37
00:02:11.440 --> 00:02:13.100
or a mobile application.

38
00:02:13.100 --> 00:02:18.300
You can use it as a way to store backups in case of disaster recovery.

39
00:02:18.300 --> 00:02:20.680
You can also use for long term archival.

40
00:02:20.680 --> 00:02:24.320
There is another service that is often used with S3 called Glacier and you can easily

41
00:02:24.320 --> 00:02:28.880
transition your files from S3 to Glacier for long term archival.

42
00:02:28.880 --> 00:02:33.400
You can also use it to implement big data solutions or data lakes where you are going

43
00:02:33.400 --> 00:02:37.880
to be storing lots of structured files and then you can query those files directly from

44
00:02:37.880 --> 00:02:39.040
S3.

45
00:02:39.040 --> 00:02:42.760
You can also use it for application hosting, which means that if you're building a static

46
00:02:42.760 --> 00:02:46.880
web frontend, you can put it in S3 and expose it as a website.

47
00:02:46.880 --> 00:02:49.640
This is a topic that we covered a couple of times already.

48
00:02:49.640 --> 00:02:53.240
We will add the links in the previous episode talking about this in more details in the

49
00:02:53.240 --> 00:02:55.120
show notes.

50
00:02:55.120 --> 00:02:59.440
Now why are we talking today about configuring buckets correctly?

51
00:02:59.440 --> 00:03:03.960
Because this is a common topic and there are very common mistakes that happen all the time.

52
00:03:03.960 --> 00:03:06.520
You will read them all the time in the news.

53
00:03:06.520 --> 00:03:11.280
Some of the common issues are accidentally leaving buckets publicly accessible, which

54
00:03:11.280 --> 00:03:14.820
there have been some very big industry failures.

55
00:03:14.820 --> 00:03:18.840
So if you're curious, you can search for the Equifax and the Capital One instances of this

56
00:03:18.840 --> 00:03:22.360
incident just to get an idea of the magnitude of the problem.

57
00:03:22.360 --> 00:03:24.420
But the idea is that you just forget to make it private.

58
00:03:24.420 --> 00:03:29.020
So whoever figures out the bucket name can read any file in that bucket and all the sensitive

59
00:03:29.020 --> 00:03:32.360
information that might be stored in that bucket.

60
00:03:32.360 --> 00:03:37.520
Or other problems might be if you don't use a very good naming convention.

61
00:03:37.520 --> 00:03:41.400
That is because the names are unique across every account and every region.

62
00:03:41.400 --> 00:03:44.200
You might end up having a conflict with somebody else's bucket.

63
00:03:44.200 --> 00:03:48.600
So you are not in a position where you can automatically provision that bucket maybe

64
00:03:48.600 --> 00:03:50.040
if you're using some script.

65
00:03:50.040 --> 00:03:52.040
So you'll need to figure out some workaround.

66
00:03:52.040 --> 00:03:56.680
So having good convention there will help you out to avoid conflicts.

67
00:03:56.680 --> 00:03:58.360
Other issues are accidental deletion.

68
00:03:58.360 --> 00:04:03.720
So you might end up deleting files and you maybe didn't have a way to kind of have copies

69
00:04:03.720 --> 00:04:05.220
of this file somewhere else.

70
00:04:05.220 --> 00:04:09.960
So you basically lost information that might be very vital for your business.

71
00:04:09.960 --> 00:04:12.600
And we will see how you can protect yourself from that.

72
00:04:12.600 --> 00:04:17.620
And the last one is missing encryption or in general misconfiguration that might force

73
00:04:17.620 --> 00:04:21.840
you to eventually just to fix the problem to have to migrate all the data to another

74
00:04:21.840 --> 00:04:24.380
bucket that is configured correctly.

75
00:04:24.380 --> 00:04:29.040
And therefore all the files copied there will be correctly provisioned.

76
00:04:29.040 --> 00:04:31.600
So shall we start by discussing bucket naming?

77
00:04:31.600 --> 00:04:33.420
Eoin, what do you think?

78
00:04:33.420 --> 00:04:36.160
Bucket naming shouldn't be that much of a big deal, but in fact, what you choose for

79
00:04:36.160 --> 00:04:39.340
your bucket names, especially if you want to have nice consistent bucket names across

80
00:04:39.340 --> 00:04:42.080
the whole organization, it is something important.

81
00:04:42.080 --> 00:04:46.240
And one of the important factors there is that while buckets are created in a specific

82
00:04:46.240 --> 00:04:49.620
region, the names themselves are globally unique.

83
00:04:49.620 --> 00:04:51.480
So avoiding collisions is important.

84
00:04:51.480 --> 00:04:54.680
You can think of them like domain names and you might even have people squatting on them

85
00:04:54.680 --> 00:04:56.160
like domain names.

86
00:04:56.160 --> 00:04:58.240
So there's a couple of recommendations there.

87
00:04:58.240 --> 00:05:01.120
So one thing is to avoid personally identifiable information.

88
00:05:01.120 --> 00:05:04.920
Like if you're having a multi-tenanted app, don't include the customer's name or a tenant's

89
00:05:04.920 --> 00:05:05.920
name in the bucket.

90
00:05:05.920 --> 00:05:10.120
You know, that makes it very difficult to delete that information afterwards.

91
00:05:10.120 --> 00:05:14.160
The bucket name could also be then be exposed in like various cases like API calls, signed

92
00:05:14.160 --> 00:05:16.840
URLs, or even DNS requests.

93
00:05:16.840 --> 00:05:20.640
So then when it comes to making them globally unique, well, you can include a unique portion

94
00:05:20.640 --> 00:05:25.200
and that could be a hash or it could be a combination of like the region, the account

95
00:05:25.200 --> 00:05:27.040
ID and the environment.

96
00:05:27.040 --> 00:05:32.120
So one example would be like ACME, project one, production and the account ID, and then

97
00:05:32.120 --> 00:05:33.120
the region name.

98
00:05:33.120 --> 00:05:38.000
And that will generally make it pretty difficult to have a collision in bucket name, but you

99
00:05:38.000 --> 00:05:43.080
might not like this because it publicly exposes some information like the account ID and that

100
00:05:43.080 --> 00:05:46.000
might be for your tastes or for your compliance.

101
00:05:46.000 --> 00:05:49.040
So instead of that, you could just have a hash of all of those elements.

102
00:05:49.040 --> 00:05:52.140
I still think it's kind of nice to have some of those things visible just for readability

103
00:05:52.140 --> 00:05:56.480
and troubleshooting if you can kind of look at a bucket name and see where it lives, but

104
00:05:56.480 --> 00:05:58.240
that mightn't suit your organization.

105
00:05:58.240 --> 00:06:02.600
But I think either approach is generally good and it is a good idea to have a random part

106
00:06:02.600 --> 00:06:07.680
in it just in case there's that small chance that somebody else happens to have taken or

107
00:06:07.680 --> 00:06:14.840
maliciously squats on a bucket name that has an account ID that you have and your region.

108
00:06:14.840 --> 00:06:17.780
The reason for including a region, by the way, is that you might start off with a bucket

109
00:06:17.780 --> 00:06:21.500
in one region, but later decide that you want cross-region replication.

110
00:06:21.500 --> 00:06:25.680
And then you can just follow the same convention and have a similarly named bucket just with

111
00:06:25.680 --> 00:06:28.920
a different region identifier in it.

112
00:06:28.920 --> 00:06:33.780
Now if you're using CloudFormation to generate your bucket, if you don't put the bucket name

113
00:06:33.780 --> 00:06:37.820
in the template, it will just create one for you and it will do that random identifier

114
00:06:37.820 --> 00:06:39.320
part for you as well.

115
00:06:39.320 --> 00:06:43.240
So it'll take the stack name that you're using in CloudFormation and then just append something

116
00:06:43.240 --> 00:06:46.620
like a 12 character suffix onto the end.

117
00:06:46.620 --> 00:06:50.480
So it doesn't, it isn't very readable, but it does help to automatically avoid those

118
00:06:50.480 --> 00:06:51.480
naming collisions.

119
00:06:51.480 --> 00:06:55.320
And then you can just publish that bucket name somewhere like in an SSM parameter or

120
00:06:55.320 --> 00:06:59.440
a CloudFormation output where other people can use it.

121
00:06:59.440 --> 00:07:00.440
That's bucket naming.

122
00:07:00.440 --> 00:07:04.120
So it's a good idea to know exactly what your bucket name in convention is, have it written

123
00:07:04.120 --> 00:07:08.300
down, enforce it, and then you don't really have to worry about it anymore and you don't

124
00:07:08.300 --> 00:07:11.840
end up with different kind of name buckets all over the place and a bit of a mess.

125
00:07:11.840 --> 00:07:14.900
Beyond that, what other best practices do we need to think about Luciano when we're

126
00:07:14.900 --> 00:07:17.640
setting up buckets for the first time?

127
00:07:17.640 --> 00:07:19.520
One of the things I really like is versioning.

128
00:07:19.520 --> 00:07:28.320
So S3 supports this concept where basically if you do changes on a file, you won't override

129
00:07:28.320 --> 00:07:31.920
the previous version of the file, but it will just create a new latest version.

130
00:07:31.920 --> 00:07:35.440
So at any point in time, you can go back and see all the previous version.

131
00:07:35.440 --> 00:07:38.000
And that is something that works even if you are deleting a file.

132
00:07:38.000 --> 00:07:39.260
It doesn't really delete it.

133
00:07:39.260 --> 00:07:43.520
It just creates like a soft delete mark and you can kind of revert it and restore the

134
00:07:43.520 --> 00:07:45.780
file if you have versioning enabled.

135
00:07:45.780 --> 00:07:50.420
So it is a really good practice to avoid either accidental deletion or accidental overrides

136
00:07:50.420 --> 00:07:51.480
of files.

137
00:07:51.480 --> 00:07:54.400
And it gives you that additional peace of mind, especially if you're storing useful

138
00:07:54.400 --> 00:07:58.740
information that you're not just going to lose it accidentally by, I don't know, maybe

139
00:07:58.740 --> 00:08:04.840
a bug in your code or maybe by doing something very quickly on the CLI and accidentally deleting

140
00:08:04.840 --> 00:08:07.960
stuff that you were not supposed to delete.

141
00:08:07.960 --> 00:08:13.260
So this is a good one, but there is a caveat there that of course, if you are storing multiple

142
00:08:13.260 --> 00:08:17.000
versions of an object, you are increasing the amount of storage that you are using.

143
00:08:17.000 --> 00:08:18.960
So that will affect your cost.

144
00:08:18.960 --> 00:08:21.040
So this is something to keep in mind.

145
00:08:21.040 --> 00:08:24.300
And it might not be worth to enable this in every single environment.

146
00:08:24.300 --> 00:08:26.480
Maybe you want to do it just in production.

147
00:08:26.480 --> 00:08:31.660
You might not want to do it in other development environments or testing environments where

148
00:08:31.660 --> 00:08:34.400
the data is not going to be as important as production.

149
00:08:34.400 --> 00:08:39.520
So this is just something good to use and enable almost all the time.

150
00:08:39.520 --> 00:08:43.160
But caveat, it might make more sense in production than in other environments.

151
00:08:43.160 --> 00:08:45.760
And always keep an eye on cost.

152
00:08:45.760 --> 00:08:47.720
What about observability instead?

153
00:08:47.720 --> 00:08:52.360
Is there any way for people to see what's going on in a bucket and what kind of settings

154
00:08:52.360 --> 00:08:54.480
would they have to enable to do that?

155
00:08:57.920 --> 00:09:01.420
Yeah, there's definitely a good few tips here we can share for creating buckets for the first time or even changing the configuration of existing buckets you have if you don't

156
00:09:01.420 --> 00:09:03.920
have some level of observability.

157
00:09:03.920 --> 00:09:05.840
So one is to enable logging.

158
00:09:05.840 --> 00:09:07.640
And there's a couple of ways of doing this.

159
00:09:07.640 --> 00:09:12.400
You can with CloudTrail enable data events on S3, and then you'll get an audit log in

160
00:09:12.400 --> 00:09:16.360
CloudTrail of things like gets and puts on an S3 bucket.

161
00:09:16.360 --> 00:09:20.800
So that gives you lots of detail, user identity information, all that stuff you get with the

162
00:09:20.800 --> 00:09:22.580
control events in CloudTrail.

163
00:09:22.580 --> 00:09:24.540
But data events have an additional cost.

164
00:09:24.540 --> 00:09:27.480
And if you've got lots of read and writes from your buckets, that can be very costly,

165
00:09:27.480 --> 00:09:28.480
actually.

166
00:09:28.480 --> 00:09:33.440
It can be more significant than the S3 storage cost itself, depending on your usage.

167
00:09:33.440 --> 00:09:38.240
So it isn't something I would recommend turning on by default, but it is powerful.

168
00:09:38.240 --> 00:09:42.160
And you can just enable it for a subset of a bucket, like a prefix, or you can just enable

169
00:09:42.160 --> 00:09:46.120
it for write actions if you don't want to log all of the reads.

170
00:09:46.120 --> 00:09:50.760
If you want a similar level of audit logging capability but don't want to pay through the

171
00:09:50.760 --> 00:09:54.080
nose, the other option is to turn on server access logging.

172
00:09:54.080 --> 00:10:00.000
And then you just get a simple HTTP common log format access log, which gets placed into

173
00:10:00.000 --> 00:10:01.680
another bucket.

174
00:10:01.680 --> 00:10:08.440
And it just gives you simpler information, like where the request or IP is, HTTP status

175
00:10:08.440 --> 00:10:13.080
codes, the time, the object size, it doesn't give you as much detail as CloudTrail data

176
00:10:13.080 --> 00:10:15.200
events, but it is a lot cheaper.

177
00:10:15.200 --> 00:10:16.960
So I think that's a good one to turn on by default.

178
00:10:16.960 --> 00:10:18.200
So that's one to add to the list.

179
00:10:18.200 --> 00:10:19.240
Then we've got metrics.

180
00:10:19.240 --> 00:10:23.160
What can we do when it comes to getting insight through CloudWatch metrics?

181
00:10:27.600 --> 00:10:28.600
Yeah, the nice thing is, as many other AWS services, is that you get some metrics out of the box.

182
00:10:28.600 --> 00:10:29.720
You don't need to configure anything.

183
00:10:29.720 --> 00:10:33.040
They are just there for you to use when you need them.

184
00:10:33.040 --> 00:10:36.940
And some of these metrics for S3 are the daily storage metrics.

185
00:10:36.940 --> 00:10:41.360
So basically the number of objects and the bucket storage size.

186
00:10:41.360 --> 00:10:46.400
There are additional metrics that you can enable, for instance, the request metrics.

187
00:10:46.400 --> 00:10:50.360
And you can create different configuration also for different prefixes.

188
00:10:50.360 --> 00:10:51.960
So it's not global for a bucket.

189
00:10:51.960 --> 00:10:55.360
You can be more fine grained if you want to.

190
00:10:55.360 --> 00:11:00.520
And basically the idea is that you will get a one minute level granularity where you can

191
00:11:00.520 --> 00:11:05.000
see the number of head, get, put and delete requests, where you can see the number of

192
00:11:05.000 --> 00:11:08.800
500 or 400 types of errors.

193
00:11:08.800 --> 00:11:12.740
You can also see the total latency and the first byte latency, which can be very useful

194
00:11:12.740 --> 00:11:17.520
if you're trying to troubleshoot more kind of performance oriented rather than just error

195
00:11:17.520 --> 00:11:19.640
type of things.

196
00:11:19.640 --> 00:11:24.640
And you can also, there is a relatively new addition to S3, which is called S3 Storage

197
00:11:24.640 --> 00:11:29.620
Lens, which is something that you can use and it will give you kind of an overview across

198
00:11:29.620 --> 00:11:35.760
all the buckets in your organization and show you useful metrics for kind of an aggregated

199
00:11:35.760 --> 00:11:37.600
view of all the buckets.

200
00:11:37.600 --> 00:11:39.720
Let's move to security then.

201
00:11:39.720 --> 00:11:41.080
What can we recommend there?

202
00:11:41.080 --> 00:11:42.080
Yeah.

203
00:11:42.080 --> 00:11:43.080
Okay.

204
00:11:43.080 --> 00:11:46.120
Well, this is the really important stuff and there's really two things you need to think

205
00:11:46.120 --> 00:11:47.120
about.

206
00:11:47.120 --> 00:11:50.000
First one is public access and the second one is encryption.

207
00:11:50.000 --> 00:11:53.240
So when we talk about public access, this is where a lot of the horror stories have

208
00:11:53.240 --> 00:11:54.980
come out in the media.

209
00:11:54.980 --> 00:11:57.680
Now new buckets prevent public access by default.

210
00:11:57.680 --> 00:12:00.280
So now we've got good sensible defaults.

211
00:12:00.280 --> 00:12:06.460
You can also turn off the facility for people to create public buckets at an account level.

212
00:12:06.460 --> 00:12:08.480
So that is something I would definitely recommend.

213
00:12:08.480 --> 00:12:10.400
It makes it a lot easier.

214
00:12:10.400 --> 00:12:13.040
You can also put in alerting, of course.

215
00:12:13.040 --> 00:12:17.280
When you disable public access, when you block public access, what you're doing is you're

216
00:12:17.280 --> 00:12:22.140
essentially preventing users from doing things like creating public ACLs.

217
00:12:22.140 --> 00:12:28.360
So with buckets, you have IAM controls like with every other AWS service, but ACLs are

218
00:12:28.360 --> 00:12:32.640
kind of an older access control mechanism that came with buckets initially.

219
00:12:32.640 --> 00:12:38.000
And they're less commonly used these days and somewhat deprecated, I would say, but

220
00:12:38.000 --> 00:12:45.100
they are still used for various specific scenarios because ACLs still allow you to have access

221
00:12:45.100 --> 00:12:46.560
on an individual object level.

222
00:12:46.560 --> 00:12:50.280
So you can associate an ACL with an individual object for very fine grain control.

223
00:12:50.280 --> 00:12:52.720
But if you don't need that, you generally don't need them.

224
00:12:52.720 --> 00:12:56.520
So you can generally avoid ACLs in general these days.

225
00:12:56.520 --> 00:12:58.640
Then you have bucket policies.

226
00:12:58.640 --> 00:13:03.480
So bucket policies, you should also think about, okay, what's my boundary here?

227
00:13:03.480 --> 00:13:07.280
How far do I want people to be able to be from my bucket when they access it?

228
00:13:07.280 --> 00:13:11.320
So it's what you can use to enable cross account access, but you can also use it to restrict

229
00:13:11.320 --> 00:13:12.320
access.

230
00:13:12.320 --> 00:13:17.840
So it can restrict access to users within a VPC or accessing the bucket from a VPC endpoint

231
00:13:17.840 --> 00:13:21.020
or accessing it from a specific organization.

232
00:13:21.020 --> 00:13:26.100
So with IAM condition keys, you can say, okay, allow everybody within my organization to

233
00:13:26.100 --> 00:13:28.400
read from this bucket.

234
00:13:28.400 --> 00:13:32.660
And of course you can do all the usual fine grained access control you can with IAM.

235
00:13:32.660 --> 00:13:37.620
So that helps you to avoid public access and just keep your request boundary to make sure

236
00:13:37.620 --> 00:13:41.600
people can access it from only within your network or whatever else you need.

237
00:13:41.600 --> 00:13:44.080
The other important thing is an encryption.

238
00:13:44.080 --> 00:13:48.800
Now since I think January of this year, bucket encryption is now on by default and new objects

239
00:13:48.800 --> 00:13:52.640
are encrypted with server-side encryption.

240
00:13:52.640 --> 00:13:56.720
There's three options when it comes to encryption on AWS S3.

241
00:13:56.720 --> 00:14:02.600
The first one is the simplest one and that's SSE S3 for server-side encryption S3.

242
00:14:02.600 --> 00:14:06.080
And that's when AWS manages the key and the encryption for you and you don't have to think

243
00:14:06.080 --> 00:14:07.080
about it.

244
00:14:07.080 --> 00:14:11.700
Now then you have the other extreme, which is customer key encryption, which is when

245
00:14:11.700 --> 00:14:15.840
you manage and store your key and you give the key to AWS every time you make a request

246
00:14:15.840 --> 00:14:19.320
and it will do the encryption and decryption for you.

247
00:14:19.320 --> 00:14:22.800
But that has a lot of burden associated with it because you have to manage distribution,

248
00:14:22.800 --> 00:14:25.720
storage and rotation of those keys yourself.

249
00:14:25.720 --> 00:14:31.760
So the middle ground is SSE KMS where you have control over the keys, but AWS still

250
00:14:31.760 --> 00:14:32.760
stores them.

251
00:14:32.760 --> 00:14:36.200
So you can have a customer managed key or the AWS managed key.

252
00:14:36.200 --> 00:14:41.080
Now I think in general, a customer managed key is the preferred option since you have

253
00:14:41.080 --> 00:14:44.100
control and additional security, but you don't have the overhead of storing and distributing

254
00:14:44.100 --> 00:14:47.920
that key yourself as you do with SSE customer encryption.

255
00:14:47.920 --> 00:14:52.160
And the thing about using SSE KMS, it means that even if your bucket is compromised, so

256
00:14:52.160 --> 00:14:56.200
somebody gets credentials that allow access to the bucket, they would also need credentials

257
00:14:56.200 --> 00:15:00.200
with access to the KMS key if they were actually going to read that data.

258
00:15:00.200 --> 00:15:03.880
So this is the really important point here.

259
00:15:03.880 --> 00:15:10.600
So I think KMS with a customer managed key and SSE KMS is the best balance here.

260
00:15:10.600 --> 00:15:15.440
And there was actually a good article by Yan Shui recently who mentions the fact that just

261
00:15:15.440 --> 00:15:19.560
because public encryption by default is now an option in AWS, your job isn't done.

262
00:15:19.560 --> 00:15:22.800
We'll provide the link to that link in the show notes as well, because that was a good

263
00:15:22.800 --> 00:15:25.100
one and well worth pointing out.

264
00:15:25.100 --> 00:15:28.080
So that's another one for our list, SSE KMS.

265
00:15:28.080 --> 00:15:29.360
What else have we got?

266
00:15:29.360 --> 00:15:34.520
I think another interesting point could be integration because very often you don't use

267
00:15:34.520 --> 00:15:37.040
S3 like standalone.

268
00:15:37.040 --> 00:15:41.120
You will use it as an integration point for other things that you are building.

269
00:15:41.120 --> 00:15:47.280
And there are different ways to trigger events or to interact with the lifecycle of objects

270
00:15:47.280 --> 00:15:48.280
in S3.

271
00:15:48.280 --> 00:15:52.160
So let's try to cover some of them because some of these will have an impact on the configuration

272
00:15:52.160 --> 00:15:53.680
of the packet.

273
00:15:53.680 --> 00:15:58.480
So for instance, one way is what is called S3 notifications, probably one of the oldest

274
00:15:58.480 --> 00:16:05.560
notification mechanisms in S3, which basically allows you to trigger a notification to either

275
00:16:05.560 --> 00:16:11.440
Lambda or SQS every time that there is a change in a bucket, like a new file being added.

276
00:16:11.440 --> 00:16:16.320
And that requires you to explicitly configure and enable that notification mechanism.

277
00:16:16.320 --> 00:16:21.360
So something that you might want to do if you are thinking as that kind of use case

278
00:16:21.360 --> 00:16:23.800
for your particular bucket.

279
00:16:23.800 --> 00:16:26.840
There is another alternative, which is CloudTrail Data Events.

280
00:16:26.840 --> 00:16:31.640
Then there is another one, which is probably one of the newest, which is through EventBridge.

281
00:16:31.640 --> 00:16:34.020
So you can enable EventBridge notification.

282
00:16:34.020 --> 00:16:37.160
And this is probably the most recommended way these days.

283
00:16:37.160 --> 00:16:40.440
So once you turn this feature on, basically you don't have to do any change.

284
00:16:40.440 --> 00:16:45.240
You can just listen to events in EventBridge and you don't pay additional charges either

285
00:16:45.240 --> 00:16:49.200
for processing because you can, for instance, you're just going to configure a Lambda to

286
00:16:49.200 --> 00:16:50.280
be triggered.

287
00:16:50.280 --> 00:16:54.720
You are only going to pay for the execution of that Lambda.

288
00:16:54.720 --> 00:16:57.840
Also it's very interesting that you can use EventBridge content filtering if you want

289
00:16:57.840 --> 00:17:01.600
to do more in-depth matching for specific events.

290
00:17:01.600 --> 00:17:05.520
For instance, maybe you're not interested in all the files, maybe only the files with

291
00:17:05.520 --> 00:17:06.940
a specific prefix.

292
00:17:06.940 --> 00:17:10.280
So you can do that through EventBridge content filtering.

293
00:17:14.320 --> 00:17:18.160
It's nice that they added that one because in the past we had three notifications, which meant you had to go and modify the bucket, which wasn't always possible.

294
00:17:18.160 --> 00:17:20.600
Especially if you were just deploying a new CloudFormation stack.

295
00:17:20.600 --> 00:17:26.420
And then the CloudTrail Data Events was like, okay, it could be costly as well.

296
00:17:26.420 --> 00:17:31.000
You could still access them through EventBridge, but it could be slow and then you

297
00:17:31.000 --> 00:17:35.160
had the additional cost of data events, which caught me out a few times, I have to say.

298
00:17:35.160 --> 00:17:42.120
So I definitely think adding the new EventBridge method to the checklist is a good no-brainer

299
00:17:42.120 --> 00:17:44.240
for creating new buckets.

300
00:17:44.240 --> 00:17:47.400
So there are a couple of other settings that we might consider.

301
00:17:47.400 --> 00:17:50.880
I wouldn't necessarily put them on the must-have list, but there's some nice to haves that

302
00:17:50.880 --> 00:17:53.800
you might think about depending on your context and the workload.

303
00:17:53.800 --> 00:17:57.840
One of them is, well, a couple of them, I suppose, in the area of compliance and security

304
00:17:57.840 --> 00:17:59.480
are MFA delete.

305
00:17:59.480 --> 00:18:04.060
So you can enforce that multi-factor authentication is enabled for the principal trying to delete

306
00:18:04.060 --> 00:18:05.520
an object.

307
00:18:05.520 --> 00:18:09.520
It's a little bit cumbersome to enforce in some cases, because now with things like SSO

308
00:18:09.520 --> 00:18:15.120
identities, you don't even have the MFA flag in some cases, but there are ways around that.

309
00:18:15.120 --> 00:18:16.800
And another one is object locking.

310
00:18:16.800 --> 00:18:21.000
So you can enable an object lock to prevent objects being deleted for a period as well.

311
00:18:21.000 --> 00:18:24.760
That's often a compliance situation.

312
00:18:24.760 --> 00:18:25.760
We mentioned replication.

313
00:18:25.760 --> 00:18:29.100
I think you mentioned it a few times, Luciano, and it is something to think about from the

314
00:18:29.100 --> 00:18:30.100
get-go.

315
00:18:30.100 --> 00:18:32.560
Will I be replicating this to another region, another bucket?

316
00:18:32.560 --> 00:18:34.400
How much data will I be replicating?

317
00:18:34.400 --> 00:18:36.340
Do I need to set this up from day one?

318
00:18:36.340 --> 00:18:40.520
Just so I have all that data there from the start and to test it out and see how replication

319
00:18:40.520 --> 00:18:45.800
works, how long it takes, and to understand all of the different nuances with it.

320
00:18:45.800 --> 00:18:46.960
Lifecycle policies.

321
00:18:48.160 --> 00:18:52.060
There's other different storage tiers with different costs associated with them.

322
00:18:52.060 --> 00:18:53.800
And you can move data between the tiers.

323
00:18:53.800 --> 00:18:57.160
It can get a bit complicated, but you can also save a lot of money.

324
00:18:57.160 --> 00:19:00.360
There are some good cases of people saving a significant amount of cost.

325
00:19:00.360 --> 00:19:04.340
I think Canva was a recent case study I saw come out where they saved a lot of money by

326
00:19:04.340 --> 00:19:05.880
using lifecycle policies.

327
00:19:05.880 --> 00:19:08.040
So again, do your calculations.

328
00:19:08.040 --> 00:19:13.240
If you intend on using S3 for a lot of your data, you might save significantly.

329
00:19:13.240 --> 00:19:17.500
And you can even turn on intelligent tiering from day one.

330
00:19:17.500 --> 00:19:22.080
That might give you a good balance between complexity and cost savings from the start.

331
00:19:22.080 --> 00:19:24.080
The last one is access points.

332
00:19:24.080 --> 00:19:27.020
And these are being used more and more for different S3 scenarios.

333
00:19:27.020 --> 00:19:30.540
We talked about them for S3 object lambdas, which leverage access points.

334
00:19:30.540 --> 00:19:35.360
But fundamentally, it's just a way of having another way to access S3 buckets without using

335
00:19:35.360 --> 00:19:36.840
the bucket name.

336
00:19:36.840 --> 00:19:40.400
Instead you use a different access point name, which is generated for you.

337
00:19:40.400 --> 00:19:44.720
And it allows you to have a dedicated resource policy with specific security controls around

338
00:19:44.720 --> 00:19:45.960
that access point.

339
00:19:45.960 --> 00:19:48.820
So it allows you to have different access modes for different people.

340
00:19:48.820 --> 00:19:53.300
And this is something that's also leveraged in the new global access point support.

341
00:19:53.300 --> 00:19:58.120
So if you do have replication across two different regions with buckets in separate regions,

342
00:19:58.120 --> 00:20:03.300
you can have a global access point, which allows users to access from the region with

343
00:20:03.300 --> 00:20:05.620
lowest latency.

344
00:20:05.620 --> 00:20:10.720
So those are all things to research and consider as part of setting up S3 buckets.

345
00:20:10.720 --> 00:20:16.480
Not necessarily must haves, but maybe before we wrap up Luciano, could we summarize our

346
00:20:16.480 --> 00:20:20.160
checklist of must dos for bucket creation?

347
00:20:20.160 --> 00:20:21.160
Sure.

348
00:20:21.160 --> 00:20:25.560
So the first one that we have is once you create a new bucket, you should turn on request

349
00:20:25.560 --> 00:20:30.200
server access logging because it's easy and it should be relatively cheap and it will

350
00:20:30.200 --> 00:20:35.560
give you that bit of visibility that you might want to have to see what's going on in a bucket.

351
00:20:35.560 --> 00:20:41.000
Then you might want to turn on request metrics just to get a better, more detailed set of

352
00:20:41.000 --> 00:20:45.520
metrics that you can use, again, for building dashboards and for troubleshooting latency

353
00:20:45.520 --> 00:20:48.040
issues or things like that.

354
00:20:48.040 --> 00:20:52.140
Then we have enable versioning, again, extra peace of mind in case you might be worried

355
00:20:52.140 --> 00:20:54.800
that some file might be deleted accidentally.

356
00:20:54.800 --> 00:20:58.580
This one might be more worth it in production than in other environments just because of

357
00:20:58.580 --> 00:21:04.060
the cost implications of basically having multiple copies of the same object as you

358
00:21:04.060 --> 00:21:06.420
evolve it.

359
00:21:06.420 --> 00:21:08.040
Use global unique collision.

360
00:21:08.040 --> 00:21:13.200
Well, basically use names that will help you to avoid collisions with other bucket names.

361
00:21:13.200 --> 00:21:17.520
Again, remember that bucket names are global across all accounts or regions.

362
00:21:17.520 --> 00:21:22.320
So make sure to figure out a way that is consistent, but at the same time reduces the chances of

363
00:21:22.320 --> 00:21:27.120
having collisions with either in the same organization and even with other organization

364
00:21:27.120 --> 00:21:29.480
that you don't even have control on.

365
00:21:29.480 --> 00:21:33.280
You can turn on EventBridge notifications because it's probably the simplest way to

366
00:21:33.280 --> 00:21:39.200
create integrations on top of files being created or deleted or modified in S3.

367
00:21:39.200 --> 00:21:45.680
Then in terms of encryption, probably the easiest approach is to use SSE KMS with a

368
00:21:45.680 --> 00:21:49.720
customer managed key and finally make sure to disable public access.

369
00:21:49.720 --> 00:21:54.240
That should happen by default with new buckets, but just be sure if you are revisiting older

370
00:21:54.240 --> 00:21:58.360
buckets, just make sure that that's a setting that is there.

371
00:21:58.360 --> 00:22:00.480
So that's everything we have for this episode.

372
00:22:00.480 --> 00:22:04.720
I don't know if you have any other suggestion or best practices that you have been using.

373
00:22:04.720 --> 00:22:09.520
Please let us know, share it with us in a comment down below or reach out to us on Twitter

374
00:22:09.520 --> 00:22:15.300
or on LinkedIn and we will be more than happy to chat with you and learn from you.

375
00:22:15.300 --> 00:22:19.600
If you found value in this episode, also please remember to give us some kind of feedback,

376
00:22:19.600 --> 00:22:24.340
to write a review of the podcast or if you're watching it on YouTube to give us a thumbs

377
00:22:24.340 --> 00:22:25.340
up and subscribe.

378
00:22:25.340 --> 00:22:45.240
Thank you very much and we will see you in the next episode.
