{
  "speakers": {
    "spk_0": "Eoin",
    "spk_1": "Luciano"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3.68,
      "text": " VPC Lettuce is a new service in the salad bowl of AWS networking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 3.68,
      "end": 8.24,
      "text": " that makes it easy for developers and admins teams to set up networking between workloads."
    },
    {
      "speakerLabel": "spk_0",
      "start": 8.24,
      "end": 12.08,
      "text": " We have been taste testing Lettuce and are ready to leaf you with all the knowledge we learned."
    },
    {
      "speakerLabel": "spk_0",
      "start": 12.64,
      "end": 17.28,
      "text": " So, Romaine calm and hear about how it can rocket your networking setup to new levels."
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.28,
      "end": 20.8,
      "text": " We'll share plenty of tips so you don't hit any icebergs on your journey."
    },
    {
      "speakerLabel": "spk_1",
      "start": 22.16,
      "end": 25.92,
      "text": " Yeah, okay. Oh, and sorry, I have to stop you there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 25.92,
      "end": 29.520000000000003,
      "text": " These puns are excellent, but it's called VPC Lattice, not Lettuce. I don't know if you are aware."
    },
    {
      "speakerLabel": "spk_1",
      "start": 30.96,
      "end": 32.96,
      "text": " Lattice? Really?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 32.96,
      "end": 38.24,
      "text": " Okay. But I spent ages working on that intro. I'm not going to redo it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 38.24,
      "end": 39.6,
      "text": " I like it. Let's keep it."
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.160000000000004,
      "end": 44.08,
      "text": " Okay. Lettuce, Lattice, whatever. Right. Well, whatever."
    },
    {
      "speakerLabel": "spk_0",
      "start": 44.08,
      "end": 49.92,
      "text": " We're going to talk about all the concepts, applications for VPC Lattice, apparently, and how this is a game changer for traditional"
    },
    {
      "speakerLabel": "spk_0",
      "start": 49.92,
      "end": 61.28,
      "text": " and serverless workloads. I'm Eoin. I'm here with Luciano and this is the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 61.44,
      "end": 65.76,
      "text": " AWS Bites is made possible by the support of fourTheorem, an AWS partner that works with you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 65.76,
      "end": 70.72,
      "text": " to make migration, architecture, and development a success. See fourtheorem.com to find out more."
    },
    {
      "speakerLabel": "spk_1",
      "start": 72.48,
      "end": 76.64,
      "text": " So, let's start with this question. What is VPC Lattice?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 82.4,
      "end": 87.92,
      "text": " Well, now that we know what it's apparently really called, Lattice is a service that's really designed to make inbound and outbound east-west connectivity between services"
    },
    {
      "speakerLabel": "spk_0",
      "start": 87.92,
      "end": 94,
      "text": " and applications possible with a zero trust approach to authorization. So, when we talk"
    },
    {
      "speakerLabel": "spk_0",
      "start": 94,
      "end": 98.64,
      "text": " about east-west connectivity, we're talking about horizontal connectivity between services"
    },
    {
      "speakerLabel": "spk_0",
      "start": 98.64,
      "end": 103.92,
      "text": " and applications within a workload or a set of workloads and not necessarily like public-facing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 103.92,
      "end": 110.96000000000001,
      "text": " APIs or say API gateways down to services in the backend, which would be north-south communication."
    },
    {
      "speakerLabel": "spk_0",
      "start": 111.6,
      "end": 116.48,
      "text": " And it's designed to work in single or multiple AWS accounts, and it's really focused around"
    },
    {
      "speakerLabel": "spk_0",
      "start": 116.48,
      "end": 121.28,
      "text": " minimizing the amount of network configuration you do. So, we talked recently about whether"
    },
    {
      "speakerLabel": "spk_0",
      "start": 121.28,
      "end": 127.12,
      "text": " VPCs were necessary for serverless developers. If you're somebody who's allergic to networking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 127.12,
      "end": 132.56,
      "text": " as a developer and would rather get away from VPC routing and security groups, then you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 132.56,
      "end": 136.16,
      "text": " have to kind of liaise with development teams and always have this back and forth to get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 136.16,
      "end": 140.88,
      "text": " network setup right. This is another area where Lattice would really help. And there's some"
    },
    {
      "speakerLabel": "spk_0",
      "start": 140.88,
      "end": 145.52,
      "text": " really nice things with it. Like, you'll never have any issues with overlapping IP ranges"
    },
    {
      "speakerLabel": "spk_0",
      "start": 145.52,
      "end": 150.72,
      "text": " and CIDR blocks. So, that's something. And you get this nice kind of high level or fast"
    },
    {
      "speakerLabel": "spk_0",
      "start": 150.72,
      "end": 155.68,
      "text": " level of security. So, you get this nice kind of high level of security. So, you get this"
    },
    {
      "speakerLabel": "spk_0",
      "start": 155.68,
      "end": 159.76,
      "text": " nice kind of security that you can get to the point where you're kind of stuck in the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 159.76,
      "end": 164.39999999999998,
      "text": " middle of the network. And you get this nice kind of high level or fine-grained access"
    },
    {
      "speakerLabel": "spk_0",
      "start": 164.39999999999998,
      "end": 169.51999999999998,
      "text": " control support as well. If you're in the field of microservice communication with service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 169.51999999999998,
      "end": 174.72,
      "text": " meshes and sidecars and all of that stuff, VPC Lattice also aims to take all of that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 174.72,
      "end": 179.84,
      "text": " away as well so you can focus on the actual workload and simplify that communication."
    },
    {
      "speakerLabel": "spk_0",
      "start": 179.84,
      "end": 184.88,
      "text": " It also supports things like traffic control, load balancing, and path-based routing as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 184.88,
      "end": 185.35999999999999,
      "text": " well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 185.36,
      "end": 189.84,
      "text": " That's pretty cool. I can definitely resonate with some of the problems you described there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 189.84,
      "end": 195.44000000000003,
      "text": " And it's exciting to see that this service is effectively trying to solve most of these"
    },
    {
      "speakerLabel": "spk_1",
      "start": 195.44000000000003,
      "end": 199.84,
      "text": " issues and giving us a new tool that we can just use to be more efficient, more effective."
    },
    {
      "speakerLabel": "spk_1",
      "start": 200.4,
      "end": 207.36,
      "text": " But I'm wondering, this service needs to integrate with other services, of course. So, what does"
    },
    {
      "speakerLabel": "spk_1",
      "start": 207.36,
      "end": 211.68,
      "text": " that look like? Is it going to be available only for one service or it's already quite"
    },
    {
      "speakerLabel": "spk_1",
      "start": 211.68,
      "end": 214.88000000000002,
      "text": " widely available and we can use it for all sorts of integrations?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 214.88,
      "end": 219.35999999999999,
      "text": " It's widely available and what you do with it is really up to you. The use cases are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 219.35999999999999,
      "end": 223.6,
      "text": " kind of the communication between microservices, like we said. But also, if you just want to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 223.6,
      "end": 228.72,
      "text": " have a mechanism to support private APIs within an organization, that's possible too. The"
    },
    {
      "speakerLabel": "spk_0",
      "start": 228.72,
      "end": 232.96,
      "text": " nice thing there actually is that you could do custom domains in a much easier way than"
    },
    {
      "speakerLabel": "spk_0",
      "start": 232.96,
      "end": 239.28,
      "text": " API Gateway. If you've got things like migration in your workloads and that's part of your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 239.28,
      "end": 243.44,
      "text": " plans and you want to modernize over time and maybe switch, have an API that's backed"
    },
    {
      "speakerLabel": "spk_0",
      "start": 243.44,
      "end": 248.48,
      "text": " by an EC2 or a container, then switch it to containers or Lambda, it supports that as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 248.48,
      "end": 252.96,
      "text": " well without having to go through lots of network reconfiguration. So, it integrates"
    },
    {
      "speakerLabel": "spk_0",
      "start": 252.96,
      "end": 257.44,
      "text": " with, if you've got existing VPCs, it will integrate with those. It integrates with EC2"
    },
    {
      "speakerLabel": "spk_0",
      "start": 257.44,
      "end": 261.76,
      "text": " instances. It'll integrate with anything with an IP address, actually. And it also works"
    },
    {
      "speakerLabel": "spk_0",
      "start": 261.76,
      "end": 268.4,
      "text": " with ECS and Kubernetes as well, including EKS. The special feature here, and I think"
    },
    {
      "speakerLabel": "spk_0",
      "start": 268.4,
      "end": 272.48,
      "text": " one we're particularly interested in, is that it also works well with Lambda. So, it can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 272.48,
      "end": 276.16,
      "text": " trigger Lambda functions, even Lambda functions that aren't running in a VPC."
    },
    {
      "speakerLabel": "spk_1",
      "start": 276.16,
      "end": 280.72,
      "text": " The way you're describing this makes me think about other services that have been in AWS"
    },
    {
      "speakerLabel": "spk_1",
      "start": 280.72,
      "end": 285.20000000000005,
      "text": " for a while, like, I don't know, VPC peering connection, Transit Gateway, PrivateLink,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 286.16,
      "end": 291.28000000000003,
      "text": " and even just doing your own routing tables or other stuff like that. So, how does it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 291.28000000000003,
      "end": 295.04,
      "text": " compare? Like, why should this be better than these other solutions?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.72,
      "end": 300.16,
      "text": " All of those things you mentioned are pretty much the traditional way of doing this East-West"
    },
    {
      "speakerLabel": "spk_0",
      "start": 300.16,
      "end": 305.68,
      "text": " communication. First, we had VPC peering, and then came Transit Gateway, which enabled the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 305.68,
      "end": 311.28000000000003,
      "text": " same sort of routing across different VPCs and different accounts in a much more scalable"
    },
    {
      "speakerLabel": "spk_0",
      "start": 311.28000000000003,
      "end": 315.20000000000005,
      "text": " way. The container world, you've got lots of approaches around service discovery and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 315.20000000000005,
      "end": 319.44000000000005,
      "text": " service meshes. The whole idea there is that you end up with quite a lot of configuration,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 319.44000000000005,
      "end": 323.76000000000005,
      "text": " and you've got this kind of split responsibility between the admin teams and the development"
    },
    {
      "speakerLabel": "spk_0",
      "start": 323.76000000000005,
      "end": 328.56,
      "text": " teams. So, I suppose if there's one message you take away from this session about Lattice,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.56,
      "end": 332.32,
      "text": " it's really that it's trying to address that friction between admin and dev teams,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 332.32,
      "end": 338.16,
      "text": " and allow the admin teams to focus on centralized access control monitoring and the devs just to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 338.16,
      "end": 345.04,
      "text": " launch the service to create private VPCs that they control and be able to provide and consume services then."
    },
    {
      "speakerLabel": "spk_1",
      "start": 345.04,
      "end": 351.12,
      "text": " Nice. Okay. So, what are some of the main concepts when you start using it?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 351.12,
      "end": 356.08,
      "text": " Like, what does it look like? What do you need to... Which terms do you need to start structuring"
    },
    {
      "speakerLabel": "spk_1",
      "start": 356.08,
      "end": 359.84,
      "text": " the usage of this product?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 359.84,
      "end": 365.44,
      "text": " I think the concepts are pretty simple, really, and there's two main ones. The fundamental building block is a service, a VPC Lattice service. So, this is something"
    },
    {
      "speakerLabel": "spk_0",
      "start": 365.44,
      "end": 370.88,
      "text": " that's going to be backed by IP addresses, EC2, Lambda, containers. And this is the thing that's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 370.88,
      "end": 375.36,
      "text": " usually owned by the dev team. So, I mean, the ownership can be changed from organization to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 375.36,
      "end": 381.12,
      "text": " organization, but I think the basic idea here is that the dev team owns the service, and then they"
    },
    {
      "speakerLabel": "spk_0",
      "start": 381.12,
      "end": 388.16,
      "text": " govern its domain, all of the APIs within it, what services are backing it, all of that is controlled"
    },
    {
      "speakerLabel": "spk_0",
      "start": 388.16,
      "end": 394.4,
      "text": " by that team. So, it makes it very agile from the team's perspective. And the service supports"
    },
    {
      "speakerLabel": "spk_0",
      "start": 394.4,
      "end": 401.76,
      "text": " custom domains. Then the service is kind of grouped within the next concept, which is the service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 401.76,
      "end": 406.08,
      "text": " network. And the Service Network is usually the thing that's owned and controlled by the network"
    },
    {
      "speakerLabel": "spk_0",
      "start": 406.08,
      "end": 412.96,
      "text": " admins. And this is essentially a logical control plane that groups VPCs and the services from"
    },
    {
      "speakerLabel": "spk_0",
      "start": 412.96,
      "end": 419.91999999999996,
      "text": " different teams, and you can put IAM policies on it as well. And this is getting into the zero"
    },
    {
      "speakerLabel": "spk_0",
      "start": 419.91999999999996,
      "end": 426.4,
      "text": " trust approach, which we can dig into. So, the dev team can put an IAM policy on their service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 426.4,
      "end": 430.88,
      "text": " if they want to, and the admin team can put a network policy on the Service Network. So,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 430.88,
      "end": 437.44,
      "text": " it allows you to have control at two levels. And it's also possible with resource access manager,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 437.44,
      "end": 442.71999999999997,
      "text": " or RAM, to share both the service and the Service Network with other accounts. So, you can have the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 442.71999999999997,
      "end": 447.04,
      "text": " approach where the admin team creates a Service Network, shares it with dev teams, and then they"
    },
    {
      "speakerLabel": "spk_0",
      "start": 447.04,
      "end": 453.28,
      "text": " create their services within it, or vice versa. Now, within a service, then it starts to look"
    },
    {
      "speakerLabel": "spk_0",
      "start": 453.28,
      "end": 457.52,
      "text": " a little bit like load balancer concepts. So, within a service, then you have a listener,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 457.52,
      "end": 466.4,
      "text": " which supports HTTPS and gRPC. So, there's no kind of TCP or UDP network possible. It's really just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 466.4,
      "end": 472.71999999999997,
      "text": " like an application load balancer. And again, like an application load balancer, it has target groups,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 472.71999999999997,
      "end": 477.2,
      "text": " and then in the target groups, you can have your IP addresses, instances, Lambda functions,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 477.76,
      "end": 483.59999999999997,
      "text": " containers, load balancers as targets. And then you have your rules, just like load balancer rules,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 483.6,
      "end": 487.68,
      "text": " where you've got prioritized path-based routing and that sort of thing. All of those things we"
    },
    {
      "speakerLabel": "spk_0",
      "start": 487.68,
      "end": 494.56,
      "text": " mentioned, like IP, EC2, ECS, they need a VPC anyway. But Lambda, you don't always configure"
    },
    {
      "speakerLabel": "spk_0",
      "start": 494.56,
      "end": 498.96000000000004,
      "text": " with a VPC. And actually, to provide a service that's backed by Lambda, you don't need to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 498.96000000000004,
      "end": 503.84000000000003,
      "text": " associate it with a VPC at all, but it can still be triggered by Lattice. So, you only need a VPC"
    },
    {
      "speakerLabel": "spk_0",
      "start": 503.84000000000003,
      "end": 508.64000000000004,
      "text": " when you're actually consuming a service through VPC Lattice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 508.64,
      "end": 514,
      "text": " That's pretty cool. So, I imagine that behind the scene, AWS is taking care of routing all this traffic correctly for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 514,
      "end": 521.92,
      "text": " you, pretty much. So, tell me a bit more about how it works. You described some potential models"
    },
    {
      "speakerLabel": "spk_1",
      "start": 521.92,
      "end": 526.3199999999999,
      "text": " to start to use this in a company, but maybe we can clarify more what are some of the potential"
    },
    {
      "speakerLabel": "spk_1",
      "start": 526.3199999999999,
      "end": 530,
      "text": " patterns."
    },
    {
      "speakerLabel": "spk_0",
      "start": 530,
      "end": 534.4,
      "text": " So, if you're starting from scratch, you can imagine the admin team might first create the Service Network and specify an authorization policy on that. You can actually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 534.4,
      "end": 540.16,
      "text": " specify security groups as well if you want to do network-based control as well as the zero trust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 540.16,
      "end": 544.56,
      "text": " IAM approach. Once you have that Service Network, they would share it with RAM,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 545.36,
      "end": 549.1999999999999,
      "text": " and they could share it with individual accounts or with the whole organization. And then dev"
    },
    {
      "speakerLabel": "spk_0",
      "start": 549.1999999999999,
      "end": 555.4399999999999,
      "text": " teams will see it in their AWS console and can reference it in their SDK or infrastructure's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 555.4399999999999,
      "end": 560.24,
      "text": " code templates. So, the dev team could then create a service and then make the association"
    },
    {
      "speakerLabel": "spk_0",
      "start": 560.24,
      "end": 565.52,
      "text": " between the service and the Service Network. And that's what gets it to join this networking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 565.52,
      "end": 570.64,
      "text": " conversation. They can also specify their policy if they want. And then if you're consuming a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 570.64,
      "end": 576.16,
      "text": " service, basically you have a VPC because you have to have a VPC to consume a Lattice service,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 576.16,
      "end": 580.8,
      "text": " and you just associate that VPC with the Service Network as well. So, once you've got the RAM share"
    },
    {
      "speakerLabel": "spk_0",
      "start": 580.8,
      "end": 584.96,
      "text": " through the resource access manager with your account, you can make that VPC association."
    },
    {
      "speakerLabel": "spk_0",
      "start": 584.96,
      "end": 591.76,
      "text": " And then any of the consumers running in the VPC can invoke all of the services that are associated"
    },
    {
      "speakerLabel": "spk_0",
      "start": 591.76,
      "end": 597.36,
      "text": " with the Service Network, of course, provided that the authorization policy allows. And that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 597.36,
      "end": 601.12,
      "text": " can be really fine-grained or coarse-grained, whatever you need. The service consumer will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 601.12,
      "end": 607.2800000000001,
      "text": " then use a DNS to discover invoked service. So, they're using HTTPS with a domain name,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 607.2800000000001,
      "end": 612.1600000000001,
      "text": " and you've got two options there. You can use the Lattice-generated domain names that it creates"
    },
    {
      "speakerLabel": "spk_0",
      "start": 612.16,
      "end": 618,
      "text": " for you, and they're always there, and they're global. Or you can actually specify a custom DNS,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 618,
      "end": 623.6,
      "text": " and those names will resolve too within your private DNS. And you can use public DNS or private"
    },
    {
      "speakerLabel": "spk_0",
      "start": 623.6,
      "end": 628.4,
      "text": " DNS for that, and then invoke the service. So, I guess the two points there to remember are that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 628.4,
      "end": 632.64,
      "text": " to consume a service, you need to be in a VPC associated with the Service Network. And to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 632.64,
      "end": 638,
      "text": " provide a service, you don't necessarily need to be in a VPC, but your service does need to be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 638,
      "end": 641.68,
      "text": " associated with the Service Network."
    },
    {
      "speakerLabel": "spk_1",
      "start": 641.68,
      "end": 649.52,
      "text": " That makes sense. So, it seems that you have a lot of freedom in terms of defining the access control rules. And I don't know, is there anything there"
    },
    {
      "speakerLabel": "spk_1",
      "start": 649.52,
      "end": 653.92,
      "text": " that we want to deep dive on and just provide a bit more background?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 653.92,
      "end": 659.68,
      "text": " Yeah, we can give a couple of examples. So, if we're saying that Lattice is really for kind of private internal APIs within"
    },
    {
      "speakerLabel": "spk_0",
      "start": 659.68,
      "end": 665.28,
      "text": " one or a set of AWS accounts, you're imagining that the boundary is usually within an AWS"
    },
    {
      "speakerLabel": "spk_0",
      "start": 665.28,
      "end": 671.4399999999999,
      "text": " organization. Now, consumers will have to be in a VPC that is associated with the network. So,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 672.64,
      "end": 678.16,
      "text": " it doesn't have to be within your organization, but you would have to share your Service Network"
    },
    {
      "speakerLabel": "spk_0",
      "start": 678.16,
      "end": 682.8,
      "text": " with another AWS account. It could be a third party one, and then they can communicate. You"
    },
    {
      "speakerLabel": "spk_0",
      "start": 682.8,
      "end": 688.0799999999999,
      "text": " could also use the policies to restrict who can access it. You can choose no authorization,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 688.0799999999999,
      "end": 692.48,
      "text": " and that's a valid approach. And then you could just say, okay, well, let's not share this service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 692.48,
      "end": 696.8000000000001,
      "text": " network with anybody outside the organization. Okay. But you might want to say, okay, let's be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 696.8000000000001,
      "end": 701.44,
      "text": " a little bit more careful about that and turn on IAM authorization on the Service Network and the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 701.44,
      "end": 708.24,
      "text": " services and perform some stricter checks there. So, those policies are optional, but they can be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 708.24,
      "end": 714.24,
      "text": " applied at both the Service Network and the service level. So, a couple of examples then,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 714.24,
      "end": 719.36,
      "text": " a Service Network policy might say, only allow principles from the AWS organization. So, you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 719.36,
      "end": 725.52,
      "text": " could say allow star resources, but the condition is that the principal org ID is my AWS organization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 726.16,
      "end": 731.04,
      "text": " And that would mean that if somebody accidentally shared a Service Network or a service with a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 731.04,
      "end": 735.76,
      "text": " third-party account, that they wouldn't be able to invoke your service because they don't have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 735.76,
      "end": 741.04,
      "text": " the organization in their principal. And then in the service policy itself, you could say,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 741.04,
      "end": 748.32,
      "text": " only allow principles with a principal tag on their identity or restrict them to HTTP get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 748.32,
      "end": 752.5600000000001,
      "text": " requests or even restrict them by IP address. So, you can get very fine-grained and specific."
    },
    {
      "speakerLabel": "spk_0",
      "start": 754.08,
      "end": 760.48,
      "text": " Now, I think at this stage, it should sound like it's fairly simple to set up because we don't have"
    },
    {
      "speakerLabel": "spk_0",
      "start": 760.48,
      "end": 765.5200000000001,
      "text": " any routing tables. We don't have any VPC peering, no transit gateway. So, it's all fairly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 765.5200000000001,
      "end": 770,
      "text": " straightforward. The main thing, I guess, from an IAM authorization point of view, and it might be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 770,
      "end": 777.44,
      "text": " obvious, but when you try it, you'll need to enable AWS version four signatures on the requests because"
    },
    {
      "speakerLabel": "spk_0",
      "start": 777.44,
      "end": 782.48,
      "text": " otherwise you won't be able to pass an IAM authorization. So, the first thing you do when"
    },
    {
      "speakerLabel": "spk_0",
      "start": 782.48,
      "end": 788.24,
      "text": " you invoke a URL against one of these services, if you've got auth turned on, is going to do an"
    },
    {
      "speakerLabel": "spk_0",
      "start": 788.24,
      "end": 793.9200000000001,
      "text": " IAM check just like it would with any other AWS service. So, you need to have a signature with the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 793.9200000000001,
      "end": 800.32,
      "text": " service, which is VPC Lattice services in the scope of your credentials. It doesn't support"
    },
    {
      "speakerLabel": "spk_0",
      "start": 800.32,
      "end": 804.72,
      "text": " payload signing. So, you have to explicitly call out the header that says there's no payload"
    },
    {
      "speakerLabel": "spk_0",
      "start": 804.72,
      "end": 809.52,
      "text": " signing. If this sounds like a little bit complicated, don't worry because we do have a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 809.52,
      "end": 814.72,
      "text": " full code example with a complete Lattice setup and also some client code for invoking services"
    },
    {
      "speakerLabel": "spk_0",
      "start": 814.72,
      "end": 820.72,
      "text": " as well. So, it should be easy at that point to see how it works."
    },
    {
      "speakerLabel": "spk_1",
      "start": 820.72,
      "end": 826.08,
      "text": " That's interesting. So, I imagine that one of the trade-offs is that from a development perspective, every time you are doing"
    },
    {
      "speakerLabel": "spk_1",
      "start": 826.08,
      "end": 830.96,
      "text": " the call, you need to add that extra bit of code, making sure that your requests are probably using"
    },
    {
      "speakerLabel": "spk_1",
      "start": 830.96,
      "end": 835.6,
      "text": " sync before and adding the signature correctly, which I don't know. I've done that in different"
    },
    {
      "speakerLabel": "spk_1",
      "start": 835.6,
      "end": 840.48,
      "text": " languages and it's always a bit of a hit and miss in some languages. It is easier than others"
    },
    {
      "speakerLabel": "spk_1",
      "start": 840.48,
      "end": 844.24,
      "text": " because maybe you have some libraries that can make most of the stuff easier."
    },
    {
      "speakerLabel": "spk_1",
      "start": 844.24,
      "end": 849.12,
      "text": " In other cases, you end up implementing some of it and it's very easy to get something wrong and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 849.12,
      "end": 854.32,
      "text": " then you spend hours and hours troubleshooting it. So, maybe that's an interesting trade-off to keep"
    },
    {
      "speakerLabel": "spk_1",
      "start": 854.32,
      "end": 858.88,
      "text": " in mind. You mentioned that this is something you can use basically in a very free way. You can"
    },
    {
      "speakerLabel": "spk_1",
      "start": 858.88,
      "end": 865.2,
      "text": " organize your teams in different accounts. So, how would that look like? Is that something we"
    },
    {
      "speakerLabel": "spk_1",
      "start": 865.2,
      "end": 870.48,
      "text": " recommend to do? Is it more complicated or it's just seamless with Lattice?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 871.28,
      "end": 875.68,
      "text": " This is really, I guess, where it really shines actually in cross-account because of the lack of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 875.68,
      "end": 880.24,
      "text": " routing and everything. Once you have your Service Network set up, the process of sharing it with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 880.24,
      "end": 886.4,
      "text": " RAM is quite easy. You can do it in a single line of SDK or a single resource with CloudFormation"
    },
    {
      "speakerLabel": "spk_0",
      "start": 886.4,
      "end": 892.16,
      "text": " or with the console even and the Service Network then just automatically appears in all of the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 892.16,
      "end": 895.76,
      "text": " accounts that you've shared it with and then they can quickly create the association with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 895.76,
      "end": 900.8,
      "text": " their service. So, the order is the admin would create and share that Service Network with RAM"
    },
    {
      "speakerLabel": "spk_0",
      "start": 900.8,
      "end": 907.12,
      "text": " with specific accounts or users or roles or the whole organization and then the dev team just sees"
    },
    {
      "speakerLabel": "spk_0",
      "start": 907.12,
      "end": 913.04,
      "text": " it associated with the service and they would associate the VPCs they consume with the service"
    },
    {
      "speakerLabel": "spk_0",
      "start": 913.04,
      "end": 916.88,
      "text": " network and that's it. All of the things can talk to each other at that point. So, it's really,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 916.88,
      "end": 919.8399999999999,
      "text": " really seamless and I can imagine as well, once you've got this set up for the first time,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 920.56,
      "end": 926,
      "text": " you can start scaling to like hundreds of services really quickly and each of them has a DNS name"
    },
    {
      "speakerLabel": "spk_0",
      "start": 926,
      "end": 931.68,
      "text": " and the process of communication is really easy. You can have conventions around your policies and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 931.68,
      "end": 938.0799999999999,
      "text": " what needs to be in there and it just happens a lot quicker than the typical setup when you've"
    },
    {
      "speakerLabel": "spk_0",
      "start": 938.08,
      "end": 943.6,
      "text": " got like all these teams trying to coordinate, make sure you don't have the right, you don't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 943.6,
      "end": 949.6,
      "text": " have overlapping IP ranges and all that kind of stuff."
    },
    {
      "speakerLabel": "spk_1",
      "start": 949.6,
      "end": 956.5600000000001,
      "text": " How does the routing work other than, I mean, you described the DNS mechanism, but do you need to explicitly configure anything or it"
    },
    {
      "speakerLabel": "spk_1",
      "start": 956.5600000000001,
      "end": 961.0400000000001,
      "text": " just happens out of the box?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 961.0400000000001,
      "end": 966.88,
      "text": " This is the other piece where Lattice is completely different to everything else because it's got a very special mechanism for routing. So, like we say, it doesn't"
    },
    {
      "speakerLabel": "spk_0",
      "start": 966.88,
      "end": 972.4,
      "text": " have any routing tables as such. So, when you associate with your VPC with a Service Network,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 973.2,
      "end": 980.08,
      "text": " those VPCs will automatically then resolve DNS names for Lattice services to a link local IP"
    },
    {
      "speakerLabel": "spk_0",
      "start": 980.08,
      "end": 986.4,
      "text": " address. So, you might have come across link local IP addresses in other places. If you've ever used"
    },
    {
      "speakerLabel": "spk_0",
      "start": 986.4,
      "end": 995.04,
      "text": " the EC2 metadata service, it starts with a 169.254 IP and that means those, these are special"
    },
    {
      "speakerLabel": "spk_0",
      "start": 995.04,
      "end": 1002.56,
      "text": " IP ranges in the IP spec that are not routable. So, they're only valid on a local host."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1004.3199999999999,
      "end": 1011.68,
      "text": " But Lattice is essentially using these as kind of a door into the hyperplane infrastructure where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1011.68,
      "end": 1017.1999999999999,
      "text": " they do all of the network virtualization. You've got this VPC control plane that we've already"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1017.1999999999999,
      "end": 1021.52,
      "text": " described where you create these logical constructs like services and Service Networks,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1021.52,
      "end": 1027.52,
      "text": " but in your VPC, there's now a special VPC Lattice data plane and these link local addresses"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1027.52,
      "end": 1034.96,
      "text": " are the door into that data plane. So, when you do a DNS lookup on a Lattice DNS name,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1034.96,
      "end": 1040.24,
      "text": " you'll end up with one of these link local IP addresses. These DNS names are global,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1040.24,
      "end": 1043.52,
      "text": " so anyone in the world, if they know the DNS name, they can look up the address,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1043.52,
      "end": 1048.16,
      "text": " but it's completely meaningless outside of your VPC. The other beautiful thing about this is that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1048.16,
      "end": 1053.2,
      "text": " Lattice doesn't consume any of your IP ranges. You can imagine if you had a sidecar or a proxy,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1053.2,
      "end": 1057.68,
      "text": " it needs to have an IP address and needs to do some proxying and routing. That doesn't happen"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1057.68,
      "end": 1064,
      "text": " here. It just automatically goes into this Lattice data plane. Lattice works within and across"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1064,
      "end": 1070.4,
      "text": " accounts, but it's always within a single region. So, there's no multi-region possibility or cross"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1070.4,
      "end": 1075.44,
      "text": " region propagation. Cross region routing is something that's really kind of hardcore networking"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1075.44,
      "end": 1080,
      "text": " anyway. So, it's not really in the domain of inter-application East-West communication."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1080,
      "end": 1084.64,
      "text": " So, how does that work instead with Lambda?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1085.44,
      "end": 1090.16,
      "text": " Because you mentioned before that it is possible to effectively send the traffic to Lambda, but we also know that Lambda is totally event-based,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1090.16,
      "end": 1095.92,
      "text": " doesn't have a concept of listening in a port, for example. So, how did they make that integration happen?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1095.92,
      "end": 1101.1200000000001,
      "text": " VPC Lattice actually is a new trigger type for Lambda."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1101.12,
      "end": 1106.3999999999999,
      "text": " So, I think it's the fourth HTTP-based synchronous triggering mechanism for Lambda. So, you've already got Application Load"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1106.3999999999999,
      "end": 1113.36,
      "text": " Balancers, API Gateway, and you've got Function URLs. Actually, fifth, because I forgot about"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1113.36,
      "end": 1118.8799999999999,
      "text": " AppSync as well. So, now you've got this fifth one. So, it's a new event trigger for Lambda,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1118.8799999999999,
      "end": 1124.7199999999998,
      "text": " and if you invoke a service, the VPC Lattice data plane is going to do that synchronous"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1124.7199999999998,
      "end": 1130.4799999999998,
      "text": " triggering of the function for you. Now, the payload is similar to putting a server on a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1130.48,
      "end": 1135.6,
      "text": " VPC Lattice, similar to, but actually different from API Gateway or Application Load Balancer."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1135.6,
      "end": 1140.72,
      "text": " So, it looks similar, but you'll have to parse it slightly differently. Just because it's VPC"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1140.72,
      "end": 1145.3600000000001,
      "text": " Lattice doesn't mean that the Lambda functions have to be running in a VPC with subnets configured."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1145.3600000000001,
      "end": 1150.88,
      "text": " You only need Lambdas to have a VPC if they're going to consume other services from Lattice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1150.88,
      "end": 1157.68,
      "text": " Okay, what about in terms of observability? Because if you use regular VPCs, you're probably"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1157.68,
      "end": 1160.88,
      "text": " going to have to use logs, but what are the options here?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1160.88,
      "end": 1165.04,
      "text": " One of the things that network admins are going to be really happy about with VPC Lattice is the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1165.04,
      "end": 1170.72,
      "text": " fact that you can create a log group in CloudWatch on the Service Network level, and you get logs"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1170.72,
      "end": 1176.4,
      "text": " for all of the traffic through Lattice that you get everything. You get your HTTP request,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1176.4,
      "end": 1180.5600000000002,
      "text": " and then you can see who is calling, what IP address are they coming from, what's their"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1180.5600000000002,
      "end": 1185.44,
      "text": " principal identity ARN, what Service Network are they coming from, what service are they coming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1185.44,
      "end": 1189.92,
      "text": " from, what service is their target group. All of that information is in the logs. So it's really"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1189.92,
      "end": 1195.68,
      "text": " nice that you've got one central log with all this east west traffic in it. This is like a one line"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1195.68,
      "end": 1202.16,
      "text": " configuration. I'm sure a lot of network engineers have spent months configuring great observability"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1202.16,
      "end": 1206.4,
      "text": " for this kind of communication in the past. So I think this is one area which will really sell it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1206.4,
      "end": 1211.3600000000001,
      "text": " to a lot of people. You also then get CloudWatch metrics, but those aren't on the Service Network"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1211.36,
      "end": 1218.08,
      "text": " services, and you get them per service and per target group."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1218.08,
      "end": 1224.8,
      "text": " So I am almost sold, but before opening my wallet, I want to know what's the cost. So let's talk about pricing."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1224.8,
      "end": 1228.1599999999999,
      "text": " Before I do talk about pricing, actually, one of the things is that somebody asked us earlier on,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1229.1999999999998,
      "end": 1234.56,
      "text": " does Lattice support VPC Flow Logs then? Because if you've got this CloudWatch log, is it possible"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1234.56,
      "end": 1240.6399999999999,
      "text": " to do Flow Logs? And after they asked, we went and tried it, and I was surprised to see that they"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1240.64,
      "end": 1247.0400000000002,
      "text": " actually do, because I thought you'd only see a flow log between two VPC IPs and not these link"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1247.0400000000002,
      "end": 1252.24,
      "text": " local IPs, but you can turn on Flow Logs for any VPC that's connected to a Service Network, and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1252.24,
      "end": 1257.8400000000001,
      "text": " you'll still get all of the flows with the link local addresses in there. Nice. So I've held off"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1257.8400000000001,
      "end": 1263.5200000000002,
      "text": " on talking about pricing for long enough. Let's go for it. So the pricing dimensions are three"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1263.5200000000002,
      "end": 1269.76,
      "text": " dimensions. You got per service, and it varies a bit per region, but let's look at US East One."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1269.76,
      "end": 1274.8799999999999,
      "text": " At the moment, it's two and a half cents per hour per service. So that sounds fine if you've got a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1274.8799999999999,
      "end": 1280.16,
      "text": " few services. If you've got hundreds of services, which you can do with Lattice, you can see that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1280.16,
      "end": 1285.52,
      "text": " we're shutting up pretty quickly. Then you pay 2.5 cents per gigabyte as well. And there's another"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1285.52,
      "end": 1289.68,
      "text": " dimension, which is per request, and you pay 10 cents for a million requests. I think most people"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1289.68,
      "end": 1294,
      "text": " would be focused on the first two, really. And if you compare it to Transit Gateway,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1294,
      "end": 1298.72,
      "text": " Transit Gateway, you pay 10 cents per attachment per hour, and then two cents per gigabyte. So"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1298.72,
      "end": 1303.6000000000001,
      "text": " it's more expensive in one dimension, less expensive in the other. But comparing it to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1303.6000000000001,
      "end": 1308.48,
      "text": " VPC Peering, I mean, VPC Peering is completely free. You could also compare it to just your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1308.48,
      "end": 1313.3600000000001,
      "text": " existing service mesh set up in your applications, which you might've spent a lot of engineering"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1313.3600000000001,
      "end": 1319.76,
      "text": " effort on. And for that reason, now I see AWS talking about using Lattice for microservice"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1319.76,
      "end": 1324.4,
      "text": " communication, but if you're one of the companies that's got hundreds, thousands of microservices,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1324.4,
      "end": 1327.84,
      "text": " I can imagine that Lattice could be a bit expensive. Despite that pitch, I think it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1327.84,
      "end": 1332.24,
      "text": " might be a bit more palatable for service to service or application to application communication"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1332.24,
      "end": 1339.12,
      "text": " than just microservices. I also think looking at how much it simplifies networking, and if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1339.12,
      "end": 1343.12,
      "text": " compare that to the engineering cost and the opportunity cost of all the engineering effort"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1343.12,
      "end": 1348.1599999999999,
      "text": " and the interaction between teams, it might actually be a very valuable trade-off to look"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1348.1599999999999,
      "end": 1352.3999999999999,
      "text": " at Lattice if you can really go all in on it, especially, and get rid of a lot of that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1352.4,
      "end": 1358.3200000000002,
      "text": " engineering effort."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1358.3200000000002,
      "end": 1362.8000000000002,
      "text": " Okay. That's really cool so far. You mentioned we have a demo application that is available in our repository that we will share in the show notes. Do you want to describe"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1362.8000000000002,
      "end": 1367.3600000000001,
      "text": " a little bit what's the idea for that particular demo?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1367.3600000000001,
      "end": 1372.88,
      "text": " This is what we use to explore and learn about Lattice and it's a multi-count setup. So it has everything we talked about. There's a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1372.88,
      "end": 1376.88,
      "text": " networking setup for a networking account where you create the Service Network, share it with RAM."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1376.88,
      "end": 1381.6000000000001,
      "text": " You've got your centralized logs, and then we've got a kind of assumption that you've got a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1381.6,
      "end": 1386.3999999999999,
      "text": " existing registered domain, public one, and a public hosted zone in that networking account."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1386.3999999999999,
      "end": 1391.28,
      "text": " And then we've got two other accounts, account A and account B, we call them, and that's where"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1391.28,
      "end": 1396.6399999999999,
      "text": " the two different services run. And we've got Lattice services there. One of them is quite"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1396.6399999999999,
      "end": 1403.12,
      "text": " simple. It's just got a Lambda function at the back. And the other one has kind of used the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1403.12,
      "end": 1409.6799999999998,
      "text": " weighted traffic routing so that half of it goes to another Lambda function and half of it goes to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1409.68,
      "end": 1417.44,
      "text": " a Fargate service. And interestingly with Fargate, the way you integrate Lattice with it at the moment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1417.44,
      "end": 1423.92,
      "text": " is by using a load balancer. So you don't route to individual tasks or containers."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1423.92,
      "end": 1429.1200000000001,
      "text": " You use a load balancer in front of it, which is, you know, it simplifies it in some ways, but the negatives"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1429.1200000000001,
      "end": 1432.3200000000002,
      "text": " with that are that you still pay for the load balancer traffic as well as Lattice. It just"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1432.3200000000002,
      "end": 1437.04,
      "text": " seems like an extra resource you don't need given the fact that Lattice supports all this kind of"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1437.04,
      "end": 1441.84,
      "text": " stuff anyway. So maybe in the future, we'll see an improvement there, some additional ability,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1441.84,
      "end": 1448.32,
      "text": " because with Kubernetes, there is a gateway controller that AWS have provided that automatically"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1449.36,
      "end": 1456.8799999999999,
      "text": " creates Service Networks and services and creates IP addresses in the target groups in Lattice"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1456.8799999999999,
      "end": 1460.8,
      "text": " for you. So it's a very different approach. Anyway, back to the demo application."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1461.44,
      "end": 1466.8,
      "text": " This other service is going to route traffic between Lambda and Fargate. And the Lambda function is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1466.8,
      "end": 1473.12,
      "text": " actually going to go through Lattice and invoke the other service in the other account as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1473.12,
      "end": 1478.1599999999999,
      "text": " So it's kind of got the whole thing set up. And then we've got in that CDK application for the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1478.1599999999999,
      "end": 1484.8799999999999,
      "text": " demo, we've also got like an EC2 instance and a VPC in the networking account that you can manually"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1484.8799999999999,
      "end": 1491.28,
      "text": " hook up to the Service Network. And then there's a client with the signature set up all in there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1491.28,
      "end": 1495.36,
      "text": " that you can use to invoke one of the services. And you can see the traffic that comes back."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1495.36,
      "end": 1500.08,
      "text": " You can see if you keep invoking it, that it'll hit sometimes the ECS container,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1500.08,
      "end": 1505.12,
      "text": " then it'll hit the Lambda target. And the Lambda target will then talk to the other service and you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1505.12,
      "end": 1509.12,
      "text": " can see the traffic coming back and you can explore the logs and you can look at the flow"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1509.12,
      "end": 1512.9599999999998,
      "text": " logs and all this kind of stuff. So check it out. We'll give the link to that in the show notes."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1512.9599999999998,
      "end": 1516.9599999999998,
      "text": " Anybody who's got any interesting questions on that repo or improvements as well, we'd love to hear from you. "
    },
    {
      "speakerLabel": "spk_1",
      "start": 1516.9599999999998,
      "end": 1522.3999999999999,
      "text": " That's awesome. So I guess that's a great introduction to Lattice."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1522.4,
      "end": 1527.2800000000002,
      "text": " I'm going to try to quickly summarize the use cases that you described. So communication between microservices,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1527.2800000000002,
      "end": 1532.5600000000002,
      "text": " private APIs, east-west communication, app modernization, because you can easily switch"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1532.5600000000002,
      "end": 1538.24,
      "text": " over from the old endpoint to the new endpoint in a transparent way. And in general, it seems that"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1538.24,
      "end": 1542.64,
      "text": " the main selling point is that it kind of reduces all that communication friction and ownership"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1542.64,
      "end": 1548.16,
      "text": " friction between admin teams and development teams. So it kind of defines very clear integration"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1548.16,
      "end": 1553.68,
      "text": " points between the two teams and then there is a lot more freedom to operate. So that can be a very"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1553.68,
      "end": 1559.76,
      "text": " compelling reason to use this service. I think we also have a few resources that we collected while"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1559.76,
      "end": 1565.76,
      "text": " doing all of this research. There is a Serverless Office Hours session, which was really interesting"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1565.76,
      "end": 1569.3600000000001,
      "text": " and we're going to have the link in the show notes. And then there are other few articles"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1569.3600000000001,
      "end": 1575.28,
      "text": " that we are going to link, including the official AWS documentation. So check out the show notes for"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1575.28,
      "end": 1580.48,
      "text": " more links. And with that, I think that's everything for this episode. We are really excited, as usual,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1580.48,
      "end": 1585.28,
      "text": " to know your perspective. If you've used it, what do you think? Do you actually have a real use case"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1585.28,
      "end": 1591.12,
      "text": " in production? Tell us about that and that way we can compare opinions and learn something more"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1591.12,
      "end": 1606.6399999999999,
      "text": " together. So thank you very much and we'll see you in the next episode."
    }
  ]
}