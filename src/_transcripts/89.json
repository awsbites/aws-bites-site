{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 5.44,
      "text": " Development on AWS is often slowed down by deployment time, particularly in development environments."
    },
    {
      "speakerLabel": "spk_0",
      "start": 5.44,
      "end": 10.16,
      "text": " Often people turn to local simulation of AWS. While this can solve some immediate challenges"
    },
    {
      "speakerLabel": "spk_0",
      "start": 10.16,
      "end": 14.56,
      "text": " and speed up your feedback loop, it comes with its own problems. So today we'll try to answer"
    },
    {
      "speakerLabel": "spk_0",
      "start": 14.56,
      "end": 20.16,
      "text": " the age-old question, should you simulate AWS locally or go to the real cloud every single time?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 20.16,
      "end": 30.32,
      "text": " My name is Luciano, I'm here with Eoin and this is AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 30.32,
      "end": 35.44,
      "text": " AWS Bites is made possible by the support of fourTheorem, an AWS consulting partner that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 35.44,
      "end": 39.84,
      "text": " works with you to make AWS migration, architecture and development a success."
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.480000000000004,
      "end": 45.519999999999996,
      "text": " See fourtheorem.com, this link is in the show notes and this way you can find out more about fourTheorem."
    },
    {
      "speakerLabel": "spk_0",
      "start": 45.52,
      "end": 52.080000000000005,
      "text": " So, I remember that when we were working with containers or monolithic applications like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 52.080000000000005,
      "end": 58.56,
      "text": " Node.js servers or Spring servers or whatever PHP framework you would like, it was always the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 58.56,
      "end": 63.440000000000005,
      "text": " default to just run things locally, develop that way and when you were happy you had a way to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 63.440000000000005,
      "end": 69.2,
      "text": " publish things to an actual environment remotely. Now things seem to have become significantly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 69.2,
      "end": 74.48,
      "text": " harder because you don't really have that real option of running things locally, you can maybe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 74.48,
      "end": 79.28,
      "text": " simulate certain things but since you are dealing with distributed applications it is becoming"
    },
    {
      "speakerLabel": "spk_0",
      "start": 79.28,
      "end": 84.24000000000001,
      "text": " increasingly harder to be able to simulate everything on your own machine. So what are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 84.24000000000001,
      "end": 87.92,
      "text": " the options in AWS? Is it true that things are getting harder? What can we do?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 92.4,
      "end": 96.88000000000001,
      "text": " When Docker became popular I think it made local development a lot easier because the local runtime really matched the production runtime quite closely. You really only had to think"
    },
    {
      "speakerLabel": "spk_1",
      "start": 96.88000000000001,
      "end": 102.08000000000001,
      "text": " about whether you would use a remote database or a local one and then with things like Docker Compose"
    },
    {
      "speakerLabel": "spk_1",
      "start": 102.08,
      "end": 107.03999999999999,
      "text": " and then other container orchestration, things like Kubernetes, you could run a set of microservices"
    },
    {
      "speakerLabel": "spk_1",
      "start": 107.03999999999999,
      "end": 113.44,
      "text": " and related resources like ElastCache, RabbitMQ and your databases locally too. Now particularly"
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.44,
      "end": 119.03999999999999,
      "text": " with serverless applications, a lot of the application is realized with lots of distributed"
    },
    {
      "speakerLabel": "spk_1",
      "start": 119.03999999999999,
      "end": 124.72,
      "text": " AWS services outside of the code running in containers and it might be in Lambda functions"
    },
    {
      "speakerLabel": "spk_1",
      "start": 124.72,
      "end": 129.76,
      "text": " as well. We try to take advantage of managed services to save on production maintenance and"
    },
    {
      "speakerLabel": "spk_1",
      "start": 129.76,
      "end": 135.51999999999998,
      "text": " provide that scalability, robustness and security but the trade-off then is that local development"
    },
    {
      "speakerLabel": "spk_1",
      "start": 135.51999999999998,
      "end": 142.64,
      "text": " has become a lot more challenging. So if you want real SQS, DynamoDB, RDS, IAM, you need to deploy"
    },
    {
      "speakerLabel": "spk_1",
      "start": 142.64,
      "end": 148.48,
      "text": " to AWS usually using Terraform or CloudFormation or something else like that. And sometimes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 148.48,
      "end": 153.2,
      "text": " deployments are fast and it's not really a problem but often they can take many minutes and when"
    },
    {
      "speakerLabel": "spk_1",
      "start": 153.2,
      "end": 157.76,
      "text": " you're doing it multiple times per day this really adds up if you're making lots of changes especially"
    },
    {
      "speakerLabel": "spk_1",
      "start": 157.76,
      "end": 163.44,
      "text": " early on in development. So I think this is really the challenge that has led a lot of people to try"
    },
    {
      "speakerLabel": "spk_1",
      "start": 163.44,
      "end": 168.88,
      "text": " and simulate things locally. What have you tried and what are the options there?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 168.88,
      "end": 173.92,
      "text": " I tried a few things. The first one that comes to mind is local stack which has been around for a while and it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 173.92,
      "end": 179.92,
      "text": " an open source project that tries to effectively simulate a bunch of different AWS services"
    },
    {
      "speakerLabel": "spk_0",
      "start": 179.92,
      "end": 185.12,
      "text": " and allows you to run them locally using Docker containers and then you can connect all of them"
    },
    {
      "speakerLabel": "spk_0",
      "start": 185.12,
      "end": 191.44,
      "text": " and the API tries to match exactly the API that you have in AWS. But of course it's not perfect."
    },
    {
      "speakerLabel": "spk_0",
      "start": 191.44,
      "end": 196.4,
      "text": " I don't think it's humanly possible to try to recreate AWS in its entirety and run it locally."
    },
    {
      "speakerLabel": "spk_0",
      "start": 197.04,
      "end": 201.84,
      "text": " So the coverage is limited. It might work well for certain services and certain specific use cases,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 201.84,
      "end": 205.84,
      "text": " maybe if you're using only certain specific APIs that are the most common, but if you're doing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 205.84,
      "end": 211.28,
      "text": " something a little bit more outside the common use cases probably you will find that the coverage is"
    },
    {
      "speakerLabel": "spk_0",
      "start": 211.28,
      "end": 217.76,
      "text": " not there yet. There was recently a new version that was released, version 2, which seems like"
    },
    {
      "speakerLabel": "spk_0",
      "start": 217.76,
      "end": 222.48,
      "text": " the project is trying to push forward and try to extend that coverage and try to make the whole"
    },
    {
      "speakerLabel": "spk_0",
      "start": 222.48,
      "end": 227.44,
      "text": " user experience even better. But I think it's still something that we need to figure out exactly"
    },
    {
      "speakerLabel": "spk_0",
      "start": 227.44,
      "end": 231.92000000000002,
      "text": " to which extent is going to allow us to cover the full range of things that you might want to do in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 231.92000000000002,
      "end": 238.32,
      "text": " AWS. I think that the things that I found are generally very hard to simulate are IAM permissions,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 238.32,
      "end": 244.07999999999998,
      "text": " policies, the whole thing where you kind of generally give up on simulating that locally."
    },
    {
      "speakerLabel": "spk_0",
      "start": 244.07999999999998,
      "end": 248.16,
      "text": " You just say, that's something I'm going to test in the real environment. For now,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 248.16,
      "end": 251.76,
      "text": " when I run things locally, I'm going to assume everything is open and there is no permission"
    },
    {
      "speakerLabel": "spk_0",
      "start": 251.76,
      "end": 256.08,
      "text": " issue. So there is always some kind of art trade-off there and you kind of think it's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 256.08,
      "end": 259.84,
      "text": " working and then you have a permission problem in production and you need to test that part"
    },
    {
      "speakerLabel": "spk_0",
      "start": 259.84,
      "end": 263.6,
      "text": " in, sorry, not necessarily production, but like the remote environment on AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 263.6,
      "end": 267.44,
      "text": " And then you'll need to test that until you actually get it right. So maybe that's an area"
    },
    {
      "speakerLabel": "spk_0",
      "start": 267.44,
      "end": 272.88,
      "text": " where there might be a little bit more tooling and support for log on development. Another similar"
    },
    {
      "speakerLabel": "spk_0",
      "start": 272.88,
      "end": 279.68,
      "text": " one is CloudFormation. So I haven't found a way, not that I even tried that much, to test your"
    },
    {
      "speakerLabel": "spk_0",
      "start": 279.68,
      "end": 285.6,
      "text": " CloudFormation locally. Generally, CloudFormation is supposed to run against AWS. So that's"
    },
    {
      "speakerLabel": "spk_0",
      "start": 285.6,
      "end": 291.12,
      "text": " generally the way I test it. I just write code, try to deploy, see what happens and iterate that way,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 291.12,
      "end": 296.56,
      "text": " which can have a very slow feedback loop. So maybe that's an area where there could be some tool as"
    },
    {
      "speakerLabel": "spk_0",
      "start": 296.56,
      "end": 302.4,
      "text": " well, maybe in the local stack space that can help us to do some more testing locally. Another thing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 302.4,
      "end": 306.56,
      "text": " that is worth mentioning about Logger Stack is that this used to be a free and open source"
    },
    {
      "speakerLabel": "spk_0",
      "start": 306.56,
      "end": 311.84000000000003,
      "text": " project. It still is an open source project, but now there is a company behind it and there is a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 311.84000000000003,
      "end": 317.44,
      "text": " commercial offering as well. So that might have its own pros and cons. Maybe there is more commitment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 317.44,
      "end": 320.8,
      "text": " in trying to improve the quality of the open source version, but of course there is also going"
    },
    {
      "speakerLabel": "spk_0",
      "start": 320.8,
      "end": 326.24,
      "text": " to be a push for more commercial offerings. So let's see what happens. Other ones that I tried"
    },
    {
      "speakerLabel": "spk_0",
      "start": 326.24,
      "end": 331.28000000000003,
      "text": " are serverless log simulation. So these are especially important when you are working with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 331.28000000000003,
      "end": 335.84000000000003,
      "text": " things like Lambdas and you maybe use some frameworks to be able to write and deploy"
    },
    {
      "speakerLabel": "spk_0",
      "start": 335.84000000000003,
      "end": 340.8,
      "text": " those Lambdas easily. Oftentimes this framework will give you some kind of capability to do"
    },
    {
      "speakerLabel": "spk_0",
      "start": 340.8,
      "end": 345.68,
      "text": " some level of local testing. Worth mentioning Serverless offline, which is a plugin for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 345.68,
      "end": 350.32,
      "text": " serverless framework and allows you to simulate API Gateway and Lambda locally. So effectively"
    },
    {
      "speakerLabel": "spk_0",
      "start": 350.32,
      "end": 356.71999999999997,
      "text": " it's going to run for your web server and you can call it, you can send call request, postman,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 356.71999999999997,
      "end": 361.28,
      "text": " use the browser, whatever you like to actually send request directly to your Lambdas running"
    },
    {
      "speakerLabel": "spk_0",
      "start": 361.28,
      "end": 367.28,
      "text": " locally. So it's a very nice way to be able to test your APIs locally as you are developing them"
    },
    {
      "speakerLabel": "spk_0",
      "start": 367.28,
      "end": 372.71999999999997,
      "text": " using serverless technologies. Very similar if you use SAM. SAM has an option called SAM local"
    },
    {
      "speakerLabel": "spk_0",
      "start": 373.6,
      "end": 379.12,
      "text": " and that does pretty much the same thing. And I have been recently playing with Lambdas in Rust"
    },
    {
      "speakerLabel": "spk_0",
      "start": 379.12,
      "end": 383.68,
      "text": " and there is another tool called Cargo Lambda, which is kind of the default tool to bootstrap"
    },
    {
      "speakerLabel": "spk_0",
      "start": 383.68,
      "end": 388.16,
      "text": " your Lambdas and that comes also with some commands that allow you to simulate your Lambdas"
    },
    {
      "speakerLabel": "spk_0",
      "start": 388.16,
      "end": 393.36,
      "text": " locally and integrates very well with SAM. So if you do your project in SAM and you are writing"
    },
    {
      "speakerLabel": "spk_0",
      "start": 393.36,
      "end": 398.24,
      "text": " your Lambdas in Rust, you can use Cargo Lambda for all the building and running part, but then"
    },
    {
      "speakerLabel": "spk_0",
      "start": 398.24,
      "end": 404.32,
      "text": " you still use the commands that you are well used to use when you use SAM. So you can still run SAM"
    },
    {
      "speakerLabel": "spk_0",
      "start": 404.32,
      "end": 409.36,
      "text": " local and behind the scenes is going to use Cargo Lambda to kind of compile your Lambda and run it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 409.36,
      "end": 416.24,
      "text": " correctly. There are other ones in.NET. For instance, there is AWS.NET mock Lambda test tool."
    },
    {
      "speakerLabel": "spk_0",
      "start": 416.24,
      "end": 420.8,
      "text": " I haven't used this one, but we will have a link in the show notes in case you want to look at that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 420.8,
      "end": 426,
      "text": " one. And finally, also worth mentioning that for other services like DynamoDB and Step Functions,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 426,
      "end": 430.88,
      "text": " there are some packages that you can download directly from AWS. These are generally either"
    },
    {
      "speakerLabel": "spk_0",
      "start": 430.88,
      "end": 438,
      "text": " Docker containers or JAR executables and they give you some kind of local simulation of that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 438,
      "end": 442.88,
      "text": " particular service. For instance, for DynamoDB, you don't get a replicated distributed version"
    },
    {
      "speakerLabel": "spk_0",
      "start": 442.88,
      "end": 448.56,
      "text": " of DynamoDB, but it is pretty close to the API that you get when you use DynamoDB remotely."
    },
    {
      "speakerLabel": "spk_0",
      "start": 448.56,
      "end": 454.24,
      "text": " So I think you can rely on that for most of the things that you will do with DynamoDB."
    },
    {
      "speakerLabel": "spk_0",
      "start": 454.24,
      "end": 459.12,
      "text": " And very similar, there is the Step Function local tool, which allows you to run some local"
    },
    {
      "speakerLabel": "spk_0",
      "start": 459.12,
      "end": 463.68,
      "text": " simulation of a Step Function. And it's also interesting because it gives you ways to mock."
    },
    {
      "speakerLabel": "spk_0",
      "start": 463.68,
      "end": 468,
      "text": " Because with Step Function, we can effectively call other services in AWS, it gives you a way"
    },
    {
      "speakerLabel": "spk_0",
      "start": 468,
      "end": 474.4,
      "text": " to mock those steps. So you can still execute your Step Function simulation, even though you might be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 474.4,
      "end": 480.4,
      "text": " relying on other services that are outside the scope of Step Function. So I guess my comment"
    },
    {
      "speakerLabel": "spk_0",
      "start": 480.4,
      "end": 485.68,
      "text": " there is that in general, these simulations are good as a starting point, but you only get so far"
    },
    {
      "speakerLabel": "spk_0",
      "start": 485.68,
      "end": 491.76,
      "text": " because you always end up eating some kind of limitation, missing API or difference even in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 491.76,
      "end": 496.8,
      "text": " the way that the API works locally with the way it works remotely. And again, there is still the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 496.8,
      "end": 502.48,
      "text": " problem of permissions that you don't generally, you don't get any check on your roles or policies."
    },
    {
      "speakerLabel": "spk_0",
      "start": 502.48,
      "end": 506.56,
      "text": " So you kind of assume that everything is correct until you actually run it in AWS."
    },
    {
      "speakerLabel": "spk_0",
      "start": 507.28000000000003,
      "end": 512.48,
      "text": " So what do we recommend? Is there any approach that you find works best than others?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 512.48,
      "end": 516.8000000000001,
      "text": " I used to spend a lot of time on trying to get local stack to work."
    },
    {
      "speakerLabel": "spk_1",
      "start": 516.8000000000001,
      "end": 522.5600000000001,
      "text": " Remember the early days, trying to make a pull request on local stack so I could get event bridge support for some"
    },
    {
      "speakerLabel": "spk_1",
      "start": 522.5600000000001,
      "end": 528.32,
      "text": " integration tests I was doing. And that was just because I was determined that it was going to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 528.32,
      "end": 531.9200000000001,
      "text": " work for me and I ended up spending more time on trying to work around the limitations. So"
    },
    {
      "speakerLabel": "spk_1",
      "start": 531.9200000000001,
      "end": 537.04,
      "text": " this is what you're faced with. And similarly, you mentioned Step Functions local, and recently I tried"
    },
    {
      "speakerLabel": "spk_1",
      "start": 537.04,
      "end": 544.24,
      "text": " to use that, but I think there was an issue with support for the new map type because they changed"
    },
    {
      "speakerLabel": "spk_1",
      "start": 544.24,
      "end": 548.48,
      "text": " how you can declare maps when they added support for distributed maps, but that's not there in Step"
    },
    {
      "speakerLabel": "spk_1",
      "start": 548.48,
      "end": 553.52,
      "text": " Functions local yet. So these tools will always have a challenge keeping up with the latest in"
    },
    {
      "speakerLabel": "spk_1",
      "start": 553.52,
      "end": 559.1999999999999,
      "text": " the cloud. So I am more now of the opinion that you should put less effort into local simulation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 559.1999999999999,
      "end": 564.4,
      "text": " and more into trying to optimize your development flow in other ways. So one thing you can do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 564.4,
      "end": 569.76,
      "text": " without local simulations is just try and focus more on unit tests. It's a good practice anyway,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 569.76,
      "end": 574.0799999999999,
      "text": " but if you focus on separating your code well, then you can just unit test the logic and you"
    },
    {
      "speakerLabel": "spk_1",
      "start": 574.0799999999999,
      "end": 579.04,
      "text": " don't have to deploy every time. So this is just a recommendation really around code structure,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 579.04,
      "end": 584.16,
      "text": " following clean code principles, separating the AWS specific stuff from the actual logic,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 584.16,
      "end": 588.96,
      "text": " and following some sort of pattern. Like there's plenty, especially in the serverless community,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 588.96,
      "end": 594,
      "text": " of talks and articles around hexagonal architecture, also known as ports and adapters,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 594,
      "end": 599.6,
      "text": " which is essentially a fairly simple mechanism to ensure that you separate out the inbound"
    },
    {
      "speakerLabel": "spk_1",
      "start": 599.6,
      "end": 603.84,
      "text": " connections and the outbound connections and integrations into your database and other services."
    },
    {
      "speakerLabel": "spk_1",
      "start": 605.04,
      "end": 610.32,
      "text": " When you are unit testing, for example, in Python, you have moto and moto is a Python library that's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 610.32,
      "end": 616.24,
      "text": " actually the internal logic that is used by local stack. So it's like the library that makes local"
    },
    {
      "speakerLabel": "spk_1",
      "start": 616.24,
      "end": 622.72,
      "text": " stack possible. You can also use moto to mock AWS services in your unit tests. Now I have sometimes"
    },
    {
      "speakerLabel": "spk_1",
      "start": 622.72,
      "end": 627.6800000000001,
      "text": " used local stack and still do from time to time in unit tests and integration tests if the needs are"
    },
    {
      "speakerLabel": "spk_1",
      "start": 627.6800000000001,
      "end": 634.1600000000001,
      "text": " simple and it can be valuable in that case. So what I would also say then is that kind of look"
    },
    {
      "speakerLabel": "spk_1",
      "start": 634.1600000000001,
      "end": 637.9200000000001,
      "text": " at where you're spending your time and how you can just optimize for that. So if your issue is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 637.9200000000001,
      "end": 642.72,
      "text": " cloud formation deployment speed, disabling rollbacks can help because sometimes, especially"
    },
    {
      "speakerLabel": "spk_1",
      "start": 642.72,
      "end": 647.6800000000001,
      "text": " in development, a lot of the reason why it's slow is that you're making mistakes and misconfigurations"
    },
    {
      "speakerLabel": "spk_1",
      "start": 647.6800000000001,
      "end": 651.44,
      "text": " and then when you deploy, the deployment time is reasonably fast, but the rollback time is the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 651.44,
      "end": 655.7600000000001,
      "text": " thing that gets you. So by disabling rollbacks, you can make that process a bit faster. And then"
    },
    {
      "speakerLabel": "spk_1",
      "start": 655.7600000000001,
      "end": 659.9200000000001,
      "text": " if you've got lots of resources in your stack, then you don't have to roll back everything just"
    },
    {
      "speakerLabel": "spk_1",
      "start": 659.9200000000001,
      "end": 664.4000000000001,
      "text": " because you've got one configuration value missing in some small resource. Similarly, you could just"
    },
    {
      "speakerLabel": "spk_1",
      "start": 664.4000000000001,
      "end": 668.48,
      "text": " try and incrementally build out these stacks and deploy them and kind of resolve the problems one"
    },
    {
      "speakerLabel": "spk_1",
      "start": 668.48,
      "end": 673.6,
      "text": " by one. I also think I'm kind of hopeful that cloud formation will become significantly faster"
    },
    {
      "speakerLabel": "spk_1",
      "start": 673.6,
      "end": 678.6400000000001,
      "text": " in the future. I notice sometimes how it's just a little, some of the services implementations of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 678.64,
      "end": 684.88,
      "text": " the resource providers end up doing things like trying to create a resource. It fails because"
    },
    {
      "speakerLabel": "spk_1",
      "start": 684.88,
      "end": 689.12,
      "text": " there's a misconfiguration, but you can see in cloud trail that cloud formation is retrying"
    },
    {
      "speakerLabel": "spk_1",
      "start": 689.12,
      "end": 694.56,
      "text": " this thing with a back off and then it just, it can really slow things down. So those are fairly"
    },
    {
      "speakerLabel": "spk_1",
      "start": 694.56,
      "end": 700.88,
      "text": " simple things, low hanging proof that I think the AWS can address. I do see that AWS are trying to"
    },
    {
      "speakerLabel": "spk_1",
      "start": 700.88,
      "end": 705.84,
      "text": " make things faster in general. So we talked before about SAM acceleration, SAM sync command,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 705.84,
      "end": 710.1600000000001,
      "text": " and this is essentially a backdoor to updating things like Lambda functions, API gateway,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 710.1600000000001,
      "end": 715.6,
      "text": " and step functions without using cloud formation. So it's really just a quick and dirty hack really,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 715.6,
      "end": 719.9200000000001,
      "text": " but it speeds up development flow. So you don't have to deploy real resources using cloud formation"
    },
    {
      "speakerLabel": "spk_1",
      "start": 719.9200000000001,
      "end": 723.52,
      "text": " just because you want to update the code or configuration for a function. And there's a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 723.52,
      "end": 728.8000000000001,
      "text": " similar thing in CDK called CDK hot swap, which provides support for Lambda step functions, S3"
    },
    {
      "speakerLabel": "spk_1",
      "start": 728.8000000000001,
      "end": 734.96,
      "text": " assets, code build and app sync resolvers too. So I'd say look for optimizations wherever you can."
    },
    {
      "speakerLabel": "spk_1",
      "start": 734.96,
      "end": 739.0400000000001,
      "text": " You can spend a lot of time trying to get the right IAM policy and deploying lots and lots of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 739.0400000000001,
      "end": 743.12,
      "text": " times to get it right. I think we've all experienced that frustration that can be really slow. So one"
    },
    {
      "speakerLabel": "spk_1",
      "start": 743.12,
      "end": 749.12,
      "text": " way to optimize this is to use session policies locally or within a shell on AWS, like in cloud"
    },
    {
      "speakerLabel": "spk_1",
      "start": 749.12,
      "end": 755.2800000000001,
      "text": " shell or on an EC2 instance. So session policies are like ephemeral policies that you don't"
    },
    {
      "speakerLabel": "spk_1",
      "start": 755.2800000000001,
      "end": 760.4000000000001,
      "text": " create in AWS. You just specify them when you do an assume role and you don't need to create a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 760.4,
      "end": 765.1999999999999,
      "text": " policy every time. So if you craft your policy locally, just in a JSON file, then you can do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.1999999999999,
      "end": 769.84,
      "text": " an assume role with it, test if it works. It's much quicker to test and make changes. And then"
    },
    {
      "speakerLabel": "spk_1",
      "start": 769.84,
      "end": 775.36,
      "text": " once you have the policy right, you can codify it in your infrastructure. You can also, if you're"
    },
    {
      "speakerLabel": "spk_1",
      "start": 775.36,
      "end": 779.84,
      "text": " making lots of deployments, you can also just take the ClickOps approach and tweak the resources"
    },
    {
      "speakerLabel": "spk_1",
      "start": 779.84,
      "end": 784.56,
      "text": " manually in the AWS management console. And then once you're happy, codify those changes for proper"
    },
    {
      "speakerLabel": "spk_1",
      "start": 784.56,
      "end": 790.7199999999999,
      "text": " deployment and test that with automated integration tests. So I'd say there's a combination of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 790.7199999999999,
      "end": 796.0799999999999,
      "text": " approaches there you can take, deploy your resources by all means that you need, but then"
    },
    {
      "speakerLabel": "spk_1",
      "start": 796.0799999999999,
      "end": 801.92,
      "text": " run the code against those resources locally, just talking to the AWS services. Then test your"
    },
    {
      "speakerLabel": "spk_1",
      "start": 801.92,
      "end": 806.2399999999999,
      "text": " Lambda functions. You can put whatever tests you need in place, whether it's unit test or an ad hoc"
    },
    {
      "speakerLabel": "spk_1",
      "start": 806.2399999999999,
      "end": 810.56,
      "text": " manual test or some sort of automated integration test. Yeah."
    },
    {
      "speakerLabel": "spk_0",
      "start": 810.56,
      "end": 814.64,
      "text": " One final comment that I have is that there are some tools that we discussed before, like for instance, application composer or step"
    },
    {
      "speakerLabel": "spk_0",
      "start": 814.64,
      "end": 819.52,
      "text": " function designer, which are tools that sometimes they can help you to get unstuck. So if you are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 819.52,
      "end": 824.4799999999999,
      "text": " getting some configuration wrong and it's painful to go through this cycle of it is wrong, I'm going"
    },
    {
      "speakerLabel": "spk_0",
      "start": 824.4799999999999,
      "end": 830.16,
      "text": " to deploy again, fails again, fix something else, deploy again, fails again until you actually get"
    },
    {
      "speakerLabel": "spk_0",
      "start": 830.16,
      "end": 834.4,
      "text": " it right. I think these tools can give you kind of a shortcut into figuring out what's the right"
    },
    {
      "speakerLabel": "spk_0",
      "start": 834.4,
      "end": 839.1999999999999,
      "text": " configuration. You can easily sketch out with the visual designer something that looks like your use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 839.2,
      "end": 843.2800000000001,
      "text": " case, understand exactly what is the right configuration, then transpose that configuration"
    },
    {
      "speakerLabel": "spk_0",
      "start": 843.2800000000001,
      "end": 848,
      "text": " to your actual code. This is another, maybe it's a bit of a hack, but it's another strategy that"
    },
    {
      "speakerLabel": "spk_0",
      "start": 848,
      "end": 853.44,
      "text": " sometimes I use to kind of unblock myself when I get stuck into the cycle of failing and retrying,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 853.44,
      "end": 858.32,
      "text": " failing and retrying until you actually get what you want to do right. So that's another tip for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 858.32,
      "end": 862.88,
      "text": " you that you might want to explore. So in summary, I think for today, what we want to share with you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 862.88,
      "end": 869.36,
      "text": " is that things like local stack are really, really good projects, but they are not to be trust 100%"
    },
    {
      "speakerLabel": "spk_0",
      "start": 869.36,
      "end": 874.16,
      "text": " as a perfect copy of AWS. Of course, you need to understand that there will be approximations there,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 874.16,
      "end": 879.68,
      "text": " there will be missing features. So use them, but with the benefit of the doubt. So if they"
    },
    {
      "speakerLabel": "spk_0",
      "start": 879.68,
      "end": 884.4,
      "text": " help you to speed up your local development, take that value, but be aware there might be"
    },
    {
      "speakerLabel": "spk_0",
      "start": 885.28,
      "end": 889.52,
      "text": " instances where that local simulation is not going to be enough and you need to figure out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 889.52,
      "end": 895.92,
      "text": " another strategy. And definitely remember to structure your code in such a way that you can"
    },
    {
      "speakerLabel": "spk_0",
      "start": 895.92,
      "end": 900.4,
      "text": " test most of it without having to rely on AWS. So you're definitely going to have some business"
    },
    {
      "speakerLabel": "spk_0",
      "start": 900.4,
      "end": 905.28,
      "text": " logic, try to make sure that that business logic is as decoupled as possible from the logic"
    },
    {
      "speakerLabel": "spk_0",
      "start": 905.28,
      "end": 909.92,
      "text": " integrating with AWS services. So you can test your own business logic without having to rely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 909.92,
      "end": 917.04,
      "text": " on AWS. And for all the times where you need to rely on AWS, you can also mock parts of your unit"
    },
    {
      "speakerLabel": "spk_0",
      "start": 917.04,
      "end": 922.0799999999999,
      "text": " test. So there are libraries like Modo, if you do Python, that can help with that. If you use"
    },
    {
      "speakerLabel": "spk_0",
      "start": 922.0799999999999,
      "end": 927.92,
      "text": " JavaScript, the new SDK also comes with an additional library that helps you to do mocking."
    },
    {
      "speakerLabel": "spk_0",
      "start": 927.92,
      "end": 932.24,
      "text": " So there are lots of ways there where just by doing unit tests, you can be so much better"
    },
    {
      "speakerLabel": "spk_0",
      "start": 932.24,
      "end": 937.5999999999999,
      "text": " positioned to trust your code locally before you ship it to production. Now, we probably missed"
    },
    {
      "speakerLabel": "spk_0",
      "start": 937.5999999999999,
      "end": 942.56,
      "text": " many ideas. I'm sure that people listening have lots of other ideas. Everyone is experimenting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 942.56,
      "end": 947.04,
      "text": " all the time with this topic. So if you have something you would like to share with us, we're"
    },
    {
      "speakerLabel": "spk_0",
      "start": 947.04,
      "end": 951.5999999999999,
      "text": " definitely going to be happy to learn from you. So make sure to use the comments below or reach out"
    },
    {
      "speakerLabel": "spk_0",
      "start": 951.5999999999999,
      "end": 957.1999999999999,
      "text": " to us on Twitter to share your feelings and your ideas about this topic. And as always, if you"
    },
    {
      "speakerLabel": "spk_0",
      "start": 957.1999999999999,
      "end": 962.7199999999999,
      "text": " really enjoyed this episode, remember to thumbs up, subscribe, or if you're listening to the"
    },
    {
      "speakerLabel": "spk_0",
      "start": 962.72,
      "end": 973.6,
      "text": " podcast only version, give us a review. Thank you very much, and we'll see you in the next episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 992.72,
      "end": 993.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1022.72,
      "end": 1023.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1052.72,
      "end": 1053.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1082.72,
      "end": 1083.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1112.72,
      "end": 1113.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1142.72,
      "end": 1143.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1172.72,
      "end": 1173.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1202.72,
      "end": 1203.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1232.72,
      "end": 1233.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1262.72,
      "end": 1263.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1292.72,
      "end": 1293.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1322.72,
      "end": 1323.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1352.72,
      "end": 1353.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1382.72,
      "end": 1383.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1412.72,
      "end": 1413.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1442.72,
      "end": 1443.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1472.72,
      "end": 1473.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1502.72,
      "end": 1503.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1532.72,
      "end": 1533.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1562.72,
      "end": 1563.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1592.72,
      "end": 1593.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1622.72,
      "end": 1623.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1652.72,
      "end": 1653.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1682.72,
      "end": 1683.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1712.72,
      "end": 1713.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1742.72,
      "end": 1743.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1772.72,
      "end": 1773.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1802.72,
      "end": 1803.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1832.72,
      "end": 1833.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1862.72,
      "end": 1863.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1892.72,
      "end": 1893.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1922.72,
      "end": 1923.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1952.72,
      "end": 1953.22,
      "text": " Bye."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1982.72,
      "end": 1983.22,
      "text": " Bye."
    }
  ]
}