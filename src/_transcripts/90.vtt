WEBVTT

1
00:00:00.000 --> 00:00:02.240
AWS is the leading cloud provider today,

2
00:00:02.240 --> 00:00:05.480
but there is competition and with AWS's popularity,

3
00:00:05.480 --> 00:00:09.000
there are plenty of haters and also lots of valid criticism as well.

4
00:00:09.440 --> 00:00:12.600
There's a lot about AWS that we love, but there's always room for improvement,

5
00:00:12.600 --> 00:00:16.120
so today we are going to reveal our top nine improvements

6
00:00:16.120 --> 00:00:18.600
that can catapult AWS to the next level.

7
00:00:18.840 --> 00:00:21.960
I'm Eoin, I'm here with Luciano and this is AWS Bites.

8
00:00:21.960 --> 00:00:23.960
What is your list of improvements?

9
00:00:28.760 --> 00:00:31.120
Luciano, I'm dying to hear what your list is,

10
00:00:31.120 --> 00:00:33.240
but I want to get mine off my chest first.

11
00:00:33.720 --> 00:00:36.840
If I could sit down with Adam or Werner today and present my wishlist,

12
00:00:36.840 --> 00:00:37.840
what would I say?

13
00:00:38.440 --> 00:00:42.600
I think the number one thing is probably hard billing limits.

14
00:00:42.600 --> 00:00:46.200
And what I'm talking there about is preventing people from major bill shock

15
00:00:46.200 --> 00:00:49.520
by allowing us to limit API requests once you hit a budget.

16
00:00:49.520 --> 00:00:52.240
So let's say you set your budget,

17
00:00:52.240 --> 00:00:56.240
then every time you make an API request or have something running,

18
00:00:56.240 --> 00:00:59.560
AWS is clocking up the bill in real time.

19
00:00:59.560 --> 00:01:04.520
And then once you hit that budget, you suddenly get throttled, rate limited,

20
00:01:04.520 --> 00:01:06.520
just as if you hit a quota.

21
00:01:07.160 --> 00:01:08.840
There are other APIs that do this.

22
00:01:08.840 --> 00:01:12.480
I think a lot of people have just experimented recently with the open API,

23
00:01:12.480 --> 00:01:15.320
and you get an API key, you get a budget,

24
00:01:15.320 --> 00:01:19.680
and once you reach that budget, it's capped.

25
00:01:19.680 --> 00:01:21.680
Suddenly your API requests are denied.

26
00:01:21.680 --> 00:01:23.880
I think something like that would be nice with AWS.

27
00:01:23.880 --> 00:01:26.040
Of course, they can still allow you to play with the free tier

28
00:01:26.040 --> 00:01:27.680
until you hit those limits too.

29
00:01:27.680 --> 00:01:32.520
So that's number one, and I think that would work well for AWS in the long run.

30
00:01:32.520 --> 00:01:35.320
It's probably a lot of engineering to implement a feature like that.

31
00:01:35.320 --> 00:01:37.760
It might result in a bit of lost revenue,

32
00:01:37.760 --> 00:01:41.720
but I think ultimately it would bring more people to AWS

33
00:01:41.720 --> 00:01:44.720
and increase the trust relationship between AWS users

34
00:01:44.720 --> 00:01:46.720
and the company.

35
00:01:46.720 --> 00:01:49.880
Number two is much faster deployment times.

36
00:01:49.880 --> 00:01:53.760
And this is something that I think can really make developers' lives easier.

37
00:01:53.760 --> 00:01:57.280
And we're talking about APIs that have control plane actions,

38
00:01:57.280 --> 00:02:00.000
creating instances, creating databases.

39
00:02:00.000 --> 00:02:02.480
Every speed improvement in those things matters.

40
00:02:02.480 --> 00:02:05.880
Creating load balancers and registering targets and load balancers,

41
00:02:05.880 --> 00:02:08.240
all of that stuff takes developer time.

42
00:02:08.240 --> 00:02:10.760
Developer time is a really valuable resource.

43
00:02:10.760 --> 00:02:12.960
CloudFormation speed as well.

44
00:02:12.960 --> 00:02:14.960
I've talked about this quite a few times,

45
00:02:14.960 --> 00:02:17.200
and I'm hopeful that it will improve over time.

46
00:02:17.200 --> 00:02:20.040
But the sooner deployment time gets closer to zero,

47
00:02:20.040 --> 00:02:21.560
the better off we'll be.

48
00:02:21.560 --> 00:02:24.720
I've heard a lot of people asking for more consistent coverage

49
00:02:24.720 --> 00:02:27.200
for CloudFormation and X-ray as well.

50
00:02:27.200 --> 00:02:30.400
So I think there should be like a checkbox of things

51
00:02:30.400 --> 00:02:33.840
that teams need at AWS before they can launch a new service.

52
00:02:33.840 --> 00:02:37.160
One is complete and consistent CloudFormation support,

53
00:02:37.160 --> 00:02:39.440
and the other one is X-ray support.

54
00:02:39.440 --> 00:02:42.280
So we've seen... I think things have gotten a lot better.

55
00:02:42.280 --> 00:02:46.400
CloudFormation support used to drag a lot behind new feature releases.

56
00:02:46.400 --> 00:02:49.800
I think largely most services launch with CloudFormation support these days,

57
00:02:49.800 --> 00:02:51.600
but there are still some gaps.

58
00:02:51.600 --> 00:02:54.520
And there's some weird ones, like you haven't been able to tag

59
00:02:54.520 --> 00:02:57.160
a VPC endpoint in CloudFormation for many years,

60
00:02:57.160 --> 00:02:59.440
and it's still an open issue. I don't know why.

61
00:02:59.440 --> 00:03:02.680
The fourth one on my list, so my second last one,

62
00:03:02.680 --> 00:03:04.520
and it was hard just to limit it to five,

63
00:03:04.520 --> 00:03:07.080
is easier multi-account management.

64
00:03:07.080 --> 00:03:10.160
So we do a lot of kind of setting up AWS landing zones

65
00:03:10.160 --> 00:03:13.680
and best practices and all of the account structure,

66
00:03:13.680 --> 00:03:16.640
organizational units, service control policies,

67
00:03:16.640 --> 00:03:19.880
and then like templates for each account

68
00:03:19.880 --> 00:03:23.080
and things like governance and security.

69
00:03:23.080 --> 00:03:25.080
And then you have to manage multiple accounts,

70
00:03:25.080 --> 00:03:29.720
and you have our AWS organizations, which is an umbrella for all of that,

71
00:03:29.720 --> 00:03:33.440
but it's not really easy to see everything in one place.

72
00:03:33.440 --> 00:03:35.280
And when you need to share things between accounts,

73
00:03:35.280 --> 00:03:37.120
it has to be done very explicitly.

74
00:03:37.120 --> 00:03:39.400
On the other hand, Azure has a much different approach

75
00:03:39.400 --> 00:03:43.120
where you can structure lots of different teams and resource groups

76
00:03:43.120 --> 00:03:46.640
and everything within different subscriptions in an Azure account.

77
00:03:46.640 --> 00:03:52.320
So you don't have this kind of scatter of individual isolated accounts.

78
00:03:52.320 --> 00:03:55.200
Individual accounts are great for isolating security boundaries

79
00:03:55.200 --> 00:03:59.400
and quota boundaries, but it becomes difficult to manage them.

80
00:03:59.400 --> 00:04:01.480
My favorite tool for actually managing multiple accounts

81
00:04:01.480 --> 00:04:03.920
and deploying things to multiple accounts is OrgFormation,

82
00:04:03.920 --> 00:04:05.920
which is an open source project,

83
00:04:05.920 --> 00:04:08.320
a bit like CloudFormation and based on CloudFormation,

84
00:04:08.320 --> 00:04:10.960
but it allows you to deploy resources and deploy accounts

85
00:04:10.960 --> 00:04:12.880
and then deploy things to multiple accounts.

86
00:04:12.880 --> 00:04:15.840
It's a really nice, simple declarative language.

87
00:04:15.840 --> 00:04:18.400
AWS, on the other hand, has Control Tower,

88
00:04:18.400 --> 00:04:20.760
and Control Tower is more based through the console,

89
00:04:20.760 --> 00:04:23.200
and there's a lot of magic going on in the background.

90
00:04:23.200 --> 00:04:28.360
So Control Tower works pretty well, but there are a lot of moving pieces.

91
00:04:28.360 --> 00:04:33.000
So I'd like to see AWS simplify this whole multi-account management thing

92
00:04:33.000 --> 00:04:36.320
and maybe provide some sort of CloudFormation-based Control Tower

93
00:04:36.320 --> 00:04:40.280
so that we can manage our organization in code.

94
00:04:40.280 --> 00:04:43.120
And the last one, which kind of relates back to the first one,

95
00:04:43.120 --> 00:04:45.000
is just price optimizations.

96
00:04:45.000 --> 00:04:47.520
So I'm talking about price decreases everywhere.

97
00:04:47.520 --> 00:04:51.040
I think these days people are looking at AWS cloud cost quite a lot.

98
00:04:51.040 --> 00:04:57.040
I think the fear of pricing is slowing people down in AWS cloud migration,

99
00:04:57.040 --> 00:04:59.960
but there are some things that can just be optimized in general,

100
00:04:59.960 --> 00:05:03.760
like having a single VPC endpoint for all AWS services

101
00:05:03.760 --> 00:05:07.960
so that you don't have to create one for each service in each account.

102
00:05:07.960 --> 00:05:11.240
And then there's single NAT gateway.

103
00:05:11.240 --> 00:05:13.640
So if you have to have a NAT gateway,

104
00:05:13.640 --> 00:05:15.960
if they're not going to make it cheaper, which would be great,

105
00:05:15.960 --> 00:05:19.120
it would be nice if you could just have a single NAT gateway easily

106
00:05:19.120 --> 00:05:21.720
and share it easily with your accounts

107
00:05:21.720 --> 00:05:24.800
without having to do lots of complex IP routing.

108
00:05:24.800 --> 00:05:27.880
So I think two out of the five have been focused on cost,

109
00:05:27.880 --> 00:05:29.840
and that's an important thing.

110
00:05:29.840 --> 00:05:31.720
So I hope the lovely people at AWS

111
00:05:31.720 --> 00:05:34.800
are listening and furiously scribbling notes.

112
00:05:34.800 --> 00:05:38.680
Now, it's time for your additions, Luciano, and I'm very curious.

113
00:05:38.680 --> 00:05:41.280
Yeah, I really like your five, but I only have four,

114
00:05:41.280 --> 00:05:43.680
and I hope they will be interesting as well.

115
00:05:43.680 --> 00:05:46.160
The first one is automatic multi-region.

116
00:05:46.160 --> 00:05:50.360
So with many services today, you can just flick a switch

117
00:05:50.360 --> 00:05:53.160
and say, make this multi-AZ,

118
00:05:53.160 --> 00:05:55.240
and that will make sure, for instance, RDS,

119
00:05:55.240 --> 00:05:58.680
that you have multiple instances running on different availability zone

120
00:05:58.680 --> 00:06:02.760
and failover and everything is already nicely configured out of the box.

121
00:06:02.760 --> 00:06:06.160
I think kind of trying to transpose that idea to multi-region

122
00:06:06.160 --> 00:06:08.160
doesn't feel like too much of a stretch.

123
00:06:08.160 --> 00:06:10.280
I'm sure that there is complexity there

124
00:06:10.280 --> 00:06:12.840
because the network characteristics will be much different

125
00:06:12.840 --> 00:06:16.640
from what you have between AZs with what you have between regions.

126
00:06:16.640 --> 00:06:18.880
But it feels from a product perspective like something

127
00:06:18.880 --> 00:06:22.280
that would be really nice to have, especially when you start to think about

128
00:06:22.280 --> 00:06:25.800
DR strategies for your own deployments.

129
00:06:25.800 --> 00:06:29.160
It is always very, very difficult to configure things correctly,

130
00:06:29.160 --> 00:06:32.440
and with many services, you end up building everything yourself,

131
00:06:32.440 --> 00:06:37.760
while it could be a feature that AWS could just expose out of the box.

132
00:06:37.760 --> 00:06:41.600
The second one I have is something that annoys people a lot.

133
00:06:41.600 --> 00:06:44.240
Every time there is an announcement for a new service,

134
00:06:44.240 --> 00:06:47.800
especially when this new service is labeled as serverless

135
00:06:47.800 --> 00:06:49.760
and then it doesn't scale to zero.

136
00:06:49.760 --> 00:06:53.880
So if you're labeling something as serverless, make sure it scales to zero

137
00:06:53.880 --> 00:06:58.240
and that you are going to pay zero when you are not using that particular service

138
00:06:58.240 --> 00:07:00.880
because I think that's the expected definition,

139
00:07:00.880 --> 00:07:04.720
or at least it's part of the expected definition of serverless for most people.

140
00:07:04.720 --> 00:07:08.480
So don't just label things as servers just for marketing reason.

141
00:07:08.480 --> 00:07:12.880
Make sure that they are really truly serverless and they also scale to zero.

142
00:07:12.880 --> 00:07:16.720
So that would make every announcement,

143
00:07:16.720 --> 00:07:19.560
I don't know, better or less disappointing

144
00:07:19.560 --> 00:07:21.400
because there is always an element of,

145
00:07:21.400 --> 00:07:23.920
oh, a new serverless service is not really serverless,

146
00:07:23.920 --> 00:07:28.920
and then you forget about all the nice things about that new project or service

147
00:07:28.920 --> 00:07:33.280
just because you focus on the fact that it's not really truly serverless as it was advertised.

148
00:07:33.280 --> 00:07:36.840
So I guess that's, I don't know, more of a marketing thing than anything else,

149
00:07:36.840 --> 00:07:42.560
but it would be nice to see that because you will trust new announcement a lot more.

150
00:07:42.560 --> 00:07:44.720
Another one that I have is better UX,

151
00:07:44.720 --> 00:07:50.280
especially when interacting with service like ElastiCache or RDS,

152
00:07:50.280 --> 00:07:53.240
which are a little bit more traditional services,

153
00:07:53.240 --> 00:07:57.880
so they still run behind the scenes in virtual machines that AWS is managing for you.

154
00:07:57.880 --> 00:08:04.600
And of course, these virtual machines are running in their own secure network environment.

155
00:08:04.600 --> 00:08:08.080
They, of course, they're not going to be easily accessible from the outside,

156
00:08:08.080 --> 00:08:12.280
except that you will need sometimes to interact with those databases from the outside,

157
00:08:12.280 --> 00:08:16.000
maybe because you want to query the data, maybe because you want to troubleshoot something.

158
00:08:16.000 --> 00:08:18.440
And this is something we've been talking about quite a few times.

159
00:08:18.440 --> 00:08:22.680
There are several episodes that you can check, for instance, when we talk about Bastion hosts.

160
00:08:22.680 --> 00:08:28.400
And those are all escape patches that you need to put in place just to be able to access those databases.

161
00:08:28.400 --> 00:08:33.440
It would be really, really nice if AWS will give you even just a web UI in the console

162
00:08:33.440 --> 00:08:38.560
that would allow you to easily query your data in ElastiCache or RDS,

163
00:08:38.560 --> 00:08:44.120
or even if that's not easily possible because, of course, building a UI is not an easy feat.

164
00:08:44.120 --> 00:08:47.400
It takes development time. It can be expensive for AWS.

165
00:08:47.400 --> 00:08:50.920
But even just giving VPC support to CloudShell, I think, would help a lot

166
00:08:50.920 --> 00:08:54.360
because at that point you can just run a shell in that VPC

167
00:08:54.360 --> 00:08:58.320
and then use any CLI client to interact with your databases.

168
00:08:58.320 --> 00:09:04.400
I think maybe not ideal because it's still a good amount of complexity for a developer to take in,

169
00:09:04.400 --> 00:09:07.720
but it would make things significantly simpler.

170
00:09:07.720 --> 00:09:12.600
And the last point I have is better DX and documentation in general.

171
00:09:12.600 --> 00:09:14.440
Probably similar to my previous point,

172
00:09:14.440 --> 00:09:20.080
but it's more about the fact that every time I need to explore something new in AWS,

173
00:09:20.080 --> 00:09:23.360
and there is always something new because AWS is so broad,

174
00:09:23.360 --> 00:09:28.680
for me, even though I have some experience with AWS, I've been using it for several years,

175
00:09:28.680 --> 00:09:29.920
I easily get lost.

176
00:09:29.920 --> 00:09:33.480
Like, I try to figure out, can I use this particular service?

177
00:09:33.480 --> 00:09:36.080
Maybe let's make an example in the IoT space.

178
00:09:36.080 --> 00:09:39.320
I'm trying to investigate a potential architecture.

179
00:09:39.320 --> 00:09:43.200
Okay, there are many, many services that AWS is giving us in the IoT space.

180
00:09:43.200 --> 00:09:47.440
So let's try to figure out which one can be more useful to my particular problem.

181
00:09:47.440 --> 00:09:50.120
And you end up reading all the marketing pages first,

182
00:09:50.120 --> 00:09:53.000
and they're very high level and they promise you lots of features,

183
00:09:53.000 --> 00:09:56.960
but without really giving you insights on the details.

184
00:09:56.960 --> 00:09:58.520
Then what do you do next?

185
00:09:58.520 --> 00:10:03.800
It's like, okay, I can just check a workshop and that there are tons of workshops, which is great,

186
00:10:03.800 --> 00:10:06.000
but then doing all the workshops takes a lot of time

187
00:10:06.000 --> 00:10:10.600
and you need to make sure it's worth your time to invest in doing the workshops.

188
00:10:10.600 --> 00:10:12.560
So is that really the real service?

189
00:10:12.560 --> 00:10:16.360
So you end up looking at blog posts, or you end up looking at the official docs

190
00:10:16.360 --> 00:10:19.760
and very easily you end up spending days just trying to make sense

191
00:10:19.760 --> 00:10:22.760
of what are the capabilities of that particular service.

192
00:10:22.760 --> 00:10:25.760
So I don't know really if there is a solution to this,

193
00:10:25.760 --> 00:10:30.000
but I think having a more cohesive way to find information about services

194
00:10:30.000 --> 00:10:35.080
and drill down at the right level would be something very welcome.

195
00:10:35.080 --> 00:10:37.480
I think as much as to people that are new to AWS,

196
00:10:37.480 --> 00:10:40.120
but also to people that have a lot of experience with AWS

197
00:10:40.120 --> 00:10:42.880
and they are just trying to expand their knowledge into a new service

198
00:10:42.880 --> 00:10:46.760
or a new set of features that they haven't used yet.

199
00:10:46.760 --> 00:10:49.240
So this is my top four.

200
00:10:49.240 --> 00:10:51.640
What do you think? You have anything else you want to add?

201
00:10:51.640 --> 00:10:53.880
No, I completely agree with those additions.

202
00:10:53.880 --> 00:10:56.760
I think we've got nine there, which is probably a lot to ask.

203
00:10:56.760 --> 00:10:59.280
Maybe it's a good time to thank all the great people at AWS

204
00:10:59.280 --> 00:11:01.040
who are working hard to make it as good as it is.

205
00:11:01.040 --> 00:11:06.400
I hope that all of these suggestions are taken in the spirit of continuous improvement.

206
00:11:06.400 --> 00:11:08.320
I think if we even got one third of this list,

207
00:11:08.320 --> 00:11:11.680
AWS would really start to become next level for everybody listening and watching.

208
00:11:11.680 --> 00:11:12.720
What did we miss?

209
00:11:12.720 --> 00:11:16.200
Let us know your big ideas for making AWS better for all of us.

210
00:11:16.200 --> 00:11:18.800
And if you want to hear more from us about AWS,

211
00:11:18.800 --> 00:11:21.680
subscribe to our YouTube channel or add the podcast to your player

212
00:11:21.680 --> 00:11:24.680
so you get notified whenever we release new episodes.

213
00:11:24.680 --> 00:11:42.320
Thanks for listening and we'll see you next time.
