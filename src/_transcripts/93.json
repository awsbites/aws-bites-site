{
  "speakers": {
    "spk_0": "spk_0",
    "spk_1": "spk_1"
  },
  "segments": [
    {
      "speakerLabel": "spk_0",
      "start": 0,
      "end": 3,
      "text": " Today, we are going to be diving into the world of CDK patterns,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 3.2,
      "end": 6.16,
      "text": " what they are, where to find them and why you might want to use them."
    },
    {
      "speakerLabel": "spk_0",
      "start": 6.36,
      "end": 9.200000000000001,
      "text": " Join us as we discuss the benefits and challenges of using these powerful,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 9.4,
      "end": 12.8,
      "text": " reusable modules and explore some alternatives available"
    },
    {
      "speakerLabel": "spk_0",
      "start": 13,
      "end": 15.24,
      "text": " if the thought of generating infrastructure with dynamic,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 15.44,
      "end": 17.52,
      "text": " reusable code gives you nightmares."
    },
    {
      "speakerLabel": "spk_0",
      "start": 17.52,
      "end": 30.439999999999998,
      "text": " I am Eoin, here again with Luciano for another episode of the AWS Bites podcast."
    },
    {
      "speakerLabel": "spk_0",
      "start": 30.64,
      "end": 33.32,
      "text": " 4th Theorem is the company that makes AWS Bites possible."
    },
    {
      "speakerLabel": "spk_0",
      "start": 33.519999999999996,
      "end": 36.44,
      "text": " If you're looking for a partner to accompany you on your cloud journey,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 36.64,
      "end": 39.84,
      "text": " check them out at 4thTheorem.com."
    },
    {
      "speakerLabel": "spk_0",
      "start": 40.04,
      "end": 44.480000000000004,
      "text": " Luciano, can you give me a quick recap on CDK, just for people who don't remember"
    },
    {
      "speakerLabel": "spk_0",
      "start": 44.68,
      "end": 46.239999999999995,
      "text": " or don't know what it's all about?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 49.400000000000006,
      "end": 53.56,
      "text": " Yes, so CDK stands for Cloud Development Kit, and it's basically an object-oriented abstraction for CloudFormation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 53.760000000000005,
      "end": 57.800000000000004,
      "text": " So the idea is that rather than using YAML or JSON to write your infrastructure"
    },
    {
      "speakerLabel": "spk_1",
      "start": 58,
      "end": 62.120000000000005,
      "text": " as code, you can actually use real code like JavaScript, TypeScript, Python,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 62.32000000000001,
      "end": 65.92,
      "text": " C-sharp, Java or Go, I believe are the ones supported,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 66.12,
      "end": 68.96000000000001,
      "text": " to actually define the infrastructure that you want to be provisioned"
    },
    {
      "speakerLabel": "spk_1",
      "start": 69.16,
      "end": 70.36,
      "text": " in your AWS environment."
    },
    {
      "speakerLabel": "spk_1",
      "start": 70.56,
      "end": 72.96000000000001,
      "text": " It's actually not really limited to CloudFormation,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 72.96,
      "end": 76.32,
      "text": " because if you look at the bigger picture in the realm of CDK,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 76.52,
      "end": 78.6,
      "text": " you also have this project called CDK Terraform."
    },
    {
      "speakerLabel": "spk_1",
      "start": 78.8,
      "end": 82.32,
      "text": " So you can also generate infrastructure that then is deployed with Terraform."
    },
    {
      "speakerLabel": "spk_1",
      "start": 82.52,
      "end": 86.28,
      "text": " And I think there is also a project that allows you to provision"
    },
    {
      "speakerLabel": "spk_1",
      "start": 86.47999999999999,
      "end": 89.63999999999999,
      "text": " Kubernetes configuration using CDK as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 89.83999999999999,
      "end": 92.03999999999999,
      "text": " Today, we only want to focus on the CloudFormation one,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 92.03999999999999,
      "end": 94.24,
      "text": " because this is the one that we have been using the most"
    },
    {
      "speakerLabel": "spk_1",
      "start": 94.44,
      "end": 96.24,
      "text": " and the one we know the best."
    },
    {
      "speakerLabel": "spk_1",
      "start": 96.44,
      "end": 101.39999999999999,
      "text": " So, yeah, infrastructure as code, as we said, is generally declarative."
    },
    {
      "speakerLabel": "spk_1",
      "start": 101.4,
      "end": 106.32000000000001,
      "text": " And that brings certain challenges, because it's always very tricky to do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 106.52000000000001,
      "end": 111.28,
      "text": " things like loops or condition logics, or if you want to add extra code,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 111.48,
      "end": 113.52000000000001,
      "text": " hooks, maybe do something before or after."
    },
    {
      "speakerLabel": "spk_1",
      "start": 113.72,
      "end": 115.44000000000001,
      "text": " You always need to figure out your own"
    },
    {
      "speakerLabel": "spk_1",
      "start": 115.64,
      "end": 121.04,
      "text": " orchestration, your own bash scripts to wrap around things or generate code"
    },
    {
      "speakerLabel": "spk_1",
      "start": 121.24000000000001,
      "end": 123.16000000000001,
      "text": " dynamically using Jinja templates."
    },
    {
      "speakerLabel": "spk_1",
      "start": 123.16000000000001,
      "end": 124.84,
      "text": " I've seen all sorts of variations of that,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 124.84,
      "end": 128,
      "text": " just because there are limitations into the way you typically write"
    },
    {
      "speakerLabel": "spk_1",
      "start": 128,
      "end": 131.92,
      "text": " infrastructure as code in a declarative way with languages like YAML or JSON."
    },
    {
      "speakerLabel": "spk_1",
      "start": 132.12,
      "end": 136.32,
      "text": " So, CDK tries to fill that gap and try to give you a nicer experience."
    },
    {
      "speakerLabel": "spk_1",
      "start": 136.52,
      "end": 138.92,
      "text": " And the idea is that you write code"
    },
    {
      "speakerLabel": "spk_1",
      "start": 139.12,
      "end": 143.44,
      "text": " that effectively, by instantiating a bunch of classes, you are defining the things"
    },
    {
      "speakerLabel": "spk_1",
      "start": 143.44,
      "end": 146.56,
      "text": " that you want to appear in your infrastructure and how they are configured"
    },
    {
      "speakerLabel": "spk_1",
      "start": 146.68,
      "end": 148.12,
      "text": " and how they are integrated together,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 148.12,
      "end": 150.88,
      "text": " because you can easily reference properties from one another."
    },
    {
      "speakerLabel": "spk_1",
      "start": 151.08,
      "end": 153.4,
      "text": " And then at some point, when you're happy with it,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 153.6,
      "end": 155.8,
      "text": " you can run a step that is called synthesize."
    },
    {
      "speakerLabel": "spk_1",
      "start": 155.8,
      "end": 159.56,
      "text": " And what synthesize does is basically taking all of that code definition,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 159.56,
      "end": 161.08,
      "text": " whatever is your language of choice,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 161.28,
      "end": 166.12,
      "text": " somehow evaluating it and converting it into a proper cloud formation stack"
    },
    {
      "speakerLabel": "spk_1",
      "start": 166.32000000000002,
      "end": 170.92000000000002,
      "text": " that can be used to be deployed, still using cloud formation behind the scenes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 171.12,
      "end": 175.08,
      "text": " So CDK gives you all the fundamental building blocks"
    },
    {
      "speakerLabel": "spk_1",
      "start": 175.28,
      "end": 180.52,
      "text": " and it generally maps one to one to what you get with cloud formation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 180.72000000000003,
      "end": 184.72000000000003,
      "text": " But then you also have other things that are like other abstractions on top of it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 184.72,
      "end": 187.68,
      "text": " And the basic abstraction is constructs,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 187.88,
      "end": 192.84,
      "text": " which is like representing all the entities that you can define in cloud formation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 193.04,
      "end": 196.96,
      "text": " But also you can start to use constructs to define your own custom things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 197.16,
      "end": 200.36,
      "text": " And then you also have assets, which are not really a cloud formation thing,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 200.56,
      "end": 205.6,
      "text": " but a nice extension that CDK gives you to be able to deploy code,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 205.6,
      "end": 208.64,
      "text": " for instance, in Lambda functions or container images as part"
    },
    {
      "speakerLabel": "spk_1",
      "start": 208.64,
      "end": 210.92,
      "text": " of your own infrastructure definition."
    },
    {
      "speakerLabel": "spk_1",
      "start": 210.92,
      "end": 214.55999999999997,
      "text": " So how do we start to make sense of all these different concepts?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 214.55999999999997,
      "end": 219.04,
      "text": " For instance, can we start by describing better what constructs are and how they are organized?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 219.23999999999998,
      "end": 223.83999999999997,
      "text": " Yeah, the construct is the main thing you need to be concerned with with CDK."
    },
    {
      "speakerLabel": "spk_0",
      "start": 223.83999999999997,
      "end": 225.79999999999998,
      "text": " And they're essentially classes that are"
    },
    {
      "speakerLabel": "spk_0",
      "start": 226,
      "end": 229,
      "text": " going to generate one or more cloud formation resources."
    },
    {
      "speakerLabel": "spk_0",
      "start": 229.2,
      "end": 230.72,
      "text": " And you have three different levels."
    },
    {
      "speakerLabel": "spk_0",
      "start": 230.92,
      "end": 232.56,
      "text": " There's actually a fourth level,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 232.76,
      "end": 237.48,
      "text": " but the level one, two, three are the main ones you would encounter in the wild."
    },
    {
      "speakerLabel": "spk_0",
      "start": 237.67999999999998,
      "end": 239.72,
      "text": " And level one constructs are just simple"
    },
    {
      "speakerLabel": "spk_0",
      "start": 239.72,
      "end": 243.08,
      "text": " representations of the cloud formation resource exactly as it's defined"
    },
    {
      "speakerLabel": "spk_0",
      "start": 243.08,
      "end": 245.96,
      "text": " in the cloud formation doc that just generated."
    },
    {
      "speakerLabel": "spk_0",
      "start": 246.16,
      "end": 249.48,
      "text": " It's just the same as writing cloud formation, except it's represented by a class."
    },
    {
      "speakerLabel": "spk_0",
      "start": 249.68,
      "end": 251.68,
      "text": " So you get type safety and code completion."
    },
    {
      "speakerLabel": "spk_0",
      "start": 251.88,
      "end": 254.24,
      "text": " And often for new services, this is all you get."
    },
    {
      "speakerLabel": "spk_0",
      "start": 254.44,
      "end": 261.48,
      "text": " You just get the CFN resources because all L1 constructs or level one constructs always begin with CFN."
    },
    {
      "speakerLabel": "spk_0",
      "start": 261.68,
      "end": 266.44,
      "text": " Then you have where it really starts to add value is with the level two or L2 constructs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 266.44,
      "end": 270.68,
      "text": " And they provide more convenient helper functions and types to reduce the amount"
    },
    {
      "speakerLabel": "spk_0",
      "start": 270.68,
      "end": 274.64,
      "text": " of code that you have to write and allow you to connect resources together more easily."
    },
    {
      "speakerLabel": "spk_0",
      "start": 274.84,
      "end": 280.08,
      "text": " So if we take an example, an L1 construct for an S3 bucket would be the CFN bucket"
    },
    {
      "speakerLabel": "spk_0",
      "start": 280.08,
      "end": 283.36,
      "text": " class, and it would require you to pass a string for the encryption method."
    },
    {
      "speakerLabel": "spk_0",
      "start": 283.56,
      "end": 286.32,
      "text": " But the L2 construct for bucket has typed"
    },
    {
      "speakerLabel": "spk_0",
      "start": 286.52,
      "end": 289.8,
      "text": " values for unencrypted KMS, S3 managed, etc."
    },
    {
      "speakerLabel": "spk_0",
      "start": 290,
      "end": 294.4,
      "text": " So the L2 construct then also has helper functions like grant put that will"
    },
    {
      "speakerLabel": "spk_0",
      "start": 294.4,
      "end": 299.47999999999996,
      "text": " generate the right resource policy statement to allow principal to put an object on that bucket."
    },
    {
      "speakerLabel": "spk_0",
      "start": 299.67999999999995,
      "end": 303.76,
      "text": " And this is one of the big benefits of level two constructs for many,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 303.96,
      "end": 307.84,
      "text": " since it can reduce the human error encountered in creating IAM policies."
    },
    {
      "speakerLabel": "spk_0",
      "start": 308.03999999999996,
      "end": 309.71999999999997,
      "text": " And we know all about that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 309.91999999999996,
      "end": 312.28,
      "text": " Then if we're moving into the realm of CDK patterns,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 312.47999999999996,
      "end": 315.76,
      "text": " then we're looking at generally level three or L3 constructs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 315.96,
      "end": 320.56,
      "text": " And these are really higher order constructs that combine multiple level one"
    },
    {
      "speakerLabel": "spk_0",
      "start": 320.56,
      "end": 323.67999999999995,
      "text": " and level two constructs together to achieve a specific use case."
    },
    {
      "speakerLabel": "spk_0",
      "start": 323.68,
      "end": 328.48,
      "text": " For example, you could create a construct to create a cluster of EC2 instances,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 328.68,
      "end": 333,
      "text": " security groups, VPC, network routing, logging backups all in one class."
    },
    {
      "speakerLabel": "spk_0",
      "start": 333.2,
      "end": 338.68,
      "text": " You can kind of compare it to React components or you have simple"
    },
    {
      "speakerLabel": "spk_0",
      "start": 338.68,
      "end": 340.68,
      "text": " components and then you have higher order components."
    },
    {
      "speakerLabel": "spk_0",
      "start": 340.88,
      "end": 344.28000000000003,
      "text": " And that's exactly what L3 constructs are trying to do."
    },
    {
      "speakerLabel": "spk_0",
      "start": 344.48,
      "end": 346.96000000000004,
      "text": " So today we're talking about CDK patterns,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 346.96000000000004,
      "end": 349.76,
      "text": " and these are often created by providing L3 constructs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 349.96000000000004,
      "end": 352.4,
      "text": " And there are tons of CDK patterns out there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 352.4,
      "end": 354.59999999999997,
      "text": " And you can also create your own quite easily."
    },
    {
      "speakerLabel": "spk_0",
      "start": 354.79999999999995,
      "end": 357.2,
      "text": " So Luciano, where can people start to find"
    },
    {
      "speakerLabel": "spk_0",
      "start": 357.4,
      "end": 359.96,
      "text": " the CDK patterns and level three constructs?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 360.15999999999997,
      "end": 364.56,
      "text": " The first thing that comes to mind is that CDK itself has a concept of patterns built in."
    },
    {
      "speakerLabel": "spk_1",
      "start": 364.76,
      "end": 369.12,
      "text": " And there are a couple of interesting sub libraries that are already available"
    },
    {
      "speakerLabel": "spk_1",
      "start": 369.32,
      "end": 373.59999999999997,
      "text": " once you install CDK. And one is called AWS ECS patterns and another one is called"
    },
    {
      "speakerLabel": "spk_1",
      "start": 373.79999999999995,
      "end": 378.67999999999995,
      "text": " AWS Route 53 patterns. The ECS one, I think, is fairly powerful"
    },
    {
      "speakerLabel": "spk_1",
      "start": 378.68,
      "end": 382.56,
      "text": " because also ECS is notoriously complex to configure yourself."
    },
    {
      "speakerLabel": "spk_1",
      "start": 382.56,
      "end": 386.76,
      "text": " There are so many resources, so many configuration options that having patterns"
    },
    {
      "speakerLabel": "spk_1",
      "start": 386.76,
      "end": 390.2,
      "text": " is really needed there because otherwise you might be always reinventing the wheel"
    },
    {
      "speakerLabel": "spk_1",
      "start": 390.40000000000003,
      "end": 392.68,
      "text": " and always bumping into the same old mistakes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 392.88,
      "end": 398.68,
      "text": " So what you get out of the box with AWS ECS patterns is if you want to do"
    },
    {
      "speakerLabel": "spk_1",
      "start": 398.88,
      "end": 403.32,
      "text": " a web application running on Fargate, backed by a load balancer,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 403.52,
      "end": 407.36,
      "text": " all of that stuff is made very easy if you use this specific pattern."
    },
    {
      "speakerLabel": "spk_1",
      "start": 407.36,
      "end": 411.56,
      "text": " Similarly, you can switch the application load balancer for a network load balancer as well."
    },
    {
      "speakerLabel": "spk_1",
      "start": 411.76,
      "end": 415.48,
      "text": " Or another use case that is covered very nicely is when you want to use Fargate,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 415.68,
      "end": 419.52000000000004,
      "text": " for instance, to process jobs coming from an SQS queue."
    },
    {
      "speakerLabel": "spk_1",
      "start": 419.72,
      "end": 424.64,
      "text": " And you can do all of that with a container running on Fargate that scales."
    },
    {
      "speakerLabel": "spk_1",
      "start": 424.64,
      "end": 427.8,
      "text": " And it's very easy to configure all the different resources this way"
    },
    {
      "speakerLabel": "spk_1",
      "start": 428,
      "end": 429.88,
      "text": " when you use this particular pattern."
    },
    {
      "speakerLabel": "spk_1",
      "start": 430.08000000000004,
      "end": 434.56,
      "text": " And the interesting thing, again, is because it's a pattern,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 434.76,
      "end": 436.88,
      "text": " they will give you a higher level abstraction."
    },
    {
      "speakerLabel": "spk_1",
      "start": 436.88,
      "end": 442.04,
      "text": " So you just in your code, you just instantiate one class or very few classes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 442.24,
      "end": 444.96,
      "text": " And then behind the scenes, it doesn't really map one to one,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 444.96,
      "end": 446.28,
      "text": " like one class with one resource,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 446.28,
      "end": 449.24,
      "text": " but actually ends up creating all the necessary resources for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 449.44,
      "end": 452.12,
      "text": " So you get load balancer, you also get ELK checks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 452.12,
      "end": 454.24,
      "text": " If it needs to create queues, it's going to create the queue,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 454.24,
      "end": 456.08,
      "text": " it's going to create auto scaling rules for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 456.28,
      "end": 459.12,
      "text": " And of course, everything that is customizable,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 459.12,
      "end": 464.15999999999997,
      "text": " you just will have a higher level interface to specify how to customize the different things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 464.16,
      "end": 468.56,
      "text": " And another interesting detail is that you can even let it create VPCs"
    },
    {
      "speakerLabel": "spk_1",
      "start": 468.76000000000005,
      "end": 472.28000000000003,
      "text": " or you can use a VPC that you already have in your account, for instance."
    },
    {
      "speakerLabel": "spk_1",
      "start": 472.28000000000003,
      "end": 476.32000000000005,
      "text": " So you can also reference other existing resources in some cases."
    },
    {
      "speakerLabel": "spk_1",
      "start": 476.52000000000004,
      "end": 479.28000000000003,
      "text": " So the cool thing is that it's something that is going to save you a lot of time,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 479.28000000000003,
      "end": 482.56,
      "text": " it's going to save you a lot of headache because it's easier to end up"
    },
    {
      "speakerLabel": "spk_1",
      "start": 482.76000000000005,
      "end": 486.04,
      "text": " with the result you want without doing mistakes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 486.24,
      "end": 489.52000000000004,
      "text": " But at the same time, it's hiding a little bit what's being generated."
    },
    {
      "speakerLabel": "spk_1",
      "start": 489.72,
      "end": 493.56,
      "text": " You need to be really diligent into looking into the generated resources."
    },
    {
      "speakerLabel": "spk_1",
      "start": 493.56,
      "end": 496.52,
      "text": " They are not so transparent anymore from the code that you are writing."
    },
    {
      "speakerLabel": "spk_1",
      "start": 496.72,
      "end": 499.68,
      "text": " So sometimes there might be things that you didn't account for."
    },
    {
      "speakerLabel": "spk_1",
      "start": 499.68,
      "end": 501.92,
      "text": " Maybe it's creating an app gateway that you didn't need,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 501.92,
      "end": 503.52,
      "text": " but now you're suddenly paying for it."
    },
    {
      "speakerLabel": "spk_1",
      "start": 503.72,
      "end": 508.4,
      "text": " So the general advice is there is to don't trust CDK blindly."
    },
    {
      "speakerLabel": "spk_1",
      "start": 508.4,
      "end": 512,
      "text": " Always spend time looking at what's being generated, review the stacks,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 512,
      "end": 514.96,
      "text": " review all the resources in the stack and make sure you understand"
    },
    {
      "speakerLabel": "spk_1",
      "start": 514.96,
      "end": 518.36,
      "text": " why all the resources are there and if you really need them."
    },
    {
      "speakerLabel": "spk_0",
      "start": 518.56,
      "end": 522.8,
      "text": " AWS also have this open source extensions set for CDK"
    },
    {
      "speakerLabel": "spk_0",
      "start": 522.8,
      "end": 524.7199999999999,
      "text": " called solution constructs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 524.92,
      "end": 529.1999999999999,
      "text": " So this is a different type of CDK pattern really, because rather than"
    },
    {
      "speakerLabel": "spk_0",
      "start": 529.1999999999999,
      "end": 534.68,
      "text": " providing these kind of reusable higher order constructs for complex"
    },
    {
      "speakerLabel": "spk_0",
      "start": 534.88,
      "end": 537.92,
      "text": " configurations like Fargate with load balancers and all the other"
    },
    {
      "speakerLabel": "spk_0",
      "start": 537.92,
      "end": 541.52,
      "text": " integrations, this is essentially around 50 different simple patterns for"
    },
    {
      "speakerLabel": "spk_0",
      "start": 541.5999999999999,
      "end": 545.64,
      "text": " connecting commonly used resources together and normally like two resources."
    },
    {
      "speakerLabel": "spk_0",
      "start": 545.8399999999999,
      "end": 549.7199999999999,
      "text": " So an example would be connecting a CloudFront distribution to an API gateway."
    },
    {
      "speakerLabel": "spk_0",
      "start": 549.72,
      "end": 553.4,
      "text": " So they're not as rich as ECS patterns, but more just examples of connecting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 553.4,
      "end": 555.84,
      "text": " two services together with the right permissions."
    },
    {
      "speakerLabel": "spk_1",
      "start": 560.4,
      "end": 563.0400000000001,
      "text": " Yeah, actually that reminds me of another similar project, which is more open source and community driven called cdkpatterns.com."
    },
    {
      "speakerLabel": "spk_1",
      "start": 563.24,
      "end": 566,
      "text": " And you might have heard of this one because it was also mentioned by"
    },
    {
      "speakerLabel": "spk_1",
      "start": 566,
      "end": 568.64,
      "text": " Vernon Vogels at one of the recent Dreambands."
    },
    {
      "speakerLabel": "spk_1",
      "start": 568.84,
      "end": 570.6800000000001,
      "text": " So that it's kind of a similar idea."
    },
    {
      "speakerLabel": "spk_1",
      "start": 570.6800000000001,
      "end": 576.44,
      "text": " It's still giving you examples of solutions that you might want to deploy using CDK."
    },
    {
      "speakerLabel": "spk_1",
      "start": 576.44,
      "end": 579.2,
      "text": " So it's code that you can easily take and bring into your own CDK"
    },
    {
      "speakerLabel": "spk_1",
      "start": 579.2,
      "end": 580.8000000000001,
      "text": " and do all the necessary changes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 581,
      "end": 586.0400000000001,
      "text": " And just to give you some examples, there might be things like you can do an API"
    },
    {
      "speakerLabel": "spk_1",
      "start": 586.0400000000001,
      "end": 589.88,
      "text": " where the backend is Lambda and that backend is using Polly and Translate,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 589.88,
      "end": 593.12,
      "text": " maybe to do interesting things with audio and text."
    },
    {
      "speakerLabel": "spk_1",
      "start": 593.32,
      "end": 599.1600000000001,
      "text": " Or you have other examples where you take a CSV and import it into DynamoDB"
    },
    {
      "speakerLabel": "spk_1",
      "start": 599.1600000000001,
      "end": 603.08,
      "text": " and from there you create a processing pipeline that does other interesting things."
    },
    {
      "speakerLabel": "spk_1",
      "start": 603.2800000000001,
      "end": 606.84,
      "text": " And these are typically not L3 constructs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 606.84,
      "end": 611.64,
      "text": " Again, more of examples that you can take and change as needed."
    },
    {
      "speakerLabel": "spk_1",
      "start": 611.64,
      "end": 615.96,
      "text": " So not meant to be highly reusable, highly configurable, but more"
    },
    {
      "speakerLabel": "spk_1",
      "start": 615.96,
      "end": 618.36,
      "text": " these are use cases that we commonly see."
    },
    {
      "speakerLabel": "spk_1",
      "start": 618.36,
      "end": 622.24,
      "text": " Just take them and adapt them to your actual needs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 622.44,
      "end": 627.48,
      "text": " But I think the main question that we still have is what is really the value there?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 627.48,
      "end": 632,
      "text": " Why we would want to use L3 constructs or higher level constructs in general?"
    },
    {
      "speakerLabel": "spk_0",
      "start": 634.92,
      "end": 638.52,
      "text": " But the reason for using CDK patterns and level three constructs particularly are they're like reusable modules that can be shared"
    },
    {
      "speakerLabel": "spk_0",
      "start": 638.52,
      "end": 643.1999999999999,
      "text": " within a community or an organization, especially if you're all in on CDK."
    },
    {
      "speakerLabel": "spk_0",
      "start": 643.1999999999999,
      "end": 648.1999999999999,
      "text": " We've seen companies do this where they go all in on CDK, use it for everything"
    },
    {
      "speakerLabel": "spk_0",
      "start": 648.4,
      "end": 651.56,
      "text": " and then do lots of sharing and collaboration and have central teams"
    },
    {
      "speakerLabel": "spk_0",
      "start": 651.56,
      "end": 653.5999999999999,
      "text": " managing these reusable components."
    },
    {
      "speakerLabel": "spk_0",
      "start": 653.88,
      "end": 655.7199999999999,
      "text": " And there's lots of good reasons for doing that."
    },
    {
      "speakerLabel": "spk_0",
      "start": 656.4399999999999,
      "end": 659.56,
      "text": " Firstly, it allows you to encapsulate proven best practices."
    },
    {
      "speakerLabel": "spk_0",
      "start": 660.0799999999999,
      "end": 662.9599999999999,
      "text": " It also allows you to build in well-architected framework principles."
    },
    {
      "speakerLabel": "spk_0",
      "start": 662.96,
      "end": 666.0400000000001,
      "text": " And you mentioned duplication and reusability."
    },
    {
      "speakerLabel": "spk_0",
      "start": 666.0400000000001,
      "end": 669.76,
      "text": " It helps you to be dry by avoiding duplicating the same configuration"
    },
    {
      "speakerLabel": "spk_0",
      "start": 669.76,
      "end": 671.6,
      "text": " for groups of resources everywhere you go."
    },
    {
      "speakerLabel": "spk_0",
      "start": 672.12,
      "end": 675.5600000000001,
      "text": " And then you can get just consistency and usage of services across the organization."
    },
    {
      "speakerLabel": "spk_0",
      "start": 675.84,
      "end": 678.76,
      "text": " So when people go from one team to another and one project to another,"
    },
    {
      "speakerLabel": "spk_0",
      "start": 678.96,
      "end": 681.6,
      "text": " they've got consistency and they can understand how things work."
    },
    {
      "speakerLabel": "spk_0",
      "start": 681.9200000000001,
      "end": 686.2,
      "text": " So it just stops you from reinventing the wheel and provides you with hopefully"
    },
    {
      "speakerLabel": "spk_0",
      "start": 686.2,
      "end": 689.1600000000001,
      "text": " something that allows your teams to go faster because they're getting"
    },
    {
      "speakerLabel": "spk_0",
      "start": 689.16,
      "end": 692.9599999999999,
      "text": " the encapsulated best practices for your organization out of the box."
    },
    {
      "speakerLabel": "spk_0",
      "start": 693.48,
      "end": 696.6,
      "text": " So that's the positive, but it's not without its trade-offs."
    },
    {
      "speakerLabel": "spk_0",
      "start": 696.6,
      "end": 697.88,
      "text": " So what are some of the challenges?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 703.7199999999999,
      "end": 707.12,
      "text": " Indeed, there are challenges as with every technology is always a trade-off between some nice things, some less nicer things, and you need to find the balance"
    },
    {
      "speakerLabel": "spk_1",
      "start": 707.12,
      "end": 708.8399999999999,
      "text": " and figure out when it's worth it or not."
    },
    {
      "speakerLabel": "spk_1",
      "start": 709.48,
      "end": 712.76,
      "text": " So one of the challenges is versioning and keeping teams up to date"
    },
    {
      "speakerLabel": "spk_1",
      "start": 712.76,
      "end": 714.48,
      "text": " when improvements are made."
    },
    {
      "speakerLabel": "spk_1",
      "start": 714.48,
      "end": 716.8,
      "text": " And this is both changes in CDK itself."
    },
    {
      "speakerLabel": "spk_1",
      "start": 716.8,
      "end": 720.4,
      "text": " We have seen, for instance, a fairly big change between version one and version two."
    },
    {
      "speakerLabel": "spk_1",
      "start": 720.9599999999999,
      "end": 724,
      "text": " So there might have been some disruptions for people having to upgrade"
    },
    {
      "speakerLabel": "spk_1",
      "start": 724,
      "end": 725.8399999999999,
      "text": " from one version to the next one."
    },
    {
      "speakerLabel": "spk_1",
      "start": 725.8399999999999,
      "end": 729.3199999999999,
      "text": " But also changes that you do in your own CDK code, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 729.3199999999999,
      "end": 731.56,
      "text": " How do you keep that in sync with other teams?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 731.8399999999999,
      "end": 735.4399999999999,
      "text": " If you change some of the best practices, how can you track down the places where"
    },
    {
      "speakerLabel": "spk_1",
      "start": 735.4399999999999,
      "end": 737.0799999999999,
      "text": " you are not using that best practice yet?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 737.4399999999999,
      "end": 741.16,
      "text": " And all this kind of concern wouldn't exist even if you use other tools."
    },
    {
      "speakerLabel": "spk_1",
      "start": 741.3599999999999,
      "end": 744.64,
      "text": " So it's not necessarily a problem with CDK itself, but it's still something"
    },
    {
      "speakerLabel": "spk_1",
      "start": 744.64,
      "end": 748.36,
      "text": " that you need to think about CDK is not magically solving that problem for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 749.28,
      "end": 754.68,
      "text": " And in general, I would say that if everyone is using patterns, again,"
    },
    {
      "speakerLabel": "spk_1",
      "start": 754.68,
      "end": 759.6,
      "text": " there is a risk that you don't think anymore in terms of AWS resources being"
    },
    {
      "speakerLabel": "spk_1",
      "start": 759.6,
      "end": 763.8,
      "text": " created, you just think about use cases and you kind of start to lose track"
    },
    {
      "speakerLabel": "spk_1",
      "start": 763.88,
      "end": 765.28,
      "text": " of the bigger picture there."
    },
    {
      "speakerLabel": "spk_1",
      "start": 765.28,
      "end": 768.92,
      "text": " Like at the end of the day, you want to know which resources you are creating"
    },
    {
      "speakerLabel": "spk_1",
      "start": 768.92,
      "end": 772.88,
      "text": " because they will impact you in terms of cost, quota, security."
    },
    {
      "speakerLabel": "spk_1",
      "start": 772.88,
      "end": 777.52,
      "text": " So if you stop looking at those, you might end up with lots of problems"
    },
    {
      "speakerLabel": "spk_1",
      "start": 777.52,
      "end": 781.76,
      "text": " that you didn't expect and be surprised when you have a security issue or when"
    },
    {
      "speakerLabel": "spk_1",
      "start": 781.76,
      "end": 785.28,
      "text": " you start to reach quota, or maybe you have a massive build shock and you are"
    },
    {
      "speakerLabel": "spk_1",
      "start": 785.28,
      "end": 788.84,
      "text": " not really realizing why, maybe you just deployed a simple API project and it's"
    },
    {
      "speakerLabel": "spk_1",
      "start": 788.84,
      "end": 790.4,
      "text": " costing you way more than it should."
    },
    {
      "speakerLabel": "spk_1",
      "start": 790.92,
      "end": 793,
      "text": " So all these things might be a problem."
    },
    {
      "speakerLabel": "spk_1",
      "start": 793,
      "end": 797.44,
      "text": " And again, the suggestion there is always try to put an eye on what's happening"
    },
    {
      "speakerLabel": "spk_1",
      "start": 797.44,
      "end": 801.2,
      "text": " behind the scenes and always try to think in terms of AWS resources at the end of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 801.2,
      "end": 803.08,
      "text": " the day, not necessarily."
    },
    {
      "speakerLabel": "spk_1",
      "start": 803.9200000000001,
      "end": 808.24,
      "text": " You still should focus on the abstraction layers, but without forgetting that those"
    },
    {
      "speakerLabel": "spk_1",
      "start": 808.24,
      "end": 811.76,
      "text": " abstraction layers will create resources that ultimately is what you should be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 811.76,
      "end": 812.4000000000001,
      "text": " caring about."
    },
    {
      "speakerLabel": "spk_1",
      "start": 813.6,
      "end": 819.08,
      "text": " And another thing is that CDK is not necessarily deterministic because of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 819.08,
      "end": 820.0400000000001,
      "text": " various reasons."
    },
    {
      "speakerLabel": "spk_1",
      "start": 820.36,
      "end": 825.5200000000001,
      "text": " Again, changes in CDK itself, the way you write your stack might not be"
    },
    {
      "speakerLabel": "spk_1",
      "start": 825.5200000000001,
      "end": 826.6800000000001,
      "text": " deterministic on its own."
    },
    {
      "speakerLabel": "spk_1",
      "start": 826.6800000000001,
      "end": 829.9200000000001,
      "text": " For instance, I don't know if you do a mat random in your code, right?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 829.92,
      "end": 832.92,
      "text": " That value will change every single time you synthesize your stack."
    },
    {
      "speakerLabel": "spk_1",
      "start": 832.92,
      "end": 837.28,
      "text": " And if you're using that to synthesize different resources or maybe to change the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 837.28,
      "end": 841.88,
      "text": " name of a property, maybe the name of a resource, you end up with a stack that is"
    },
    {
      "speakerLabel": "spk_1",
      "start": 841.88,
      "end": 842.5999999999999,
      "text": " always different."
    },
    {
      "speakerLabel": "spk_1",
      "start": 842.5999999999999,
      "end": 846.5999999999999,
      "text": " So when you try to deploy that, you will always have changes, even though you might"
    },
    {
      "speakerLabel": "spk_1",
      "start": 846.5999999999999,
      "end": 850.56,
      "text": " not want those changes because logically you are not changing anything relevant."
    },
    {
      "speakerLabel": "spk_1",
      "start": 850.9599999999999,
      "end": 855.28,
      "text": " So these are just issues that people will bump into initially when they start to use"
    },
    {
      "speakerLabel": "spk_1",
      "start": 855.28,
      "end": 859.1999999999999,
      "text": " CDK because they think about, I can write all the code I want."
    },
    {
      "speakerLabel": "spk_1",
      "start": 859.2,
      "end": 860.0400000000001,
      "text": " It's just code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 860.0400000000001,
      "end": 864.24,
      "text": " But I think it's still important to understand that there is a very specific mental"
    },
    {
      "speakerLabel": "spk_1",
      "start": 864.24,
      "end": 864.6,
      "text": " model."
    },
    {
      "speakerLabel": "spk_1",
      "start": 864.6,
      "end": 865.5200000000001,
      "text": " There are phases."
    },
    {
      "speakerLabel": "spk_1",
      "start": 865.8000000000001,
      "end": 867.84,
      "text": " Ultimately, you are generating cloud formation."
    },
    {
      "speakerLabel": "spk_1",
      "start": 867.84,
      "end": 869.6,
      "text": " You are still deploying a cloud formation stack."
    },
    {
      "speakerLabel": "spk_1",
      "start": 869.6,
      "end": 873.8000000000001,
      "text": " So you really need to understand some of the inner workings of CDK to avoid some"
    },
    {
      "speakerLabel": "spk_1",
      "start": 873.8000000000001,
      "end": 874.6800000000001,
      "text": " common mistakes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 874.96,
      "end": 880.88,
      "text": " I was personally burned a few times by trying to do conditional logic with values"
    },
    {
      "speakerLabel": "spk_1",
      "start": 880.88,
      "end": 884.9200000000001,
      "text": " that sometimes are not immediately available when the CDK code is evaluated."
    },
    {
      "speakerLabel": "spk_1",
      "start": 884.92,
      "end": 889.88,
      "text": " CDK has this concept of tokens, which are values that will be available only at"
    },
    {
      "speakerLabel": "spk_1",
      "start": 889.88,
      "end": 890.64,
      "text": " deployment time."
    },
    {
      "speakerLabel": "spk_1",
      "start": 890.92,
      "end": 895.4399999999999,
      "text": " So if you try to do if statements, maybe checking if those kind of values are true or"
    },
    {
      "speakerLabel": "spk_1",
      "start": 895.4399999999999,
      "end": 900.4,
      "text": " false and then based on that generate some resources or others, that code is just not"
    },
    {
      "speakerLabel": "spk_1",
      "start": 900.4,
      "end": 901.04,
      "text": " going to work for you."
    },
    {
      "speakerLabel": "spk_1",
      "start": 901.04,
      "end": 903.36,
      "text": " It's just going to always be true or always be false."
    },
    {
      "speakerLabel": "spk_1",
      "start": 903.76,
      "end": 906.64,
      "text": " And that conditional logic is not going to work the way you expect."
    },
    {
      "speakerLabel": "spk_1",
      "start": 906.8399999999999,
      "end": 910.4399999999999,
      "text": " And similarly, you can have other problems if you use the same approach for loops."
    },
    {
      "speakerLabel": "spk_1",
      "start": 910.4399999999999,
      "end": 914.76,
      "text": " Maybe you don't go through the loop at all, or maybe you just do one iteration or maybe"
    },
    {
      "speakerLabel": "spk_1",
      "start": 914.76,
      "end": 916.16,
      "text": " you do endless iterations."
    },
    {
      "speakerLabel": "spk_1",
      "start": 916.48,
      "end": 922.04,
      "text": " So just be aware that you really need to understand what is the mental model, how the"
    },
    {
      "speakerLabel": "spk_1",
      "start": 922.04,
      "end": 926.52,
      "text": " execution flow of CDK works, because you cannot really write all the code you want."
    },
    {
      "speakerLabel": "spk_1",
      "start": 926.52,
      "end": 929.48,
      "text": " It's not going to magically do everything you want to do in code."
    },
    {
      "speakerLabel": "spk_1",
      "start": 929.96,
      "end": 934.36,
      "text": " The code you write still needs to fit nicely with the model that CDK was built for."
    },
    {
      "speakerLabel": "spk_0",
      "start": 935.4399999999999,
      "end": 940.3199999999999,
      "text": " It is possible to address those challenges, but it's also good to be aware of what it"
    },
    {
      "speakerLabel": "spk_0",
      "start": 940.3199999999999,
      "end": 942.6,
      "text": " takes to mitigate the risk there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 942.6,
      "end": 946.64,
      "text": " So lots of automated testing and continuous delivery is one thing that will definitely"
    },
    {
      "speakerLabel": "spk_0",
      "start": 946.64,
      "end": 946.88,
      "text": " help."
    },
    {
      "speakerLabel": "spk_0",
      "start": 948.4,
      "end": 952.08,
      "text": " If you have an organization and are going all in on CDK, having dedicated people to"
    },
    {
      "speakerLabel": "spk_0",
      "start": 952.08,
      "end": 956.6,
      "text": " maintain these constructs as well, rather than trying to scramble to maintain them in"
    },
    {
      "speakerLabel": "spk_0",
      "start": 956.6,
      "end": 959.6,
      "text": " a distributed fashion across multiple teams who are focused on other goals."
    },
    {
      "speakerLabel": "spk_0",
      "start": 960.5600000000001,
      "end": 963.6800000000001,
      "text": " Good semantic versioning enforcement, of course, is always important for reusable"
    },
    {
      "speakerLabel": "spk_0",
      "start": 963.6800000000001,
      "end": 964.16,
      "text": " modules."
    },
    {
      "speakerLabel": "spk_0",
      "start": 964.5600000000001,
      "end": 969.1600000000001,
      "text": " Great documentation will really help because it helps to make everybody self-sufficient."
    },
    {
      "speakerLabel": "spk_0",
      "start": 969.16,
      "end": 973.64,
      "text": " Observability as well, so that when things go wrong, you can detect early and have maybe"
    },
    {
      "speakerLabel": "spk_0",
      "start": 973.64,
      "end": 976.36,
      "text": " like canary checks in your deployment pipeline as well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 976.36,
      "end": 980.12,
      "text": " So that even if things build and deploy successfully, you can check what happens."
    },
    {
      "speakerLabel": "spk_0",
      "start": 980.68,
      "end": 984.3199999999999,
      "text": " Cost management is another thing, because if you're using patterns and aren't really"
    },
    {
      "speakerLabel": "spk_0",
      "start": 984.3199999999999,
      "end": 988.4,
      "text": " looking at what's being generated, then one of the risks is that you can incur cost"
    },
    {
      "speakerLabel": "spk_0",
      "start": 988.4,
      "end": 988.88,
      "text": " under the hood."
    },
    {
      "speakerLabel": "spk_0",
      "start": 989.16,
      "end": 992.56,
      "text": " So if you've got good observability on the cost side of things, that will help with"
    },
    {
      "speakerLabel": "spk_0",
      "start": 992.56,
      "end": 993.04,
      "text": " that risk."
    },
    {
      "speakerLabel": "spk_0",
      "start": 993.4399999999999,
      "end": 997.0799999999999,
      "text": " And then a really simple one is just keeping a close eye on change sits."
    },
    {
      "speakerLabel": "spk_0",
      "start": 997.08,
      "end": 1000.2800000000001,
      "text": " Another simple one is just keeping a close eye on change sets."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1000.6,
      "end": 1005.36,
      "text": " So using CDK diff and CloudFormation change sets and inspecting generated output and"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1005.36,
      "end": 1009.76,
      "text": " what has changed from one to the other so that you can detect if you're upgrading to a"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1009.76,
      "end": 1013.6,
      "text": " new version of a construct that there are changes that you may not have expected."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1014.96,
      "end": 1017.72,
      "text": " So this is the CDK world of reusable modules."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1017.72,
      "end": 1021.84,
      "text": " But do we have to use CDK if we want to get this level of reusability or are there"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1021.84,
      "end": 1025.16,
      "text": " alternatives for people who just don't want to go into CDK?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1029.0400000000002,
      "end": 1031.72,
      "text": " Yeah, there are definitely alternatives and I know lots of people that don't like this idea of writing code to define stacks."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1031.72,
      "end": 1033.4,
      "text": " They prefer something more declarative."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1033.4,
      "end": 1035.96,
      "text": " They still prefer something that looks more like YAML."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1036.28,
      "end": 1040.2,
      "text": " And I can understand the way of thinking, of course, there are good reasons for that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1040.68,
      "end": 1042.2,
      "text": " So what can you do in that case?"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1042.2,
      "end": 1046.6000000000001,
      "text": " If you are more on that side, you want to stick with writing infrastructures code in a"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1046.6000000000001,
      "end": 1048.88,
      "text": " declarative way, not using programming languages."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1049.2,
      "end": 1051.24,
      "text": " So if you use CloudFormation, there are a few options."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1051.5600000000002,
      "end": 1053.64,
      "text": " For instance, you can create your own CloudFormation library."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1053.64,
      "end": 1057.88,
      "text": " For instance, you can create your own CloudFormation macros to try to do more stuff or"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1057.88,
      "end": 1060.5200000000002,
      "text": " even try to do things that CloudFormation cannot do today."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1061.3200000000002,
      "end": 1064.5600000000002,
      "text": " Maybe integrate with other providers outside AWS."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1064.5600000000002,
      "end": 1066.48,
      "text": " You can definitely use macros for that."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1067.3600000000001,
      "end": 1069.2800000000002,
      "text": " You can also use CloudFormation templates."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1069.2800000000002,
      "end": 1073.3200000000002,
      "text": " There is actually a really good repository that we will have in the show notes that has"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1073.3200000000002,
      "end": 1074.4,
      "text": " lots of examples."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1074.5200000000002,
      "end": 1078.0800000000002,
      "text": " So with CloudFormation templates, you basically build stacks that are highly"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1078.0800000000002,
      "end": 1078.88,
      "text": " parameterized."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1078.88,
      "end": 1083.44,
      "text": " And then by just passing the specific parameters, you can adjust that particular stack"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1083.44,
      "end": 1084.7600000000002,
      "text": " or solution to your needs."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1085.2,
      "end": 1088.72,
      "text": " And there is also service catalog, which is somewhat similar to the idea of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1088.72,
      "end": 1089.8400000000001,
      "text": " CloudFormation templates."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1090.4,
      "end": 1095.2,
      "text": " Instead, if you are a user of Terraform, Terraform comes with a built-in concept of"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1095.2,
      "end": 1095.7600000000002,
      "text": " modules."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1095.7600000000002,
      "end": 1100.72,
      "text": " So there is already an idea in Terraform itself to have reusable units that are"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1100.72,
      "end": 1102.88,
      "text": " configurable and you can compose them together."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1103.3600000000001,
      "end": 1107.92,
      "text": " And there is a really good repository called Terraform AWS modules, which has a huge"
    },
    {
      "speakerLabel": "spk_1",
      "start": 1107.92,
      "end": 1110.8000000000002,
      "text": " collection of solutions and high-level models."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1110.8000000000002,
      "end": 1116.3200000000002,
      "text": " Somehow they remind me of L3 constructs in CDK, but applied to Terraform."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1116.3200000000002,
      "end": 1118.64,
      "text": " So we will have that link as well in the show notes."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1118.64,
      "end": 1122.5600000000002,
      "text": " And it's definitely a must if you're doing AWS using Terraform."
    },
    {
      "speakerLabel": "spk_1",
      "start": 1122.5600000000002,
      "end": 1123.92,
      "text": " We have plenty of options there."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1123.92,
      "end": 1127.2,
      "text": " Well, I think that's it for today's episode of AWS Bites."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1127.2,
      "end": 1130.64,
      "text": " We hope we gave you a valuable take on CDK patterns and the power you get, but also"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1130.64,
      "end": 1134,
      "text": " the responsibility you need to take if you want to make them work well."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1134,
      "end": 1138.48,
      "text": " As always, we want to thank you for learning and sharing AWS ideas with us."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1138.48,
      "end": 1141.68,
      "text": " Please leave us a review and share the podcast with your colleagues and friends."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1141.68,
      "end": 1145.44,
      "text": " We really appreciate your support and look forward to bringing you more cloud goodness"
    },
    {
      "speakerLabel": "spk_0",
      "start": 1145.44,
      "end": 1146.4,
      "text": " in the next episode."
    },
    {
      "speakerLabel": "spk_0",
      "start": 1146.4,
      "end": 1164.4,
      "text": " Catch you then."
    }
  ]
}