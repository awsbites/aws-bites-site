WEBVTT

1
00:00:00.000 --> 00:00:02.300
As cloud consultants, we often talk with clients

2
00:00:02.440 --> 00:00:04.640
that are considering moving their projects to AWS,

3
00:00:04.780 --> 00:00:06.740
but they have significant fears holding them back.

4
00:00:07.380 --> 00:00:09.540
Today, we want to walk you through the most common concerns

5
00:00:09.680 --> 00:00:12.380
we hear from customers when it comes to AWS.

6
00:00:12.520 --> 00:00:14.180
And we want to disclose some of the answers

7
00:00:14.320 --> 00:00:16.320
that we have to reassure our clients.

8
00:00:16.980 --> 00:00:19.420
We'll discuss hot topics such as cost, complexity,

9
00:00:19.560 --> 00:00:22.720
security, vendor lock-in, and knowledge gaps.

10
00:00:22.860 --> 00:00:24.600
If you are in the cloud consulting business,

11
00:00:24.720 --> 00:00:27.420
chances are you are having similar conversations with your clients,

12
00:00:27.560 --> 00:00:29.040
or maybe you're trying to convince your boss

13
00:00:29.040 --> 00:00:30.980
to move certain projects to AWS

14
00:00:31.120 --> 00:00:32.880
and deal with some internal resistance.

15
00:00:33.020 --> 00:00:34.420
This episode might give you some ideas

16
00:00:34.540 --> 00:00:36.480
on how to reassure your clients or your boss

17
00:00:36.620 --> 00:00:38.520
that AWS can provide value.

18
00:00:38.660 --> 00:00:40.380
More importantly, we will also share some tips

19
00:00:40.520 --> 00:00:43.460
on how to prepare the organization for successful migration,

20
00:00:43.600 --> 00:00:46.120
because often these migrations require significant changes

21
00:00:46.260 --> 00:00:48.000
to the organization itself.

22
00:00:48.120 --> 00:00:49.600
My name is Eoin, and together with Luciano,

23
00:00:49.740 --> 00:00:52.540
we are here for another episode of the AWS Bites podcast.

24
00:00:52.540 --> 00:00:59.420
fourTheorem

25
00:00:59.560 --> 00:01:02.660
fourTheorem is the company that makes AWS Bites possible.

26
00:01:02.800 --> 00:01:04.700
If you are looking for a partner to accompany you

27
00:01:04.820 --> 00:01:07.960
on your cloud journey, check them out at fourtheorem.com.

28
00:01:10.640 --> 00:01:12.640
As usual, Eoin, I think it's a good idea to start by laying down some potential scenarios

29
00:01:12.760 --> 00:01:14.300
that we can reference just to understand,

30
00:01:14.440 --> 00:01:17.080
like, what are we talking about? What is the context here?

31
00:01:17.200 --> 00:01:18.840
And it might be something on the line

32
00:01:18.980 --> 00:01:20.640
that you have an application running on-premise

33
00:01:20.780 --> 00:01:22.140
and you want to migrate it to the cloud

34
00:01:22.140 --> 00:01:24.000
because maybe you need more scalability,

35
00:01:24.140 --> 00:01:26.580
because maybe you need new capabilities,

36
00:01:26.700 --> 00:01:28.780
or maybe you have some application that is running

37
00:01:28.920 --> 00:01:31.040
on some old-school web hosting provider

38
00:01:31.180 --> 00:01:33.380
or a virtual private server somewhere.

39
00:01:33.520 --> 00:01:36.020
I'm sure that if you have done any PHP in the past,

40
00:01:36.160 --> 00:01:37.520
you probably have been in that situation,

41
00:01:37.660 --> 00:01:38.960
and at some point you realize,

42
00:01:39.080 --> 00:01:41.460
this is not going to be enough if I want to grow a business.

43
00:01:41.600 --> 00:01:44.360
So, again, some reasons why you might want to migrate to the cloud,

44
00:01:44.500 --> 00:01:47.160
scalability is probably the first one, but it's not the only one,

45
00:01:47.300 --> 00:01:49.460
because another interesting aspect that the cloud gives you

46
00:01:49.600 --> 00:01:50.940
is speed of innovation.

47
00:01:50.940 --> 00:01:53.520
For instance, you might want to leverage cloud-first services

48
00:01:53.640 --> 00:01:54.880
like Lambda or DynamoDB

49
00:01:55.020 --> 00:01:57.420
or maybe all the machine learning type of services

50
00:01:57.560 --> 00:01:59.260
that you can just use with an API.

51
00:01:59.380 --> 00:02:02.260
So that kind of a capability is something that you gain

52
00:02:02.400 --> 00:02:04.300
when you start to switch to the cloud,

53
00:02:04.420 --> 00:02:06.200
and therefore it might be a good motivation

54
00:02:06.320 --> 00:02:08.860
for your organization to consider that switch.

55
00:02:09.560 --> 00:02:12.040
So with that being said as a context setting,

56
00:02:12.160 --> 00:02:14.940
what is the main concern that we hear from customers?

57
00:02:15.080 --> 00:02:17.300
The first one I think is always cost.

58
00:02:17.980 --> 00:02:20.280
And the common concern there is,

59
00:02:20.280 --> 00:02:23.360
is AWS going to be more expensive than my current setup

60
00:02:23.500 --> 00:02:25.260
and then cost predictability?

61
00:02:25.400 --> 00:02:27.160
Because previously, while you might have needed

62
00:02:27.300 --> 00:02:30.800
a large capital expenditure investment at the start of a project

63
00:02:30.940 --> 00:02:35.200
to purchase hardware or some fixed price annual cost,

64
00:02:35.340 --> 00:02:39.540
with on-demand compute, you have the issue of predictability.

65
00:02:39.680 --> 00:02:42.080
So you have a fixed contract and you want to know,

66
00:02:42.220 --> 00:02:43.680
how are you going to pay,

67
00:02:43.820 --> 00:02:47.720
how much are you going to pay every year with this new setup in AWS?

68
00:02:47.860 --> 00:02:49.660
And then the other thing is hidden cost.

69
00:02:49.660 --> 00:02:52.540
How much is it going to cost me to train staff?

70
00:02:52.660 --> 00:02:54.700
Will I need to buy additional support?

71
00:02:54.840 --> 00:02:58.380
Will I need third-party services as well to be successful?

72
00:02:58.500 --> 00:03:00.740
So this is, I think, the most common concern

73
00:03:00.880 --> 00:03:02.780
and probably the most challenging one as well.

74
00:03:02.920 --> 00:03:04.620
And it's impossible to say in absolute terms

75
00:03:04.740 --> 00:03:06.920
whether moving to AWS will result in a cheaper

76
00:03:07.040 --> 00:03:08.480
or more expensive deployment,

77
00:03:08.620 --> 00:03:11.260
at least if you're just looking at raw IT cost.

78
00:03:11.920 --> 00:03:15.400
Now, there's a mindset change required here as well.

79
00:03:15.520 --> 00:03:18.220
Everything in the cloud is dynamic and consumption-based.

80
00:03:18.220 --> 00:03:20.360
You're buying into a more flexible environment,

81
00:03:20.480 --> 00:03:22.920
but you also have the trade-off of that flexible pricing

82
00:03:23.060 --> 00:03:24.560
for better or worse.

83
00:03:24.700 --> 00:03:27.560
So let's try and give some tips for fighting that fear.

84
00:03:28.600 --> 00:03:31.200
With this flexibility, resources can be configured up and down.

85
00:03:31.340 --> 00:03:34.100
So you pay for exactly what you need and not a penny more.

86
00:03:34.240 --> 00:03:36.340
And you can also back out of decisions

87
00:03:36.480 --> 00:03:39.480
and look at ways to reduce cost in a very reactive way

88
00:03:40.100 --> 00:03:41.880
as soon as you detect issues with your cost.

89
00:03:42.740 --> 00:03:45.620
For certain resources, like auto-scaling groups,

90
00:03:45.620 --> 00:03:48.960
you can set auto-scaling upper bounds to avoid unbounded scalability.

91
00:03:49.460 --> 00:03:51.700
You can also set billing alarms and notifications

92
00:03:51.840 --> 00:03:53.340
so that you can be alerted

93
00:03:53.460 --> 00:03:56.040
if your predicted cost is going above your expectations.

94
00:03:56.180 --> 00:03:59.380
And we set that up and use it all the time, and it's very useful.

95
00:03:59.500 --> 00:04:02.640
And we very rarely have any kind of significant surprise there.

96
00:04:03.180 --> 00:04:05.820
Over time, once your usage patterns stabilize,

97
00:04:05.940 --> 00:04:08.120
it will get easier for you to predict cost.

98
00:04:08.240 --> 00:04:11.680
You will need to be able to spot opportunities to invest, I suppose,

99
00:04:11.820 --> 00:04:14.560
in re-engineering activities

100
00:04:14.560 --> 00:04:16.320
to cut costs if needed.

101
00:04:17.080 --> 00:04:18.780
And then the other thing is, of course,

102
00:04:18.920 --> 00:04:20.860
think in terms of total cost of ownership.

103
00:04:21.000 --> 00:04:22.700
And this is easier said than done, I think.

104
00:04:22.820 --> 00:04:25.960
But when you use managed services, the idea of this

105
00:04:26.100 --> 00:04:29.200
is that you need less people to look after the infrastructure.

106
00:04:29.340 --> 00:04:31.640
So even if your infrastructure bill ends up being higher,

107
00:04:31.760 --> 00:04:34.040
you might still be able to save a lot of money somewhere else

108
00:04:34.500 --> 00:04:38.440
and even free up people to be able to work on new features and new products

109
00:04:38.580 --> 00:04:40.880
that you wouldn't have been able to do if you were just focused

110
00:04:41.020 --> 00:04:42.540
on building a lot of infrastructure

111
00:04:42.540 --> 00:04:44.500
that AWS are now taking care of.

112
00:04:45.200 --> 00:04:48.520
So with this mindset change, you might need to think

113
00:04:48.640 --> 00:04:50.820
about restructuring the organization a little bit.

114
00:04:50.940 --> 00:04:53.880
You might need more cloud engineers than Sys administrators,

115
00:04:54.020 --> 00:04:57.180
but cloud engineers are generally more aligned with your business goals.

116
00:04:57.320 --> 00:05:01.020
The idea is that you should be reshaping your teams and your skill sets

117
00:05:01.160 --> 00:05:03.920
to be focused more on business-aligned feature delivery

118
00:05:04.060 --> 00:05:06.700
than just on keeping infrastructure running.

119
00:05:07.260 --> 00:05:10.540
So Luciano, I think that's as much as we can say about cost.

120
00:05:10.540 --> 00:05:12.720
What else have we got when it comes to some of the top fears

121
00:05:12.840 --> 00:05:13.980
with AWS adoption?

122
00:05:16.360 --> 00:05:18.260
Yeah, the next one is one of my favorite ones, which is AWS is too complex.

123
00:05:18.380 --> 00:05:19.960
And sometimes it gets a bit funny.

124
00:05:20.080 --> 00:05:22.920
Like people will say, I'm not smart enough to use AWS,

125
00:05:23.060 --> 00:05:26.100
or I will need a PhD before I'm able to do anything with AWS,

126
00:05:26.220 --> 00:05:27.560
which is, of course, an exaggeration,

127
00:05:27.700 --> 00:05:30.240
but it's funny to hear that concern in those terms.

128
00:05:30.360 --> 00:05:33.640
And more reasonable ways of phrasing that is like,

129
00:05:33.760 --> 00:05:36.300
how can I be productive with such a complex environment?

130
00:05:36.300 --> 00:05:40.500
How long is it going to take for me before I'm up and running?

131
00:05:40.640 --> 00:05:43.080
Or what if I don't really understand the model

132
00:05:43.200 --> 00:05:45.300
and eventually I'm going to end up getting something wrong

133
00:05:45.440 --> 00:05:48.080
and that mistake is going to affect the business negatively?

134
00:05:48.220 --> 00:05:50.380
And all of these are very reasonable concerns,

135
00:05:50.520 --> 00:05:54.720
and it's only fair to admit that AWS is somewhat complex,

136
00:05:54.860 --> 00:05:58.460
but that complexity is what gives AWS all the powers

137
00:05:58.580 --> 00:06:01.160
and all the nice things that you can do with it.

138
00:06:01.300 --> 00:06:04.600
So I think that the way of addressing this concern

139
00:06:04.600 --> 00:06:07.280
is trying to think what is a system that allows me

140
00:06:07.420 --> 00:06:09.920
to isolate all of the complexity and all the many things

141
00:06:10.040 --> 00:06:12.480
that I see in front of me when I think about AWS,

142
00:06:12.620 --> 00:06:14.260
and only focus on the few things

143
00:06:14.380 --> 00:06:16.860
that are really important for the organization.

144
00:06:16.980 --> 00:06:19.420
And basically you might ask yourself,

145
00:06:19.560 --> 00:06:22.200
okay, how do I structure my understanding of AWS

146
00:06:22.320 --> 00:06:24.760
so that I can simplify things down?

147
00:06:24.900 --> 00:06:27.800
And one way of doing that is you might think of AWS

148
00:06:27.940 --> 00:06:29.800
as an ecosystem of many, many services.

149
00:06:29.940 --> 00:06:32.740
There are, I think, more than 200 services at this stage,

150
00:06:32.740 --> 00:06:35.660
but in a way you can think about them as different companies,

151
00:06:35.780 --> 00:06:37.220
different service providers,

152
00:06:37.360 --> 00:06:39.620
and you don't need to buy into all of them.

153
00:06:39.760 --> 00:06:42.200
Of course, some of them are more foundational.

154
00:06:42.320 --> 00:06:45.060
We can call them this way and you cannot really avoid them.

155
00:06:45.200 --> 00:06:48.060
So these are probably the ones that you should focus on first.

156
00:06:48.200 --> 00:06:50.000
Like make sure you really understand them

157
00:06:50.140 --> 00:06:51.840
because you will find those pretty much

158
00:06:51.960 --> 00:06:53.700
with everything you do in AWS.

159
00:06:53.840 --> 00:06:55.940
So I think it's an important first step,

160
00:06:56.080 --> 00:06:57.580
but once you have those covered,

161
00:06:57.700 --> 00:07:00.540
and I'm talking, for instance, about services like IAM,

162
00:07:00.680 --> 00:07:01.980
like for permissions,

163
00:07:01.980 --> 00:07:03.140
once you have those covered,

164
00:07:03.280 --> 00:07:05.780
you can pretty much roll with them

165
00:07:05.900 --> 00:07:07.780
and start to learn more specific services

166
00:07:07.920 --> 00:07:10.820
that you need to build specific projects in AWS.

167
00:07:10.940 --> 00:07:13.420
The other thing that you might think about is that these services,

168
00:07:13.540 --> 00:07:15.880
you can group them in different areas,

169
00:07:16.020 --> 00:07:17.480
like different types of services.

170
00:07:17.620 --> 00:07:19.460
Like you might have services for compute,

171
00:07:19.580 --> 00:07:21.720
you might have services for machine learning,

172
00:07:21.860 --> 00:07:24.500
and you probably don't need to think about all of them.

173
00:07:24.620 --> 00:07:27.000
I think only a subset of all the services

174
00:07:27.140 --> 00:07:28.660
would be applicable to your business.

175
00:07:28.800 --> 00:07:30.700
So that reduces a lot the complexity.

176
00:07:30.700 --> 00:07:32.420
Like you don't need to be worried about

177
00:07:32.560 --> 00:07:34.260
all the machine learning services

178
00:07:34.400 --> 00:07:37.700
if you're not planning to use this particular set of features.

179
00:07:37.840 --> 00:07:40.500
Of course, if new use cases will emerge over time,

180
00:07:40.640 --> 00:07:42.700
you can always learn new stuff as you go.

181
00:07:42.840 --> 00:07:45.500
So I think that the three steps are

182
00:07:45.640 --> 00:07:49.840
try to think about all the AWS services as foundational ones,

183
00:07:49.980 --> 00:07:52.840
spend some time and put some effort into learning those,

184
00:07:52.980 --> 00:07:55.620
then identify the ones that are really important for you

185
00:07:55.760 --> 00:07:56.920
and start to learn them.

186
00:07:57.060 --> 00:07:58.660
Ignore all the other ones pretty much,

187
00:07:58.660 --> 00:08:01.840
unless at some point you realize you have a use case for a new service,

188
00:08:01.980 --> 00:08:05.200
and then you can start to investigate and learn it over time.

189
00:08:05.340 --> 00:08:07.740
Another point is that AWS is quite consistent

190
00:08:07.880 --> 00:08:12.040
in terms of experience that you get as a developer or as a cloud engineer.

191
00:08:12.180 --> 00:08:15.460
So when you start to be familiar with the concepts that AWS gives you

192
00:08:15.580 --> 00:08:18.220
with some of the APIs, I think it gets easier and easier over time

193
00:08:18.360 --> 00:08:20.320
because you will spot some of the same patterns

194
00:08:20.460 --> 00:08:23.600
across different services and different features.

195
00:08:23.720 --> 00:08:27.800
So just to reiterate some points in terms of the strategy,

196
00:08:27.800 --> 00:08:29.560
foundational services first,

197
00:08:29.700 --> 00:08:31.460
then you might want to look at best practices

198
00:08:31.600 --> 00:08:33.400
and how to bootstrap various accounts.

199
00:08:33.540 --> 00:08:36.000
landing zone, for instance, we have a dedicated episode on that.

200
00:08:36.140 --> 00:08:38.340
We will provide a link in the show notes.

201
00:08:38.460 --> 00:08:42.340
You might want to hire a cloud consulting partner like fourTheorem

202
00:08:42.480 --> 00:08:44.940
because that might accelerate the onboarding process

203
00:08:45.080 --> 00:08:47.140
and reduce the risk that you might be doing something wrong

204
00:08:47.280 --> 00:08:48.440
in the very early stages.

205
00:08:48.580 --> 00:08:51.580
So you are basically set up and ready to go very early on,

206
00:08:51.720 --> 00:08:54.480
and there are experts helping you to make sure that all the path

207
00:08:54.620 --> 00:08:56.860
is laid down for you rather than you having to figure it out

208
00:08:56.860 --> 00:09:00.900
by trial and error and maybe by doing pretty dangerous mistakes

209
00:09:01.040 --> 00:09:03.740
that might affect your decision making

210
00:09:03.880 --> 00:09:07.340
and thinking that the cloud was a good idea in the first place.

211
00:09:07.480 --> 00:09:10.640
And in the company, I think you need to promote a new mindset

212
00:09:10.780 --> 00:09:12.120
of this is a learning journey,

213
00:09:12.240 --> 00:09:13.820
so everyone needs to start thinking,

214
00:09:13.960 --> 00:09:17.180
okay, we need to learn together, we need to have study material,

215
00:09:17.320 --> 00:09:19.320
maybe we need to look into certification,

216
00:09:19.460 --> 00:09:21.220
whatever we learn, we need to share it

217
00:09:21.360 --> 00:09:23.960
and make it available in the company as a team.

218
00:09:24.100 --> 00:09:26.660
And that's something that you can encourage through pairing,

219
00:09:26.660 --> 00:09:28.420
training, code reviews and so on,

220
00:09:28.560 --> 00:09:30.520
especially if you already have a core team of people

221
00:09:30.660 --> 00:09:33.600
that starts to be more skilled AWS professionals,

222
00:09:33.740 --> 00:09:36.700
those can be the ones that can help the rest of the organization

223
00:09:36.840 --> 00:09:41.000
to basically get better at using AWS and using it correctly.

224
00:09:41.480 --> 00:09:44.440
In terms of services adoption, it might be a good idea

225
00:09:44.580 --> 00:09:45.840
if you are building a new product

226
00:09:45.980 --> 00:09:47.720
and you don't really have technical constraints

227
00:09:47.840 --> 00:09:49.720
to look into more serverless services

228
00:09:49.840 --> 00:09:53.120
because with those ones, you generally have more managed solutions,

229
00:09:53.260 --> 00:09:56.360
which basically means that AWS will take care of a lot of concerns

230
00:09:56.360 --> 00:09:58.200
that you don't really have to be worried about

231
00:09:58.340 --> 00:10:00.840
and therefore you can focus a lot more on the business value,

232
00:10:00.980 --> 00:10:02.680
like implementing the business flows

233
00:10:02.800 --> 00:10:05.940
that actually are enabling your business to scale and grow.

234
00:10:06.380 --> 00:10:09.980
And then the usual apply, iterate, keep growing.

235
00:10:10.120 --> 00:10:12.980
Another thing that comes up very often in this kind of conversation

236
00:10:13.120 --> 00:10:14.780
is building a cloud center of excellence,

237
00:10:14.920 --> 00:10:16.780
so trying to build a core team of people,

238
00:10:16.920 --> 00:10:20.620
a group of people in your organization that are the cloud experts

239
00:10:20.760 --> 00:10:25.500
and they are the go-to to basically try to address any issue or concern

240
00:10:25.500 --> 00:10:26.800
that you might have with the cloud.

241
00:10:26.920 --> 00:10:29.420
And also that might go around and review other people's code

242
00:10:29.560 --> 00:10:33.160
and make sure everyone will get to the point of expertise

243
00:10:33.300 --> 00:10:35.800
where they can be very proficient with AWS.

244
00:10:36.460 --> 00:10:39.140
I think the goal is that eventually you want to become a cloud-first company

245
00:10:39.280 --> 00:10:40.740
when you start to adopt the cloud.

246
00:10:40.880 --> 00:10:43.340
So you have to think about the cloud as a new capability

247
00:10:43.480 --> 00:10:46.280
that also requires a little bit of change in your organization,

248
00:10:46.420 --> 00:10:48.320
but it will become a very important business tool.

249
00:10:48.440 --> 00:10:51.280
So it will enable a lot of things that you are not able to do now,

250
00:10:51.420 --> 00:10:52.880
but you will be able to do later

251
00:10:52.880 --> 00:10:55.480
and therefore it might give you new business opportunities.

252
00:10:55.620 --> 00:10:59.220
So it's a bit of an investment. You have to see it as an investment.

253
00:10:59.360 --> 00:11:01.520
You have to understand how much you need to invest

254
00:11:01.660 --> 00:11:02.960
and make a plan for that.

255
00:11:03.080 --> 00:11:05.660
But eventually you are going to get a return from that investment

256
00:11:05.800 --> 00:11:07.700
if you do all of this stuff correctly.

257
00:11:07.820 --> 00:11:10.460
Another one that always comes up is vendor lock-in then.

258
00:11:10.600 --> 00:11:12.760
So we hear from people, I don't want to use AWS.

259
00:11:12.900 --> 00:11:15.340
I don't trust them. What happens if something goes wrong?

260
00:11:15.460 --> 00:11:18.440
If the pricing changes, it'll be really hard to migrate away.

261
00:11:19.040 --> 00:11:21.200
Or people say, we can use AWS,

262
00:11:21.200 --> 00:11:23.100
but we're just going to stick to virtual machines,

263
00:11:23.240 --> 00:11:26.000
maybe some Kubernetes so that we can easily move away if needed.

264
00:11:26.640 --> 00:11:31.040
Now, it's true that if you're using a lot of AWS services and APIs,

265
00:11:31.180 --> 00:11:33.880
you're buying into a very specific technology ecosystem.

266
00:11:34.020 --> 00:11:36.680
And as such, it might be expensive to migrate to something else.

267
00:11:37.220 --> 00:11:40.520
But I don't think there's a way of adopting the cloud

268
00:11:40.660 --> 00:11:43.160
where you don't have some cost when it comes to migration.

269
00:11:43.280 --> 00:11:46.320
And if you're going to try and do it in a vendor neutral approach,

270
00:11:46.460 --> 00:11:47.700
or you're just going to say, okay,

271
00:11:47.820 --> 00:11:50.700
let's use kind of lowest common denominator infrastructure

272
00:11:50.700 --> 00:11:53.920
like virtual machines or Kubernetes,

273
00:11:54.040 --> 00:11:58.680
then you're going to put the cost into doing more engineering upfront

274
00:11:58.820 --> 00:12:01.220
or into doing something in a cloud agnostic way.

275
00:12:01.820 --> 00:12:04.720
I think no matter what option you take,

276
00:12:04.860 --> 00:12:06.720
you're going to lock into something.

277
00:12:07.320 --> 00:12:08.700
And if you think about it from the point of view

278
00:12:08.820 --> 00:12:13.200
of the AWS shared responsibility model, the idea is you pay them,

279
00:12:13.340 --> 00:12:16.640
they'll take care of a certain number of layers of the stack

280
00:12:16.760 --> 00:12:18.440
at the bottom, like the core infrastructure,

281
00:12:18.440 --> 00:12:23.240
the security of the cloud. And then you just look at the services above that.

282
00:12:23.360 --> 00:12:26.040
You understand your business logic, your deployments,

283
00:12:26.180 --> 00:12:27.780
your security of your workload.

284
00:12:28.240 --> 00:12:31.580
And if you're not taking advantage of those services,

285
00:12:31.720 --> 00:12:34.040
you're essentially taking that responsibility back

286
00:12:34.180 --> 00:12:35.620
and you're giving yourself more of a burden.

287
00:12:35.740 --> 00:12:36.820
So there's a trade off there,

288
00:12:36.940 --> 00:12:40.080
just like with any technology decision, you can get fast time to market,

289
00:12:40.220 --> 00:12:42.180
the ability to build highly scalable systems,

290
00:12:42.320 --> 00:12:45.860
the ability to swap in and out components of your architecture,

291
00:12:46.000 --> 00:12:47.700
to evolve your architecture really quickly,

292
00:12:47.700 --> 00:12:50.540
and other benefits in exchange for just buying in

293
00:12:50.680 --> 00:12:53.640
and going all in on AWS with their specific tools and APIs.

294
00:12:55.140 --> 00:12:56.980
With abstract approaches where you're saying,

295
00:12:57.120 --> 00:13:00.880
okay, let's build our own abstraction to hide AWS underneath

296
00:13:01.020 --> 00:13:02.080
and make it more portable,

297
00:13:02.220 --> 00:13:03.420
you're just going to spend more time engineering,

298
00:13:03.560 --> 00:13:06.120
building these abstractions and distract yourself

299
00:13:06.260 --> 00:13:07.900
from just building business requirements.

300
00:13:08.020 --> 00:13:11.360
So you might be missing out then on the more innovative capabilities

301
00:13:11.500 --> 00:13:13.300
that might be convenient for your business.

302
00:13:13.440 --> 00:13:15.360
So in terms of fighting this fear,

303
00:13:15.360 --> 00:13:18.260
just accept that any technology choice comes with some degree

304
00:13:18.400 --> 00:13:20.260
of vendor lock-in, cloud is no different.

305
00:13:20.400 --> 00:13:22.700
And if there are areas of your business that you need to protect,

306
00:13:22.840 --> 00:13:24.440
you can always use well-known patterns,

307
00:13:26.080 --> 00:13:27.900
like hexagonal architecture, for example,

308
00:13:28.040 --> 00:13:30.940
which is quite commonly used in serverless deployment

309
00:13:31.080 --> 00:13:34.140
to reduce the coupling between your core business logic

310
00:13:34.280 --> 00:13:37.320
and the physical resources you might be working with,

311
00:13:37.460 --> 00:13:40.880
like databases, API Gateway, AppSync, or whatever it is.

312
00:13:41.020 --> 00:13:44.060
I think we've covered probably the top three ones

313
00:13:44.060 --> 00:13:46.320
have we got other concerns and fears from people?

314
00:13:48.280 --> 00:13:50.760
Yeah, I think we have at least a bonus one that we want to cover today, and that one is security.

315
00:13:51.360 --> 00:13:55.800
And the question we often get or more of a comment sometimes

316
00:13:55.920 --> 00:13:59.500
is the cloud is too complex and there are too many security risks.

317
00:13:59.640 --> 00:14:02.540
And I'm worried that, of course, that's going to compromise the business

318
00:14:02.660 --> 00:14:04.340
because ultimately that's what you want to do.

319
00:14:04.480 --> 00:14:05.540
You want to protect your business.

320
00:14:05.680 --> 00:14:08.100
So you're trying to figure it out with all these trade-offs

321
00:14:08.240 --> 00:14:11.080
that I have to take, is it more of a risk or an opportunity?

322
00:14:11.720 --> 00:14:13.140
And security is always scary.

323
00:14:13.140 --> 00:14:15.700
Security is always scary because there is a lot of unknowns

324
00:14:15.840 --> 00:14:18.940
and you are more afraid because you don't really have a...

325
00:14:19.080 --> 00:14:21.340
You don't always have a way to fight all these unknown unknowns

326
00:14:21.480 --> 00:14:24.080
and therefore the worry comes up.

327
00:14:24.880 --> 00:14:27.520
So I think in the cloud, it's important to understand

328
00:14:27.660 --> 00:14:31.820
that it can be a little bit scarier than the alternatives, in a sense,

329
00:14:31.960 --> 00:14:36.600
because if you have, for instance, if you are deploying something on,

330
00:14:36.720 --> 00:14:41.800
I don't know, an FTP, right, the old style providers

331
00:14:41.800 --> 00:14:45.160
where you just upload files on an FTP and you have a website running,

332
00:14:45.800 --> 00:14:47.660
what you are exposed to is very limited.

333
00:14:47.800 --> 00:14:49.600
Maybe they can compromise your website.

334
00:14:49.740 --> 00:14:51.100
They can alter the homepage.

335
00:14:51.240 --> 00:14:54.140
They can try to steal some user data, all nasty things,

336
00:14:54.280 --> 00:14:58.180
but that's limited to basically what you have in that particular account.

337
00:14:58.320 --> 00:15:00.280
With AWS, it gets scarier because if you think,

338
00:15:00.420 --> 00:15:02.520
what happens if my account is compromised,

339
00:15:02.640 --> 00:15:06.280
you may start to think, okay, anyone can start to spin up resources

340
00:15:06.420 --> 00:15:08.980
and those resources are tied to my wallet

341
00:15:09.120 --> 00:15:11.260
and I will have to pay even for that attack.

342
00:15:11.260 --> 00:15:13.520
So it's not just a damage in terms of reputation,

343
00:15:13.660 --> 00:15:16.960
but it can be a pretty significant damage in terms of cost as well.

344
00:15:17.100 --> 00:15:19.460
And it might affect the company really negatively.

345
00:15:19.600 --> 00:15:23.100
So it's a very reasonable fear, I guess, to have

346
00:15:23.240 --> 00:15:25.960
when it comes to the cloud to be worried about security.

347
00:15:26.700 --> 00:15:28.800
So with that being said, what can we do?

348
00:15:28.940 --> 00:15:31.480
How can we think about this in a more positive way?

349
00:15:31.600 --> 00:15:33.600
And I think whether you run an application in the cloud,

350
00:15:33.740 --> 00:15:36.540
in your own data center, in your own virtual private server

351
00:15:36.680 --> 00:15:40.440
or Austin provider, there is still a security concern anyway.

352
00:15:40.440 --> 00:15:43.040
So the way you build applications, it doesn't change.

353
00:15:43.180 --> 00:15:47.420
You still need to implement all sorts of application security best practices

354
00:15:47.540 --> 00:15:49.780
to make sure that your application is not vulnerable.

355
00:15:49.920 --> 00:15:52.880
So that is not really, that doesn't change, I guess,

356
00:15:53.020 --> 00:15:55.620
in the cloud necessarily in a negative way.

357
00:15:56.220 --> 00:15:59.120
And actually, there are some new interesting things

358
00:15:59.260 --> 00:16:02.760
that you might start to consider that are more in favor of AWS

359
00:16:02.900 --> 00:16:05.760
because AWS actually gives you a lot of tools

360
00:16:05.900 --> 00:16:08.500
to make your security posture actually a little bit better

361
00:16:08.500 --> 00:16:10.860
compared to when you run your own infrastructure

362
00:16:11.000 --> 00:16:13.760
or when you run using other kinds of providers.

363
00:16:14.200 --> 00:16:17.040
And one thing is that if you use serverless applications,

364
00:16:17.180 --> 00:16:19.580
which is very common when you go to the cloud

365
00:16:19.700 --> 00:16:22.240
and you're building something new, it's kind of a default.

366
00:16:22.380 --> 00:16:25.920
I think serverless applications are a little bit unique in terms of security

367
00:16:26.040 --> 00:16:28.720
because you can be extremely, extremely granular.

368
00:16:28.840 --> 00:16:32.220
Like every single Lambda function, for example, can have a policy.

369
00:16:32.360 --> 00:16:34.380
So if you're building, for instance, a crude API,

370
00:16:34.520 --> 00:16:38.020
you might have different Lambdas to manage different operations

371
00:16:38.020 --> 00:16:41.180
and therefore you can say this Lambda can only read data.

372
00:16:41.320 --> 00:16:43.120
This Lambda can only delete data.

373
00:16:43.260 --> 00:16:45.460
And you can also be very specific on the kind of data,

374
00:16:45.600 --> 00:16:47.300
maybe the table, maybe the record,

375
00:16:47.420 --> 00:16:50.000
maybe attach additional conditions to the policy.

376
00:16:50.140 --> 00:16:53.260
And that means that if that specific Lambda gets compromised,

377
00:16:53.400 --> 00:16:55.940
the surface that is exposed is extremely limited.

378
00:16:56.080 --> 00:16:57.700
Now, if you think about a monolith,

379
00:16:57.840 --> 00:17:00.680
that's very complicated to achieve at that granular level

380
00:17:00.800 --> 00:17:03.040
because generally if a monolith gets compromised,

381
00:17:03.180 --> 00:17:06.120
you have the entire surface of the monolith to be compromised.

382
00:17:06.120 --> 00:17:08.100
So this is already an advantage in terms of,

383
00:17:08.220 --> 00:17:09.900
because of the cloud, you adopt serverless,

384
00:17:10.040 --> 00:17:13.860
you have a lot more control in how granular your security posture can be

385
00:17:14.000 --> 00:17:17.700
for different parts of your application.

386
00:17:17.840 --> 00:17:20.840
The other thing is that AWS itself is very aware about security

387
00:17:20.980 --> 00:17:23.280
and there is an entire suite of services that you can use

388
00:17:23.400 --> 00:17:25.520
that are in this kind of security realm.

389
00:17:25.640 --> 00:17:27.240
And just to mention some of the capabilities

390
00:17:27.380 --> 00:17:30.780
that you can get out of the box just by adopting certain services,

391
00:17:30.920 --> 00:17:32.160
you have detection and response.

392
00:17:32.280 --> 00:17:35.460
For instance, by using tools like Amazon Inspector, Security Hub,

393
00:17:35.460 --> 00:17:39.480
GuardDuty, so all these tools will help you to monitor your posture

394
00:17:39.600 --> 00:17:41.780
over time and spot if there is something wrong

395
00:17:41.900 --> 00:17:43.580
and help you to fix it straight away.

396
00:17:43.700 --> 00:17:46.780
Then there are more kind of application-based security tools.

397
00:17:46.920 --> 00:17:48.320
For instance, if you're building a website,

398
00:17:48.440 --> 00:17:51.680
you probably want to use Web Application Firewall or Shield,

399
00:17:51.820 --> 00:17:55.360
which are two services that you can just put in front of your application

400
00:17:55.480 --> 00:17:58.920
and they will make sure that they stop things like common attacks,

401
00:17:59.060 --> 00:18:02.420
like SQL injections or known IP addresses

402
00:18:02.420 --> 00:18:07.320
that are known to be bad, I guess, bad actors in the network.

403
00:18:07.460 --> 00:18:10.460
Or with Shield, you can do things like getting some kind of degree

404
00:18:10.600 --> 00:18:13.060
of protection against DDoS attacks.

405
00:18:13.200 --> 00:18:15.600
Other things that you can do, there are services that allows you

406
00:18:15.740 --> 00:18:19.400
to manage sensitive data in a kind of proper way.

407
00:18:19.540 --> 00:18:22.200
For instance, you can think about Secret Manager, AppConfig.

408
00:18:22.340 --> 00:18:25.440
You have lots of options when it comes to encrypting sensitive data.

409
00:18:25.580 --> 00:18:27.840
And if you think that you have to do all this stuff anyway

410
00:18:27.980 --> 00:18:30.520
in your own solution without using the cloud,

411
00:18:30.520 --> 00:18:33.660
it is a lot of work. And even if you can use open source tools,

412
00:18:33.800 --> 00:18:36.900
you need to make sure you install them, configure them correctly,

413
00:18:37.040 --> 00:18:39.000
use them correctly. So I think with the cloud,

414
00:18:39.140 --> 00:18:41.300
once you start to have a security-first mindset,

415
00:18:41.440 --> 00:18:43.840
you have just much more tools that can help you out

416
00:18:43.980 --> 00:18:46.140
to make sure you do things correctly.

417
00:18:46.280 --> 00:18:48.820
So just to recap this point, I think security is still hard

418
00:18:48.940 --> 00:18:51.620
and something you should build more as a process

419
00:18:51.740 --> 00:18:53.520
in everything you do as a business.

420
00:18:53.660 --> 00:18:56.980
It's not just like a switch that you say, I am secure, I'm not secure.

421
00:18:57.120 --> 00:18:58.660
It's something you always need to think about

422
00:18:58.660 --> 00:19:01.180
with everything you build and you always need to observe

423
00:19:01.300 --> 00:19:03.440
and you always need to monitor and try to improve.

424
00:19:03.580 --> 00:19:07.220
So one thing you will do is try to establish a security baseline,

425
00:19:07.340 --> 00:19:10.420
figure out ways to always validate your security posture.

426
00:19:10.540 --> 00:19:13.380
You can use automation, you can use all the tools from AWS,

427
00:19:13.520 --> 00:19:16.920
and often reassess and adopt new best practices.

428
00:19:17.060 --> 00:19:19.320
Of course, again, the usual advice stands.

429
00:19:19.460 --> 00:19:22.700
If you feel that you don't know exactly what you need to do,

430
00:19:22.820 --> 00:19:23.860
ask out for help.

431
00:19:24.000 --> 00:19:26.060
There are lots of companies that can help you out

432
00:19:26.060 --> 00:19:28.560
to make sure that your security posture is correct

433
00:19:28.700 --> 00:19:30.760
and that can help you to establish all these best practices

434
00:19:30.900 --> 00:19:33.560
so that at some point you can be self-sufficient and confident

435
00:19:33.700 --> 00:19:37.200
that you are managing all the AWS security correctly.

436
00:19:39.100 --> 00:19:40.200
What else do we have?

437
00:19:40.340 --> 00:19:44.340
Is there any other comment that we want to make in terms of AWS spheres?

438
00:19:44.480 --> 00:19:46.140
Yeah, I think that was a really good one on security.

439
00:19:46.280 --> 00:19:50.180
I think ultimately the capability to do fine-grained security in AWS

440
00:19:50.320 --> 00:19:52.580
is like nothing I've ever seen in any other option.

441
00:19:52.720 --> 00:19:55.160
So I think it's good to allay those fears.

442
00:19:55.160 --> 00:20:00.800
But maybe not so much a fear, but a less common question is,

443
00:20:00.940 --> 00:20:03.100
do I really need to move to AWS in the first place,

444
00:20:03.240 --> 00:20:05.240
forgetting about the fear factor?

445
00:20:05.380 --> 00:20:07.240
And the answer isn't always yes, right?

446
00:20:07.380 --> 00:20:09.420
Going to the cloud, it's a big decision.

447
00:20:09.540 --> 00:20:11.780
It has substantial consequences for organization.

448
00:20:11.920 --> 00:20:13.380
It's non-trivial.

449
00:20:13.520 --> 00:20:15.680
It can have huge benefits, but it shouldn't be taken lightly.

450
00:20:15.820 --> 00:20:18.560
So you can always understand the trade-offs

451
00:20:18.680 --> 00:20:20.020
and evaluate things carefully.

452
00:20:20.160 --> 00:20:22.820
Not all businesses need to be on AWS or on the cloud at all

453
00:20:22.960 --> 00:20:24.200
to be able to succeed.

454
00:20:24.200 --> 00:20:26.680
If you've got something that's making money, running well,

455
00:20:26.820 --> 00:20:29.980
doesn't require a lot of maintenance, speed of innovation,

456
00:20:30.120 --> 00:20:32.680
it doesn't necessarily need to be in the cloud.

457
00:20:32.820 --> 00:20:35.480
You don't necessarily need the flexibility or the scalability.

458
00:20:35.620 --> 00:20:38.220
So if you decide not to go with AWS, that's completely fine.

459
00:20:38.360 --> 00:20:42.220
We're not trying to convince people to go to AWS

460
00:20:42.360 --> 00:20:44.520
regardless of the context.

461
00:20:44.660 --> 00:20:46.960
You're not necessarily missing out as long as your decision

462
00:20:47.100 --> 00:20:51.460
isn't just motivated by fear or fear of the unknown.

463
00:20:51.460 --> 00:20:56.060
So I guess maybe just as a recap, I think when you're moving to AWS,

464
00:20:56.200 --> 00:20:59.040
it is common to be worried about cost, complexity,

465
00:20:59.180 --> 00:21:01.180
vendor locking and security.

466
00:21:01.300 --> 00:21:03.200
There are real concerns. There's ground for them.

467
00:21:03.340 --> 00:21:06.580
But most often it's just a strong fear of change and fear of the unknown.

468
00:21:06.720 --> 00:21:09.120
So it's important to recognize these fears

469
00:21:09.240 --> 00:21:10.920
and the risks that they highlight.

470
00:21:11.040 --> 00:21:13.660
But if you're convinced that the migration might be worth it,

471
00:21:13.780 --> 00:21:16.780
it's important to approach it as a new step in your evolution.

472
00:21:16.920 --> 00:21:18.820
It's not just a technical project.

473
00:21:18.960 --> 00:21:21.000
It's quite a radical change in the organization.

474
00:21:21.000 --> 00:21:23.080
It's something that needs to be supported long term.

475
00:21:23.200 --> 00:21:24.780
And I think we've both seen in our work

476
00:21:24.900 --> 00:21:28.840
that when it is given proper organizational backing and support,

477
00:21:28.980 --> 00:21:31.680
then the results can be really, really good.

478
00:21:31.820 --> 00:21:34.080
As a long-term investment, it's also important to evaluate

479
00:21:34.220 --> 00:21:36.760
the magnitude of the investment and the trade-offs attached to it.

480
00:21:36.880 --> 00:21:38.920
Ask yourself, is it really worth it?

481
00:21:39.060 --> 00:21:40.660
After all, if your business is running smoothly

482
00:21:40.800 --> 00:21:42.000
with your current infrastructure

483
00:21:42.120 --> 00:21:44.500
and you don't see many problems in growing the business further,

484
00:21:44.620 --> 00:21:47.160
or you don't need to grow that business line further,

485
00:21:47.300 --> 00:21:49.100
you might not need to go to AWS at all.

486
00:21:49.100 --> 00:21:51.400
But if you do decide to go, just make sure you understand

487
00:21:51.520 --> 00:21:54.060
what are the unknowns, research your best practices,

488
00:21:54.200 --> 00:21:55.600
ask for help where needed.

489
00:21:55.740 --> 00:21:58.360
I mean, the way we tend to work with our clients

490
00:21:58.500 --> 00:22:02.100
is just kind of sitting beside them, co-developing, architecting,

491
00:22:02.240 --> 00:22:04.940
building with them, changing things, seeing what happens.

492
00:22:05.080 --> 00:22:08.680
And I think that gives people a lot more reassurance that, you know,

493
00:22:08.820 --> 00:22:11.920
with AWS, while there are a million different permutations

494
00:22:12.040 --> 00:22:13.620
of building any architecture,

495
00:22:13.760 --> 00:22:17.320
one of the daunting things can be, okay, which services do I choose?

496
00:22:17.320 --> 00:22:18.980
How do I stick them together?

497
00:22:19.120 --> 00:22:21.420
So having a little bit of support will help you there

498
00:22:21.560 --> 00:22:24.360
because you can get some guidance on the path forward

499
00:22:24.480 --> 00:22:25.820
and make decisions quickly.

500
00:22:25.960 --> 00:22:27.120
So it's going to be a journey.

501
00:22:27.260 --> 00:22:28.620
Just prepare yourself and then start on your path.

502
00:22:28.760 --> 00:22:29.820
And don't forget to have some fun.

503
00:22:29.960 --> 00:22:31.160
You'll be learning lots of new things

504
00:22:31.300 --> 00:22:34.160
and expose yourself to a lot of new opportunities.

505
00:22:35.260 --> 00:22:36.960
And with that, as usual, let us know

506
00:22:37.100 --> 00:22:38.900
if you have any different perspectives or experience.

507
00:22:39.040 --> 00:22:41.040
We value your opinions and we can certainly learn

508
00:22:41.180 --> 00:22:42.500
something from all of you out there as well.

509
00:22:42.640 --> 00:22:43.640
So do let us know.

510
00:22:43.780 --> 00:22:45.080
That's all. Thank you for staying with us.

511
00:22:45.080 --> 00:22:47.260
And we'll see you in the next one.
